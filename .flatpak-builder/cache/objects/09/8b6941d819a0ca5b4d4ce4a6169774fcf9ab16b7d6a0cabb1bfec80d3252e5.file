/*** Autogenerated by WIDL 3.8 from msctfp.idl - Do not edit ***/

#define __midl_proxy
#include "objbase.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif


#ifndef _WIN64

#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 440
#endif

#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error This code needs a newer version of rpcproxy.h
#endif /* __RPCPROXY_H_VERSION__ */

#include "msctfp.h"

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __proxy_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    void             *This;
};

static int __proxy_filter( struct __proxy_frame *__frame )
{
    return (__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE);
}

#define TYPE_FORMAT_STRING_SIZE 5087
#define PROC_FORMAT_STRING_SIZE 1681

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const MIDL_STUB_DESC Object_StubDesc;

/*****************************************************************************
 * ITfFunctionProvider interface
 */
static void __finally_ITfFunctionProvider_GetType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfFunctionProvider_GetType_Proxy(
    ITfFunctionProvider* This,
    GUID *guid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfFunctionProvider_GetType_Proxy );
    __frame->This = This;
    if (guid) MIDL_memset( guid, 0, sizeof( *guid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!guid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&guid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfFunctionProvider_GetType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[20], (void *)guid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfFunctionProvider_GetType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfFunctionProvider * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * guid;
};

static void __finally_ITfFunctionProvider_GetType_Stub( struct __frame_ITfFunctionProvider_GetType_Stub *__frame )
{

}

void __RPC_STUB ITfFunctionProvider_GetType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfFunctionProvider_GetType_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfFunctionProvider*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfFunctionProvider_GetType_Stub );
    __frame->guid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);


        __frame->guid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetType(__frame->_This, __frame->guid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfFunctionProvider_GetType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfFunctionProvider_GetDescription_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfFunctionProvider_GetDescription_Proxy(
    ITfFunctionProvider* This,
    BSTR *desc)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfFunctionProvider_GetDescription_Proxy );
    __frame->This = This;
    if (desc) MIDL_memset( desc, 0, sizeof( *desc ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!desc) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[6]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&desc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfFunctionProvider_GetDescription_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[58], (void *)desc );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfFunctionProvider_GetDescription_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfFunctionProvider * _This;
    HRESULT _RetVal;
    BSTR _W0;
    BSTR * desc;
};

static void __finally_ITfFunctionProvider_GetDescription_Stub( struct __frame_ITfFunctionProvider_GetDescription_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->desc,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[58]);

}

void __RPC_STUB ITfFunctionProvider_GetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfFunctionProvider_GetDescription_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfFunctionProvider*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfFunctionProvider_GetDescription_Stub );
    __frame->desc = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[6]);


        __frame->desc = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDescription(__frame->_This, __frame->desc);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->desc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->desc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfFunctionProvider_GetDescription_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfFunctionProvider_GetFunction_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfFunctionProvider_GetFunction_Proxy(
    ITfFunctionProvider* This,
    REFGUID guid,
    REFIID riid,
    IUnknown **func)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfFunctionProvider_GetFunction_Proxy );
    __frame->This = This;
    if (func) MIDL_memset( func, 0, sizeof( *func ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!guid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!func) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&func,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[94],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfFunctionProvider_GetFunction_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[94], (void *)func );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfFunctionProvider_GetFunction_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfFunctionProvider * _This;
    HRESULT _RetVal;
    REFGUID guid;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** func;
};

static void __finally_ITfFunctionProvider_GetFunction_Stub( struct __frame_ITfFunctionProvider_GetFunction_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->func,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[94]);

}

void __RPC_STUB ITfFunctionProvider_GetFunction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfFunctionProvider_GetFunction_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfFunctionProvider*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfFunctionProvider_GetFunction_Stub );
    __frame->guid = 0;
    __frame->riid = 0;
    __frame->func = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
            0);


        __frame->func = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFunction(__frame->_This, __frame->guid, __frame->riid, __frame->func);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->func,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[94]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->func,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[94]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfFunctionProvider_GetFunction_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfFunctionProvider_FormatStringOffsetTable[] =
{
    0,  /* ITfFunctionProvider::GetType */
    6,  /* ITfFunctionProvider::GetDescription */
    12,  /* ITfFunctionProvider::GetFunction */
};

static const CINTERFACE_PROXY_VTABLE(6) _ITfFunctionProviderProxyVtbl =
{
    {
        &IID_ITfFunctionProvider,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfFunctionProvider_GetType_Proxy,
        ITfFunctionProvider_GetDescription_Proxy,
        ITfFunctionProvider_GetFunction_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfFunctionProvider_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfFunctionProvider_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfFunctionProvider_table[] =
{
    ITfFunctionProvider_GetType_Stub,
    ITfFunctionProvider_GetDescription_Stub,
    ITfFunctionProvider_GetFunction_Stub
};

static const CInterfaceStubVtbl _ITfFunctionProviderStubVtbl =
{
    {
        &IID_ITfFunctionProvider,
        &ITfFunctionProvider_ServerInfo,
        6,
        &ITfFunctionProvider_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfFunctionProviders interface
 */
static void __finally_IEnumTfFunctionProviders_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfFunctionProviders_Clone_Proxy(
    IEnumTfFunctionProviders* This,
    IEnumTfFunctionProviders **ret)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfFunctionProviders_Clone_Proxy );
    __frame->This = This;
    if (ret) MIDL_memset( ret, 0, sizeof( *ret ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[26]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ret,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[116],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfFunctionProviders_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[116], (void *)ret );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfFunctionProviders_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfFunctionProviders * _This;
    HRESULT _RetVal;
    IEnumTfFunctionProviders *_W0;
    IEnumTfFunctionProviders ** ret;
};

static void __finally_IEnumTfFunctionProviders_Clone_Stub( struct __frame_IEnumTfFunctionProviders_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ret,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[116]);

}

void __RPC_STUB IEnumTfFunctionProviders_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfFunctionProviders_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfFunctionProviders*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfFunctionProviders_Clone_Stub );
    __frame->ret = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[26]);


        __frame->ret = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ret);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[116]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[116]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfFunctionProviders_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfFunctionProviders_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfFunctionProviders_Next_Proxy(
    IEnumTfFunctionProviders* This,
    ULONG count,
    ITfFunctionProvider **prov,
    ULONG *fetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfFunctionProviders_Next_Proxy );
    __frame->This = This;
    if (prov) MIDL_memset( prov, 0, sizeof( *prov ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!prov) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!fetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[32]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prov,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *fetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfFunctionProviders_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[156], (void *)prov );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[160], (void *)fetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfFunctionProviders_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfFunctionProviders * _This;
    HRESULT _RetVal;
    ULONG count;
    ITfFunctionProvider ** prov;
    ULONG _W0;
    ULONG * fetched;
};

static void __finally_IEnumTfFunctionProviders_Next_Stub( struct __frame_IEnumTfFunctionProviders_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prov,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[156]);


}

void __RPC_STUB IEnumTfFunctionProviders_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfFunctionProviders_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfFunctionProviders*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfFunctionProviders_Next_Stub );
    __frame->prov = 0;
    __frame->fetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[32]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->prov = NdrAllocate(&__frame->_StubMsg, __frame->count * 4);
        memset(__frame->prov, 0, __frame->count * 4);
        __frame->fetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->count, __frame->prov, __frame->fetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prov,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prov,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->fetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfFunctionProviders_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfFunctionProviders_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfFunctionProviders_Reset_Proxy(
    IEnumTfFunctionProviders* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfFunctionProviders_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[44]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfFunctionProviders_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfFunctionProviders_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfFunctionProviders * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfFunctionProviders_Reset_Stub( struct __frame_IEnumTfFunctionProviders_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfFunctionProviders_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfFunctionProviders_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfFunctionProviders*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfFunctionProviders_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[44]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfFunctionProviders_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfFunctionProviders_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfFunctionProviders_Skip_Proxy(
    IEnumTfFunctionProviders* This,
    ULONG count)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfFunctionProviders_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfFunctionProviders_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfFunctionProviders_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfFunctionProviders * _This;
    HRESULT _RetVal;
    ULONG count;
};

static void __finally_IEnumTfFunctionProviders_Skip_Stub( struct __frame_IEnumTfFunctionProviders_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfFunctionProviders_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfFunctionProviders_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfFunctionProviders*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfFunctionProviders_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->count);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfFunctionProviders_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfFunctionProviders_FormatStringOffsetTable[] =
{
    26,  /* IEnumTfFunctionProviders::Clone */
    32,  /* IEnumTfFunctionProviders::Next */
    44,  /* IEnumTfFunctionProviders::Reset */
    46,  /* IEnumTfFunctionProviders::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfFunctionProvidersProxyVtbl =
{
    {
        &IID_IEnumTfFunctionProviders,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfFunctionProviders_Clone_Proxy,
        IEnumTfFunctionProviders_Next_Proxy,
        IEnumTfFunctionProviders_Reset_Proxy,
        IEnumTfFunctionProviders_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfFunctionProviders_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfFunctionProviders_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfFunctionProviders_table[] =
{
    IEnumTfFunctionProviders_Clone_Stub,
    IEnumTfFunctionProviders_Next_Stub,
    IEnumTfFunctionProviders_Reset_Stub,
    IEnumTfFunctionProviders_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfFunctionProvidersStubVtbl =
{
    {
        &IID_IEnumTfFunctionProviders,
        &IEnumTfFunctionProviders_ServerInfo,
        7,
        &IEnumTfFunctionProviders_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfThreadMgr interface
 */
static void __finally_ITfThreadMgr_Activate_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_Activate_Proxy(
    ITfThreadMgr* This,
    TfClientId *ptid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_Activate_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ptid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[50]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *ptid = *(TfClientId *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_Activate_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[164], (void *)ptid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_Activate_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    TfClientId _W0;
    TfClientId * ptid;
};

static void __finally_ITfThreadMgr_Activate_Stub( struct __frame_ITfThreadMgr_Activate_Stub *__frame )
{

}

void __RPC_STUB ITfThreadMgr_Activate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_Activate_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_Activate_Stub );
    __frame->ptid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[50]);


        __frame->ptid = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Activate(__frame->_This, __frame->ptid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(TfClientId *)__frame->_StubMsg.Buffer = *__frame->ptid;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_Activate_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_Deactivate_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_Deactivate_Proxy(
    ITfThreadMgr* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_Deactivate_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[56]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_Deactivate_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_Deactivate_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
};

static void __finally_ITfThreadMgr_Deactivate_Stub( struct __frame_ITfThreadMgr_Deactivate_Stub *__frame )
{
}

void __RPC_STUB ITfThreadMgr_Deactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_Deactivate_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_Deactivate_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[56]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Deactivate(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_Deactivate_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_CreateDocumentMgr_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_CreateDocumentMgr_Proxy(
    ITfThreadMgr* This,
    ITfDocumentMgr **ppdim)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_CreateDocumentMgr_Proxy );
    __frame->This = This;
    if (ppdim) MIDL_memset( ppdim, 0, sizeof( *ppdim ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppdim) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppdim,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[186],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_CreateDocumentMgr_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[186], (void *)ppdim );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_CreateDocumentMgr_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    ITfDocumentMgr *_W0;
    ITfDocumentMgr ** ppdim;
};

static void __finally_ITfThreadMgr_CreateDocumentMgr_Stub( struct __frame_ITfThreadMgr_CreateDocumentMgr_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppdim,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[186]);

}

void __RPC_STUB ITfThreadMgr_CreateDocumentMgr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_CreateDocumentMgr_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_CreateDocumentMgr_Stub );
    __frame->ppdim = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);


        __frame->ppdim = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateDocumentMgr(__frame->_This, __frame->ppdim);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdim,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[186]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdim,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[186]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_CreateDocumentMgr_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_EnumDocumentMgrs_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_EnumDocumentMgrs_Proxy(
    ITfThreadMgr* This,
    IEnumTfDocumentMgrs **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_EnumDocumentMgrs_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[64]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_EnumDocumentMgrs_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[208], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_EnumDocumentMgrs_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    IEnumTfDocumentMgrs *_W0;
    IEnumTfDocumentMgrs ** ppEnum;
};

static void __finally_ITfThreadMgr_EnumDocumentMgrs_Stub( struct __frame_ITfThreadMgr_EnumDocumentMgrs_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208]);

}

void __RPC_STUB ITfThreadMgr_EnumDocumentMgrs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_EnumDocumentMgrs_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_EnumDocumentMgrs_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[64]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumDocumentMgrs(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_EnumDocumentMgrs_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_GetFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_GetFocus_Proxy(
    ITfThreadMgr* This,
    ITfDocumentMgr **ppdimFocus)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_GetFocus_Proxy );
    __frame->This = This;
    if (ppdimFocus) MIDL_memset( ppdimFocus, 0, sizeof( *ppdimFocus ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppdimFocus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[70]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppdimFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_GetFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[230], (void *)ppdimFocus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_GetFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    ITfDocumentMgr *_W0;
    ITfDocumentMgr ** ppdimFocus;
};

static void __finally_ITfThreadMgr_GetFocus_Stub( struct __frame_ITfThreadMgr_GetFocus_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppdimFocus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);

}

void __RPC_STUB ITfThreadMgr_GetFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_GetFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_GetFocus_Stub );
    __frame->ppdimFocus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[70]);


        __frame->ppdimFocus = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFocus(__frame->_This, __frame->ppdimFocus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdimFocus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdimFocus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_GetFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_SetFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_SetFocus_Proxy(
    ITfThreadMgr* This,
    ITfDocumentMgr *pdimFocus)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_SetFocus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdimFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdimFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_SetFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_SetFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    ITfDocumentMgr * pdimFocus;
};

static void __finally_ITfThreadMgr_SetFocus_Stub( struct __frame_ITfThreadMgr_SetFocus_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdimFocus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234]);

}

void __RPC_STUB ITfThreadMgr_SetFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_SetFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_SetFocus_Stub );
    __frame->pdimFocus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdimFocus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFocus(__frame->_This, __frame->pdimFocus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_SetFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_AssociateFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_AssociateFocus_Proxy(
    ITfThreadMgr* This,
    HWND hwnd,
    ITfDocumentMgr *pdimNew,
    ITfDocumentMgr **ppdimPrev)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_AssociateFocus_Proxy );
    __frame->This = This;
    if (ppdimPrev) MIDL_memset( ppdimPrev, 0, sizeof( *ppdimPrev ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!ppdimPrev) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)&hwnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdimNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[286]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hwnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdimNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[286]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[82]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppdimPrev,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_AssociateFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[322], (void *)ppdimPrev );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_AssociateFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    HWND hwnd;
    void *_p_hwnd;
    ITfDocumentMgr * pdimNew;
    ITfDocumentMgr *_W0;
    ITfDocumentMgr ** ppdimPrev;
};

static void __finally_ITfThreadMgr_AssociateFocus_Stub( struct __frame_ITfThreadMgr_AssociateFocus_Stub *__frame )
{
    NdrUserMarshalFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->hwnd,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdimNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[286]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppdimPrev,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322]);

}

void __RPC_STUB ITfThreadMgr_AssociateFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_AssociateFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_AssociateFocus_Stub );
    MIDL_memset(&__frame->hwnd, 0, sizeof(__frame->hwnd));
    __frame->_p_hwnd = &__frame->hwnd;
    __frame->pdimNew = 0;
    __frame->ppdimPrev = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[82]);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_hwnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdimNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[286],
            0);


        __frame->ppdimPrev = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AssociateFocus(__frame->_This, __frame->hwnd, __frame->pdimNew, __frame->ppdimPrev);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdimPrev,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdimPrev,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_AssociateFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_IsThreadFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_IsThreadFocus_Proxy(
    ITfThreadMgr* This,
    BOOL *pfThreadFocus)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_IsThreadFocus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!pfThreadFocus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[96]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfThreadFocus = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_IsThreadFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[326], (void *)pfThreadFocus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_IsThreadFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    BOOL _W0;
    BOOL * pfThreadFocus;
};

static void __finally_ITfThreadMgr_IsThreadFocus_Stub( struct __frame_ITfThreadMgr_IsThreadFocus_Stub *__frame )
{

}

void __RPC_STUB ITfThreadMgr_IsThreadFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_IsThreadFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_IsThreadFocus_Stub );
    __frame->pfThreadFocus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[96]);


        __frame->pfThreadFocus = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsThreadFocus(__frame->_This, __frame->pfThreadFocus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfThreadFocus;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_IsThreadFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_GetFunctionProvider_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_GetFunctionProvider_Proxy(
    ITfThreadMgr* This,
    REFCLSID clsid,
    ITfFunctionProvider **ppFuncProv)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_GetFunctionProvider_Proxy );
    __frame->This = This;
    if (ppFuncProv) MIDL_memset( ppFuncProv, 0, sizeof( *ppFuncProv ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppFuncProv) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[102]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppFuncProv,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_GetFunctionProvider_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[370], (void *)ppFuncProv );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_GetFunctionProvider_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    REFCLSID clsid;
    ITfFunctionProvider *_W0;
    ITfFunctionProvider ** ppFuncProv;
};

static void __finally_ITfThreadMgr_GetFunctionProvider_Stub( struct __frame_ITfThreadMgr_GetFunctionProvider_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppFuncProv,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370]);

}

void __RPC_STUB ITfThreadMgr_GetFunctionProvider_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_GetFunctionProvider_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_GetFunctionProvider_Stub );
    __frame->clsid = 0;
    __frame->ppFuncProv = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[102]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);


        __frame->ppFuncProv = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFunctionProvider(__frame->_This, __frame->clsid, __frame->ppFuncProv);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFuncProv,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFuncProv,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_GetFunctionProvider_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_EnumFunctionProviders_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_EnumFunctionProviders_Proxy(
    ITfThreadMgr* This,
    IEnumTfFunctionProviders **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_EnumFunctionProviders_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[112]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[392],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_EnumFunctionProviders_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[392], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_EnumFunctionProviders_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    IEnumTfFunctionProviders *_W0;
    IEnumTfFunctionProviders ** ppEnum;
};

static void __finally_ITfThreadMgr_EnumFunctionProviders_Stub( struct __frame_ITfThreadMgr_EnumFunctionProviders_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[392]);

}

void __RPC_STUB ITfThreadMgr_EnumFunctionProviders_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_EnumFunctionProviders_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_EnumFunctionProviders_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[112]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumFunctionProviders(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[392]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[392]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_EnumFunctionProviders_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_GetGlobalCompartment_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_GetGlobalCompartment_Proxy(
    ITfThreadMgr* This,
    ITfCompartmentMgr **ppCompMgr)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_GetGlobalCompartment_Proxy );
    __frame->This = This;
    if (ppCompMgr) MIDL_memset( ppCompMgr, 0, sizeof( *ppCompMgr ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!ppCompMgr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppCompMgr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_GetGlobalCompartment_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[414], (void *)ppCompMgr );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_GetGlobalCompartment_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    ITfCompartmentMgr *_W0;
    ITfCompartmentMgr ** ppCompMgr;
};

static void __finally_ITfThreadMgr_GetGlobalCompartment_Stub( struct __frame_ITfThreadMgr_GetGlobalCompartment_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppCompMgr,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414]);

}

void __RPC_STUB ITfThreadMgr_GetGlobalCompartment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_GetGlobalCompartment_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_GetGlobalCompartment_Stub );
    __frame->ppCompMgr = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);


        __frame->ppCompMgr = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetGlobalCompartment(__frame->_This, __frame->ppCompMgr);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppCompMgr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppCompMgr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_GetGlobalCompartment_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfThreadMgr_FormatStringOffsetTable[] =
{
    50,  /* ITfThreadMgr::Activate */
    56,  /* ITfThreadMgr::Deactivate */
    58,  /* ITfThreadMgr::CreateDocumentMgr */
    64,  /* ITfThreadMgr::EnumDocumentMgrs */
    70,  /* ITfThreadMgr::GetFocus */
    76,  /* ITfThreadMgr::SetFocus */
    82,  /* ITfThreadMgr::AssociateFocus */
    96,  /* ITfThreadMgr::IsThreadFocus */
    102,  /* ITfThreadMgr::GetFunctionProvider */
    112,  /* ITfThreadMgr::EnumFunctionProviders */
    118,  /* ITfThreadMgr::GetGlobalCompartment */
};

static const CINTERFACE_PROXY_VTABLE(14) _ITfThreadMgrProxyVtbl =
{
    {
        &IID_ITfThreadMgr,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfThreadMgr_Activate_Proxy,
        ITfThreadMgr_Deactivate_Proxy,
        ITfThreadMgr_CreateDocumentMgr_Proxy,
        ITfThreadMgr_EnumDocumentMgrs_Proxy,
        ITfThreadMgr_GetFocus_Proxy,
        ITfThreadMgr_SetFocus_Proxy,
        ITfThreadMgr_AssociateFocus_Proxy,
        ITfThreadMgr_IsThreadFocus_Proxy,
        ITfThreadMgr_GetFunctionProvider_Proxy,
        ITfThreadMgr_EnumFunctionProviders_Proxy,
        ITfThreadMgr_GetGlobalCompartment_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfThreadMgr_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfThreadMgr_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfThreadMgr_table[] =
{
    ITfThreadMgr_Activate_Stub,
    ITfThreadMgr_Deactivate_Stub,
    ITfThreadMgr_CreateDocumentMgr_Stub,
    ITfThreadMgr_EnumDocumentMgrs_Stub,
    ITfThreadMgr_GetFocus_Stub,
    ITfThreadMgr_SetFocus_Stub,
    ITfThreadMgr_AssociateFocus_Stub,
    ITfThreadMgr_IsThreadFocus_Stub,
    ITfThreadMgr_GetFunctionProvider_Stub,
    ITfThreadMgr_EnumFunctionProviders_Stub,
    ITfThreadMgr_GetGlobalCompartment_Stub
};

static const CInterfaceStubVtbl _ITfThreadMgrStubVtbl =
{
    {
        &IID_ITfThreadMgr,
        &ITfThreadMgr_ServerInfo,
        14,
        &ITfThreadMgr_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfThreadMgrEx interface
 */
static void __finally_ITfThreadMgrEx_ActivateEx_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEx_ActivateEx_Proxy(
    ITfThreadMgrEx* This,
    TfClientId *id,
    DWORD flags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEx_ActivateEx_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!id) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = flags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[124]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *id = *(TfClientId *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEx_ActivateEx_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[418], (void *)id );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEx_ActivateEx_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEx * _This;
    HRESULT _RetVal;
    TfClientId _W0;
    TfClientId * id;
    DWORD flags;
};

static void __finally_ITfThreadMgrEx_ActivateEx_Stub( struct __frame_ITfThreadMgrEx_ActivateEx_Stub *__frame )
{


}

void __RPC_STUB ITfThreadMgrEx_ActivateEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEx_ActivateEx_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEx_ActivateEx_Stub );
    __frame->id = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[124]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->id = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ActivateEx(__frame->_This, __frame->id, __frame->flags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(TfClientId *)__frame->_StubMsg.Buffer = *__frame->id;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEx_ActivateEx_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgrEx_GetActiveFlags_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEx_GetActiveFlags_Proxy(
    ITfThreadMgrEx* This,
    DWORD *flags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEx_GetActiveFlags_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        if (!flags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[132]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEx_GetActiveFlags_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[422], (void *)flags );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEx_GetActiveFlags_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEx * _This;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * flags;
};

static void __finally_ITfThreadMgrEx_GetActiveFlags_Stub( struct __frame_ITfThreadMgrEx_GetActiveFlags_Stub *__frame )
{

}

void __RPC_STUB ITfThreadMgrEx_GetActiveFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEx_GetActiveFlags_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEx_GetActiveFlags_Stub );
    __frame->flags = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[132]);


        __frame->flags = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetActiveFlags(__frame->_This, __frame->flags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEx_GetActiveFlags_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfThreadMgrEx_FormatStringOffsetTable[] =
{
    50,  /* ITfThreadMgr::Activate */
    56,  /* ITfThreadMgr::Deactivate */
    58,  /* ITfThreadMgr::CreateDocumentMgr */
    64,  /* ITfThreadMgr::EnumDocumentMgrs */
    70,  /* ITfThreadMgr::GetFocus */
    76,  /* ITfThreadMgr::SetFocus */
    82,  /* ITfThreadMgr::AssociateFocus */
    96,  /* ITfThreadMgr::IsThreadFocus */
    102,  /* ITfThreadMgr::GetFunctionProvider */
    112,  /* ITfThreadMgr::EnumFunctionProviders */
    118,  /* ITfThreadMgr::GetGlobalCompartment */
    124,  /* ITfThreadMgrEx::ActivateEx */
    132,  /* ITfThreadMgrEx::GetActiveFlags */
};

static const CINTERFACE_PROXY_VTABLE(16) _ITfThreadMgrExProxyVtbl =
{
    {
        &IID_ITfThreadMgrEx,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfThreadMgr_Activate_Proxy,
        ITfThreadMgr_Deactivate_Proxy,
        ITfThreadMgr_CreateDocumentMgr_Proxy,
        ITfThreadMgr_EnumDocumentMgrs_Proxy,
        ITfThreadMgr_GetFocus_Proxy,
        ITfThreadMgr_SetFocus_Proxy,
        ITfThreadMgr_AssociateFocus_Proxy,
        ITfThreadMgr_IsThreadFocus_Proxy,
        ITfThreadMgr_GetFunctionProvider_Proxy,
        ITfThreadMgr_EnumFunctionProviders_Proxy,
        ITfThreadMgr_GetGlobalCompartment_Proxy,
        ITfThreadMgrEx_ActivateEx_Proxy,
        ITfThreadMgrEx_GetActiveFlags_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfThreadMgrEx_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfThreadMgrEx_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfThreadMgrEx_table[] =
{
    ITfThreadMgr_Activate_Stub,
    ITfThreadMgr_Deactivate_Stub,
    ITfThreadMgr_CreateDocumentMgr_Stub,
    ITfThreadMgr_EnumDocumentMgrs_Stub,
    ITfThreadMgr_GetFocus_Stub,
    ITfThreadMgr_SetFocus_Stub,
    ITfThreadMgr_AssociateFocus_Stub,
    ITfThreadMgr_IsThreadFocus_Stub,
    ITfThreadMgr_GetFunctionProvider_Stub,
    ITfThreadMgr_EnumFunctionProviders_Stub,
    ITfThreadMgr_GetGlobalCompartment_Stub,
    ITfThreadMgrEx_ActivateEx_Stub,
    ITfThreadMgrEx_GetActiveFlags_Stub
};

static const CInterfaceStubVtbl _ITfThreadMgrExStubVtbl =
{
    {
        &IID_ITfThreadMgrEx,
        &ITfThreadMgrEx_ServerInfo,
        16,
        &ITfThreadMgrEx_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfCompositionView interface
 */
static void __finally_ITfCompositionView_GetOwnerClsid_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompositionView_GetOwnerClsid_Proxy(
    ITfCompositionView* This,
    CLSID *pclsid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompositionView_GetOwnerClsid_Proxy );
    __frame->This = This;
    if (pclsid) MIDL_memset( pclsid, 0, sizeof( *pclsid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pclsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[138]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pclsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompositionView_GetOwnerClsid_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[426], (void *)pclsid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompositionView_GetOwnerClsid_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompositionView * _This;
    HRESULT _RetVal;
    CLSID _W0;
    CLSID * pclsid;
};

static void __finally_ITfCompositionView_GetOwnerClsid_Stub( struct __frame_ITfCompositionView_GetOwnerClsid_Stub *__frame )
{

}

void __RPC_STUB ITfCompositionView_GetOwnerClsid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompositionView_GetOwnerClsid_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompositionView_GetOwnerClsid_Stub );
    __frame->pclsid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[138]);


        __frame->pclsid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetOwnerClsid(__frame->_This, __frame->pclsid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pclsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompositionView_GetOwnerClsid_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfCompositionView_GetRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompositionView_GetRange_Proxy(
    ITfCompositionView* This,
    ITfRange **ppRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompositionView_GetRange_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[144]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[448],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompositionView_GetRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[448], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompositionView_GetRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompositionView * _This;
    HRESULT _RetVal;
    ITfRange *_W0;
    ITfRange ** ppRange;
};

static void __finally_ITfCompositionView_GetRange_Stub( struct __frame_ITfCompositionView_GetRange_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[448]);

}

void __RPC_STUB ITfCompositionView_GetRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompositionView_GetRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompositionView_GetRange_Stub );
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[144]);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRange(__frame->_This, __frame->ppRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[448]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[448]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompositionView_GetRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfCompositionView_FormatStringOffsetTable[] =
{
    138,  /* ITfCompositionView::GetOwnerClsid */
    144,  /* ITfCompositionView::GetRange */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfCompositionViewProxyVtbl =
{
    {
        &IID_ITfCompositionView,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfCompositionView_GetOwnerClsid_Proxy,
        ITfCompositionView_GetRange_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfCompositionView_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfCompositionView_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfCompositionView_table[] =
{
    ITfCompositionView_GetOwnerClsid_Stub,
    ITfCompositionView_GetRange_Stub
};

static const CInterfaceStubVtbl _ITfCompositionViewStubVtbl =
{
    {
        &IID_ITfCompositionView,
        &ITfCompositionView_ServerInfo,
        5,
        &ITfCompositionView_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfDocumentMgr interface
 */
static void __finally_ITfDocumentMgr_CreateContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_CreateContext_Proxy(
    ITfDocumentMgr* This,
    TfClientId tidOwner,
    DWORD dwFlags,
    IUnknown *punk,
    ITfContext **ppic,
    TfEditCookie *pecTextStore)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_CreateContext_Proxy );
    __frame->This = This;
    if (ppic) MIDL_memset( ppic, 0, sizeof( *ppic ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppic) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pecTextStore) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[452]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tidOwner;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[452]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pecTextStore = *(TfEditCookie *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_CreateContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[488], (void *)ppic );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[492], (void *)pecTextStore );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_CreateContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    TfClientId tidOwner;
    DWORD dwFlags;
    IUnknown * punk;
    ITfContext *_W0;
    ITfContext ** ppic;
    TfEditCookie _W1;
    TfEditCookie * pecTextStore;
};

static void __finally_ITfDocumentMgr_CreateContext_Stub( struct __frame_ITfDocumentMgr_CreateContext_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->punk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[452]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488]);


}

void __RPC_STUB ITfDocumentMgr_CreateContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_CreateContext_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_CreateContext_Stub );
    __frame->punk = 0;
    __frame->ppic = 0;
    __frame->pecTextStore = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tidOwner = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->punk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[452],
            0);


        __frame->ppic = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pecTextStore = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateContext(__frame->_This, __frame->tidOwner, __frame->dwFlags, __frame->punk, __frame->ppic, __frame->pecTextStore);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(TfEditCookie *)__frame->_StubMsg.Buffer = *__frame->pecTextStore;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_CreateContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDocumentMgr_Push_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_Push_Proxy(
    ITfDocumentMgr* This,
    ITfContext *pic)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_Push_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[496]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[496]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[168]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_Push_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_Push_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    ITfContext * pic;
};

static void __finally_ITfDocumentMgr_Push_Stub( struct __frame_ITfDocumentMgr_Push_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[496]);

}

void __RPC_STUB ITfDocumentMgr_Push_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_Push_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_Push_Stub );
    __frame->pic = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[168]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[496],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Push(__frame->_This, __frame->pic);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_Push_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDocumentMgr_Pop_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_Pop_Proxy(
    ITfDocumentMgr* This,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_Pop_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[174]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_Pop_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_Pop_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    DWORD dwFlags;
};

static void __finally_ITfDocumentMgr_Pop_Stub( struct __frame_ITfDocumentMgr_Pop_Stub *__frame )
{

}

void __RPC_STUB ITfDocumentMgr_Pop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_Pop_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_Pop_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[174]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Pop(__frame->_This, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_Pop_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDocumentMgr_GetTop_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_GetTop_Proxy(
    ITfDocumentMgr* This,
    ITfContext **ppic)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_GetTop_Proxy );
    __frame->This = This;
    if (ppic) MIDL_memset( ppic, 0, sizeof( *ppic ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppic) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[178]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_GetTop_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[532], (void *)ppic );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_GetTop_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    ITfContext *_W0;
    ITfContext ** ppic;
};

static void __finally_ITfDocumentMgr_GetTop_Stub( struct __frame_ITfDocumentMgr_GetTop_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532]);

}

void __RPC_STUB ITfDocumentMgr_GetTop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_GetTop_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_GetTop_Stub );
    __frame->ppic = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[178]);


        __frame->ppic = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetTop(__frame->_This, __frame->ppic);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_GetTop_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDocumentMgr_GetBase_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_GetBase_Proxy(
    ITfDocumentMgr* This,
    ITfContext **ppic)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_GetBase_Proxy );
    __frame->This = This;
    if (ppic) MIDL_memset( ppic, 0, sizeof( *ppic ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppic) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[184]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_GetBase_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[554], (void *)ppic );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_GetBase_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    ITfContext *_W0;
    ITfContext ** ppic;
};

static void __finally_ITfDocumentMgr_GetBase_Stub( struct __frame_ITfDocumentMgr_GetBase_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554]);

}

void __RPC_STUB ITfDocumentMgr_GetBase_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_GetBase_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_GetBase_Stub );
    __frame->ppic = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[184]);


        __frame->ppic = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetBase(__frame->_This, __frame->ppic);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_GetBase_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDocumentMgr_EnumContexts_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_EnumContexts_Proxy(
    ITfDocumentMgr* This,
    IEnumTfContexts **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_EnumContexts_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[190]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[576],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_EnumContexts_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[576], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_EnumContexts_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    IEnumTfContexts *_W0;
    IEnumTfContexts ** ppEnum;
};

static void __finally_ITfDocumentMgr_EnumContexts_Stub( struct __frame_ITfDocumentMgr_EnumContexts_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[576]);

}

void __RPC_STUB ITfDocumentMgr_EnumContexts_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_EnumContexts_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_EnumContexts_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[190]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumContexts(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[576]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[576]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_EnumContexts_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfDocumentMgr_FormatStringOffsetTable[] =
{
    150,  /* ITfDocumentMgr::CreateContext */
    168,  /* ITfDocumentMgr::Push */
    174,  /* ITfDocumentMgr::Pop */
    178,  /* ITfDocumentMgr::GetTop */
    184,  /* ITfDocumentMgr::GetBase */
    190,  /* ITfDocumentMgr::EnumContexts */
};

static const CINTERFACE_PROXY_VTABLE(9) _ITfDocumentMgrProxyVtbl =
{
    {
        &IID_ITfDocumentMgr,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfDocumentMgr_CreateContext_Proxy,
        ITfDocumentMgr_Push_Proxy,
        ITfDocumentMgr_Pop_Proxy,
        ITfDocumentMgr_GetTop_Proxy,
        ITfDocumentMgr_GetBase_Proxy,
        ITfDocumentMgr_EnumContexts_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfDocumentMgr_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfDocumentMgr_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfDocumentMgr_table[] =
{
    ITfDocumentMgr_CreateContext_Stub,
    ITfDocumentMgr_Push_Stub,
    ITfDocumentMgr_Pop_Stub,
    ITfDocumentMgr_GetTop_Stub,
    ITfDocumentMgr_GetBase_Stub,
    ITfDocumentMgr_EnumContexts_Stub
};

static const CInterfaceStubVtbl _ITfDocumentMgrStubVtbl =
{
    {
        &IID_ITfDocumentMgr,
        &ITfDocumentMgr_ServerInfo,
        9,
        &ITfDocumentMgr_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContextView interface
 */
static void __finally_ITfContextView_GetRangeFromPoint_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextView_GetRangeFromPoint_Proxy(
    ITfContextView* This,
    TfEditCookie cookie,
    const POINT *pt,
    DWORD flags,
    ITfRange **range)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextView_GetRangeFromPoint_Proxy );
    __frame->This = This;
    if (range) MIDL_memset( range, 0, sizeof( *range ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!range) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = cookie;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[580]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = flags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[196]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[610],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextView_GetRangeFromPoint_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[610], (void *)range );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextView_GetRangeFromPoint_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextView * _This;
    HRESULT _RetVal;
    TfEditCookie cookie;
    const POINT * pt;
    DWORD flags;
    ITfRange *_W0;
    ITfRange ** range;
};

static void __finally_ITfContextView_GetRangeFromPoint_Stub( struct __frame_ITfContextView_GetRangeFromPoint_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[610]);

}

void __RPC_STUB ITfContextView_GetRangeFromPoint_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextView_GetRangeFromPoint_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextView_GetRangeFromPoint_Stub );
    __frame->pt = 0;
    __frame->range = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[196]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cookie = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[580],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->range = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRangeFromPoint(__frame->_This, __frame->cookie, __frame->pt, __frame->flags, __frame->range);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[610]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[610]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextView_GetRangeFromPoint_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextView_GetTextExt_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextView_GetTextExt_Proxy(
    ITfContextView* This,
    TfEditCookie cookie,
    ITfRange *range,
    RECT *rect,
    BOOL *clipped)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextView_GetTextExt_Proxy );
    __frame->This = This;
    if (rect) MIDL_memset( rect, 0, sizeof( *rect ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rect) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!clipped) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = cookie;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[210]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rect,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[632],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *clipped = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextView_GetTextExt_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[642], (void *)rect );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[646], (void *)clipped );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextView_GetTextExt_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextView * _This;
    HRESULT _RetVal;
    TfEditCookie cookie;
    ITfRange * range;
    RECT _W0;
    RECT * rect;
    BOOL _W1;
    BOOL * clipped;
};

static void __finally_ITfContextView_GetTextExt_Stub( struct __frame_ITfContextView_GetTextExt_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614]);



}

void __RPC_STUB ITfContextView_GetTextExt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextView_GetTextExt_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextView_GetTextExt_Stub );
    __frame->range = 0;
    __frame->rect = 0;
    __frame->clipped = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[210]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cookie = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614],
            0);


        __frame->rect = &__frame->_W0;
        __frame->clipped = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetTextExt(__frame->_This, __frame->cookie, __frame->range, __frame->rect, __frame->clipped);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 36;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rect,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[632]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->clipped;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextView_GetTextExt_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextView_GetScreenExt_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextView_GetScreenExt_Proxy(
    ITfContextView* This,
    RECT *rect)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextView_GetScreenExt_Proxy );
    __frame->This = This;
    if (rect) MIDL_memset( rect, 0, sizeof( *rect ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!rect) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[226]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rect,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[632],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextView_GetScreenExt_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[650], (void *)rect );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextView_GetScreenExt_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextView * _This;
    HRESULT _RetVal;
    RECT _W0;
    RECT * rect;
};

static void __finally_ITfContextView_GetScreenExt_Stub( struct __frame_ITfContextView_GetScreenExt_Stub *__frame )
{

}

void __RPC_STUB ITfContextView_GetScreenExt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextView_GetScreenExt_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextView_GetScreenExt_Stub );
    __frame->rect = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[226]);


        __frame->rect = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetScreenExt(__frame->_This, __frame->rect);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rect,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[632]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextView_GetScreenExt_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextView_GetWnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextView_GetWnd_Proxy(
    ITfContextView* This,
    HWND *hwnd)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextView_GetWnd_Proxy );
    __frame->This = This;
    if (hwnd) MIDL_memset( hwnd, 0, sizeof( *hwnd ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!hwnd) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[232]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&hwnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextView_GetWnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[664], (void *)hwnd );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextView_GetWnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextView * _This;
    HRESULT _RetVal;
    HWND _W0;
    HWND * hwnd;
};

static void __finally_ITfContextView_GetWnd_Stub( struct __frame_ITfContextView_GetWnd_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->hwnd,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[664]);

}

void __RPC_STUB ITfContextView_GetWnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextView_GetWnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextView_GetWnd_Stub );
    __frame->hwnd = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[232]);


        __frame->hwnd = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetWnd(__frame->_This, __frame->hwnd);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->hwnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->hwnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextView_GetWnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContextView_FormatStringOffsetTable[] =
{
    196,  /* ITfContextView::GetRangeFromPoint */
    210,  /* ITfContextView::GetTextExt */
    226,  /* ITfContextView::GetScreenExt */
    232,  /* ITfContextView::GetWnd */
};

static const CINTERFACE_PROXY_VTABLE(7) _ITfContextViewProxyVtbl =
{
    {
        &IID_ITfContextView,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContextView_GetRangeFromPoint_Proxy,
        ITfContextView_GetTextExt_Proxy,
        ITfContextView_GetScreenExt_Proxy,
        ITfContextView_GetWnd_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContextView_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContextView_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContextView_table[] =
{
    ITfContextView_GetRangeFromPoint_Stub,
    ITfContextView_GetTextExt_Stub,
    ITfContextView_GetScreenExt_Stub,
    ITfContextView_GetWnd_Stub
};

static const CInterfaceStubVtbl _ITfContextViewStubVtbl =
{
    {
        &IID_ITfContextView,
        &ITfContextView_ServerInfo,
        7,
        &ITfContextView_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfContextViews interface
 */
static void __finally_IEnumTfContextViews_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContextViews_Clone_Proxy(
    IEnumTfContextViews* This,
    IEnumTfContextViews **ret)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContextViews_Clone_Proxy );
    __frame->This = This;
    if (ret) MIDL_memset( ret, 0, sizeof( *ret ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[238]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ret,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[686],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContextViews_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[686], (void *)ret );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContextViews_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContextViews * _This;
    HRESULT _RetVal;
    IEnumTfContextViews *_W0;
    IEnumTfContextViews ** ret;
};

static void __finally_IEnumTfContextViews_Clone_Stub( struct __frame_IEnumTfContextViews_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ret,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[686]);

}

void __RPC_STUB IEnumTfContextViews_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContextViews_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContextViews*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContextViews_Clone_Stub );
    __frame->ret = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[238]);


        __frame->ret = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ret);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[686]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[686]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContextViews_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContextViews_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContextViews_Next_Proxy(
    IEnumTfContextViews* This,
    ULONG count,
    ITfContextView **views,
    ULONG *fetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContextViews_Next_Proxy );
    __frame->This = This;
    if (views) MIDL_memset( views, 0, sizeof( *views ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!views) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!fetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[244]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&views,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[708],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *fetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContextViews_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[726], (void *)views );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[730], (void *)fetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContextViews_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContextViews * _This;
    HRESULT _RetVal;
    ULONG count;
    ITfContextView ** views;
    ULONG _W0;
    ULONG * fetched;
};

static void __finally_IEnumTfContextViews_Next_Stub( struct __frame_IEnumTfContextViews_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->views,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[726]);


}

void __RPC_STUB IEnumTfContextViews_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContextViews_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContextViews*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContextViews_Next_Stub );
    __frame->views = 0;
    __frame->fetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[244]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->views = NdrAllocate(&__frame->_StubMsg, __frame->count * 4);
        memset(__frame->views, 0, __frame->count * 4);
        __frame->fetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->count, __frame->views, __frame->fetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->views,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[708]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->views,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[708]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->fetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContextViews_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContextViews_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContextViews_Reset_Proxy(
    IEnumTfContextViews* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContextViews_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[256]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContextViews_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContextViews_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContextViews * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfContextViews_Reset_Stub( struct __frame_IEnumTfContextViews_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfContextViews_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContextViews_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContextViews*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContextViews_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[256]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContextViews_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContextViews_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContextViews_Skip_Proxy(
    IEnumTfContextViews* This,
    ULONG count)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContextViews_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[258]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContextViews_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContextViews_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContextViews * _This;
    HRESULT _RetVal;
    ULONG count;
};

static void __finally_IEnumTfContextViews_Skip_Stub( struct __frame_IEnumTfContextViews_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfContextViews_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContextViews_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContextViews*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContextViews_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[258]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->count);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContextViews_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfContextViews_FormatStringOffsetTable[] =
{
    238,  /* IEnumTfContextViews::Clone */
    244,  /* IEnumTfContextViews::Next */
    256,  /* IEnumTfContextViews::Reset */
    258,  /* IEnumTfContextViews::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfContextViewsProxyVtbl =
{
    {
        &IID_IEnumTfContextViews,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfContextViews_Clone_Proxy,
        IEnumTfContextViews_Next_Proxy,
        IEnumTfContextViews_Reset_Proxy,
        IEnumTfContextViews_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfContextViews_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfContextViews_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfContextViews_table[] =
{
    IEnumTfContextViews_Clone_Stub,
    IEnumTfContextViews_Next_Stub,
    IEnumTfContextViews_Reset_Stub,
    IEnumTfContextViews_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfContextViewsStubVtbl =
{
    {
        &IID_IEnumTfContextViews,
        &IEnumTfContextViews_ServerInfo,
        7,
        &IEnumTfContextViews_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfProperties interface
 */
static void __finally_IEnumTfProperties_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfProperties_Clone_Proxy(
    IEnumTfProperties* This,
    IEnumTfProperties **ret)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfProperties_Clone_Proxy );
    __frame->This = This;
    if (ret) MIDL_memset( ret, 0, sizeof( *ret ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[262]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ret,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[752],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfProperties_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[752], (void *)ret );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfProperties_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfProperties * _This;
    HRESULT _RetVal;
    IEnumTfProperties *_W0;
    IEnumTfProperties ** ret;
};

static void __finally_IEnumTfProperties_Clone_Stub( struct __frame_IEnumTfProperties_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ret,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[752]);

}

void __RPC_STUB IEnumTfProperties_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfProperties_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfProperties_Clone_Stub );
    __frame->ret = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[262]);


        __frame->ret = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ret);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[752]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[752]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfProperties_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfProperties_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfProperties_Next_Proxy(
    IEnumTfProperties* This,
    ULONG count,
    ITfProperty **props,
    ULONG *fetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfProperties_Next_Proxy );
    __frame->This = This;
    if (props) MIDL_memset( props, 0, sizeof( *props ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!props) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!fetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[268]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&props,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[774],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *fetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfProperties_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[792], (void *)props );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[796], (void *)fetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfProperties_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfProperties * _This;
    HRESULT _RetVal;
    ULONG count;
    ITfProperty ** props;
    ULONG _W0;
    ULONG * fetched;
};

static void __finally_IEnumTfProperties_Next_Stub( struct __frame_IEnumTfProperties_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->props,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[792]);


}

void __RPC_STUB IEnumTfProperties_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfProperties_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfProperties_Next_Stub );
    __frame->props = 0;
    __frame->fetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[268]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->props = NdrAllocate(&__frame->_StubMsg, __frame->count * 4);
        memset(__frame->props, 0, __frame->count * 4);
        __frame->fetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->count, __frame->props, __frame->fetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->props,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[774]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->props,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[774]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->fetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfProperties_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfProperties_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfProperties_Reset_Proxy(
    IEnumTfProperties* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfProperties_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[280]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfProperties_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfProperties_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfProperties * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfProperties_Reset_Stub( struct __frame_IEnumTfProperties_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfProperties_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfProperties_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfProperties_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[280]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfProperties_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfProperties_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfProperties_Skip_Proxy(
    IEnumTfProperties* This,
    ULONG count)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfProperties_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfProperties_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfProperties_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfProperties * _This;
    HRESULT _RetVal;
    ULONG count;
};

static void __finally_IEnumTfProperties_Skip_Stub( struct __frame_IEnumTfProperties_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfProperties_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfProperties_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfProperties_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->count);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfProperties_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfProperties_FormatStringOffsetTable[] =
{
    262,  /* IEnumTfProperties::Clone */
    268,  /* IEnumTfProperties::Next */
    280,  /* IEnumTfProperties::Reset */
    282,  /* IEnumTfProperties::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfPropertiesProxyVtbl =
{
    {
        &IID_IEnumTfProperties,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfProperties_Clone_Proxy,
        IEnumTfProperties_Next_Proxy,
        IEnumTfProperties_Reset_Proxy,
        IEnumTfProperties_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfProperties_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfProperties_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfProperties_table[] =
{
    IEnumTfProperties_Clone_Stub,
    IEnumTfProperties_Next_Stub,
    IEnumTfProperties_Reset_Stub,
    IEnumTfProperties_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfPropertiesStubVtbl =
{
    {
        &IID_IEnumTfProperties,
        &IEnumTfProperties_ServerInfo,
        7,
        &IEnumTfProperties_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfRangeBackup interface
 */
static void __finally_ITfRangeBackup_Restore_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRangeBackup_Restore_Proxy(
    ITfRangeBackup* This,
    TfEditCookie cookie,
    ITfRange *range)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRangeBackup_Restore_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[800]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = cookie;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[800]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[286]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRangeBackup_Restore_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRangeBackup_Restore_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRangeBackup * _This;
    HRESULT _RetVal;
    TfEditCookie cookie;
    ITfRange * range;
};

static void __finally_ITfRangeBackup_Restore_Stub( struct __frame_ITfRangeBackup_Restore_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[800]);

}

void __RPC_STUB ITfRangeBackup_Restore_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRangeBackup_Restore_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRangeBackup*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRangeBackup_Restore_Stub );
    __frame->range = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[286]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cookie = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[800],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Restore(__frame->_This, __frame->cookie, __frame->range);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRangeBackup_Restore_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfRangeBackup_FormatStringOffsetTable[] =
{
    286,  /* ITfRangeBackup::Restore */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfRangeBackupProxyVtbl =
{
    {
        &IID_ITfRangeBackup,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfRangeBackup_Restore_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfRangeBackup_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfRangeBackup_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfRangeBackup_table[] =
{
    ITfRangeBackup_Restore_Stub
};

static const CInterfaceStubVtbl _ITfRangeBackupStubVtbl =
{
    {
        &IID_ITfRangeBackup,
        &ITfRangeBackup_ServerInfo,
        4,
        &ITfRangeBackup_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITextStoreACPServices interface
 */
static void __finally_ITextStoreACPServices_Serialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITextStoreACPServices_Serialize_Proxy(
    ITextStoreACPServices* This,
    ITfProperty *prop,
    ITfRange *range,
    TF_PERSISTENT_PROPERTY_HEADER_ACP *header,
    IStream *stream)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITextStoreACPServices_Serialize_Proxy );
    __frame->This = This;
    if (header) MIDL_memset( header, 0, sizeof( *header ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!header) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[836]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)stream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[876]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[836]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)stream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[876]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[294]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&header,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITextStoreACPServices_Serialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[872], (void *)header );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITextStoreACPServices_Serialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITextStoreACPServices * _This;
    HRESULT _RetVal;
    ITfProperty * prop;
    ITfRange * range;
    TF_PERSISTENT_PROPERTY_HEADER_ACP _W0;
    TF_PERSISTENT_PROPERTY_HEADER_ACP * header;
    IStream * stream;
};

static void __finally_ITextStoreACPServices_Serialize_Stub( struct __frame_ITextStoreACPServices_Serialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prop,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[836]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->stream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[876]);

}

void __RPC_STUB ITextStoreACPServices_Serialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITextStoreACPServices_Serialize_Stub __f, * const __frame = &__f;

    __frame->_This = (ITextStoreACPServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITextStoreACPServices_Serialize_Stub );
    __frame->prop = 0;
    __frame->range = 0;
    __frame->header = 0;
    __frame->stream = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[294]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prop,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[836],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->stream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[876],
            0);


        __frame->header = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Serialize(__frame->_This, __frame->prop, __frame->range, __frame->header, __frame->stream);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 60;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->header,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITextStoreACPServices_Serialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITextStoreACPServices_Unserialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITextStoreACPServices_Unserialize_Proxy(
    ITextStoreACPServices* This,
    ITfProperty *prop,
    const TF_PERSISTENT_PROPERTY_HEADER_ACP *header,
    IStream *stream,
    ITfPersistentPropertyLoaderACP *loader)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITextStoreACPServices_Unserialize_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!header) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 52;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[894]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)stream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[934]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)loader,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[952]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[894]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)header,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[912]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)stream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[934]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)loader,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[952]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[312]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITextStoreACPServices_Unserialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITextStoreACPServices_Unserialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITextStoreACPServices * _This;
    HRESULT _RetVal;
    ITfProperty * prop;
    const TF_PERSISTENT_PROPERTY_HEADER_ACP * header;
    IStream * stream;
    ITfPersistentPropertyLoaderACP * loader;
};

static void __finally_ITextStoreACPServices_Unserialize_Stub( struct __frame_ITextStoreACPServices_Unserialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prop,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[894]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->stream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[934]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->loader,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[952]);

}

void __RPC_STUB ITextStoreACPServices_Unserialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITextStoreACPServices_Unserialize_Stub __f, * const __frame = &__f;

    __frame->_This = (ITextStoreACPServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITextStoreACPServices_Unserialize_Stub );
    __frame->prop = 0;
    __frame->header = 0;
    __frame->stream = 0;
    __frame->loader = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[312]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prop,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[894],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->header,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[912],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->stream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[934],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->loader,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[952],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Unserialize(__frame->_This, __frame->prop, __frame->header, __frame->stream, __frame->loader);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITextStoreACPServices_Unserialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITextStoreACPServices_ForceLoadProperty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITextStoreACPServices_ForceLoadProperty_Proxy(
    ITextStoreACPServices* This,
    ITfProperty *prop)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITextStoreACPServices_ForceLoadProperty_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[970]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[970]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[330]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITextStoreACPServices_ForceLoadProperty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITextStoreACPServices_ForceLoadProperty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITextStoreACPServices * _This;
    HRESULT _RetVal;
    ITfProperty * prop;
};

static void __finally_ITextStoreACPServices_ForceLoadProperty_Stub( struct __frame_ITextStoreACPServices_ForceLoadProperty_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prop,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[970]);

}

void __RPC_STUB ITextStoreACPServices_ForceLoadProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITextStoreACPServices_ForceLoadProperty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITextStoreACPServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITextStoreACPServices_ForceLoadProperty_Stub );
    __frame->prop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[330]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prop,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[970],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ForceLoadProperty(__frame->_This, __frame->prop);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITextStoreACPServices_ForceLoadProperty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITextStoreACPServices_CreateRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITextStoreACPServices_CreateRange_Proxy(
    ITextStoreACPServices* This,
    LONG start,
    LONG end,
    ITfRangeACP **range)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITextStoreACPServices_CreateRange_Proxy );
    __frame->This = This;
    if (range) MIDL_memset( range, 0, sizeof( *range ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!range) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = start;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = end;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[336]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1006],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITextStoreACPServices_CreateRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1006], (void *)range );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITextStoreACPServices_CreateRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITextStoreACPServices * _This;
    HRESULT _RetVal;
    LONG start;
    LONG end;
    ITfRangeACP *_W0;
    ITfRangeACP ** range;
};

static void __finally_ITextStoreACPServices_CreateRange_Stub( struct __frame_ITextStoreACPServices_CreateRange_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1006]);

}

void __RPC_STUB ITextStoreACPServices_CreateRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITextStoreACPServices_CreateRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITextStoreACPServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITextStoreACPServices_CreateRange_Stub );
    __frame->range = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[336]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->start = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->end = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->range = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateRange(__frame->_This, __frame->start, __frame->end, __frame->range);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1006]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1006]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITextStoreACPServices_CreateRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITextStoreACPServices_FormatStringOffsetTable[] =
{
    294,  /* ITextStoreACPServices::Serialize */
    312,  /* ITextStoreACPServices::Unserialize */
    330,  /* ITextStoreACPServices::ForceLoadProperty */
    336,  /* ITextStoreACPServices::CreateRange */
};

static const CINTERFACE_PROXY_VTABLE(7) _ITextStoreACPServicesProxyVtbl =
{
    {
        &IID_ITextStoreACPServices,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITextStoreACPServices_Serialize_Proxy,
        ITextStoreACPServices_Unserialize_Proxy,
        ITextStoreACPServices_ForceLoadProperty_Proxy,
        ITextStoreACPServices_CreateRange_Proxy,
    }
};

static const MIDL_SERVER_INFO ITextStoreACPServices_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITextStoreACPServices_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITextStoreACPServices_table[] =
{
    ITextStoreACPServices_Serialize_Stub,
    ITextStoreACPServices_Unserialize_Stub,
    ITextStoreACPServices_ForceLoadProperty_Stub,
    ITextStoreACPServices_CreateRange_Stub
};

static const CInterfaceStubVtbl _ITextStoreACPServicesStubVtbl =
{
    {
        &IID_ITextStoreACPServices,
        &ITextStoreACPServices_ServerInfo,
        7,
        &ITextStoreACPServices_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContext interface
 */
static void __finally_ITfContext_RequestEditSession_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_RequestEditSession_Proxy(
    ITfContext* This,
    TfClientId tid,
    ITfEditSession *pes,
    DWORD dwFlags,
    HRESULT *phrSession)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_RequestEditSession_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!phrSession) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1010]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1010]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[346]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *phrSession = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_RequestEditSession_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1028], (void *)phrSession );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_RequestEditSession_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfClientId tid;
    ITfEditSession * pes;
    DWORD dwFlags;
    HRESULT _W0;
    HRESULT * phrSession;
};

static void __finally_ITfContext_RequestEditSession_Stub( struct __frame_ITfContext_RequestEditSession_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1010]);



}

void __RPC_STUB ITfContext_RequestEditSession_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_RequestEditSession_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_RequestEditSession_Stub );
    __frame->pes = 0;
    __frame->phrSession = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[346]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1010],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->phrSession = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RequestEditSession(__frame->_This, __frame->tid, __frame->pes, __frame->dwFlags, __frame->phrSession);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = *__frame->phrSession;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_RequestEditSession_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_InWriteSession_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_InWriteSession_Proxy(
    ITfContext* This,
    TfClientId tid,
    BOOL *pfWriteSession)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_InWriteSession_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pfWriteSession) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[360]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfWriteSession = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_InWriteSession_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1032], (void *)pfWriteSession );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_InWriteSession_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfClientId tid;
    BOOL _W0;
    BOOL * pfWriteSession;
};

static void __finally_ITfContext_InWriteSession_Stub( struct __frame_ITfContext_InWriteSession_Stub *__frame )
{


}

void __RPC_STUB ITfContext_InWriteSession_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_InWriteSession_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_InWriteSession_Stub );
    __frame->pfWriteSession = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[360]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);


        __frame->pfWriteSession = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->InWriteSession(__frame->_This, __frame->tid, __frame->pfWriteSession);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfWriteSession;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_InWriteSession_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetSelection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetSelection_Proxy(
    ITfContext* This,
    TfEditCookie ec,
    ULONG ulIndex,
    ULONG ulCount,
    TF_SELECTION *pSelection,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetSelection_Proxy );
    __frame->This = This;
    if (pSelection) MIDL_memset( pSelection, 0, sizeof( *pSelection ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pSelection) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulIndex;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pSelection,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1084],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetSelection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1102], (void *)pSelection );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1106], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetSelection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ULONG ulIndex;
    ULONG ulCount;
    TF_SELECTION * pSelection;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_ITfContext_GetSelection_Stub( struct __frame_ITfContext_GetSelection_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSelection,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1102]);


}

void __RPC_STUB ITfContext_GetSelection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetSelection_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetSelection_Stub );
    __frame->pSelection = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulIndex = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pSelection = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 12);
        memset(__frame->pSelection, 0, __frame->ulCount * 12);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSelection(__frame->_This, __frame->ec, __frame->ulIndex, __frame->ulCount, __frame->pSelection, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pSelection,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1084]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pSelection,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1084]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetSelection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_SetSelection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_SetSelection_Proxy(
    ITfContext* This,
    TfEditCookie ec,
    ULONG ulCount,
    const TF_SELECTION *pSelection)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_SetSelection_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pSelection) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSelection,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1128]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSelection,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1128]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[384]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_SetSelection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_SetSelection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ULONG ulCount;
    const TF_SELECTION * pSelection;
};

static void __finally_ITfContext_SetSelection_Stub( struct __frame_ITfContext_SetSelection_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSelection,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146]);

}

void __RPC_STUB ITfContext_SetSelection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_SetSelection_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_SetSelection_Stub );
    __frame->pSelection = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[384]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSelection,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1128],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetSelection(__frame->_This, __frame->ec, __frame->ulCount, __frame->pSelection);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_SetSelection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetStart_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetStart_Proxy(
    ITfContext* This,
    TfEditCookie ec,
    ITfRange **ppStart)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetStart_Proxy );
    __frame->This = This;
    if (ppStart) MIDL_memset( ppStart, 0, sizeof( *ppStart ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppStart) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[394]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppStart,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1168],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetStart_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1168], (void *)ppStart );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetStart_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange *_W0;
    ITfRange ** ppStart;
};

static void __finally_ITfContext_GetStart_Stub( struct __frame_ITfContext_GetStart_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppStart,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1168]);

}

void __RPC_STUB ITfContext_GetStart_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetStart_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetStart_Stub );
    __frame->ppStart = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[394]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        __frame->ppStart = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetStart(__frame->_This, __frame->ec, __frame->ppStart);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppStart,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1168]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppStart,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1168]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetStart_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetEnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetEnd_Proxy(
    ITfContext* This,
    TfEditCookie ec,
    ITfRange **ppEnd)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetEnd_Proxy );
    __frame->This = This;
    if (ppEnd) MIDL_memset( ppEnd, 0, sizeof( *ppEnd ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!ppEnd) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[402]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetEnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1190], (void *)ppEnd );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetEnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange *_W0;
    ITfRange ** ppEnd;
};

static void __finally_ITfContext_GetEnd_Stub( struct __frame_ITfContext_GetEnd_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnd,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190]);

}

void __RPC_STUB ITfContext_GetEnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetEnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetEnd_Stub );
    __frame->ppEnd = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[402]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        __frame->ppEnd = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetEnd(__frame->_This, __frame->ec, __frame->ppEnd);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetEnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetActiveView_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetActiveView_Proxy(
    ITfContext* This,
    ITfContextView **ppView)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetActiveView_Proxy );
    __frame->This = This;
    if (ppView) MIDL_memset( ppView, 0, sizeof( *ppView ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!ppView) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[410]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppView,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1212],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetActiveView_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1212], (void *)ppView );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetActiveView_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    ITfContextView *_W0;
    ITfContextView ** ppView;
};

static void __finally_ITfContext_GetActiveView_Stub( struct __frame_ITfContext_GetActiveView_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppView,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1212]);

}

void __RPC_STUB ITfContext_GetActiveView_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetActiveView_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetActiveView_Stub );
    __frame->ppView = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[410]);


        __frame->ppView = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetActiveView(__frame->_This, __frame->ppView);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppView,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1212]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppView,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1212]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetActiveView_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_EnumViews_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_EnumViews_Proxy(
    ITfContext* This,
    IEnumTfContextViews **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_EnumViews_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[416]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1234],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_EnumViews_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1234], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_EnumViews_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    IEnumTfContextViews *_W0;
    IEnumTfContextViews ** ppEnum;
};

static void __finally_ITfContext_EnumViews_Stub( struct __frame_ITfContext_EnumViews_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1234]);

}

void __RPC_STUB ITfContext_EnumViews_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_EnumViews_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_EnumViews_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[416]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumViews(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1234]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1234]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_EnumViews_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetStatus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetStatus_Proxy(
    ITfContext* This,
    TF_STATUS *pdcs)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetStatus_Proxy );
    __frame->This = This;
    if (pdcs) MIDL_memset( pdcs, 0, sizeof( *pdcs ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pdcs) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[422]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pdcs,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1238],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetStatus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1246], (void *)pdcs );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetStatus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TF_STATUS _W0;
    TF_STATUS * pdcs;
};

static void __finally_ITfContext_GetStatus_Stub( struct __frame_ITfContext_GetStatus_Stub *__frame )
{

}

void __RPC_STUB ITfContext_GetStatus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetStatus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetStatus_Stub );
    __frame->pdcs = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[422]);


        __frame->pdcs = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetStatus(__frame->_This, __frame->pdcs);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 20;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pdcs,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1238]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetStatus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetProperty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetProperty_Proxy(
    ITfContext* This,
    REFGUID guidProp,
    ITfProperty **ppProp)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetProperty_Proxy );
    __frame->This = This;
    if (ppProp) MIDL_memset( ppProp, 0, sizeof( *ppProp ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!guidProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1272],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetProperty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1272], (void *)ppProp );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetProperty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    REFGUID guidProp;
    ITfProperty *_W0;
    ITfProperty ** ppProp;
};

static void __finally_ITfContext_GetProperty_Stub( struct __frame_ITfContext_GetProperty_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1272]);

}

void __RPC_STUB ITfContext_GetProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetProperty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetProperty_Stub );
    __frame->guidProp = 0;
    __frame->ppProp = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        __frame->ppProp = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetProperty(__frame->_This, __frame->guidProp, __frame->ppProp);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1272]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1272]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetProperty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetAppProperty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetAppProperty_Proxy(
    ITfContext* This,
    REFGUID guidProp,
    ITfReadOnlyProperty **ppProp)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetAppProperty_Proxy );
    __frame->This = This;
    if (ppProp) MIDL_memset( ppProp, 0, sizeof( *ppProp ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!guidProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[438]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1298],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetAppProperty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1298], (void *)ppProp );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetAppProperty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    REFGUID guidProp;
    ITfReadOnlyProperty *_W0;
    ITfReadOnlyProperty ** ppProp;
};

static void __finally_ITfContext_GetAppProperty_Stub( struct __frame_ITfContext_GetAppProperty_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1298]);

}

void __RPC_STUB ITfContext_GetAppProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetAppProperty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetAppProperty_Stub );
    __frame->guidProp = 0;
    __frame->ppProp = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[438]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        __frame->ppProp = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetAppProperty(__frame->_This, __frame->guidProp, __frame->ppProp);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1298]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1298]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetAppProperty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_TrackProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_TrackProperties_Proxy(
    ITfContext* This,
    const GUID **prgProp,
    ULONG cProp,
    const GUID **prgAppProp,
    ULONG cAppProp,
    ITfReadOnlyProperty **ppProperty)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_TrackProperties_Proxy );
    __frame->This = This;
    if (ppProperty) MIDL_memset( ppProperty, 0, sizeof( *ppProperty ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!prgProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgAppProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppProperty) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cProp;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prgProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1320]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cAppProp;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prgAppProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1374]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cProp;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prgProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1320]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cProp;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cAppProp;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prgAppProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1374]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cAppProp;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[448]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppProperty,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1428],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_TrackProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1428], (void *)ppProperty );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_TrackProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    const GUID ** prgProp;
    ULONG cProp;
    const GUID ** prgAppProp;
    ULONG cAppProp;
    ITfReadOnlyProperty *_W0;
    ITfReadOnlyProperty ** ppProperty;
};

static void __finally_ITfContext_TrackProperties_Stub( struct __frame_ITfContext_TrackProperties_Stub *__frame )
{
    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cProp;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1320]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cAppProp;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgAppProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1374]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppProperty,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1428]);

}

void __RPC_STUB ITfContext_TrackProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_TrackProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_TrackProperties_Stub );
    __frame->prgProp = 0;
    __frame->prgAppProp = 0;
    __frame->ppProperty = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[448]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prgProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1320],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cProp = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prgAppProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1374],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cAppProp = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppProperty = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->TrackProperties(__frame->_This, __frame->prgProp, __frame->cProp, __frame->prgAppProp, __frame->cAppProp, __frame->ppProperty);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProperty,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1428]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProperty,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1428]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_TrackProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_EnumProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_EnumProperties_Proxy(
    ITfContext* This,
    IEnumTfProperties **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_EnumProperties_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[466]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1450],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_EnumProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1450], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_EnumProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    IEnumTfProperties *_W0;
    IEnumTfProperties ** ppEnum;
};

static void __finally_ITfContext_EnumProperties_Stub( struct __frame_ITfContext_EnumProperties_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1450]);

}

void __RPC_STUB ITfContext_EnumProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_EnumProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_EnumProperties_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[466]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumProperties(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1450]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1450]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_EnumProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetDocumentMgr_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetDocumentMgr_Proxy(
    ITfContext* This,
    ITfDocumentMgr **ppDm)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetDocumentMgr_Proxy );
    __frame->This = This;
    if (ppDm) MIDL_memset( ppDm, 0, sizeof( *ppDm ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        if (!ppDm) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[472]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDm,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1472],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetDocumentMgr_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1472], (void *)ppDm );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetDocumentMgr_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    ITfDocumentMgr *_W0;
    ITfDocumentMgr ** ppDm;
};

static void __finally_ITfContext_GetDocumentMgr_Stub( struct __frame_ITfContext_GetDocumentMgr_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDm,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1472]);

}

void __RPC_STUB ITfContext_GetDocumentMgr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetDocumentMgr_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetDocumentMgr_Stub );
    __frame->ppDm = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[472]);


        __frame->ppDm = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDocumentMgr(__frame->_This, __frame->ppDm);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDm,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1472]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDm,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1472]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetDocumentMgr_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_CreateRangeBackup_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_CreateRangeBackup_Proxy(
    ITfContext* This,
    TfEditCookie ec,
    ITfRange *pRange,
    ITfRangeBackup **ppBackup)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_CreateRangeBackup_Proxy );
    __frame->This = This;
    if (ppBackup) MIDL_memset( ppBackup, 0, sizeof( *ppBackup ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        if (!ppBackup) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1476]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1476]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[478]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppBackup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1512],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_CreateRangeBackup_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1512], (void *)ppBackup );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_CreateRangeBackup_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    ITfRangeBackup *_W0;
    ITfRangeBackup ** ppBackup;
};

static void __finally_ITfContext_CreateRangeBackup_Stub( struct __frame_ITfContext_CreateRangeBackup_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1476]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppBackup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1512]);

}

void __RPC_STUB ITfContext_CreateRangeBackup_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_CreateRangeBackup_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_CreateRangeBackup_Stub );
    __frame->pRange = 0;
    __frame->ppBackup = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[478]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1476],
            0);


        __frame->ppBackup = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateRangeBackup(__frame->_This, __frame->ec, __frame->pRange, __frame->ppBackup);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppBackup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1512]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppBackup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1512]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_CreateRangeBackup_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContext_FormatStringOffsetTable[] =
{
    346,  /* ITfContext::RequestEditSession */
    360,  /* ITfContext::InWriteSession */
    368,  /* ITfContext::GetSelection */
    384,  /* ITfContext::SetSelection */
    394,  /* ITfContext::GetStart */
    402,  /* ITfContext::GetEnd */
    410,  /* ITfContext::GetActiveView */
    416,  /* ITfContext::EnumViews */
    422,  /* ITfContext::GetStatus */
    428,  /* ITfContext::GetProperty */
    438,  /* ITfContext::GetAppProperty */
    448,  /* ITfContext::TrackProperties */
    466,  /* ITfContext::EnumProperties */
    472,  /* ITfContext::GetDocumentMgr */
    478,  /* ITfContext::CreateRangeBackup */
};

static const CINTERFACE_PROXY_VTABLE(18) _ITfContextProxyVtbl =
{
    {
        &IID_ITfContext,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContext_RequestEditSession_Proxy,
        ITfContext_InWriteSession_Proxy,
        ITfContext_GetSelection_Proxy,
        ITfContext_SetSelection_Proxy,
        ITfContext_GetStart_Proxy,
        ITfContext_GetEnd_Proxy,
        ITfContext_GetActiveView_Proxy,
        ITfContext_EnumViews_Proxy,
        ITfContext_GetStatus_Proxy,
        ITfContext_GetProperty_Proxy,
        ITfContext_GetAppProperty_Proxy,
        ITfContext_TrackProperties_Proxy,
        ITfContext_EnumProperties_Proxy,
        ITfContext_GetDocumentMgr_Proxy,
        ITfContext_CreateRangeBackup_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContext_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContext_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContext_table[] =
{
    ITfContext_RequestEditSession_Stub,
    ITfContext_InWriteSession_Stub,
    ITfContext_GetSelection_Stub,
    ITfContext_SetSelection_Stub,
    ITfContext_GetStart_Stub,
    ITfContext_GetEnd_Stub,
    ITfContext_GetActiveView_Stub,
    ITfContext_EnumViews_Stub,
    ITfContext_GetStatus_Stub,
    ITfContext_GetProperty_Stub,
    ITfContext_GetAppProperty_Stub,
    ITfContext_TrackProperties_Stub,
    ITfContext_EnumProperties_Stub,
    ITfContext_GetDocumentMgr_Stub,
    ITfContext_CreateRangeBackup_Stub
};

static const CInterfaceStubVtbl _ITfContextStubVtbl =
{
    {
        &IID_ITfContext,
        &ITfContext_ServerInfo,
        18,
        &ITfContext_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfSource interface
 */
static void __finally_ITfSource_AdviseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfSource_AdviseSink_Proxy(
    ITfSource* This,
    REFIID riid,
    IUnknown *punk,
    DWORD *pdwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfSource_AdviseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pdwCookie) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1520]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1520]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[490]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfSource_AdviseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1526], (void *)pdwCookie );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfSource_AdviseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfSource * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown * punk;
    DWORD _W0;
    DWORD * pdwCookie;
};

static void __finally_ITfSource_AdviseSink_Stub( struct __frame_ITfSource_AdviseSink_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->punk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1520]);


}

void __RPC_STUB ITfSource_AdviseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfSource_AdviseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfSource*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfSource_AdviseSink_Stub );
    __frame->riid = 0;
    __frame->punk = 0;
    __frame->pdwCookie = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[490]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->punk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1520],
            0);


        __frame->pdwCookie = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdviseSink(__frame->_This, __frame->riid, __frame->punk, __frame->pdwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwCookie;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfSource_AdviseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfSource_UnadviseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfSource_UnadviseSink_Proxy(
    ITfSource* This,
    DWORD dwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfSource_UnadviseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwCookie;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[504]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfSource_UnadviseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfSource_UnadviseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfSource * _This;
    HRESULT _RetVal;
    DWORD dwCookie;
};

static void __finally_ITfSource_UnadviseSink_Stub( struct __frame_ITfSource_UnadviseSink_Stub *__frame )
{

}

void __RPC_STUB ITfSource_UnadviseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfSource_UnadviseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfSource*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfSource_UnadviseSink_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[504]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnadviseSink(__frame->_This, __frame->dwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfSource_UnadviseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfSource_FormatStringOffsetTable[] =
{
    490,  /* ITfSource::AdviseSink */
    504,  /* ITfSource::UnadviseSink */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfSourceProxyVtbl =
{
    {
        &IID_ITfSource,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfSource_AdviseSink_Proxy,
        ITfSource_UnadviseSink_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfSource_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfSource_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfSource_table[] =
{
    ITfSource_AdviseSink_Stub,
    ITfSource_UnadviseSink_Stub
};

static const CInterfaceStubVtbl _ITfSourceStubVtbl =
{
    {
        &IID_ITfSource,
        &ITfSource_ServerInfo,
        5,
        &ITfSource_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfInputProcessorProfiles interface
 */
static void __finally_IEnumTfInputProcessorProfiles_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfInputProcessorProfiles_Clone_Proxy(
    IEnumTfInputProcessorProfiles* This,
    IEnumTfInputProcessorProfiles **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfInputProcessorProfiles_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[508]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1548],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfInputProcessorProfiles_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1548], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfInputProcessorProfiles_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfInputProcessorProfiles * _This;
    HRESULT _RetVal;
    IEnumTfInputProcessorProfiles *_W0;
    IEnumTfInputProcessorProfiles ** ppEnum;
};

static void __finally_IEnumTfInputProcessorProfiles_Clone_Stub( struct __frame_IEnumTfInputProcessorProfiles_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1548]);

}

void __RPC_STUB IEnumTfInputProcessorProfiles_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfInputProcessorProfiles_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfInputProcessorProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfInputProcessorProfiles_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[508]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1548]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1548]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfInputProcessorProfiles_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfInputProcessorProfiles_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfInputProcessorProfiles_Next_Proxy(
    IEnumTfInputProcessorProfiles* This,
    ULONG ulCount,
    TF_INPUTPROCESSORPROFILE *pProfile,
    ULONG *pcFetch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfInputProcessorProfiles_Next_Proxy );
    __frame->This = This;
    if (pProfile) MIDL_memset( pProfile, 0, sizeof( *pProfile ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[514]);

            NdrConformantVaryingArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1576],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetch = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfInputProcessorProfiles_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1594], (void *)pProfile );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1598], (void *)pcFetch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfInputProcessorProfiles_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfInputProcessorProfiles * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    TF_INPUTPROCESSORPROFILE * pProfile;
    ULONG _W0;
    ULONG * pcFetch;
};

static void __finally_IEnumTfInputProcessorProfiles_Next_Stub( struct __frame_IEnumTfInputProcessorProfiles_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProfile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1594]);


}

void __RPC_STUB IEnumTfInputProcessorProfiles_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfInputProcessorProfiles_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfInputProcessorProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfInputProcessorProfiles_Next_Stub );
    __frame->pProfile = 0;
    __frame->pcFetch = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[514]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pProfile = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 72);
        memset(__frame->pProfile, 0, __frame->ulCount * 72);
        __frame->pcFetch = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->pProfile, __frame->pcFetch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

        NdrConformantVaryingArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1576]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

        NdrConformantVaryingArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1576]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetch;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfInputProcessorProfiles_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfInputProcessorProfiles_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfInputProcessorProfiles_Reset_Proxy(
    IEnumTfInputProcessorProfiles* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfInputProcessorProfiles_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[526]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfInputProcessorProfiles_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfInputProcessorProfiles_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfInputProcessorProfiles * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfInputProcessorProfiles_Reset_Stub( struct __frame_IEnumTfInputProcessorProfiles_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfInputProcessorProfiles_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfInputProcessorProfiles_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfInputProcessorProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfInputProcessorProfiles_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[526]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfInputProcessorProfiles_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfInputProcessorProfiles_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfInputProcessorProfiles_Skip_Proxy(
    IEnumTfInputProcessorProfiles* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfInputProcessorProfiles_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[528]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfInputProcessorProfiles_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfInputProcessorProfiles_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfInputProcessorProfiles * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfInputProcessorProfiles_Skip_Stub( struct __frame_IEnumTfInputProcessorProfiles_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfInputProcessorProfiles_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfInputProcessorProfiles_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfInputProcessorProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfInputProcessorProfiles_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[528]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfInputProcessorProfiles_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfInputProcessorProfiles_FormatStringOffsetTable[] =
{
    508,  /* IEnumTfInputProcessorProfiles::Clone */
    514,  /* IEnumTfInputProcessorProfiles::Next */
    526,  /* IEnumTfInputProcessorProfiles::Reset */
    528,  /* IEnumTfInputProcessorProfiles::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfInputProcessorProfilesProxyVtbl =
{
    {
        &IID_IEnumTfInputProcessorProfiles,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfInputProcessorProfiles_Clone_Proxy,
        IEnumTfInputProcessorProfiles_Next_Proxy,
        IEnumTfInputProcessorProfiles_Reset_Proxy,
        IEnumTfInputProcessorProfiles_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfInputProcessorProfiles_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfInputProcessorProfiles_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfInputProcessorProfiles_table[] =
{
    IEnumTfInputProcessorProfiles_Clone_Stub,
    IEnumTfInputProcessorProfiles_Next_Stub,
    IEnumTfInputProcessorProfiles_Reset_Stub,
    IEnumTfInputProcessorProfiles_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfInputProcessorProfilesStubVtbl =
{
    {
        &IID_IEnumTfInputProcessorProfiles,
        &IEnumTfInputProcessorProfiles_ServerInfo,
        7,
        &IEnumTfInputProcessorProfiles_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfInputProcessorProfileMgr interface
 */
static void __finally_ITfInputProcessorProfileMgr_ActivateProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_ActivateProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    DWORD dwProfileType,
    LANGID langid,
    REFCLSID clsid,
    REFGUID guidProfile,
    HKL hkl,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_ActivateProfile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 70;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwProfileType;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HKL *)__frame->_StubMsg.Buffer = hkl;
            __frame->_StubMsg.Buffer += sizeof(HKL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[532]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_ActivateProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_ActivateProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    DWORD dwProfileType;
    LANGID langid;
    REFCLSID clsid;
    REFGUID guidProfile;
    HKL hkl;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileMgr_ActivateProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_ActivateProfile_Stub *__frame )
{






}

void __RPC_STUB ITfInputProcessorProfileMgr_ActivateProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_ActivateProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_ActivateProfile_Stub );
    __frame->clsid = 0;
    __frame->guidProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[532]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwProfileType = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HKL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hkl = *(HKL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HKL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ActivateProfile(__frame->_This, __frame->dwProfileType, __frame->langid, __frame->clsid, __frame->guidProfile, __frame->hkl, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_ActivateProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_DeactivateProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    DWORD dwProfileType,
    LANGID langid,
    REFCLSID clsid,
    REFGUID guidProfile,
    HKL hkl,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 70;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwProfileType;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HKL *)__frame->_StubMsg.Buffer = hkl;
            __frame->_StubMsg.Buffer += sizeof(HKL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[550]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_DeactivateProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    DWORD dwProfileType;
    LANGID langid;
    REFCLSID clsid;
    REFGUID guidProfile;
    HKL hkl;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_DeactivateProfile_Stub *__frame )
{






}

void __RPC_STUB ITfInputProcessorProfileMgr_DeactivateProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_DeactivateProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Stub );
    __frame->clsid = 0;
    __frame->guidProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[550]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwProfileType = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HKL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hkl = *(HKL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HKL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->DeactivateProfile(__frame->_This, __frame->dwProfileType, __frame->langid, __frame->clsid, __frame->guidProfile, __frame->hkl, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_GetProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_GetProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    DWORD dwProfileType,
    LANGID langid,
    REFCLSID clsid,
    REFGUID guidProfile,
    HKL hkl,
    TF_INPUTPROCESSORPROFILE *pProfile)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_GetProfile_Proxy );
    __frame->This = This;
    if (pProfile) MIDL_memset( pProfile, 0, sizeof( *pProfile ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 62;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwProfileType;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HKL *)__frame->_StubMsg.Buffer = hkl;
            __frame->_StubMsg.Buffer += sizeof(HKL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[568]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1552],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_GetProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1626], (void *)pProfile );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_GetProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    DWORD dwProfileType;
    LANGID langid;
    REFCLSID clsid;
    REFGUID guidProfile;
    HKL hkl;
    TF_INPUTPROCESSORPROFILE _W0;
    TF_INPUTPROCESSORPROFILE * pProfile;
};

static void __finally_ITfInputProcessorProfileMgr_GetProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_GetProfile_Stub *__frame )
{






}

void __RPC_STUB ITfInputProcessorProfileMgr_GetProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_GetProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_GetProfile_Stub );
    __frame->clsid = 0;
    __frame->guidProfile = 0;
    __frame->pProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[568]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwProfileType = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HKL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hkl = *(HKL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HKL);


        __frame->pProfile = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetProfile(__frame->_This, __frame->dwProfileType, __frame->langid, __frame->clsid, __frame->guidProfile, __frame->hkl, __frame->pProfile);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 84;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1552]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_GetProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_EnumProfiles_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_EnumProfiles_Proxy(
    ITfInputProcessorProfileMgr* This,
    LANGID langid,
    IEnumTfInputProcessorProfiles **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_EnumProfiles_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 6;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[588]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1648],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_EnumProfiles_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1648], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_EnumProfiles_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    LANGID langid;
    IEnumTfInputProcessorProfiles *_W0;
    IEnumTfInputProcessorProfiles ** ppEnum;
};

static void __finally_ITfInputProcessorProfileMgr_EnumProfiles_Stub( struct __frame_ITfInputProcessorProfileMgr_EnumProfiles_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1648]);

}

void __RPC_STUB ITfInputProcessorProfileMgr_EnumProfiles_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_EnumProfiles_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_EnumProfiles_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[588]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumProfiles(__frame->_This, __frame->langid, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1648]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1648]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_EnumProfiles_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_ReleaseInputProcessor_Proxy(
    ITfInputProcessorProfileMgr* This,
    REFCLSID rclsid,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!rclsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rclsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[596]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    REFCLSID rclsid;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub( struct __frame_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub *__frame )
{


}

void __RPC_STUB ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub );
    __frame->rclsid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[596]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rclsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseInputProcessor(__frame->_This, __frame->rclsid, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_RegisterProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_RegisterProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    REFCLSID rclsid,
    LANGID langid,
    REFGUID guidProfile,
    const WCHAR *pchDesc,
    ULONG cchDesc,
    const WCHAR *pchIconFile,
    ULONG cchFile,
    ULONG uIconIndex,
    HKL hklsubstitute,
    DWORD dwPreferredLayout,
    BOOL bEnabledByDefault,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_RegisterProfile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!rclsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pchDesc) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pchIconFile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 102;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cchDesc;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pchDesc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1664]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cchFile;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pchIconFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1678]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rclsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cchDesc;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pchDesc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1664]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cchDesc;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cchFile;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pchIconFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1678]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cchFile;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = uIconIndex;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HKL *)__frame->_StubMsg.Buffer = hklsubstitute;
            __frame->_StubMsg.Buffer += sizeof(HKL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwPreferredLayout;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bEnabledByDefault;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[604]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_RegisterProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_RegisterProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    REFCLSID rclsid;
    LANGID langid;
    REFGUID guidProfile;
    const WCHAR * pchDesc;
    ULONG cchDesc;
    const WCHAR * pchIconFile;
    ULONG cchFile;
    ULONG uIconIndex;
    HKL hklsubstitute;
    DWORD dwPreferredLayout;
    BOOL bEnabledByDefault;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileMgr_RegisterProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_RegisterProfile_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cchDesc;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pchDesc,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1664]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cchFile;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pchIconFile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1678]);







}

void __RPC_STUB ITfInputProcessorProfileMgr_RegisterProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_RegisterProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_RegisterProfile_Stub );
    __frame->rclsid = 0;
    __frame->guidProfile = 0;
    __frame->pchDesc = 0;
    __frame->pchIconFile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[604]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rclsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pchDesc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1664],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchDesc = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pchIconFile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1678],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchFile = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->uIconIndex = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HKL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hklsubstitute = *(HKL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HKL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwPreferredLayout = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bEnabledByDefault = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterProfile(__frame->_This, __frame->rclsid, __frame->langid, __frame->guidProfile, __frame->pchDesc, __frame->cchDesc, __frame->pchIconFile, __frame->cchFile, __frame->uIconIndex, __frame->hklsubstitute, __frame->dwPreferredLayout, __frame->bEnabledByDefault, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_RegisterProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_UnregisterProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    REFCLSID rclsid,
    LANGID langid,
    REFGUID guidProfile,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!rclsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 54;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rclsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[638]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_UnregisterProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    REFCLSID rclsid;
    LANGID langid;
    REFGUID guidProfile;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_UnregisterProfile_Stub *__frame )
{




}

void __RPC_STUB ITfInputProcessorProfileMgr_UnregisterProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_UnregisterProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Stub );
    __frame->rclsid = 0;
    __frame->guidProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[638]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rclsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnregisterProfile(__frame->_This, __frame->rclsid, __frame->langid, __frame->guidProfile, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_GetActiveProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    REFGUID catid,
    TF_INPUTPROCESSORPROFILE *pProfile)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Proxy );
    __frame->This = This;
    if (pProfile) MIDL_memset( pProfile, 0, sizeof( *pProfile ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!catid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)catid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[652]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1552],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1704], (void *)pProfile );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_GetActiveProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    REFGUID catid;
    TF_INPUTPROCESSORPROFILE _W0;
    TF_INPUTPROCESSORPROFILE * pProfile;
};

static void __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_GetActiveProfile_Stub *__frame )
{


}

void __RPC_STUB ITfInputProcessorProfileMgr_GetActiveProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_GetActiveProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Stub );
    __frame->catid = 0;
    __frame->pProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[652]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->catid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        __frame->pProfile = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetActiveProfile(__frame->_This, __frame->catid, __frame->pProfile);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 84;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1552]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfInputProcessorProfileMgr_FormatStringOffsetTable[] =
{
    532,  /* ITfInputProcessorProfileMgr::ActivateProfile */
    550,  /* ITfInputProcessorProfileMgr::DeactivateProfile */
    568,  /* ITfInputProcessorProfileMgr::GetProfile */
    588,  /* ITfInputProcessorProfileMgr::EnumProfiles */
    596,  /* ITfInputProcessorProfileMgr::ReleaseInputProcessor */
    604,  /* ITfInputProcessorProfileMgr::RegisterProfile */
    638,  /* ITfInputProcessorProfileMgr::UnregisterProfile */
    652,  /* ITfInputProcessorProfileMgr::GetActiveProfile */
};

static const CINTERFACE_PROXY_VTABLE(11) _ITfInputProcessorProfileMgrProxyVtbl =
{
    {
        &IID_ITfInputProcessorProfileMgr,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfInputProcessorProfileMgr_ActivateProfile_Proxy,
        ITfInputProcessorProfileMgr_DeactivateProfile_Proxy,
        ITfInputProcessorProfileMgr_GetProfile_Proxy,
        ITfInputProcessorProfileMgr_EnumProfiles_Proxy,
        ITfInputProcessorProfileMgr_ReleaseInputProcessor_Proxy,
        ITfInputProcessorProfileMgr_RegisterProfile_Proxy,
        ITfInputProcessorProfileMgr_UnregisterProfile_Proxy,
        ITfInputProcessorProfileMgr_GetActiveProfile_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfInputProcessorProfileMgr_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfInputProcessorProfileMgr_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfInputProcessorProfileMgr_table[] =
{
    ITfInputProcessorProfileMgr_ActivateProfile_Stub,
    ITfInputProcessorProfileMgr_DeactivateProfile_Stub,
    ITfInputProcessorProfileMgr_GetProfile_Stub,
    ITfInputProcessorProfileMgr_EnumProfiles_Stub,
    ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub,
    ITfInputProcessorProfileMgr_RegisterProfile_Stub,
    ITfInputProcessorProfileMgr_UnregisterProfile_Stub,
    ITfInputProcessorProfileMgr_GetActiveProfile_Stub
};

static const CInterfaceStubVtbl _ITfInputProcessorProfileMgrStubVtbl =
{
    {
        &IID_ITfInputProcessorProfileMgr,
        &ITfInputProcessorProfileMgr_ServerInfo,
        11,
        &ITfInputProcessorProfileMgr_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfDisplayAttributeInfo interface
 */
static void __finally_ITfDisplayAttributeInfo_GetGUID_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDisplayAttributeInfo_GetGUID_Proxy(
    ITfDisplayAttributeInfo* This,
    GUID *pguid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDisplayAttributeInfo_GetGUID_Proxy );
    __frame->This = This;
    if (pguid) MIDL_memset( pguid, 0, sizeof( *pguid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[662]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDisplayAttributeInfo_GetGUID_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1708], (void *)pguid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDisplayAttributeInfo_GetGUID_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * pguid;
};

static void __finally_ITfDisplayAttributeInfo_GetGUID_Stub( struct __frame_ITfDisplayAttributeInfo_GetGUID_Stub *__frame )
{

}

void __RPC_STUB ITfDisplayAttributeInfo_GetGUID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDisplayAttributeInfo_GetGUID_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDisplayAttributeInfo_GetGUID_Stub );
    __frame->pguid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[662]);


        __frame->pguid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetGUID(__frame->_This, __frame->pguid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDisplayAttributeInfo_GetGUID_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDisplayAttributeInfo_GetDescription_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDisplayAttributeInfo_GetDescription_Proxy(
    ITfDisplayAttributeInfo* This,
    BSTR *pbstrDesc)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDisplayAttributeInfo_GetDescription_Proxy );
    __frame->This = This;
    if (pbstrDesc) MIDL_memset( pbstrDesc, 0, sizeof( *pbstrDesc ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pbstrDesc) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[668]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pbstrDesc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDisplayAttributeInfo_GetDescription_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1712], (void *)pbstrDesc );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDisplayAttributeInfo_GetDescription_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    BSTR _W0;
    BSTR * pbstrDesc;
};

static void __finally_ITfDisplayAttributeInfo_GetDescription_Stub( struct __frame_ITfDisplayAttributeInfo_GetDescription_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pbstrDesc,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1712]);

}

void __RPC_STUB ITfDisplayAttributeInfo_GetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDisplayAttributeInfo_GetDescription_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDisplayAttributeInfo_GetDescription_Stub );
    __frame->pbstrDesc = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[668]);


        __frame->pbstrDesc = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDescription(__frame->_This, __frame->pbstrDesc);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrDesc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrDesc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDisplayAttributeInfo_GetDescription_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDisplayAttributeInfo_GetAttributeInfo_Proxy(
    ITfDisplayAttributeInfo* This,
    TF_DISPLAYATTRIBUTE *pda)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Proxy );
    __frame->This = This;
    if (pda) MIDL_memset( pda, 0, sizeof( *pda ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pda) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[674]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pda,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1756],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1780], (void *)pda );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDisplayAttributeInfo_GetAttributeInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    TF_DISPLAYATTRIBUTE _W0;
    TF_DISPLAYATTRIBUTE * pda;
};

static void __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Stub( struct __frame_ITfDisplayAttributeInfo_GetAttributeInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pda,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1780]);

}

void __RPC_STUB ITfDisplayAttributeInfo_GetAttributeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDisplayAttributeInfo_GetAttributeInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Stub );
    __frame->pda = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[674]);


        __frame->pda = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetAttributeInfo(__frame->_This, __frame->pda);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pda,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1756]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pda,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1756]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDisplayAttributeInfo_SetAttributeInfo_Proxy(
    ITfDisplayAttributeInfo* This,
    const TF_DISPLAYATTRIBUTE *pda)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pda) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pda,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1784]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pda,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1784]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[680]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDisplayAttributeInfo_SetAttributeInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    const TF_DISPLAYATTRIBUTE * pda;
};

static void __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Stub( struct __frame_ITfDisplayAttributeInfo_SetAttributeInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pda,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1808]);

}

void __RPC_STUB ITfDisplayAttributeInfo_SetAttributeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDisplayAttributeInfo_SetAttributeInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Stub );
    __frame->pda = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[680]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pda,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1784],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetAttributeInfo(__frame->_This, __frame->pda);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDisplayAttributeInfo_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDisplayAttributeInfo_Reset_Proxy(
    ITfDisplayAttributeInfo* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDisplayAttributeInfo_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[686]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDisplayAttributeInfo_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDisplayAttributeInfo_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
};

static void __finally_ITfDisplayAttributeInfo_Reset_Stub( struct __frame_ITfDisplayAttributeInfo_Reset_Stub *__frame )
{
}

void __RPC_STUB ITfDisplayAttributeInfo_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDisplayAttributeInfo_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDisplayAttributeInfo_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[686]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDisplayAttributeInfo_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfDisplayAttributeInfo_FormatStringOffsetTable[] =
{
    662,  /* ITfDisplayAttributeInfo::GetGUID */
    668,  /* ITfDisplayAttributeInfo::GetDescription */
    674,  /* ITfDisplayAttributeInfo::GetAttributeInfo */
    680,  /* ITfDisplayAttributeInfo::SetAttributeInfo */
    686,  /* ITfDisplayAttributeInfo::Reset */
};

static const CINTERFACE_PROXY_VTABLE(8) _ITfDisplayAttributeInfoProxyVtbl =
{
    {
        &IID_ITfDisplayAttributeInfo,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfDisplayAttributeInfo_GetGUID_Proxy,
        ITfDisplayAttributeInfo_GetDescription_Proxy,
        ITfDisplayAttributeInfo_GetAttributeInfo_Proxy,
        ITfDisplayAttributeInfo_SetAttributeInfo_Proxy,
        ITfDisplayAttributeInfo_Reset_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfDisplayAttributeInfo_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfDisplayAttributeInfo_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfDisplayAttributeInfo_table[] =
{
    ITfDisplayAttributeInfo_GetGUID_Stub,
    ITfDisplayAttributeInfo_GetDescription_Stub,
    ITfDisplayAttributeInfo_GetAttributeInfo_Stub,
    ITfDisplayAttributeInfo_SetAttributeInfo_Stub,
    ITfDisplayAttributeInfo_Reset_Stub
};

static const CInterfaceStubVtbl _ITfDisplayAttributeInfoStubVtbl =
{
    {
        &IID_ITfDisplayAttributeInfo,
        &ITfDisplayAttributeInfo_ServerInfo,
        8,
        &ITfDisplayAttributeInfo_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfDisplayAttributeInfo interface
 */
static void __finally_IEnumTfDisplayAttributeInfo_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDisplayAttributeInfo_Clone_Proxy(
    IEnumTfDisplayAttributeInfo* This,
    IEnumTfDisplayAttributeInfo **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDisplayAttributeInfo_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[688]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDisplayAttributeInfo_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1830], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDisplayAttributeInfo_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    IEnumTfDisplayAttributeInfo *_W0;
    IEnumTfDisplayAttributeInfo ** ppEnum;
};

static void __finally_IEnumTfDisplayAttributeInfo_Clone_Stub( struct __frame_IEnumTfDisplayAttributeInfo_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830]);

}

void __RPC_STUB IEnumTfDisplayAttributeInfo_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDisplayAttributeInfo_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDisplayAttributeInfo_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[688]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDisplayAttributeInfo_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDisplayAttributeInfo_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDisplayAttributeInfo_Next_Proxy(
    IEnumTfDisplayAttributeInfo* This,
    ULONG ulCount,
    ITfDisplayAttributeInfo **rgInfo,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDisplayAttributeInfo_Next_Proxy );
    __frame->This = This;
    if (rgInfo) MIDL_memset( rgInfo, 0, sizeof( *rgInfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rgInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[694]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1852],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDisplayAttributeInfo_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1870], (void *)rgInfo );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1874], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDisplayAttributeInfo_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    ITfDisplayAttributeInfo ** rgInfo;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumTfDisplayAttributeInfo_Next_Stub( struct __frame_IEnumTfDisplayAttributeInfo_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1870]);


}

void __RPC_STUB IEnumTfDisplayAttributeInfo_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDisplayAttributeInfo_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDisplayAttributeInfo_Next_Stub );
    __frame->rgInfo = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[694]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgInfo = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 4);
        memset(__frame->rgInfo, 0, __frame->ulCount * 4);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->rgInfo, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1852]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1852]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDisplayAttributeInfo_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDisplayAttributeInfo_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDisplayAttributeInfo_Reset_Proxy(
    IEnumTfDisplayAttributeInfo* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDisplayAttributeInfo_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[706]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDisplayAttributeInfo_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDisplayAttributeInfo_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfDisplayAttributeInfo_Reset_Stub( struct __frame_IEnumTfDisplayAttributeInfo_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfDisplayAttributeInfo_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDisplayAttributeInfo_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDisplayAttributeInfo_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[706]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDisplayAttributeInfo_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDisplayAttributeInfo_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDisplayAttributeInfo_Skip_Proxy(
    IEnumTfDisplayAttributeInfo* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDisplayAttributeInfo_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[708]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDisplayAttributeInfo_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDisplayAttributeInfo_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfDisplayAttributeInfo_Skip_Stub( struct __frame_IEnumTfDisplayAttributeInfo_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfDisplayAttributeInfo_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDisplayAttributeInfo_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDisplayAttributeInfo_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[708]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDisplayAttributeInfo_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfDisplayAttributeInfo_FormatStringOffsetTable[] =
{
    688,  /* IEnumTfDisplayAttributeInfo::Clone */
    694,  /* IEnumTfDisplayAttributeInfo::Next */
    706,  /* IEnumTfDisplayAttributeInfo::Reset */
    708,  /* IEnumTfDisplayAttributeInfo::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfDisplayAttributeInfoProxyVtbl =
{
    {
        &IID_IEnumTfDisplayAttributeInfo,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfDisplayAttributeInfo_Clone_Proxy,
        IEnumTfDisplayAttributeInfo_Next_Proxy,
        IEnumTfDisplayAttributeInfo_Reset_Proxy,
        IEnumTfDisplayAttributeInfo_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfDisplayAttributeInfo_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfDisplayAttributeInfo_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfDisplayAttributeInfo_table[] =
{
    IEnumTfDisplayAttributeInfo_Clone_Stub,
    IEnumTfDisplayAttributeInfo_Next_Stub,
    IEnumTfDisplayAttributeInfo_Reset_Stub,
    IEnumTfDisplayAttributeInfo_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfDisplayAttributeInfoStubVtbl =
{
    {
        &IID_IEnumTfDisplayAttributeInfo,
        &IEnumTfDisplayAttributeInfo_ServerInfo,
        7,
        &IEnumTfDisplayAttributeInfo_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfRanges interface
 */
static void __finally_IEnumTfRanges_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfRanges_Clone_Proxy(
    IEnumTfRanges* This,
    IEnumTfRanges **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfRanges_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[712]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfRanges_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1896], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfRanges_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfRanges * _This;
    HRESULT _RetVal;
    IEnumTfRanges *_W0;
    IEnumTfRanges ** ppEnum;
};

static void __finally_IEnumTfRanges_Clone_Stub( struct __frame_IEnumTfRanges_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896]);

}

void __RPC_STUB IEnumTfRanges_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfRanges_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfRanges*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfRanges_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[712]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfRanges_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfRanges_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfRanges_Next_Proxy(
    IEnumTfRanges* This,
    ULONG ulCount,
    ITfRange **ppRange,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfRanges_Next_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1918],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfRanges_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1936], (void *)ppRange );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1940], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfRanges_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfRanges * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    ITfRange ** ppRange;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumTfRanges_Next_Stub( struct __frame_IEnumTfRanges_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1936]);


}

void __RPC_STUB IEnumTfRanges_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfRanges_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfRanges*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfRanges_Next_Stub );
    __frame->ppRange = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppRange = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 4);
        memset(__frame->ppRange, 0, __frame->ulCount * 4);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->ppRange, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1918]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1918]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfRanges_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfRanges_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfRanges_Reset_Proxy(
    IEnumTfRanges* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfRanges_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[730]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfRanges_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfRanges_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfRanges * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfRanges_Reset_Stub( struct __frame_IEnumTfRanges_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfRanges_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfRanges_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfRanges*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfRanges_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[730]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfRanges_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfRanges_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfRanges_Skip_Proxy(
    IEnumTfRanges* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfRanges_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[732]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfRanges_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfRanges_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfRanges * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfRanges_Skip_Stub( struct __frame_IEnumTfRanges_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfRanges_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfRanges_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfRanges*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfRanges_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[732]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfRanges_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfRanges_FormatStringOffsetTable[] =
{
    712,  /* IEnumTfRanges::Clone */
    718,  /* IEnumTfRanges::Next */
    730,  /* IEnumTfRanges::Reset */
    732,  /* IEnumTfRanges::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfRangesProxyVtbl =
{
    {
        &IID_IEnumTfRanges,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfRanges_Clone_Proxy,
        IEnumTfRanges_Next_Proxy,
        IEnumTfRanges_Reset_Proxy,
        IEnumTfRanges_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfRanges_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfRanges_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfRanges_table[] =
{
    IEnumTfRanges_Clone_Stub,
    IEnumTfRanges_Next_Stub,
    IEnumTfRanges_Reset_Stub,
    IEnumTfRanges_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfRangesStubVtbl =
{
    {
        &IID_IEnumTfRanges,
        &IEnumTfRanges_ServerInfo,
        7,
        &IEnumTfRanges_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfEditRecord interface
 */
static void __finally_ITfEditRecord_GetSelectionStatus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfEditRecord_GetSelectionStatus_Proxy(
    ITfEditRecord* This,
    BOOL *changed)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfEditRecord_GetSelectionStatus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!changed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[736]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *changed = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfEditRecord_GetSelectionStatus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1944], (void *)changed );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfEditRecord_GetSelectionStatus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfEditRecord * _This;
    HRESULT _RetVal;
    BOOL _W0;
    BOOL * changed;
};

static void __finally_ITfEditRecord_GetSelectionStatus_Stub( struct __frame_ITfEditRecord_GetSelectionStatus_Stub *__frame )
{

}

void __RPC_STUB ITfEditRecord_GetSelectionStatus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfEditRecord_GetSelectionStatus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfEditRecord*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfEditRecord_GetSelectionStatus_Stub );
    __frame->changed = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[736]);


        __frame->changed = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSelectionStatus(__frame->_This, __frame->changed);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->changed;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfEditRecord_GetSelectionStatus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfEditRecord_GetTextAndPropertyUpdates_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfEditRecord_GetTextAndPropertyUpdates_Proxy(
    ITfEditRecord* This,
    DWORD flags,
    const GUID **props,
    ULONG count,
    IEnumTfRanges **ret)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfEditRecord_GetTextAndPropertyUpdates_Proxy );
    __frame->This = This;
    if (ret) MIDL_memset( ret, 0, sizeof( *ret ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!props) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)count;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)props,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1966]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = flags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)count;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)props,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1966]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[742]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ret,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2020],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfEditRecord_GetTextAndPropertyUpdates_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2020], (void *)ret );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfEditRecord_GetTextAndPropertyUpdates_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfEditRecord * _This;
    HRESULT _RetVal;
    DWORD flags;
    const GUID ** props;
    ULONG count;
    IEnumTfRanges *_W0;
    IEnumTfRanges ** ret;
};

static void __finally_ITfEditRecord_GetTextAndPropertyUpdates_Stub( struct __frame_ITfEditRecord_GetTextAndPropertyUpdates_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->props,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1966]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ret,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2020]);

}

void __RPC_STUB ITfEditRecord_GetTextAndPropertyUpdates_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfEditRecord_GetTextAndPropertyUpdates_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfEditRecord*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfEditRecord_GetTextAndPropertyUpdates_Stub );
    __frame->props = 0;
    __frame->ret = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[742]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->props,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1966],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ret = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetTextAndPropertyUpdates(__frame->_This, __frame->flags, __frame->props, __frame->count, __frame->ret);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2020]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2020]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfEditRecord_GetTextAndPropertyUpdates_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfEditRecord_FormatStringOffsetTable[] =
{
    736,  /* ITfEditRecord::GetSelectionStatus */
    742,  /* ITfEditRecord::GetTextAndPropertyUpdates */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfEditRecordProxyVtbl =
{
    {
        &IID_ITfEditRecord,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfEditRecord_GetSelectionStatus_Proxy,
        ITfEditRecord_GetTextAndPropertyUpdates_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfEditRecord_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfEditRecord_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfEditRecord_table[] =
{
    ITfEditRecord_GetSelectionStatus_Stub,
    ITfEditRecord_GetTextAndPropertyUpdates_Stub
};

static const CInterfaceStubVtbl _ITfEditRecordStubVtbl =
{
    {
        &IID_ITfEditRecord,
        &ITfEditRecord_ServerInfo,
        5,
        &ITfEditRecord_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfTextEditSink interface
 */
static void __finally_ITfTextEditSink_OnEndEdit_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfTextEditSink_OnEndEdit_Proxy(
    ITfTextEditSink* This,
    ITfContext *pic,
    TfEditCookie ecReadOnly,
    ITfEditRecord *pEditRecord)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfTextEditSink_OnEndEdit_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2024]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pEditRecord,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2042]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2024]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecReadOnly;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pEditRecord,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2042]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[756]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfTextEditSink_OnEndEdit_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfTextEditSink_OnEndEdit_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfTextEditSink * _This;
    HRESULT _RetVal;
    ITfContext * pic;
    TfEditCookie ecReadOnly;
    ITfEditRecord * pEditRecord;
};

static void __finally_ITfTextEditSink_OnEndEdit_Stub( struct __frame_ITfTextEditSink_OnEndEdit_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2024]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pEditRecord,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2042]);

}

void __RPC_STUB ITfTextEditSink_OnEndEdit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfTextEditSink_OnEndEdit_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfTextEditSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfTextEditSink_OnEndEdit_Stub );
    __frame->pic = 0;
    __frame->pEditRecord = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[756]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2024],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecReadOnly = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pEditRecord,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2042],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnEndEdit(__frame->_This, __frame->pic, __frame->ecReadOnly, __frame->pEditRecord);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfTextEditSink_OnEndEdit_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfTextEditSink_FormatStringOffsetTable[] =
{
    756,  /* ITfTextEditSink::OnEndEdit */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfTextEditSinkProxyVtbl =
{
    {
        &IID_ITfTextEditSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfTextEditSink_OnEndEdit_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfTextEditSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfTextEditSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfTextEditSink_table[] =
{
    ITfTextEditSink_OnEndEdit_Stub
};

static const CInterfaceStubVtbl _ITfTextEditSinkStubVtbl =
{
    {
        &IID_ITfTextEditSink,
        &ITfTextEditSink_ServerInfo,
        4,
        &ITfTextEditSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContextOwnerCompositionSink interface
 */
static void __finally_ITfContextOwnerCompositionSink_OnStartComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerCompositionSink_OnStartComposition_Proxy(
    ITfContextOwnerCompositionSink* This,
    ITfCompositionView *pComposition,
    BOOL *pfOk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerCompositionSink_OnStartComposition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pfOk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2060]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2060]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[768]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfOk = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerCompositionSink_OnStartComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2078], (void *)pfOk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerCompositionSink_OnStartComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerCompositionSink * _This;
    HRESULT _RetVal;
    ITfCompositionView * pComposition;
    BOOL _W0;
    BOOL * pfOk;
};

static void __finally_ITfContextOwnerCompositionSink_OnStartComposition_Stub( struct __frame_ITfContextOwnerCompositionSink_OnStartComposition_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2060]);


}

void __RPC_STUB ITfContextOwnerCompositionSink_OnStartComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerCompositionSink_OnStartComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerCompositionSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerCompositionSink_OnStartComposition_Stub );
    __frame->pComposition = 0;
    __frame->pfOk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[768]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2060],
            0);


        __frame->pfOk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnStartComposition(__frame->_This, __frame->pComposition, __frame->pfOk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfOk;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerCompositionSink_OnStartComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerCompositionSink_OnUpdateComposition_Proxy(
    ITfContextOwnerCompositionSink* This,
    ITfCompositionView *pComposition,
    ITfRange *pRangeNew)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2082]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2100]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2082]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2100]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[778]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerCompositionSink * _This;
    HRESULT _RetVal;
    ITfCompositionView * pComposition;
    ITfRange * pRangeNew;
};

static void __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub( struct __frame_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2082]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRangeNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2100]);

}

void __RPC_STUB ITfContextOwnerCompositionSink_OnUpdateComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerCompositionSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub );
    __frame->pComposition = 0;
    __frame->pRangeNew = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[778]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2082],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRangeNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2100],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnUpdateComposition(__frame->_This, __frame->pComposition, __frame->pRangeNew);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerCompositionSink_OnEndComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerCompositionSink_OnEndComposition_Proxy(
    ITfContextOwnerCompositionSink* This,
    ITfCompositionView *pComposition)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerCompositionSink_OnEndComposition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2118]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2118]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[788]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerCompositionSink_OnEndComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerCompositionSink_OnEndComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerCompositionSink * _This;
    HRESULT _RetVal;
    ITfCompositionView * pComposition;
};

static void __finally_ITfContextOwnerCompositionSink_OnEndComposition_Stub( struct __frame_ITfContextOwnerCompositionSink_OnEndComposition_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2118]);

}

void __RPC_STUB ITfContextOwnerCompositionSink_OnEndComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerCompositionSink_OnEndComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerCompositionSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerCompositionSink_OnEndComposition_Stub );
    __frame->pComposition = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[788]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2118],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnEndComposition(__frame->_This, __frame->pComposition);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerCompositionSink_OnEndComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContextOwnerCompositionSink_FormatStringOffsetTable[] =
{
    768,  /* ITfContextOwnerCompositionSink::OnStartComposition */
    778,  /* ITfContextOwnerCompositionSink::OnUpdateComposition */
    788,  /* ITfContextOwnerCompositionSink::OnEndComposition */
};

static const CINTERFACE_PROXY_VTABLE(6) _ITfContextOwnerCompositionSinkProxyVtbl =
{
    {
        &IID_ITfContextOwnerCompositionSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContextOwnerCompositionSink_OnStartComposition_Proxy,
        ITfContextOwnerCompositionSink_OnUpdateComposition_Proxy,
        ITfContextOwnerCompositionSink_OnEndComposition_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContextOwnerCompositionSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContextOwnerCompositionSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContextOwnerCompositionSink_table[] =
{
    ITfContextOwnerCompositionSink_OnStartComposition_Stub,
    ITfContextOwnerCompositionSink_OnUpdateComposition_Stub,
    ITfContextOwnerCompositionSink_OnEndComposition_Stub
};

static const CInterfaceStubVtbl _ITfContextOwnerCompositionSinkStubVtbl =
{
    {
        &IID_ITfContextOwnerCompositionSink,
        &ITfContextOwnerCompositionSink_ServerInfo,
        6,
        &ITfContextOwnerCompositionSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfActiveLanguageProfileNotifySink interface
 */
static void __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfActiveLanguageProfileNotifySink_OnActivated_Proxy(
    ITfActiveLanguageProfileNotifySink* This,
    REFCLSID clsid,
    REFGUID guidProfile,
    BOOL fActivated)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = fActivated;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[794]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfActiveLanguageProfileNotifySink_OnActivated_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfActiveLanguageProfileNotifySink * _This;
    HRESULT _RetVal;
    REFCLSID clsid;
    REFGUID guidProfile;
    BOOL fActivated;
};

static void __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Stub( struct __frame_ITfActiveLanguageProfileNotifySink_OnActivated_Stub *__frame )
{



}

void __RPC_STUB ITfActiveLanguageProfileNotifySink_OnActivated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfActiveLanguageProfileNotifySink_OnActivated_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfActiveLanguageProfileNotifySink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Stub );
    __frame->clsid = 0;
    __frame->guidProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[794]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->fActivated = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnActivated(__frame->_This, __frame->clsid, __frame->guidProfile, __frame->fActivated);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfActiveLanguageProfileNotifySink_FormatStringOffsetTable[] =
{
    794,  /* ITfActiveLanguageProfileNotifySink::OnActivated */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfActiveLanguageProfileNotifySinkProxyVtbl =
{
    {
        &IID_ITfActiveLanguageProfileNotifySink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfActiveLanguageProfileNotifySink_OnActivated_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfActiveLanguageProfileNotifySink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfActiveLanguageProfileNotifySink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfActiveLanguageProfileNotifySink_table[] =
{
    ITfActiveLanguageProfileNotifySink_OnActivated_Stub
};

static const CInterfaceStubVtbl _ITfActiveLanguageProfileNotifySinkStubVtbl =
{
    {
        &IID_ITfActiveLanguageProfileNotifySink,
        &ITfActiveLanguageProfileNotifySink_ServerInfo,
        4,
        &ITfActiveLanguageProfileNotifySink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfLanguageProfiles interface
 */
static void __finally_IEnumTfLanguageProfiles_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfLanguageProfiles_Clone_Proxy(
    IEnumTfLanguageProfiles* This,
    IEnumTfLanguageProfiles **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfLanguageProfiles_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[806]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2162],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfLanguageProfiles_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2162], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfLanguageProfiles_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfLanguageProfiles * _This;
    HRESULT _RetVal;
    IEnumTfLanguageProfiles *_W0;
    IEnumTfLanguageProfiles ** ppEnum;
};

static void __finally_IEnumTfLanguageProfiles_Clone_Stub( struct __frame_IEnumTfLanguageProfiles_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2162]);

}

void __RPC_STUB IEnumTfLanguageProfiles_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfLanguageProfiles_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfLanguageProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfLanguageProfiles_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[806]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2162]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2162]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfLanguageProfiles_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfLanguageProfiles_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfLanguageProfiles_Next_Proxy(
    IEnumTfLanguageProfiles* This,
    ULONG ulCount,
    TF_LANGUAGEPROFILE *pProfile,
    ULONG *pcFetch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfLanguageProfiles_Next_Proxy );
    __frame->This = This;
    if (pProfile) MIDL_memset( pProfile, 0, sizeof( *pProfile ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[812]);

            NdrConformantVaryingArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2186],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetch = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfLanguageProfiles_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2204], (void *)pProfile );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2208], (void *)pcFetch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfLanguageProfiles_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfLanguageProfiles * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    TF_LANGUAGEPROFILE * pProfile;
    ULONG _W0;
    ULONG * pcFetch;
};

static void __finally_IEnumTfLanguageProfiles_Next_Stub( struct __frame_IEnumTfLanguageProfiles_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProfile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2204]);


}

void __RPC_STUB IEnumTfLanguageProfiles_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfLanguageProfiles_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfLanguageProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfLanguageProfiles_Next_Stub );
    __frame->pProfile = 0;
    __frame->pcFetch = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[812]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pProfile = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 56);
        memset(__frame->pProfile, 0, __frame->ulCount * 56);
        __frame->pcFetch = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->pProfile, __frame->pcFetch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

        NdrConformantVaryingArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2186]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

        NdrConformantVaryingArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2186]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetch;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfLanguageProfiles_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfLanguageProfiles_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfLanguageProfiles_Reset_Proxy(
    IEnumTfLanguageProfiles* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfLanguageProfiles_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[824]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfLanguageProfiles_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfLanguageProfiles_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfLanguageProfiles * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfLanguageProfiles_Reset_Stub( struct __frame_IEnumTfLanguageProfiles_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfLanguageProfiles_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfLanguageProfiles_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfLanguageProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfLanguageProfiles_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[824]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfLanguageProfiles_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfLanguageProfiles_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfLanguageProfiles_Skip_Proxy(
    IEnumTfLanguageProfiles* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfLanguageProfiles_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[826]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfLanguageProfiles_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfLanguageProfiles_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfLanguageProfiles * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfLanguageProfiles_Skip_Stub( struct __frame_IEnumTfLanguageProfiles_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfLanguageProfiles_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfLanguageProfiles_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfLanguageProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfLanguageProfiles_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[826]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfLanguageProfiles_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfLanguageProfiles_FormatStringOffsetTable[] =
{
    806,  /* IEnumTfLanguageProfiles::Clone */
    812,  /* IEnumTfLanguageProfiles::Next */
    824,  /* IEnumTfLanguageProfiles::Reset */
    826,  /* IEnumTfLanguageProfiles::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfLanguageProfilesProxyVtbl =
{
    {
        &IID_IEnumTfLanguageProfiles,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfLanguageProfiles_Clone_Proxy,
        IEnumTfLanguageProfiles_Next_Proxy,
        IEnumTfLanguageProfiles_Reset_Proxy,
        IEnumTfLanguageProfiles_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfLanguageProfiles_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfLanguageProfiles_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfLanguageProfiles_table[] =
{
    IEnumTfLanguageProfiles_Clone_Stub,
    IEnumTfLanguageProfiles_Next_Stub,
    IEnumTfLanguageProfiles_Reset_Stub,
    IEnumTfLanguageProfiles_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfLanguageProfilesStubVtbl =
{
    {
        &IID_IEnumTfLanguageProfiles,
        &IEnumTfLanguageProfiles_ServerInfo,
        7,
        &IEnumTfLanguageProfiles_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfThreadMgrEventSink interface
 */
static void __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEventSink_OnInitDocumentMgr_Proxy(
    ITfThreadMgrEventSink* This,
    ITfDocumentMgr *pdim)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdim,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdim,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[830]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEventSink * _This;
    HRESULT _RetVal;
    ITfDocumentMgr * pdim;
};

static void __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub( struct __frame_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdim,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212]);

}

void __RPC_STUB ITfThreadMgrEventSink_OnInitDocumentMgr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub );
    __frame->pdim = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[830]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdim,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnInitDocumentMgr(__frame->_This, __frame->pdim);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEventSink_OnUninitDocumentMgr_Proxy(
    ITfThreadMgrEventSink* This,
    ITfDocumentMgr *pdim)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdim,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2230]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdim,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2230]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[836]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEventSink * _This;
    HRESULT _RetVal;
    ITfDocumentMgr * pdim;
};

static void __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub( struct __frame_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdim,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2230]);

}

void __RPC_STUB ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub );
    __frame->pdim = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[836]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdim,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2230],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnUninitDocumentMgr(__frame->_This, __frame->pdim);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgrEventSink_OnSetFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEventSink_OnSetFocus_Proxy(
    ITfThreadMgrEventSink* This,
    ITfDocumentMgr *pdimFocus,
    ITfDocumentMgr *pdimPrevFocus)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEventSink_OnSetFocus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdimFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2248]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdimPrevFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdimFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2248]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdimPrevFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[842]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEventSink_OnSetFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEventSink_OnSetFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEventSink * _This;
    HRESULT _RetVal;
    ITfDocumentMgr * pdimFocus;
    ITfDocumentMgr * pdimPrevFocus;
};

static void __finally_ITfThreadMgrEventSink_OnSetFocus_Stub( struct __frame_ITfThreadMgrEventSink_OnSetFocus_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdimFocus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2248]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdimPrevFocus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266]);

}

void __RPC_STUB ITfThreadMgrEventSink_OnSetFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEventSink_OnSetFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEventSink_OnSetFocus_Stub );
    __frame->pdimFocus = 0;
    __frame->pdimPrevFocus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[842]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdimFocus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2248],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdimPrevFocus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnSetFocus(__frame->_This, __frame->pdimFocus, __frame->pdimPrevFocus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEventSink_OnSetFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgrEventSink_OnPushContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEventSink_OnPushContext_Proxy(
    ITfThreadMgrEventSink* This,
    ITfContext *pic)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEventSink_OnPushContext_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2284]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2284]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[852]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEventSink_OnPushContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEventSink_OnPushContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEventSink * _This;
    HRESULT _RetVal;
    ITfContext * pic;
};

static void __finally_ITfThreadMgrEventSink_OnPushContext_Stub( struct __frame_ITfThreadMgrEventSink_OnPushContext_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2284]);

}

void __RPC_STUB ITfThreadMgrEventSink_OnPushContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEventSink_OnPushContext_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEventSink_OnPushContext_Stub );
    __frame->pic = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[852]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2284],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnPushContext(__frame->_This, __frame->pic);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEventSink_OnPushContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgrEventSink_OnPopContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEventSink_OnPopContext_Proxy(
    ITfThreadMgrEventSink* This,
    ITfContext *pic)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEventSink_OnPopContext_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2302]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2302]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[858]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEventSink_OnPopContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEventSink_OnPopContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEventSink * _This;
    HRESULT _RetVal;
    ITfContext * pic;
};

static void __finally_ITfThreadMgrEventSink_OnPopContext_Stub( struct __frame_ITfThreadMgrEventSink_OnPopContext_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2302]);

}

void __RPC_STUB ITfThreadMgrEventSink_OnPopContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEventSink_OnPopContext_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEventSink_OnPopContext_Stub );
    __frame->pic = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[858]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2302],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnPopContext(__frame->_This, __frame->pic);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEventSink_OnPopContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfThreadMgrEventSink_FormatStringOffsetTable[] =
{
    830,  /* ITfThreadMgrEventSink::OnInitDocumentMgr */
    836,  /* ITfThreadMgrEventSink::OnUninitDocumentMgr */
    842,  /* ITfThreadMgrEventSink::OnSetFocus */
    852,  /* ITfThreadMgrEventSink::OnPushContext */
    858,  /* ITfThreadMgrEventSink::OnPopContext */
};

static const CINTERFACE_PROXY_VTABLE(8) _ITfThreadMgrEventSinkProxyVtbl =
{
    {
        &IID_ITfThreadMgrEventSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfThreadMgrEventSink_OnInitDocumentMgr_Proxy,
        ITfThreadMgrEventSink_OnUninitDocumentMgr_Proxy,
        ITfThreadMgrEventSink_OnSetFocus_Proxy,
        ITfThreadMgrEventSink_OnPushContext_Proxy,
        ITfThreadMgrEventSink_OnPopContext_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfThreadMgrEventSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfThreadMgrEventSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfThreadMgrEventSink_table[] =
{
    ITfThreadMgrEventSink_OnInitDocumentMgr_Stub,
    ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub,
    ITfThreadMgrEventSink_OnSetFocus_Stub,
    ITfThreadMgrEventSink_OnPushContext_Stub,
    ITfThreadMgrEventSink_OnPopContext_Stub
};

static const CInterfaceStubVtbl _ITfThreadMgrEventSinkStubVtbl =
{
    {
        &IID_ITfThreadMgrEventSink,
        &ITfThreadMgrEventSink_ServerInfo,
        8,
        &ITfThreadMgrEventSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfLanguageProfileNotifySink interface
 */
static void __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfLanguageProfileNotifySink_OnLanguageChange_Proxy(
    ITfLanguageProfileNotifySink* This,
    LANGID langid,
    BOOL *pfAccept)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pfAccept) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 6;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[864]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfAccept = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2320], (void *)pfAccept );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfLanguageProfileNotifySink_OnLanguageChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfLanguageProfileNotifySink * _This;
    HRESULT _RetVal;
    LANGID langid;
    BOOL _W0;
    BOOL * pfAccept;
};

static void __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Stub( struct __frame_ITfLanguageProfileNotifySink_OnLanguageChange_Stub *__frame )
{


}

void __RPC_STUB ITfLanguageProfileNotifySink_OnLanguageChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfLanguageProfileNotifySink_OnLanguageChange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfLanguageProfileNotifySink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Stub );
    __frame->pfAccept = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[864]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);


        __frame->pfAccept = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnLanguageChange(__frame->_This, __frame->langid, __frame->pfAccept);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfAccept;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfLanguageProfileNotifySink_OnLanguageChanged_Proxy(
    ITfLanguageProfileNotifySink* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[872]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfLanguageProfileNotifySink * _This;
    HRESULT _RetVal;
};

static void __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub( struct __frame_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub *__frame )
{
}

void __RPC_STUB ITfLanguageProfileNotifySink_OnLanguageChanged_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfLanguageProfileNotifySink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[872]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnLanguageChanged(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfLanguageProfileNotifySink_FormatStringOffsetTable[] =
{
    864,  /* ITfLanguageProfileNotifySink::OnLanguageChange */
    872,  /* ITfLanguageProfileNotifySink::OnLanguageChanged */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfLanguageProfileNotifySinkProxyVtbl =
{
    {
        &IID_ITfLanguageProfileNotifySink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfLanguageProfileNotifySink_OnLanguageChange_Proxy,
        ITfLanguageProfileNotifySink_OnLanguageChanged_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfLanguageProfileNotifySink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfLanguageProfileNotifySink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfLanguageProfileNotifySink_table[] =
{
    ITfLanguageProfileNotifySink_OnLanguageChange_Stub,
    ITfLanguageProfileNotifySink_OnLanguageChanged_Stub
};

static const CInterfaceStubVtbl _ITfLanguageProfileNotifySinkStubVtbl =
{
    {
        &IID_ITfLanguageProfileNotifySink,
        &ITfLanguageProfileNotifySink_ServerInfo,
        5,
        &ITfLanguageProfileNotifySink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfEditSession interface
 */
static void __finally_ITfEditSession_DoEditSession_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfEditSession_DoEditSession_Proxy(
    ITfEditSession* This,
    TfEditCookie ec)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfEditSession_DoEditSession_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[874]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfEditSession_DoEditSession_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfEditSession_DoEditSession_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfEditSession * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
};

static void __finally_ITfEditSession_DoEditSession_Stub( struct __frame_ITfEditSession_DoEditSession_Stub *__frame )
{

}

void __RPC_STUB ITfEditSession_DoEditSession_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfEditSession_DoEditSession_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfEditSession*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfEditSession_DoEditSession_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[874]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->DoEditSession(__frame->_This, __frame->ec);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfEditSession_DoEditSession_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfEditSession_FormatStringOffsetTable[] =
{
    874,  /* ITfEditSession::DoEditSession */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfEditSessionProxyVtbl =
{
    {
        &IID_ITfEditSession,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfEditSession_DoEditSession_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfEditSession_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfEditSession_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfEditSession_table[] =
{
    ITfEditSession_DoEditSession_Stub
};

static const CInterfaceStubVtbl _ITfEditSessionStubVtbl =
{
    {
        &IID_ITfEditSession,
        &ITfEditSession_ServerInfo,
        4,
        &ITfEditSession_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfRange interface
 */
static void __finally_ITfRange_GetText_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_GetText_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    DWORD dwFlags,
    WCHAR *pchText,
    ULONG cchMax,
    ULONG *pcch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_GetText_Proxy );
    __frame->This = This;
    if (pchText) MIDL_memset( pchText, 0, sizeof( *pchText ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pchText) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cchMax;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[878]);

            NdrConformantVaryingArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pchText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2324],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcch = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_GetText_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)cchMax;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2338], (void *)pchText );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2342], (void *)pcch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_GetText_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    DWORD dwFlags;
    WCHAR * pchText;
    ULONG cchMax;
    ULONG _W0;
    ULONG * pcch;
};

static void __finally_ITfRange_GetText_Stub( struct __frame_ITfRange_GetText_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cchMax;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcch;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pchText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2338]);



}

void __RPC_STUB ITfRange_GetText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_GetText_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_GetText_Stub );
    __frame->pchText = 0;
    __frame->pcch = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[878]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchMax = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pchText = NdrAllocate(&__frame->_StubMsg, __frame->cchMax * 2);
        memset(__frame->pchText, 0, __frame->cchMax * 2);
        __frame->pcch = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetText(__frame->_This, __frame->ec, __frame->dwFlags, __frame->pchText, __frame->cchMax, __frame->pcch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cchMax;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcch;

        NdrConformantVaryingArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pchText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2324]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cchMax;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcch;

        NdrConformantVaryingArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pchText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2324]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcch;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_GetText_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_SetText_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_SetText_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    DWORD dwFlags,
    const WCHAR *pchText,
    LONG cch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_SetText_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cch;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pchText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2356]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cch;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pchText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2356]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cch;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[894]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_SetText_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_SetText_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    DWORD dwFlags;
    const WCHAR * pchText;
    LONG cch;
};

static void __finally_ITfRange_SetText_Stub( struct __frame_ITfRange_SetText_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cch;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pchText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2356]);


}

void __RPC_STUB ITfRange_SetText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_SetText_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_SetText_Stub );
    __frame->pchText = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[894]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pchText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2356],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cch = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetText(__frame->_This, __frame->ec, __frame->dwFlags, __frame->pchText, __frame->cch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_SetText_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_GetFormattedText_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_GetFormattedText_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    IDataObject **ppDataObject)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_GetFormattedText_Proxy );
    __frame->This = This;
    if (ppDataObject) MIDL_memset( ppDataObject, 0, sizeof( *ppDataObject ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppDataObject) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[906]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDataObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2378],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_GetFormattedText_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2378], (void *)ppDataObject );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_GetFormattedText_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    IDataObject *_W0;
    IDataObject ** ppDataObject;
};

static void __finally_ITfRange_GetFormattedText_Stub( struct __frame_ITfRange_GetFormattedText_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDataObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2378]);

}

void __RPC_STUB ITfRange_GetFormattedText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_GetFormattedText_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_GetFormattedText_Stub );
    __frame->ppDataObject = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[906]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        __frame->ppDataObject = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFormattedText(__frame->_This, __frame->ec, __frame->ppDataObject);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDataObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2378]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDataObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2378]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_GetFormattedText_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_GetEmbedded_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_GetEmbedded_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    REFGUID rguidService,
    REFIID riid,
    IUnknown **ppunk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_GetEmbedded_Proxy );
    __frame->This = This;
    if (ppunk) MIDL_memset( ppunk, 0, sizeof( *ppunk ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!rguidService) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppunk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguidService,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[914]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppunk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2396],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_GetEmbedded_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2396], (void *)ppunk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_GetEmbedded_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    REFGUID rguidService;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppunk;
};

static void __finally_ITfRange_GetEmbedded_Stub( struct __frame_ITfRange_GetEmbedded_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppunk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2396]);

}

void __RPC_STUB ITfRange_GetEmbedded_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_GetEmbedded_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_GetEmbedded_Stub );
    __frame->rguidService = 0;
    __frame->riid = 0;
    __frame->ppunk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[914]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguidService,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
            0);


        __frame->ppunk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetEmbedded(__frame->_This, __frame->ec, __frame->rguidService, __frame->riid, __frame->ppunk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppunk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2396]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppunk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2396]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_GetEmbedded_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_InsertEmbedded_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_InsertEmbedded_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    DWORD dwFlags,
    IDataObject *pDataObject)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_InsertEmbedded_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pDataObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2400]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pDataObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2400]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[930]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_InsertEmbedded_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_InsertEmbedded_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    DWORD dwFlags;
    IDataObject * pDataObject;
};

static void __finally_ITfRange_InsertEmbedded_Stub( struct __frame_ITfRange_InsertEmbedded_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pDataObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2400]);

}

void __RPC_STUB ITfRange_InsertEmbedded_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_InsertEmbedded_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_InsertEmbedded_Stub );
    __frame->pDataObject = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[930]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pDataObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2400],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->InsertEmbedded(__frame->_This, __frame->ec, __frame->dwFlags, __frame->pDataObject);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_InsertEmbedded_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftStart_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftStart_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    LONG cchReq,
    LONG *pcch,
    const TF_HALTCOND *pHalt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftStart_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pcch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pHalt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2456]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cchReq;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pHalt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2456]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[940]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcch = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftStart_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2418], (void *)pcch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftStart_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    LONG cchReq;
    LONG _W0;
    LONG * pcch;
    const TF_HALTCOND * pHalt;
};

static void __finally_ITfRange_ShiftStart_Stub( struct __frame_ITfRange_ShiftStart_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pHalt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2456]);

}

void __RPC_STUB ITfRange_ShiftStart_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftStart_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftStart_Stub );
    __frame->pcch = 0;
    __frame->pHalt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[940]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchReq = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pHalt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2456],
            0);


        __frame->pcch = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftStart(__frame->_This, __frame->ec, __frame->cchReq, __frame->pcch, __frame->pHalt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pcch;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftStart_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftEnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftEnd_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    LONG cchReq,
    LONG *pcch,
    const TF_HALTCOND *pHalt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftEnd_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pcch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pHalt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2480]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cchReq;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pHalt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2480]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[954]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcch = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftEnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2460], (void *)pcch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftEnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    LONG cchReq;
    LONG _W0;
    LONG * pcch;
    const TF_HALTCOND * pHalt;
};

static void __finally_ITfRange_ShiftEnd_Stub( struct __frame_ITfRange_ShiftEnd_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pHalt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2480]);

}

void __RPC_STUB ITfRange_ShiftEnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftEnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftEnd_Stub );
    __frame->pcch = 0;
    __frame->pHalt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[954]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchReq = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pHalt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2480],
            0);


        __frame->pcch = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftEnd(__frame->_This, __frame->ec, __frame->cchReq, __frame->pcch, __frame->pHalt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pcch;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftEnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftStartToRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftStartToRange_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pRange,
    TfAnchor aPos)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftStartToRange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2484]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2484]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[968]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftStartToRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftStartToRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    TfAnchor aPos;
};

static void __finally_ITfRange_ShiftStartToRange_Stub( struct __frame_ITfRange_ShiftStartToRange_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2484]);


}

void __RPC_STUB ITfRange_ShiftStartToRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftStartToRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftStartToRange_Stub );
    __frame->pRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[968]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2484],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftStartToRange(__frame->_This, __frame->ec, __frame->pRange, __frame->aPos);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftStartToRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftEndToRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftEndToRange_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pRange,
    TfAnchor aPos)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftEndToRange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2502]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2502]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[978]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftEndToRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftEndToRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    TfAnchor aPos;
};

static void __finally_ITfRange_ShiftEndToRange_Stub( struct __frame_ITfRange_ShiftEndToRange_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2502]);


}

void __RPC_STUB ITfRange_ShiftEndToRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftEndToRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftEndToRange_Stub );
    __frame->pRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[978]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2502],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftEndToRange(__frame->_This, __frame->ec, __frame->pRange, __frame->aPos);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftEndToRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftStartRegion_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftStartRegion_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    TfShiftDir dir,
    BOOL *pfNoRegion)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftStartRegion_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!pfNoRegion) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&dir,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[988]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfNoRegion = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftStartRegion_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2520], (void *)pfNoRegion );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftStartRegion_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    TfShiftDir dir;
    BOOL _W0;
    BOOL * pfNoRegion;
};

static void __finally_ITfRange_ShiftStartRegion_Stub( struct __frame_ITfRange_ShiftStartRegion_Stub *__frame )
{



}

void __RPC_STUB ITfRange_ShiftStartRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftStartRegion_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftStartRegion_Stub );
    __frame->pfNoRegion = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[988]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->dir,
            0x0d /* FC_ENUM16 */);


        __frame->pfNoRegion = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftStartRegion(__frame->_This, __frame->ec, __frame->dir, __frame->pfNoRegion);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfNoRegion;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftStartRegion_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftEndRegion_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftEndRegion_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    TfShiftDir dir,
    BOOL *pfNoRegion)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftEndRegion_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!pfNoRegion) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&dir,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[998]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfNoRegion = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftEndRegion_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2524], (void *)pfNoRegion );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftEndRegion_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    TfShiftDir dir;
    BOOL _W0;
    BOOL * pfNoRegion;
};

static void __finally_ITfRange_ShiftEndRegion_Stub( struct __frame_ITfRange_ShiftEndRegion_Stub *__frame )
{



}

void __RPC_STUB ITfRange_ShiftEndRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftEndRegion_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftEndRegion_Stub );
    __frame->pfNoRegion = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[998]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->dir,
            0x0d /* FC_ENUM16 */);


        __frame->pfNoRegion = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftEndRegion(__frame->_This, __frame->ec, __frame->dir, __frame->pfNoRegion);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfNoRegion;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftEndRegion_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_IsEmpty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_IsEmpty_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    BOOL *pfEmpty)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_IsEmpty_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!pfEmpty) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1008]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfEmpty = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_IsEmpty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2528], (void *)pfEmpty );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_IsEmpty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    BOOL _W0;
    BOOL * pfEmpty;
};

static void __finally_ITfRange_IsEmpty_Stub( struct __frame_ITfRange_IsEmpty_Stub *__frame )
{


}

void __RPC_STUB ITfRange_IsEmpty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_IsEmpty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_IsEmpty_Stub );
    __frame->pfEmpty = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1008]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        __frame->pfEmpty = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsEmpty(__frame->_This, __frame->ec, __frame->pfEmpty);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfEmpty;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_IsEmpty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_Collapse_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_Collapse_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    TfAnchor aPos)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_Collapse_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1016]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_Collapse_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_Collapse_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    TfAnchor aPos;
};

static void __finally_ITfRange_Collapse_Stub( struct __frame_ITfRange_Collapse_Stub *__frame )
{


}

void __RPC_STUB ITfRange_Collapse_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_Collapse_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_Collapse_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1016]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Collapse(__frame->_This, __frame->ec, __frame->aPos);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_Collapse_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_IsEqualStart_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_IsEqualStart_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pWith,
    TfAnchor aPos,
    BOOL *pfEqual)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_IsEqualStart_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        if (!pfEqual) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2532]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2532]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1022]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfEqual = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_IsEqualStart_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2550], (void *)pfEqual );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_IsEqualStart_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pWith;
    TfAnchor aPos;
    BOOL _W0;
    BOOL * pfEqual;
};

static void __finally_ITfRange_IsEqualStart_Stub( struct __frame_ITfRange_IsEqualStart_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pWith,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2532]);



}

void __RPC_STUB ITfRange_IsEqualStart_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_IsEqualStart_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_IsEqualStart_Stub );
    __frame->pWith = 0;
    __frame->pfEqual = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1022]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pWith,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2532],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        __frame->pfEqual = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsEqualStart(__frame->_This, __frame->ec, __frame->pWith, __frame->aPos, __frame->pfEqual);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfEqual;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_IsEqualStart_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_IsEqualEnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_IsEqualEnd_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pWith,
    TfAnchor aPos,
    BOOL *pfEqual)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_IsEqualEnd_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        if (!pfEqual) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2554]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2554]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1036]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfEqual = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_IsEqualEnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2572], (void *)pfEqual );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_IsEqualEnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pWith;
    TfAnchor aPos;
    BOOL _W0;
    BOOL * pfEqual;
};

static void __finally_ITfRange_IsEqualEnd_Stub( struct __frame_ITfRange_IsEqualEnd_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pWith,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2554]);



}

void __RPC_STUB ITfRange_IsEqualEnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_IsEqualEnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_IsEqualEnd_Stub );
    __frame->pWith = 0;
    __frame->pfEqual = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1036]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pWith,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2554],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        __frame->pfEqual = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsEqualEnd(__frame->_This, __frame->ec, __frame->pWith, __frame->aPos, __frame->pfEqual);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfEqual;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_IsEqualEnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_CompareStart_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_CompareStart_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pWith,
    TfAnchor aPos,
    LONG *plResult)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_CompareStart_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 18);
        if (!plResult) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2576]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2576]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1050]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *plResult = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_CompareStart_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2594], (void *)plResult );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_CompareStart_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pWith;
    TfAnchor aPos;
    LONG _W0;
    LONG * plResult;
};

static void __finally_ITfRange_CompareStart_Stub( struct __frame_ITfRange_CompareStart_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pWith,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2576]);



}

void __RPC_STUB ITfRange_CompareStart_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_CompareStart_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_CompareStart_Stub );
    __frame->pWith = 0;
    __frame->plResult = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1050]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pWith,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2576],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        __frame->plResult = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CompareStart(__frame->_This, __frame->ec, __frame->pWith, __frame->aPos, __frame->plResult);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->plResult;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_CompareStart_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_CompareEnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_CompareEnd_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pWith,
    TfAnchor aPos,
    LONG *plResult)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_CompareEnd_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 19);
        if (!plResult) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2598]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2598]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1064]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *plResult = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_CompareEnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2616], (void *)plResult );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_CompareEnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pWith;
    TfAnchor aPos;
    LONG _W0;
    LONG * plResult;
};

static void __finally_ITfRange_CompareEnd_Stub( struct __frame_ITfRange_CompareEnd_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pWith,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2598]);



}

void __RPC_STUB ITfRange_CompareEnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_CompareEnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_CompareEnd_Stub );
    __frame->pWith = 0;
    __frame->plResult = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1064]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pWith,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2598],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        __frame->plResult = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CompareEnd(__frame->_This, __frame->ec, __frame->pWith, __frame->aPos, __frame->plResult);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->plResult;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_CompareEnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_AdjustForInsert_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_AdjustForInsert_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ULONG cchInsert,
    BOOL *pfInsertOk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_AdjustForInsert_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 20);
        if (!pfInsertOk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cchInsert;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1078]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfInsertOk = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_AdjustForInsert_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2620], (void *)pfInsertOk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_AdjustForInsert_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ULONG cchInsert;
    BOOL _W0;
    BOOL * pfInsertOk;
};

static void __finally_ITfRange_AdjustForInsert_Stub( struct __frame_ITfRange_AdjustForInsert_Stub *__frame )
{



}

void __RPC_STUB ITfRange_AdjustForInsert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_AdjustForInsert_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_AdjustForInsert_Stub );
    __frame->pfInsertOk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1078]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchInsert = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pfInsertOk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdjustForInsert(__frame->_This, __frame->ec, __frame->cchInsert, __frame->pfInsertOk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfInsertOk;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_AdjustForInsert_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_GetGravity_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_GetGravity_Proxy(
    ITfRange* This,
    TfGravity *pgStart,
    TfGravity *pgEnd)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_GetGravity_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 21);
        if (!pgStart) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pgEnd) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1088]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pgStart,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2624],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pgEnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2628],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_GetGravity_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2624], (void *)pgStart );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2628], (void *)pgEnd );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_GetGravity_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfGravity _W0;
    TfGravity * pgStart;
    TfGravity _W1;
    TfGravity * pgEnd;
};

static void __finally_ITfRange_GetGravity_Stub( struct __frame_ITfRange_GetGravity_Stub *__frame )
{


}

void __RPC_STUB ITfRange_GetGravity_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_GetGravity_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_GetGravity_Stub );
    __frame->pgStart = 0;
    __frame->pgEnd = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1088]);


        __frame->pgStart = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pgEnd = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetGravity(__frame->_This, __frame->pgStart, __frame->pgEnd);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 20;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pgStart,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2624]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pgEnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2628]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_GetGravity_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_SetGravity_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_SetGravity_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    TfGravity gStart,
    TfGravity gEnd)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_SetGravity_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 22);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&gStart,
                0x0d /* FC_ENUM16 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&gEnd,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1098]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_SetGravity_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_SetGravity_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    TfGravity gStart;
    TfGravity gEnd;
};

static void __finally_ITfRange_SetGravity_Stub( struct __frame_ITfRange_SetGravity_Stub *__frame )
{



}

void __RPC_STUB ITfRange_SetGravity_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_SetGravity_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_SetGravity_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1098]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->gStart,
            0x0d /* FC_ENUM16 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->gEnd,
            0x0d /* FC_ENUM16 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetGravity(__frame->_This, __frame->ec, __frame->gStart, __frame->gEnd);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_SetGravity_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_Clone_Proxy(
    ITfRange* This,
    ITfRange **ppClone)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_Clone_Proxy );
    __frame->This = This;
    if (ppClone) MIDL_memset( ppClone, 0, sizeof( *ppClone ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 23);
        if (!ppClone) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1106]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppClone,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2650],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2650], (void *)ppClone );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    ITfRange *_W0;
    ITfRange ** ppClone;
};

static void __finally_ITfRange_Clone_Stub( struct __frame_ITfRange_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppClone,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2650]);

}

void __RPC_STUB ITfRange_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_Clone_Stub );
    __frame->ppClone = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1106]);


        __frame->ppClone = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppClone);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppClone,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2650]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppClone,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2650]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_GetContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_GetContext_Proxy(
    ITfRange* This,
    ITfContext **ppContext)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_GetContext_Proxy );
    __frame->This = This;
    if (ppContext) MIDL_memset( ppContext, 0, sizeof( *ppContext ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 24);
        if (!ppContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1112]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppContext,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2672],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_GetContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2672], (void *)ppContext );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_GetContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    ITfContext *_W0;
    ITfContext ** ppContext;
};

static void __finally_ITfRange_GetContext_Stub( struct __frame_ITfRange_GetContext_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppContext,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2672]);

}

void __RPC_STUB ITfRange_GetContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_GetContext_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_GetContext_Stub );
    __frame->ppContext = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1112]);


        __frame->ppContext = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetContext(__frame->_This, __frame->ppContext);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2672]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2672]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_GetContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfRange_FormatStringOffsetTable[] =
{
    878,  /* ITfRange::GetText */
    894,  /* ITfRange::SetText */
    906,  /* ITfRange::GetFormattedText */
    914,  /* ITfRange::GetEmbedded */
    930,  /* ITfRange::InsertEmbedded */
    940,  /* ITfRange::ShiftStart */
    954,  /* ITfRange::ShiftEnd */
    968,  /* ITfRange::ShiftStartToRange */
    978,  /* ITfRange::ShiftEndToRange */
    988,  /* ITfRange::ShiftStartRegion */
    998,  /* ITfRange::ShiftEndRegion */
    1008,  /* ITfRange::IsEmpty */
    1016,  /* ITfRange::Collapse */
    1022,  /* ITfRange::IsEqualStart */
    1036,  /* ITfRange::IsEqualEnd */
    1050,  /* ITfRange::CompareStart */
    1064,  /* ITfRange::CompareEnd */
    1078,  /* ITfRange::AdjustForInsert */
    1088,  /* ITfRange::GetGravity */
    1098,  /* ITfRange::SetGravity */
    1106,  /* ITfRange::Clone */
    1112,  /* ITfRange::GetContext */
};

static const CINTERFACE_PROXY_VTABLE(25) _ITfRangeProxyVtbl =
{
    {
        &IID_ITfRange,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfRange_GetText_Proxy,
        ITfRange_SetText_Proxy,
        ITfRange_GetFormattedText_Proxy,
        ITfRange_GetEmbedded_Proxy,
        ITfRange_InsertEmbedded_Proxy,
        ITfRange_ShiftStart_Proxy,
        ITfRange_ShiftEnd_Proxy,
        ITfRange_ShiftStartToRange_Proxy,
        ITfRange_ShiftEndToRange_Proxy,
        ITfRange_ShiftStartRegion_Proxy,
        ITfRange_ShiftEndRegion_Proxy,
        ITfRange_IsEmpty_Proxy,
        ITfRange_Collapse_Proxy,
        ITfRange_IsEqualStart_Proxy,
        ITfRange_IsEqualEnd_Proxy,
        ITfRange_CompareStart_Proxy,
        ITfRange_CompareEnd_Proxy,
        ITfRange_AdjustForInsert_Proxy,
        ITfRange_GetGravity_Proxy,
        ITfRange_SetGravity_Proxy,
        ITfRange_Clone_Proxy,
        ITfRange_GetContext_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfRange_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfRange_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfRange_table[] =
{
    ITfRange_GetText_Stub,
    ITfRange_SetText_Stub,
    ITfRange_GetFormattedText_Stub,
    ITfRange_GetEmbedded_Stub,
    ITfRange_InsertEmbedded_Stub,
    ITfRange_ShiftStart_Stub,
    ITfRange_ShiftEnd_Stub,
    ITfRange_ShiftStartToRange_Stub,
    ITfRange_ShiftEndToRange_Stub,
    ITfRange_ShiftStartRegion_Stub,
    ITfRange_ShiftEndRegion_Stub,
    ITfRange_IsEmpty_Stub,
    ITfRange_Collapse_Stub,
    ITfRange_IsEqualStart_Stub,
    ITfRange_IsEqualEnd_Stub,
    ITfRange_CompareStart_Stub,
    ITfRange_CompareEnd_Stub,
    ITfRange_AdjustForInsert_Stub,
    ITfRange_GetGravity_Stub,
    ITfRange_SetGravity_Stub,
    ITfRange_Clone_Stub,
    ITfRange_GetContext_Stub
};

static const CInterfaceStubVtbl _ITfRangeStubVtbl =
{
    {
        &IID_ITfRange,
        &ITfRange_ServerInfo,
        25,
        &ITfRange_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfRangeACP interface
 */
static void __finally_ITfRangeACP_GetExtent_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRangeACP_GetExtent_Proxy(
    ITfRangeACP* This,
    LONG *pacpAnchor,
    LONG *pcch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRangeACP_GetExtent_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 25);
        if (!pacpAnchor) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1118]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pacpAnchor = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcch = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRangeACP_GetExtent_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2676], (void *)pacpAnchor );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2680], (void *)pcch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRangeACP_GetExtent_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRangeACP * _This;
    HRESULT _RetVal;
    LONG _W0;
    LONG * pacpAnchor;
    LONG _W1;
    LONG * pcch;
};

static void __finally_ITfRangeACP_GetExtent_Stub( struct __frame_ITfRangeACP_GetExtent_Stub *__frame )
{


}

void __RPC_STUB ITfRangeACP_GetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRangeACP_GetExtent_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRangeACP*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRangeACP_GetExtent_Stub );
    __frame->pacpAnchor = 0;
    __frame->pcch = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1118]);


        __frame->pacpAnchor = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pcch = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetExtent(__frame->_This, __frame->pacpAnchor, __frame->pcch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pacpAnchor;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pcch;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRangeACP_GetExtent_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRangeACP_SetExtent_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRangeACP_SetExtent_Proxy(
    ITfRangeACP* This,
    LONG acpAnchor,
    LONG cch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRangeACP_SetExtent_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 26);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = acpAnchor;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cch;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1128]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRangeACP_SetExtent_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRangeACP_SetExtent_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRangeACP * _This;
    HRESULT _RetVal;
    LONG acpAnchor;
    LONG cch;
};

static void __finally_ITfRangeACP_SetExtent_Stub( struct __frame_ITfRangeACP_SetExtent_Stub *__frame )
{


}

void __RPC_STUB ITfRangeACP_SetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRangeACP_SetExtent_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRangeACP*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRangeACP_SetExtent_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1128]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->acpAnchor = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cch = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetExtent(__frame->_This, __frame->acpAnchor, __frame->cch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRangeACP_SetExtent_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfRangeACP_FormatStringOffsetTable[] =
{
    878,  /* ITfRange::GetText */
    894,  /* ITfRange::SetText */
    906,  /* ITfRange::GetFormattedText */
    914,  /* ITfRange::GetEmbedded */
    930,  /* ITfRange::InsertEmbedded */
    940,  /* ITfRange::ShiftStart */
    954,  /* ITfRange::ShiftEnd */
    968,  /* ITfRange::ShiftStartToRange */
    978,  /* ITfRange::ShiftEndToRange */
    988,  /* ITfRange::ShiftStartRegion */
    998,  /* ITfRange::ShiftEndRegion */
    1008,  /* ITfRange::IsEmpty */
    1016,  /* ITfRange::Collapse */
    1022,  /* ITfRange::IsEqualStart */
    1036,  /* ITfRange::IsEqualEnd */
    1050,  /* ITfRange::CompareStart */
    1064,  /* ITfRange::CompareEnd */
    1078,  /* ITfRange::AdjustForInsert */
    1088,  /* ITfRange::GetGravity */
    1098,  /* ITfRange::SetGravity */
    1106,  /* ITfRange::Clone */
    1112,  /* ITfRange::GetContext */
    1118,  /* ITfRangeACP::GetExtent */
    1128,  /* ITfRangeACP::SetExtent */
};

static const CINTERFACE_PROXY_VTABLE(27) _ITfRangeACPProxyVtbl =
{
    {
        &IID_ITfRangeACP,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfRange_GetText_Proxy,
        ITfRange_SetText_Proxy,
        ITfRange_GetFormattedText_Proxy,
        ITfRange_GetEmbedded_Proxy,
        ITfRange_InsertEmbedded_Proxy,
        ITfRange_ShiftStart_Proxy,
        ITfRange_ShiftEnd_Proxy,
        ITfRange_ShiftStartToRange_Proxy,
        ITfRange_ShiftEndToRange_Proxy,
        ITfRange_ShiftStartRegion_Proxy,
        ITfRange_ShiftEndRegion_Proxy,
        ITfRange_IsEmpty_Proxy,
        ITfRange_Collapse_Proxy,
        ITfRange_IsEqualStart_Proxy,
        ITfRange_IsEqualEnd_Proxy,
        ITfRange_CompareStart_Proxy,
        ITfRange_CompareEnd_Proxy,
        ITfRange_AdjustForInsert_Proxy,
        ITfRange_GetGravity_Proxy,
        ITfRange_SetGravity_Proxy,
        ITfRange_Clone_Proxy,
        ITfRange_GetContext_Proxy,
        ITfRangeACP_GetExtent_Proxy,
        ITfRangeACP_SetExtent_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfRangeACP_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfRangeACP_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfRangeACP_table[] =
{
    ITfRange_GetText_Stub,
    ITfRange_SetText_Stub,
    ITfRange_GetFormattedText_Stub,
    ITfRange_GetEmbedded_Stub,
    ITfRange_InsertEmbedded_Stub,
    ITfRange_ShiftStart_Stub,
    ITfRange_ShiftEnd_Stub,
    ITfRange_ShiftStartToRange_Stub,
    ITfRange_ShiftEndToRange_Stub,
    ITfRange_ShiftStartRegion_Stub,
    ITfRange_ShiftEndRegion_Stub,
    ITfRange_IsEmpty_Stub,
    ITfRange_Collapse_Stub,
    ITfRange_IsEqualStart_Stub,
    ITfRange_IsEqualEnd_Stub,
    ITfRange_CompareStart_Stub,
    ITfRange_CompareEnd_Stub,
    ITfRange_AdjustForInsert_Stub,
    ITfRange_GetGravity_Stub,
    ITfRange_SetGravity_Stub,
    ITfRange_Clone_Stub,
    ITfRange_GetContext_Stub,
    ITfRangeACP_GetExtent_Stub,
    ITfRangeACP_SetExtent_Stub
};

static const CInterfaceStubVtbl _ITfRangeACPStubVtbl =
{
    {
        &IID_ITfRangeACP,
        &ITfRangeACP_ServerInfo,
        27,
        &ITfRangeACP_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfInsertAtSelection interface
 */
static void __finally_ITfInsertAtSelection_InsertTextAtSelection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInsertAtSelection_InsertTextAtSelection_Proxy(
    ITfInsertAtSelection* This,
    TfEditCookie ec,
    DWORD dwFlags,
    const WCHAR *pchText,
    LONG cch,
    ITfRange **ppRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInsertAtSelection_InsertTextAtSelection_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pchText) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cch;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pchText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2684]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cch;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pchText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2684]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cch;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1134]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2716],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInsertAtSelection_InsertTextAtSelection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2716], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInsertAtSelection_InsertTextAtSelection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInsertAtSelection * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    DWORD dwFlags;
    const WCHAR * pchText;
    LONG cch;
    ITfRange *_W0;
    ITfRange ** ppRange;
};

static void __finally_ITfInsertAtSelection_InsertTextAtSelection_Stub( struct __frame_ITfInsertAtSelection_InsertTextAtSelection_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cch;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pchText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2684]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2716]);

}

void __RPC_STUB ITfInsertAtSelection_InsertTextAtSelection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInsertAtSelection_InsertTextAtSelection_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInsertAtSelection*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInsertAtSelection_InsertTextAtSelection_Stub );
    __frame->pchText = 0;
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1134]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pchText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2684],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cch = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->InsertTextAtSelection(__frame->_This, __frame->ec, __frame->dwFlags, __frame->pchText, __frame->cch, __frame->ppRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2716]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2716]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInsertAtSelection_InsertTextAtSelection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInsertAtSelection_InsertEmbeddedAtSelection_Proxy(
    ITfInsertAtSelection* This,
    TfEditCookie ec,
    DWORD dwFlags,
    IDataObject *pDataObject,
    ITfRange **ppRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pDataObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2720]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pDataObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2720]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1150]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2756],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2756], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInsertAtSelection * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    DWORD dwFlags;
    IDataObject * pDataObject;
    ITfRange *_W0;
    ITfRange ** ppRange;
};

static void __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub( struct __frame_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pDataObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2720]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2756]);

}

void __RPC_STUB ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInsertAtSelection*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub );
    __frame->pDataObject = 0;
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1150]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pDataObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2720],
            0);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->InsertEmbeddedAtSelection(__frame->_This, __frame->ec, __frame->dwFlags, __frame->pDataObject, __frame->ppRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2756]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2756]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfInsertAtSelection_FormatStringOffsetTable[] =
{
    1134,  /* ITfInsertAtSelection::InsertTextAtSelection */
    1150,  /* ITfInsertAtSelection::InsertEmbeddedAtSelection */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfInsertAtSelectionProxyVtbl =
{
    {
        &IID_ITfInsertAtSelection,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfInsertAtSelection_InsertTextAtSelection_Proxy,
        ITfInsertAtSelection_InsertEmbeddedAtSelection_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfInsertAtSelection_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfInsertAtSelection_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfInsertAtSelection_table[] =
{
    ITfInsertAtSelection_InsertTextAtSelection_Stub,
    ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub
};

static const CInterfaceStubVtbl _ITfInsertAtSelectionStubVtbl =
{
    {
        &IID_ITfInsertAtSelection,
        &ITfInsertAtSelection_ServerInfo,
        5,
        &ITfInsertAtSelection_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfPropertyStore interface
 */
static void __finally_ITfPropertyStore_GetType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_GetType_Proxy(
    ITfPropertyStore* This,
    GUID *pguid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_GetType_Proxy );
    __frame->This = This;
    if (pguid) MIDL_memset( pguid, 0, sizeof( *pguid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1164]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_GetType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2760], (void *)pguid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_GetType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * pguid;
};

static void __finally_ITfPropertyStore_GetType_Stub( struct __frame_ITfPropertyStore_GetType_Stub *__frame )
{

}

void __RPC_STUB ITfPropertyStore_GetType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_GetType_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_GetType_Stub );
    __frame->pguid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1164]);


        __frame->pguid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetType(__frame->_This, __frame->pguid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_GetType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_GetDataType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_GetDataType_Proxy(
    ITfPropertyStore* This,
    DWORD *pdwReserved)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_GetDataType_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pdwReserved) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1170]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwReserved = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_GetDataType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2764], (void *)pdwReserved );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_GetDataType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * pdwReserved;
};

static void __finally_ITfPropertyStore_GetDataType_Stub( struct __frame_ITfPropertyStore_GetDataType_Stub *__frame )
{

}

void __RPC_STUB ITfPropertyStore_GetDataType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_GetDataType_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_GetDataType_Stub );
    __frame->pdwReserved = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1170]);


        __frame->pdwReserved = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDataType(__frame->_This, __frame->pdwReserved);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwReserved;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_GetDataType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_GetData_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_GetData_Proxy(
    ITfPropertyStore* This,
    VARIANT *pvarValue)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_GetData_Proxy );
    __frame->This = This;
    if (pvarValue) MIDL_memset( pvarValue, 0, sizeof( *pvarValue ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pvarValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1176]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_GetData_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3846], (void *)pvarValue );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_GetData_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    VARIANT _W0;
    VARIANT * pvarValue;
};

static void __finally_ITfPropertyStore_GetData_Stub( struct __frame_ITfPropertyStore_GetData_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarValue,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3846]);

}

void __RPC_STUB ITfPropertyStore_GetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_GetData_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_GetData_Stub );
    __frame->pvarValue = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1176]);


        __frame->pvarValue = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetData(__frame->_This, __frame->pvarValue);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_GetData_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_OnTextUpdated_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_OnTextUpdated_Proxy(
    ITfPropertyStore* This,
    DWORD dwFlags,
    ITfRange *pRangeNew,
    BOOL *pfAccept)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_OnTextUpdated_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pfAccept) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1182]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfAccept = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_OnTextUpdated_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3868], (void *)pfAccept );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_OnTextUpdated_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    DWORD dwFlags;
    ITfRange * pRangeNew;
    BOOL _W0;
    BOOL * pfAccept;
};

static void __finally_ITfPropertyStore_OnTextUpdated_Stub( struct __frame_ITfPropertyStore_OnTextUpdated_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRangeNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850]);


}

void __RPC_STUB ITfPropertyStore_OnTextUpdated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_OnTextUpdated_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_OnTextUpdated_Stub );
    __frame->pRangeNew = 0;
    __frame->pfAccept = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1182]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRangeNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850],
            0);


        __frame->pfAccept = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnTextUpdated(__frame->_This, __frame->dwFlags, __frame->pRangeNew, __frame->pfAccept);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfAccept;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_OnTextUpdated_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_Shrink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_Shrink_Proxy(
    ITfPropertyStore* This,
    ITfRange *pRangeNew,
    BOOL *pfFree)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_Shrink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pfFree) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3872]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3872]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1194]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfFree = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_Shrink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3890], (void *)pfFree );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_Shrink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    ITfRange * pRangeNew;
    BOOL _W0;
    BOOL * pfFree;
};

static void __finally_ITfPropertyStore_Shrink_Stub( struct __frame_ITfPropertyStore_Shrink_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRangeNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3872]);


}

void __RPC_STUB ITfPropertyStore_Shrink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_Shrink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_Shrink_Stub );
    __frame->pRangeNew = 0;
    __frame->pfFree = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1194]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRangeNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3872],
            0);


        __frame->pfFree = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Shrink(__frame->_This, __frame->pRangeNew, __frame->pfFree);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfFree;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_Shrink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_Divide_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_Divide_Proxy(
    ITfPropertyStore* This,
    ITfRange *pRangeThis,
    ITfRange *pRangeNew,
    ITfPropertyStore **ppPropStore)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_Divide_Proxy );
    __frame->This = This;
    if (ppPropStore) MIDL_memset( ppPropStore, 0, sizeof( *ppPropStore ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!ppPropStore) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRangeThis,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3894]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3912]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRangeThis,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3894]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3912]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1204]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppPropStore,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3948],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_Divide_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3948], (void *)ppPropStore );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_Divide_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    ITfRange * pRangeThis;
    ITfRange * pRangeNew;
    ITfPropertyStore *_W0;
    ITfPropertyStore ** ppPropStore;
};

static void __finally_ITfPropertyStore_Divide_Stub( struct __frame_ITfPropertyStore_Divide_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRangeThis,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3894]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRangeNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3912]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppPropStore,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3948]);

}

void __RPC_STUB ITfPropertyStore_Divide_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_Divide_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_Divide_Stub );
    __frame->pRangeThis = 0;
    __frame->pRangeNew = 0;
    __frame->ppPropStore = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1204]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRangeThis,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3894],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRangeNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3912],
            0);


        __frame->ppPropStore = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Divide(__frame->_This, __frame->pRangeThis, __frame->pRangeNew, __frame->ppPropStore);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPropStore,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3948]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPropStore,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3948]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_Divide_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_Clone_Proxy(
    ITfPropertyStore* This,
    ITfPropertyStore **pPropStore)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_Clone_Proxy );
    __frame->This = This;
    if (pPropStore) MIDL_memset( pPropStore, 0, sizeof( *pPropStore ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pPropStore) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1218]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pPropStore,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3970],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3970], (void *)pPropStore );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    ITfPropertyStore *_W0;
    ITfPropertyStore ** pPropStore;
};

static void __finally_ITfPropertyStore_Clone_Stub( struct __frame_ITfPropertyStore_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPropStore,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3970]);

}

void __RPC_STUB ITfPropertyStore_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_Clone_Stub );
    __frame->pPropStore = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1218]);


        __frame->pPropStore = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->pPropStore);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pPropStore,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3970]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pPropStore,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3970]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_GetPropertyRangeCreator_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_GetPropertyRangeCreator_Proxy(
    ITfPropertyStore* This,
    CLSID *pclsid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_GetPropertyRangeCreator_Proxy );
    __frame->This = This;
    if (pclsid) MIDL_memset( pclsid, 0, sizeof( *pclsid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!pclsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1224]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pclsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_GetPropertyRangeCreator_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3974], (void *)pclsid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_GetPropertyRangeCreator_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    CLSID _W0;
    CLSID * pclsid;
};

static void __finally_ITfPropertyStore_GetPropertyRangeCreator_Stub( struct __frame_ITfPropertyStore_GetPropertyRangeCreator_Stub *__frame )
{

}

void __RPC_STUB ITfPropertyStore_GetPropertyRangeCreator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_GetPropertyRangeCreator_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_GetPropertyRangeCreator_Stub );
    __frame->pclsid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1224]);


        __frame->pclsid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetPropertyRangeCreator(__frame->_This, __frame->pclsid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pclsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_GetPropertyRangeCreator_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_Serialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_Serialize_Proxy(
    ITfPropertyStore* This,
    IStream *pStream,
    ULONG *pcb)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_Serialize_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pcb) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3978]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3978]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1230]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcb = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_Serialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3996], (void *)pcb );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_Serialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    IStream * pStream;
    ULONG _W0;
    ULONG * pcb;
};

static void __finally_ITfPropertyStore_Serialize_Stub( struct __frame_ITfPropertyStore_Serialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pStream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3978]);


}

void __RPC_STUB ITfPropertyStore_Serialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_Serialize_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_Serialize_Stub );
    __frame->pStream = 0;
    __frame->pcb = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1230]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pStream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3978],
            0);


        __frame->pcb = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Serialize(__frame->_This, __frame->pStream, __frame->pcb);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcb;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_Serialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfPropertyStore_FormatStringOffsetTable[] =
{
    1164,  /* ITfPropertyStore::GetType */
    1170,  /* ITfPropertyStore::GetDataType */
    1176,  /* ITfPropertyStore::GetData */
    1182,  /* ITfPropertyStore::OnTextUpdated */
    1194,  /* ITfPropertyStore::Shrink */
    1204,  /* ITfPropertyStore::Divide */
    1218,  /* ITfPropertyStore::Clone */
    1224,  /* ITfPropertyStore::GetPropertyRangeCreator */
    1230,  /* ITfPropertyStore::Serialize */
};

static const CINTERFACE_PROXY_VTABLE(12) _ITfPropertyStoreProxyVtbl =
{
    {
        &IID_ITfPropertyStore,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfPropertyStore_GetType_Proxy,
        ITfPropertyStore_GetDataType_Proxy,
        ITfPropertyStore_GetData_Proxy,
        ITfPropertyStore_OnTextUpdated_Proxy,
        ITfPropertyStore_Shrink_Proxy,
        ITfPropertyStore_Divide_Proxy,
        ITfPropertyStore_Clone_Proxy,
        ITfPropertyStore_GetPropertyRangeCreator_Proxy,
        ITfPropertyStore_Serialize_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfPropertyStore_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfPropertyStore_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfPropertyStore_table[] =
{
    ITfPropertyStore_GetType_Stub,
    ITfPropertyStore_GetDataType_Stub,
    ITfPropertyStore_GetData_Stub,
    ITfPropertyStore_OnTextUpdated_Stub,
    ITfPropertyStore_Shrink_Stub,
    ITfPropertyStore_Divide_Stub,
    ITfPropertyStore_Clone_Stub,
    ITfPropertyStore_GetPropertyRangeCreator_Stub,
    ITfPropertyStore_Serialize_Stub
};

static const CInterfaceStubVtbl _ITfPropertyStoreStubVtbl =
{
    {
        &IID_ITfPropertyStore,
        &ITfPropertyStore_ServerInfo,
        12,
        &ITfPropertyStore_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumITfCompositionView interface
 */
static void __finally_IEnumITfCompositionView_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumITfCompositionView_Clone_Proxy(
    IEnumITfCompositionView* This,
    IEnumITfCompositionView **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumITfCompositionView_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1240]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4018],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumITfCompositionView_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4018], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumITfCompositionView_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumITfCompositionView * _This;
    HRESULT _RetVal;
    IEnumITfCompositionView *_W0;
    IEnumITfCompositionView ** ppEnum;
};

static void __finally_IEnumITfCompositionView_Clone_Stub( struct __frame_IEnumITfCompositionView_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4018]);

}

void __RPC_STUB IEnumITfCompositionView_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumITfCompositionView_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumITfCompositionView_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1240]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4018]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4018]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumITfCompositionView_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumITfCompositionView_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumITfCompositionView_Next_Proxy(
    IEnumITfCompositionView* This,
    ULONG ulCount,
    ITfCompositionView **rgCompositionView,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumITfCompositionView_Next_Proxy );
    __frame->This = This;
    if (rgCompositionView) MIDL_memset( rgCompositionView, 0, sizeof( *rgCompositionView ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rgCompositionView) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1246]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgCompositionView,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4040],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumITfCompositionView_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4058], (void *)rgCompositionView );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4062], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumITfCompositionView_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumITfCompositionView * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    ITfCompositionView ** rgCompositionView;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumITfCompositionView_Next_Stub( struct __frame_IEnumITfCompositionView_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgCompositionView,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4058]);


}

void __RPC_STUB IEnumITfCompositionView_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumITfCompositionView_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumITfCompositionView_Next_Stub );
    __frame->rgCompositionView = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1246]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgCompositionView = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 4);
        memset(__frame->rgCompositionView, 0, __frame->ulCount * 4);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->rgCompositionView, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgCompositionView,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4040]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgCompositionView,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4040]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumITfCompositionView_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumITfCompositionView_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumITfCompositionView_Reset_Proxy(
    IEnumITfCompositionView* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumITfCompositionView_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1258]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumITfCompositionView_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumITfCompositionView_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumITfCompositionView * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumITfCompositionView_Reset_Stub( struct __frame_IEnumITfCompositionView_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumITfCompositionView_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumITfCompositionView_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumITfCompositionView_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1258]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumITfCompositionView_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumITfCompositionView_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumITfCompositionView_Skip_Proxy(
    IEnumITfCompositionView* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumITfCompositionView_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1260]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumITfCompositionView_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumITfCompositionView_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumITfCompositionView * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumITfCompositionView_Skip_Stub( struct __frame_IEnumITfCompositionView_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumITfCompositionView_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumITfCompositionView_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumITfCompositionView_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1260]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumITfCompositionView_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumITfCompositionView_FormatStringOffsetTable[] =
{
    1240,  /* IEnumITfCompositionView::Clone */
    1246,  /* IEnumITfCompositionView::Next */
    1258,  /* IEnumITfCompositionView::Reset */
    1260,  /* IEnumITfCompositionView::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumITfCompositionViewProxyVtbl =
{
    {
        &IID_IEnumITfCompositionView,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumITfCompositionView_Clone_Proxy,
        IEnumITfCompositionView_Next_Proxy,
        IEnumITfCompositionView_Reset_Proxy,
        IEnumITfCompositionView_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumITfCompositionView_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumITfCompositionView_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumITfCompositionView_table[] =
{
    IEnumITfCompositionView_Clone_Stub,
    IEnumITfCompositionView_Next_Stub,
    IEnumITfCompositionView_Reset_Stub,
    IEnumITfCompositionView_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumITfCompositionViewStubVtbl =
{
    {
        &IID_IEnumITfCompositionView,
        &IEnumITfCompositionView_ServerInfo,
        7,
        &IEnumITfCompositionView_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfComposition interface
 */
static void __finally_ITfComposition_GetRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfComposition_GetRange_Proxy(
    ITfComposition* This,
    ITfRange **ppRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfComposition_GetRange_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1264]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4084],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfComposition_GetRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4084], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfComposition_GetRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfComposition * _This;
    HRESULT _RetVal;
    ITfRange *_W0;
    ITfRange ** ppRange;
};

static void __finally_ITfComposition_GetRange_Stub( struct __frame_ITfComposition_GetRange_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4084]);

}

void __RPC_STUB ITfComposition_GetRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfComposition_GetRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfComposition_GetRange_Stub );
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1264]);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRange(__frame->_This, __frame->ppRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4084]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4084]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfComposition_GetRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfComposition_ShiftStart_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfComposition_ShiftStart_Proxy(
    ITfComposition* This,
    TfEditCookie ecWrite,
    ITfRange *pNewStart)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfComposition_ShiftStart_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pNewStart,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4088]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pNewStart,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4088]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1270]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfComposition_ShiftStart_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfComposition_ShiftStart_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
    ITfRange * pNewStart;
};

static void __finally_ITfComposition_ShiftStart_Stub( struct __frame_ITfComposition_ShiftStart_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pNewStart,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4088]);

}

void __RPC_STUB ITfComposition_ShiftStart_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfComposition_ShiftStart_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfComposition_ShiftStart_Stub );
    __frame->pNewStart = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1270]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pNewStart,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4088],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftStart(__frame->_This, __frame->ecWrite, __frame->pNewStart);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfComposition_ShiftStart_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfComposition_ShiftEnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfComposition_ShiftEnd_Proxy(
    ITfComposition* This,
    TfEditCookie ecWrite,
    ITfRange *pNewEnd)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfComposition_ShiftEnd_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pNewEnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4106]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pNewEnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4106]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1278]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfComposition_ShiftEnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfComposition_ShiftEnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
    ITfRange * pNewEnd;
};

static void __finally_ITfComposition_ShiftEnd_Stub( struct __frame_ITfComposition_ShiftEnd_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pNewEnd,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4106]);

}

void __RPC_STUB ITfComposition_ShiftEnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfComposition_ShiftEnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfComposition_ShiftEnd_Stub );
    __frame->pNewEnd = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1278]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pNewEnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4106],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftEnd(__frame->_This, __frame->ecWrite, __frame->pNewEnd);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfComposition_ShiftEnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfComposition_EndComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfComposition_EndComposition_Proxy(
    ITfComposition* This,
    TfEditCookie ecWrite)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfComposition_EndComposition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1286]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfComposition_EndComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfComposition_EndComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
};

static void __finally_ITfComposition_EndComposition_Stub( struct __frame_ITfComposition_EndComposition_Stub *__frame )
{

}

void __RPC_STUB ITfComposition_EndComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfComposition_EndComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfComposition_EndComposition_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1286]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EndComposition(__frame->_This, __frame->ecWrite);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfComposition_EndComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfComposition_FormatStringOffsetTable[] =
{
    1264,  /* ITfComposition::GetRange */
    1270,  /* ITfComposition::ShiftStart */
    1278,  /* ITfComposition::ShiftEnd */
    1286,  /* ITfComposition::EndComposition */
};

static const CINTERFACE_PROXY_VTABLE(7) _ITfCompositionProxyVtbl =
{
    {
        &IID_ITfComposition,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfComposition_GetRange_Proxy,
        ITfComposition_ShiftStart_Proxy,
        ITfComposition_ShiftEnd_Proxy,
        ITfComposition_EndComposition_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfComposition_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfComposition_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfComposition_table[] =
{
    ITfComposition_GetRange_Stub,
    ITfComposition_ShiftStart_Stub,
    ITfComposition_ShiftEnd_Stub,
    ITfComposition_EndComposition_Stub
};

static const CInterfaceStubVtbl _ITfCompositionStubVtbl =
{
    {
        &IID_ITfComposition,
        &ITfComposition_ServerInfo,
        7,
        &ITfComposition_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfCompositionSink interface
 */
static void __finally_ITfCompositionSink_OnCompositionTerminated_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompositionSink_OnCompositionTerminated_Proxy(
    ITfCompositionSink* This,
    TfEditCookie ecWrite,
    ITfComposition *pComposition)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompositionSink_OnCompositionTerminated_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1290]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompositionSink_OnCompositionTerminated_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompositionSink_OnCompositionTerminated_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompositionSink * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
    ITfComposition * pComposition;
};

static void __finally_ITfCompositionSink_OnCompositionTerminated_Stub( struct __frame_ITfCompositionSink_OnCompositionTerminated_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124]);

}

void __RPC_STUB ITfCompositionSink_OnCompositionTerminated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompositionSink_OnCompositionTerminated_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompositionSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompositionSink_OnCompositionTerminated_Stub );
    __frame->pComposition = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1290]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnCompositionTerminated(__frame->_This, __frame->ecWrite, __frame->pComposition);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompositionSink_OnCompositionTerminated_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfCompositionSink_FormatStringOffsetTable[] =
{
    1290,  /* ITfCompositionSink::OnCompositionTerminated */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfCompositionSinkProxyVtbl =
{
    {
        &IID_ITfCompositionSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfCompositionSink_OnCompositionTerminated_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfCompositionSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfCompositionSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfCompositionSink_table[] =
{
    ITfCompositionSink_OnCompositionTerminated_Stub
};

static const CInterfaceStubVtbl _ITfCompositionSinkStubVtbl =
{
    {
        &IID_ITfCompositionSink,
        &ITfCompositionSink_ServerInfo,
        4,
        &ITfCompositionSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContextComposition interface
 */
static void __finally_ITfContextComposition_StartComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextComposition_StartComposition_Proxy(
    ITfContextComposition* This,
    TfEditCookie ecWrite,
    ITfRange *pCompositionRange,
    ITfCompositionSink *pSink,
    ITfComposition **ppComposition)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextComposition_StartComposition_Proxy );
    __frame->This = This;
    if (ppComposition) MIDL_memset( ppComposition, 0, sizeof( *ppComposition ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppComposition) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pCompositionRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4142]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4160]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCompositionRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4142]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4160]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1298]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4196],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextComposition_StartComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4196], (void *)ppComposition );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextComposition_StartComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
    ITfRange * pCompositionRange;
    ITfCompositionSink * pSink;
    ITfComposition *_W0;
    ITfComposition ** ppComposition;
};

static void __finally_ITfContextComposition_StartComposition_Stub( struct __frame_ITfContextComposition_StartComposition_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pCompositionRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4142]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4160]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4196]);

}

void __RPC_STUB ITfContextComposition_StartComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextComposition_StartComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextComposition_StartComposition_Stub );
    __frame->pCompositionRange = 0;
    __frame->pSink = 0;
    __frame->ppComposition = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1298]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCompositionRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4142],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4160],
            0);


        __frame->ppComposition = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->StartComposition(__frame->_This, __frame->ecWrite, __frame->pCompositionRange, __frame->pSink, __frame->ppComposition);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4196]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4196]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextComposition_StartComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextComposition_EnumCompositions_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextComposition_EnumCompositions_Proxy(
    ITfContextComposition* This,
    IEnumITfCompositionView **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextComposition_EnumCompositions_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1314]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4218],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextComposition_EnumCompositions_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4218], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextComposition_EnumCompositions_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextComposition * _This;
    HRESULT _RetVal;
    IEnumITfCompositionView *_W0;
    IEnumITfCompositionView ** ppEnum;
};

static void __finally_ITfContextComposition_EnumCompositions_Stub( struct __frame_ITfContextComposition_EnumCompositions_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4218]);

}

void __RPC_STUB ITfContextComposition_EnumCompositions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextComposition_EnumCompositions_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextComposition_EnumCompositions_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1314]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumCompositions(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4218]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4218]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextComposition_EnumCompositions_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextComposition_FindComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextComposition_FindComposition_Proxy(
    ITfContextComposition* This,
    TfEditCookie ecRead,
    ITfRange *pTestRange,
    IEnumITfCompositionView **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextComposition_FindComposition_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pTestRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4222]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecRead;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pTestRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4222]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1320]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4258],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextComposition_FindComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4258], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextComposition_FindComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecRead;
    ITfRange * pTestRange;
    IEnumITfCompositionView *_W0;
    IEnumITfCompositionView ** ppEnum;
};

static void __finally_ITfContextComposition_FindComposition_Stub( struct __frame_ITfContextComposition_FindComposition_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pTestRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4222]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4258]);

}

void __RPC_STUB ITfContextComposition_FindComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextComposition_FindComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextComposition_FindComposition_Stub );
    __frame->pTestRange = 0;
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1320]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecRead = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pTestRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4222],
            0);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->FindComposition(__frame->_This, __frame->ecRead, __frame->pTestRange, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4258]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4258]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextComposition_FindComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextComposition_TakeOwnership_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextComposition_TakeOwnership_Proxy(
    ITfContextComposition* This,
    TfEditCookie ecWrite,
    ITfCompositionView *pComposition,
    ITfCompositionSink *pSink,
    ITfComposition **ppComposition)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextComposition_TakeOwnership_Proxy );
    __frame->This = This;
    if (ppComposition) MIDL_memset( ppComposition, 0, sizeof( *ppComposition ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppComposition) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4262]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4280]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4262]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4280]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1332]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4316],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextComposition_TakeOwnership_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4316], (void *)ppComposition );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextComposition_TakeOwnership_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
    ITfCompositionView * pComposition;
    ITfCompositionSink * pSink;
    ITfComposition *_W0;
    ITfComposition ** ppComposition;
};

static void __finally_ITfContextComposition_TakeOwnership_Stub( struct __frame_ITfContextComposition_TakeOwnership_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4262]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4280]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4316]);

}

void __RPC_STUB ITfContextComposition_TakeOwnership_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextComposition_TakeOwnership_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextComposition_TakeOwnership_Stub );
    __frame->pComposition = 0;
    __frame->pSink = 0;
    __frame->ppComposition = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1332]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4262],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4280],
            0);


        __frame->ppComposition = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->TakeOwnership(__frame->_This, __frame->ecWrite, __frame->pComposition, __frame->pSink, __frame->ppComposition);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4316]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4316]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextComposition_TakeOwnership_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContextComposition_FormatStringOffsetTable[] =
{
    1298,  /* ITfContextComposition::StartComposition */
    1314,  /* ITfContextComposition::EnumCompositions */
    1320,  /* ITfContextComposition::FindComposition */
    1332,  /* ITfContextComposition::TakeOwnership */
};

static const CINTERFACE_PROXY_VTABLE(7) _ITfContextCompositionProxyVtbl =
{
    {
        &IID_ITfContextComposition,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContextComposition_StartComposition_Proxy,
        ITfContextComposition_EnumCompositions_Proxy,
        ITfContextComposition_FindComposition_Proxy,
        ITfContextComposition_TakeOwnership_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContextComposition_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContextComposition_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContextComposition_table[] =
{
    ITfContextComposition_StartComposition_Stub,
    ITfContextComposition_EnumCompositions_Stub,
    ITfContextComposition_FindComposition_Stub,
    ITfContextComposition_TakeOwnership_Stub
};

static const CInterfaceStubVtbl _ITfContextCompositionStubVtbl =
{
    {
        &IID_ITfContextComposition,
        &ITfContextComposition_ServerInfo,
        7,
        &ITfContextComposition_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContextOwnerCompositionServices interface
 */
static void __finally_ITfContextOwnerCompositionServices_TerminateComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerCompositionServices_TerminateComposition_Proxy(
    ITfContextOwnerCompositionServices* This,
    ITfCompositionView *pComposition)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerCompositionServices_TerminateComposition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4320]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4320]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1348]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerCompositionServices_TerminateComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerCompositionServices_TerminateComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerCompositionServices * _This;
    HRESULT _RetVal;
    ITfCompositionView * pComposition;
};

static void __finally_ITfContextOwnerCompositionServices_TerminateComposition_Stub( struct __frame_ITfContextOwnerCompositionServices_TerminateComposition_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4320]);

}

void __RPC_STUB ITfContextOwnerCompositionServices_TerminateComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerCompositionServices_TerminateComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerCompositionServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerCompositionServices_TerminateComposition_Stub );
    __frame->pComposition = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1348]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4320],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->TerminateComposition(__frame->_This, __frame->pComposition);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerCompositionServices_TerminateComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContextOwnerCompositionServices_FormatStringOffsetTable[] =
{
    1298,  /* ITfContextComposition::StartComposition */
    1314,  /* ITfContextComposition::EnumCompositions */
    1320,  /* ITfContextComposition::FindComposition */
    1332,  /* ITfContextComposition::TakeOwnership */
    1348,  /* ITfContextOwnerCompositionServices::TerminateComposition */
};

static const CINTERFACE_PROXY_VTABLE(8) _ITfContextOwnerCompositionServicesProxyVtbl =
{
    {
        &IID_ITfContextOwnerCompositionServices,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContextComposition_StartComposition_Proxy,
        ITfContextComposition_EnumCompositions_Proxy,
        ITfContextComposition_FindComposition_Proxy,
        ITfContextComposition_TakeOwnership_Proxy,
        ITfContextOwnerCompositionServices_TerminateComposition_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContextOwnerCompositionServices_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContextOwnerCompositionServices_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContextOwnerCompositionServices_table[] =
{
    ITfContextComposition_StartComposition_Stub,
    ITfContextComposition_EnumCompositions_Stub,
    ITfContextComposition_FindComposition_Stub,
    ITfContextComposition_TakeOwnership_Stub,
    ITfContextOwnerCompositionServices_TerminateComposition_Stub
};

static const CInterfaceStubVtbl _ITfContextOwnerCompositionServicesStubVtbl =
{
    {
        &IID_ITfContextOwnerCompositionServices,
        &ITfContextOwnerCompositionServices_ServerInfo,
        8,
        &ITfContextOwnerCompositionServices_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfPersistentPropertyLoaderACP interface
 */
static void __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPersistentPropertyLoaderACP_LoadProperty_Proxy(
    ITfPersistentPropertyLoaderACP* This,
    const TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
    IStream **ppStream)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Proxy );
    __frame->This = This;
    if (ppStream) MIDL_memset( ppStream, 0, sizeof( *ppStream ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pHdr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppStream) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 52;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pHdr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4338]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1354]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4378],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4378], (void *)ppStream );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPersistentPropertyLoaderACP_LoadProperty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPersistentPropertyLoaderACP * _This;
    HRESULT _RetVal;
    const TF_PERSISTENT_PROPERTY_HEADER_ACP * pHdr;
    IStream *_W0;
    IStream ** ppStream;
};

static void __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Stub( struct __frame_ITfPersistentPropertyLoaderACP_LoadProperty_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppStream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4378]);

}

void __RPC_STUB ITfPersistentPropertyLoaderACP_LoadProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPersistentPropertyLoaderACP_LoadProperty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPersistentPropertyLoaderACP*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Stub );
    __frame->pHdr = 0;
    __frame->ppStream = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1354]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pHdr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4338],
            0);


        __frame->ppStream = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->LoadProperty(__frame->_This, __frame->pHdr, __frame->ppStream);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppStream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4378]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppStream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4378]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfPersistentPropertyLoaderACP_FormatStringOffsetTable[] =
{
    1354,  /* ITfPersistentPropertyLoaderACP::LoadProperty */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfPersistentPropertyLoaderACPProxyVtbl =
{
    {
        &IID_ITfPersistentPropertyLoaderACP,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfPersistentPropertyLoaderACP_LoadProperty_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfPersistentPropertyLoaderACP_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfPersistentPropertyLoaderACP_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfPersistentPropertyLoaderACP_table[] =
{
    ITfPersistentPropertyLoaderACP_LoadProperty_Stub
};

static const CInterfaceStubVtbl _ITfPersistentPropertyLoaderACPStubVtbl =
{
    {
        &IID_ITfPersistentPropertyLoaderACP,
        &ITfPersistentPropertyLoaderACP_ServerInfo,
        4,
        &ITfPersistentPropertyLoaderACP_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContextOwnerServices interface
 */
static void __finally_ITfContextOwnerServices_OnLayoutChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_OnLayoutChange_Proxy(
    ITfContextOwnerServices* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_OnLayoutChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1364]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_OnLayoutChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_OnLayoutChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
};

static void __finally_ITfContextOwnerServices_OnLayoutChange_Stub( struct __frame_ITfContextOwnerServices_OnLayoutChange_Stub *__frame )
{
}

void __RPC_STUB ITfContextOwnerServices_OnLayoutChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_OnLayoutChange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_OnLayoutChange_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1364]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnLayoutChange(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_OnLayoutChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_OnStatusChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_OnStatusChange_Proxy(
    ITfContextOwnerServices* This,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_OnStatusChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1366]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_OnStatusChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_OnStatusChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    DWORD dwFlags;
};

static void __finally_ITfContextOwnerServices_OnStatusChange_Stub( struct __frame_ITfContextOwnerServices_OnStatusChange_Stub *__frame )
{

}

void __RPC_STUB ITfContextOwnerServices_OnStatusChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_OnStatusChange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_OnStatusChange_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1366]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnStatusChange(__frame->_This, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_OnStatusChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_OnAttributeChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_OnAttributeChange_Proxy(
    ITfContextOwnerServices* This,
    REFGUID rguidAttribute)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_OnAttributeChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!rguidAttribute) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguidAttribute,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1370]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_OnAttributeChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_OnAttributeChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    REFGUID rguidAttribute;
};

static void __finally_ITfContextOwnerServices_OnAttributeChange_Stub( struct __frame_ITfContextOwnerServices_OnAttributeChange_Stub *__frame )
{

}

void __RPC_STUB ITfContextOwnerServices_OnAttributeChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_OnAttributeChange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_OnAttributeChange_Stub );
    __frame->rguidAttribute = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1370]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguidAttribute,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnAttributeChange(__frame->_This, __frame->rguidAttribute);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_OnAttributeChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_Serialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_Serialize_Proxy(
    ITfContextOwnerServices* This,
    ITfProperty *pProp,
    ITfRange *pRange,
    TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
    IStream *pStream)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_Serialize_Proxy );
    __frame->This = This;
    if (pHdr) MIDL_memset( pHdr, 0, sizeof( *pHdr ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pHdr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4386]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4404]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4386]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4404]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1376]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pHdr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_Serialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4422], (void *)pHdr );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_Serialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    ITfProperty * pProp;
    ITfRange * pRange;
    TF_PERSISTENT_PROPERTY_HEADER_ACP _W0;
    TF_PERSISTENT_PROPERTY_HEADER_ACP * pHdr;
    IStream * pStream;
};

static void __finally_ITfContextOwnerServices_Serialize_Stub( struct __frame_ITfContextOwnerServices_Serialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4386]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4404]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pStream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426]);

}

void __RPC_STUB ITfContextOwnerServices_Serialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_Serialize_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_Serialize_Stub );
    __frame->pProp = 0;
    __frame->pRange = 0;
    __frame->pHdr = 0;
    __frame->pStream = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1376]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4386],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4404],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pStream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426],
            0);


        __frame->pHdr = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Serialize(__frame->_This, __frame->pProp, __frame->pRange, __frame->pHdr, __frame->pStream);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 60;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pHdr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_Serialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_Unserialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_Unserialize_Proxy(
    ITfContextOwnerServices* This,
    ITfProperty *pProp,
    const TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
    IStream *pStream,
    ITfPersistentPropertyLoaderACP *pLoader)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_Unserialize_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pHdr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 52;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4444]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4484]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pLoader,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4502]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4444]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pHdr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4462]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4484]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pLoader,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4502]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1394]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_Unserialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_Unserialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    ITfProperty * pProp;
    const TF_PERSISTENT_PROPERTY_HEADER_ACP * pHdr;
    IStream * pStream;
    ITfPersistentPropertyLoaderACP * pLoader;
};

static void __finally_ITfContextOwnerServices_Unserialize_Stub( struct __frame_ITfContextOwnerServices_Unserialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4444]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pStream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4484]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pLoader,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4502]);

}

void __RPC_STUB ITfContextOwnerServices_Unserialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_Unserialize_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_Unserialize_Stub );
    __frame->pProp = 0;
    __frame->pHdr = 0;
    __frame->pStream = 0;
    __frame->pLoader = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1394]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4444],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pHdr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4462],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pStream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4484],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pLoader,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4502],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Unserialize(__frame->_This, __frame->pProp, __frame->pHdr, __frame->pStream, __frame->pLoader);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_Unserialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_ForceLoadProperty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_ForceLoadProperty_Proxy(
    ITfContextOwnerServices* This,
    ITfProperty *pProp)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_ForceLoadProperty_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4520]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4520]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1412]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_ForceLoadProperty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_ForceLoadProperty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    ITfProperty * pProp;
};

static void __finally_ITfContextOwnerServices_ForceLoadProperty_Stub( struct __frame_ITfContextOwnerServices_ForceLoadProperty_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4520]);

}

void __RPC_STUB ITfContextOwnerServices_ForceLoadProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_ForceLoadProperty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_ForceLoadProperty_Stub );
    __frame->pProp = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1412]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4520],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ForceLoadProperty(__frame->_This, __frame->pProp);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_ForceLoadProperty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_CreateRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_CreateRange_Proxy(
    ITfContextOwnerServices* This,
    LONG acpStart,
    LONG acpEnd,
    ITfRangeACP **ppRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_CreateRange_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = acpStart;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = acpEnd;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1418]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4556],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_CreateRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4556], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_CreateRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    LONG acpStart;
    LONG acpEnd;
    ITfRangeACP *_W0;
    ITfRangeACP ** ppRange;
};

static void __finally_ITfContextOwnerServices_CreateRange_Stub( struct __frame_ITfContextOwnerServices_CreateRange_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4556]);

}

void __RPC_STUB ITfContextOwnerServices_CreateRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_CreateRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_CreateRange_Stub );
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1418]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->acpStart = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->acpEnd = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateRange(__frame->_This, __frame->acpStart, __frame->acpEnd, __frame->ppRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4556]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4556]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_CreateRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContextOwnerServices_FormatStringOffsetTable[] =
{
    1364,  /* ITfContextOwnerServices::OnLayoutChange */
    1366,  /* ITfContextOwnerServices::OnStatusChange */
    1370,  /* ITfContextOwnerServices::OnAttributeChange */
    1376,  /* ITfContextOwnerServices::Serialize */
    1394,  /* ITfContextOwnerServices::Unserialize */
    1412,  /* ITfContextOwnerServices::ForceLoadProperty */
    1418,  /* ITfContextOwnerServices::CreateRange */
};

static const CINTERFACE_PROXY_VTABLE(10) _ITfContextOwnerServicesProxyVtbl =
{
    {
        &IID_ITfContextOwnerServices,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContextOwnerServices_OnLayoutChange_Proxy,
        ITfContextOwnerServices_OnStatusChange_Proxy,
        ITfContextOwnerServices_OnAttributeChange_Proxy,
        ITfContextOwnerServices_Serialize_Proxy,
        ITfContextOwnerServices_Unserialize_Proxy,
        ITfContextOwnerServices_ForceLoadProperty_Proxy,
        ITfContextOwnerServices_CreateRange_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContextOwnerServices_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContextOwnerServices_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContextOwnerServices_table[] =
{
    ITfContextOwnerServices_OnLayoutChange_Stub,
    ITfContextOwnerServices_OnStatusChange_Stub,
    ITfContextOwnerServices_OnAttributeChange_Stub,
    ITfContextOwnerServices_Serialize_Stub,
    ITfContextOwnerServices_Unserialize_Stub,
    ITfContextOwnerServices_ForceLoadProperty_Stub,
    ITfContextOwnerServices_CreateRange_Stub
};

static const CInterfaceStubVtbl _ITfContextOwnerServicesStubVtbl =
{
    {
        &IID_ITfContextOwnerServices,
        &ITfContextOwnerServices_ServerInfo,
        10,
        &ITfContextOwnerServices_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfReadOnlyProperty interface
 */
static void __finally_ITfReadOnlyProperty_GetType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfReadOnlyProperty_GetType_Proxy(
    ITfReadOnlyProperty* This,
    GUID *pguid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfReadOnlyProperty_GetType_Proxy );
    __frame->This = This;
    if (pguid) MIDL_memset( pguid, 0, sizeof( *pguid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1428]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfReadOnlyProperty_GetType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4560], (void *)pguid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfReadOnlyProperty_GetType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfReadOnlyProperty * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * pguid;
};

static void __finally_ITfReadOnlyProperty_GetType_Stub( struct __frame_ITfReadOnlyProperty_GetType_Stub *__frame )
{

}

void __RPC_STUB ITfReadOnlyProperty_GetType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfReadOnlyProperty_GetType_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfReadOnlyProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfReadOnlyProperty_GetType_Stub );
    __frame->pguid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1428]);


        __frame->pguid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetType(__frame->_This, __frame->pguid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfReadOnlyProperty_GetType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfReadOnlyProperty_EnumRanges_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfReadOnlyProperty_EnumRanges_Proxy(
    ITfReadOnlyProperty* This,
    TfEditCookie ec,
    IEnumTfRanges **ppEnum,
    ITfRange *pTargetRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfReadOnlyProperty_EnumRanges_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pTargetRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4586]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pTargetRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4586]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1434]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4582],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfReadOnlyProperty_EnumRanges_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4582], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfReadOnlyProperty_EnumRanges_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfReadOnlyProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    IEnumTfRanges *_W0;
    IEnumTfRanges ** ppEnum;
    ITfRange * pTargetRange;
};

static void __finally_ITfReadOnlyProperty_EnumRanges_Stub( struct __frame_ITfReadOnlyProperty_EnumRanges_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4582]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pTargetRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4586]);

}

void __RPC_STUB ITfReadOnlyProperty_EnumRanges_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfReadOnlyProperty_EnumRanges_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfReadOnlyProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfReadOnlyProperty_EnumRanges_Stub );
    __frame->ppEnum = 0;
    __frame->pTargetRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1434]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pTargetRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4586],
            0);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumRanges(__frame->_This, __frame->ec, __frame->ppEnum, __frame->pTargetRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4582]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4582]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfReadOnlyProperty_EnumRanges_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfReadOnlyProperty_GetValue_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfReadOnlyProperty_GetValue_Proxy(
    ITfReadOnlyProperty* This,
    TfEditCookie ec,
    ITfRange *pRange,
    VARIANT *pvarValue)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfReadOnlyProperty_GetValue_Proxy );
    __frame->This = This;
    if (pvarValue) MIDL_memset( pvarValue, 0, sizeof( *pvarValue ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pvarValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4604]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4604]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1446]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfReadOnlyProperty_GetValue_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4622], (void *)pvarValue );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfReadOnlyProperty_GetValue_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfReadOnlyProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    VARIANT _W0;
    VARIANT * pvarValue;
};

static void __finally_ITfReadOnlyProperty_GetValue_Stub( struct __frame_ITfReadOnlyProperty_GetValue_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4604]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarValue,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4622]);

}

void __RPC_STUB ITfReadOnlyProperty_GetValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfReadOnlyProperty_GetValue_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfReadOnlyProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfReadOnlyProperty_GetValue_Stub );
    __frame->pRange = 0;
    __frame->pvarValue = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1446]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4604],
            0);


        __frame->pvarValue = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetValue(__frame->_This, __frame->ec, __frame->pRange, __frame->pvarValue);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfReadOnlyProperty_GetValue_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfReadOnlyProperty_GetContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfReadOnlyProperty_GetContext_Proxy(
    ITfReadOnlyProperty* This,
    ITfContext **ppContext)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfReadOnlyProperty_GetContext_Proxy );
    __frame->This = This;
    if (ppContext) MIDL_memset( ppContext, 0, sizeof( *ppContext ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1458]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppContext,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4644],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfReadOnlyProperty_GetContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4644], (void *)ppContext );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfReadOnlyProperty_GetContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfReadOnlyProperty * _This;
    HRESULT _RetVal;
    ITfContext *_W0;
    ITfContext ** ppContext;
};

static void __finally_ITfReadOnlyProperty_GetContext_Stub( struct __frame_ITfReadOnlyProperty_GetContext_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppContext,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4644]);

}

void __RPC_STUB ITfReadOnlyProperty_GetContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfReadOnlyProperty_GetContext_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfReadOnlyProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfReadOnlyProperty_GetContext_Stub );
    __frame->ppContext = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1458]);


        __frame->ppContext = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetContext(__frame->_This, __frame->ppContext);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4644]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4644]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfReadOnlyProperty_GetContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfReadOnlyProperty_FormatStringOffsetTable[] =
{
    1428,  /* ITfReadOnlyProperty::GetType */
    1434,  /* ITfReadOnlyProperty::EnumRanges */
    1446,  /* ITfReadOnlyProperty::GetValue */
    1458,  /* ITfReadOnlyProperty::GetContext */
};

static const CINTERFACE_PROXY_VTABLE(7) _ITfReadOnlyPropertyProxyVtbl =
{
    {
        &IID_ITfReadOnlyProperty,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfReadOnlyProperty_GetType_Proxy,
        ITfReadOnlyProperty_EnumRanges_Proxy,
        ITfReadOnlyProperty_GetValue_Proxy,
        ITfReadOnlyProperty_GetContext_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfReadOnlyProperty_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfReadOnlyProperty_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfReadOnlyProperty_table[] =
{
    ITfReadOnlyProperty_GetType_Stub,
    ITfReadOnlyProperty_EnumRanges_Stub,
    ITfReadOnlyProperty_GetValue_Stub,
    ITfReadOnlyProperty_GetContext_Stub
};

static const CInterfaceStubVtbl _ITfReadOnlyPropertyStubVtbl =
{
    {
        &IID_ITfReadOnlyProperty,
        &ITfReadOnlyProperty_ServerInfo,
        7,
        &ITfReadOnlyProperty_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfProperty interface
 */
static void __finally_ITfProperty_FindRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfProperty_FindRange_Proxy(
    ITfProperty* This,
    TfEditCookie ec,
    ITfRange *pRange,
    ITfRange **ppRange,
    TfAnchor aPos)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfProperty_FindRange_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4648]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4648]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1464]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4684],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfProperty_FindRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4684], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfProperty_FindRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    ITfRange *_W0;
    ITfRange ** ppRange;
    TfAnchor aPos;
};

static void __finally_ITfProperty_FindRange_Stub( struct __frame_ITfProperty_FindRange_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4648]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4684]);


}

void __RPC_STUB ITfProperty_FindRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfProperty_FindRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfProperty_FindRange_Stub );
    __frame->pRange = 0;
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1464]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4648],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->FindRange(__frame->_This, __frame->ec, __frame->pRange, __frame->ppRange, __frame->aPos);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4684]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4684]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfProperty_FindRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfProperty_SetValueStore_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfProperty_SetValueStore_Proxy(
    ITfProperty* This,
    TfEditCookie ec,
    ITfRange *pRange,
    ITfPropertyStore *pPropStore)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfProperty_SetValueStore_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4688]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pPropStore,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4706]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4688]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPropStore,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4706]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1478]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfProperty_SetValueStore_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfProperty_SetValueStore_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    ITfPropertyStore * pPropStore;
};

static void __finally_ITfProperty_SetValueStore_Stub( struct __frame_ITfProperty_SetValueStore_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4688]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPropStore,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4706]);

}

void __RPC_STUB ITfProperty_SetValueStore_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfProperty_SetValueStore_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfProperty_SetValueStore_Stub );
    __frame->pRange = 0;
    __frame->pPropStore = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1478]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4688],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPropStore,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4706],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetValueStore(__frame->_This, __frame->ec, __frame->pRange, __frame->pPropStore);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfProperty_SetValueStore_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfProperty_SetValue_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfProperty_SetValue_Proxy(
    ITfProperty* This,
    TfEditCookie ec,
    ITfRange *pRange,
    const VARIANT *pvarValue)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfProperty_SetValue_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pvarValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4724]);

            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4742]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4724]);

            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4742]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1490]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfProperty_SetValue_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfProperty_SetValue_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    const VARIANT * pvarValue;
};

static void __finally_ITfProperty_SetValue_Stub( struct __frame_ITfProperty_SetValue_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4724]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarValue,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4752]);

}

void __RPC_STUB ITfProperty_SetValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfProperty_SetValue_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfProperty_SetValue_Stub );
    __frame->pRange = 0;
    __frame->pvarValue = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1490]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4724],
            0);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4742],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetValue(__frame->_This, __frame->ec, __frame->pRange, __frame->pvarValue);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfProperty_SetValue_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfProperty_Clear_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfProperty_Clear_Proxy(
    ITfProperty* This,
    TfEditCookie ec,
    ITfRange *pRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfProperty_Clear_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4756]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4756]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1502]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfProperty_Clear_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfProperty_Clear_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
};

static void __finally_ITfProperty_Clear_Stub( struct __frame_ITfProperty_Clear_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4756]);

}

void __RPC_STUB ITfProperty_Clear_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfProperty_Clear_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfProperty_Clear_Stub );
    __frame->pRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1502]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4756],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clear(__frame->_This, __frame->ec, __frame->pRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfProperty_Clear_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfProperty_FormatStringOffsetTable[] =
{
    1428,  /* ITfReadOnlyProperty::GetType */
    1434,  /* ITfReadOnlyProperty::EnumRanges */
    1446,  /* ITfReadOnlyProperty::GetValue */
    1458,  /* ITfReadOnlyProperty::GetContext */
    1464,  /* ITfProperty::FindRange */
    1478,  /* ITfProperty::SetValueStore */
    1490,  /* ITfProperty::SetValue */
    1502,  /* ITfProperty::Clear */
};

static const CINTERFACE_PROXY_VTABLE(11) _ITfPropertyProxyVtbl =
{
    {
        &IID_ITfProperty,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfReadOnlyProperty_GetType_Proxy,
        ITfReadOnlyProperty_EnumRanges_Proxy,
        ITfReadOnlyProperty_GetValue_Proxy,
        ITfReadOnlyProperty_GetContext_Proxy,
        ITfProperty_FindRange_Proxy,
        ITfProperty_SetValueStore_Proxy,
        ITfProperty_SetValue_Proxy,
        ITfProperty_Clear_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfProperty_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfProperty_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfProperty_table[] =
{
    ITfReadOnlyProperty_GetType_Stub,
    ITfReadOnlyProperty_EnumRanges_Stub,
    ITfReadOnlyProperty_GetValue_Stub,
    ITfReadOnlyProperty_GetContext_Stub,
    ITfProperty_FindRange_Stub,
    ITfProperty_SetValueStore_Stub,
    ITfProperty_SetValue_Stub,
    ITfProperty_Clear_Stub
};

static const CInterfaceStubVtbl _ITfPropertyStubVtbl =
{
    {
        &IID_ITfProperty,
        &ITfProperty_ServerInfo,
        11,
        &ITfProperty_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfCompartment interface
 */
static void __finally_ITfCompartment_SetValue_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartment_SetValue_Proxy(
    ITfCompartment* This,
    TfClientId tid,
    const VARIANT *pvarValue)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartment_SetValue_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pvarValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4774]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4774]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1510]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartment_SetValue_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartment_SetValue_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartment * _This;
    HRESULT _RetVal;
    TfClientId tid;
    const VARIANT * pvarValue;
};

static void __finally_ITfCompartment_SetValue_Stub( struct __frame_ITfCompartment_SetValue_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarValue,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4784]);

}

void __RPC_STUB ITfCompartment_SetValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartment_SetValue_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartment*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartment_SetValue_Stub );
    __frame->pvarValue = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1510]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4774],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetValue(__frame->_This, __frame->tid, __frame->pvarValue);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartment_SetValue_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfCompartment_GetValue_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartment_GetValue_Proxy(
    ITfCompartment* This,
    VARIANT *pvarValue)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartment_GetValue_Proxy );
    __frame->This = This;
    if (pvarValue) MIDL_memset( pvarValue, 0, sizeof( *pvarValue ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pvarValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1518]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartment_GetValue_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4788], (void *)pvarValue );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartment_GetValue_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartment * _This;
    HRESULT _RetVal;
    VARIANT _W0;
    VARIANT * pvarValue;
};

static void __finally_ITfCompartment_GetValue_Stub( struct __frame_ITfCompartment_GetValue_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarValue,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4788]);

}

void __RPC_STUB ITfCompartment_GetValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartment_GetValue_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartment*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartment_GetValue_Stub );
    __frame->pvarValue = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1518]);


        __frame->pvarValue = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetValue(__frame->_This, __frame->pvarValue);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartment_GetValue_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfCompartment_FormatStringOffsetTable[] =
{
    1510,  /* ITfCompartment::SetValue */
    1518,  /* ITfCompartment::GetValue */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfCompartmentProxyVtbl =
{
    {
        &IID_ITfCompartment,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfCompartment_SetValue_Proxy,
        ITfCompartment_GetValue_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfCompartment_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfCompartment_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfCompartment_table[] =
{
    ITfCompartment_SetValue_Stub,
    ITfCompartment_GetValue_Stub
};

static const CInterfaceStubVtbl _ITfCompartmentStubVtbl =
{
    {
        &IID_ITfCompartment,
        &ITfCompartment_ServerInfo,
        5,
        &ITfCompartment_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfCompartmentMgr interface
 */
static void __finally_ITfCompartmentMgr_GetCompartment_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartmentMgr_GetCompartment_Proxy(
    ITfCompartmentMgr* This,
    REFGUID rguid,
    ITfCompartment **ppcomp)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartmentMgr_GetCompartment_Proxy );
    __frame->This = This;
    if (ppcomp) MIDL_memset( ppcomp, 0, sizeof( *ppcomp ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!rguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppcomp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1524]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppcomp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4814],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartmentMgr_GetCompartment_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4814], (void *)ppcomp );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartmentMgr_GetCompartment_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartmentMgr * _This;
    HRESULT _RetVal;
    REFGUID rguid;
    ITfCompartment *_W0;
    ITfCompartment ** ppcomp;
};

static void __finally_ITfCompartmentMgr_GetCompartment_Stub( struct __frame_ITfCompartmentMgr_GetCompartment_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppcomp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4814]);

}

void __RPC_STUB ITfCompartmentMgr_GetCompartment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartmentMgr_GetCompartment_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartmentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartmentMgr_GetCompartment_Stub );
    __frame->rguid = 0;
    __frame->ppcomp = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1524]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        __frame->ppcomp = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCompartment(__frame->_This, __frame->rguid, __frame->ppcomp);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppcomp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4814]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppcomp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4814]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartmentMgr_GetCompartment_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfCompartmentMgr_ClearCompartment_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartmentMgr_ClearCompartment_Proxy(
    ITfCompartmentMgr* This,
    TfClientId tid,
    REFGUID rguid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartmentMgr_ClearCompartment_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1534]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartmentMgr_ClearCompartment_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartmentMgr_ClearCompartment_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartmentMgr * _This;
    HRESULT _RetVal;
    TfClientId tid;
    REFGUID rguid;
};

static void __finally_ITfCompartmentMgr_ClearCompartment_Stub( struct __frame_ITfCompartmentMgr_ClearCompartment_Stub *__frame )
{


}

void __RPC_STUB ITfCompartmentMgr_ClearCompartment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartmentMgr_ClearCompartment_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartmentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartmentMgr_ClearCompartment_Stub );
    __frame->rguid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1534]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ClearCompartment(__frame->_This, __frame->tid, __frame->rguid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartmentMgr_ClearCompartment_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfCompartmentMgr_EnumCompartments_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartmentMgr_EnumCompartments_Proxy(
    ITfCompartmentMgr* This,
    IEnumGUID **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartmentMgr_EnumCompartments_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1542]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartmentMgr_EnumCompartments_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4840], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartmentMgr_EnumCompartments_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartmentMgr * _This;
    HRESULT _RetVal;
    IEnumGUID *_W0;
    IEnumGUID ** ppEnum;
};

static void __finally_ITfCompartmentMgr_EnumCompartments_Stub( struct __frame_ITfCompartmentMgr_EnumCompartments_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840]);

}

void __RPC_STUB ITfCompartmentMgr_EnumCompartments_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartmentMgr_EnumCompartments_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartmentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartmentMgr_EnumCompartments_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1542]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumCompartments(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartmentMgr_EnumCompartments_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfCompartmentMgr_FormatStringOffsetTable[] =
{
    1524,  /* ITfCompartmentMgr::GetCompartment */
    1534,  /* ITfCompartmentMgr::ClearCompartment */
    1542,  /* ITfCompartmentMgr::EnumCompartments */
};

static const CINTERFACE_PROXY_VTABLE(6) _ITfCompartmentMgrProxyVtbl =
{
    {
        &IID_ITfCompartmentMgr,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfCompartmentMgr_GetCompartment_Proxy,
        ITfCompartmentMgr_ClearCompartment_Proxy,
        ITfCompartmentMgr_EnumCompartments_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfCompartmentMgr_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfCompartmentMgr_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfCompartmentMgr_table[] =
{
    ITfCompartmentMgr_GetCompartment_Stub,
    ITfCompartmentMgr_ClearCompartment_Stub,
    ITfCompartmentMgr_EnumCompartments_Stub
};

static const CInterfaceStubVtbl _ITfCompartmentMgrStubVtbl =
{
    {
        &IID_ITfCompartmentMgr,
        &ITfCompartmentMgr_ServerInfo,
        6,
        &ITfCompartmentMgr_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfCompartmentEventSink interface
 */
static void __finally_ITfCompartmentEventSink_OnChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartmentEventSink_OnChange_Proxy(
    ITfCompartmentEventSink* This,
    REFGUID rguid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartmentEventSink_OnChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!rguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1548]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartmentEventSink_OnChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartmentEventSink_OnChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartmentEventSink * _This;
    HRESULT _RetVal;
    REFGUID rguid;
};

static void __finally_ITfCompartmentEventSink_OnChange_Stub( struct __frame_ITfCompartmentEventSink_OnChange_Stub *__frame )
{

}

void __RPC_STUB ITfCompartmentEventSink_OnChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartmentEventSink_OnChange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartmentEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartmentEventSink_OnChange_Stub );
    __frame->rguid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1548]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnChange(__frame->_This, __frame->rguid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartmentEventSink_OnChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfCompartmentEventSink_FormatStringOffsetTable[] =
{
    1548,  /* ITfCompartmentEventSink::OnChange */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfCompartmentEventSinkProxyVtbl =
{
    {
        &IID_ITfCompartmentEventSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfCompartmentEventSink_OnChange_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfCompartmentEventSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfCompartmentEventSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfCompartmentEventSink_table[] =
{
    ITfCompartmentEventSink_OnChange_Stub
};

static const CInterfaceStubVtbl _ITfCompartmentEventSinkStubVtbl =
{
    {
        &IID_ITfCompartmentEventSink,
        &ITfCompartmentEventSink_ServerInfo,
        4,
        &ITfCompartmentEventSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfContexts interface
 */
static void __finally_IEnumTfContexts_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContexts_Clone_Proxy(
    IEnumTfContexts* This,
    IEnumTfContexts **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContexts_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1554]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4866],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContexts_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4866], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContexts_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContexts * _This;
    HRESULT _RetVal;
    IEnumTfContexts *_W0;
    IEnumTfContexts ** ppEnum;
};

static void __finally_IEnumTfContexts_Clone_Stub( struct __frame_IEnumTfContexts_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4866]);

}

void __RPC_STUB IEnumTfContexts_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContexts_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContexts*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContexts_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1554]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4866]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4866]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContexts_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContexts_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContexts_Next_Proxy(
    IEnumTfContexts* This,
    ULONG ulCount,
    ITfContext **rgContext,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContexts_Next_Proxy );
    __frame->This = This;
    if (rgContext) MIDL_memset( rgContext, 0, sizeof( *rgContext ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rgContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1560]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgContext,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4888],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContexts_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4906], (void *)rgContext );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4910], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContexts_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContexts * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    ITfContext ** rgContext;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumTfContexts_Next_Stub( struct __frame_IEnumTfContexts_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgContext,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4906]);


}

void __RPC_STUB IEnumTfContexts_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContexts_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContexts*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContexts_Next_Stub );
    __frame->rgContext = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1560]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgContext = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 4);
        memset(__frame->rgContext, 0, __frame->ulCount * 4);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->rgContext, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4888]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4888]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContexts_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContexts_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContexts_Reset_Proxy(
    IEnumTfContexts* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContexts_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1572]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContexts_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContexts_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContexts * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfContexts_Reset_Stub( struct __frame_IEnumTfContexts_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfContexts_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContexts_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContexts*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContexts_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1572]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContexts_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContexts_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContexts_Skip_Proxy(
    IEnumTfContexts* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContexts_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1574]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContexts_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContexts_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContexts * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfContexts_Skip_Stub( struct __frame_IEnumTfContexts_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfContexts_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContexts_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContexts*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContexts_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1574]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContexts_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfContexts_FormatStringOffsetTable[] =
{
    1554,  /* IEnumTfContexts::Clone */
    1560,  /* IEnumTfContexts::Next */
    1572,  /* IEnumTfContexts::Reset */
    1574,  /* IEnumTfContexts::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfContextsProxyVtbl =
{
    {
        &IID_IEnumTfContexts,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfContexts_Clone_Proxy,
        IEnumTfContexts_Next_Proxy,
        IEnumTfContexts_Reset_Proxy,
        IEnumTfContexts_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfContexts_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfContexts_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfContexts_table[] =
{
    IEnumTfContexts_Clone_Stub,
    IEnumTfContexts_Next_Stub,
    IEnumTfContexts_Reset_Stub,
    IEnumTfContexts_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfContextsStubVtbl =
{
    {
        &IID_IEnumTfContexts,
        &IEnumTfContexts_ServerInfo,
        7,
        &IEnumTfContexts_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfDocumentMgrs interface
 */
static void __finally_IEnumTfDocumentMgrs_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDocumentMgrs_Clone_Proxy(
    IEnumTfDocumentMgrs* This,
    IEnumTfDocumentMgrs **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDocumentMgrs_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1578]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4932],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDocumentMgrs_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4932], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDocumentMgrs_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDocumentMgrs * _This;
    HRESULT _RetVal;
    IEnumTfDocumentMgrs *_W0;
    IEnumTfDocumentMgrs ** ppEnum;
};

static void __finally_IEnumTfDocumentMgrs_Clone_Stub( struct __frame_IEnumTfDocumentMgrs_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4932]);

}

void __RPC_STUB IEnumTfDocumentMgrs_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDocumentMgrs_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDocumentMgrs*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDocumentMgrs_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1578]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4932]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4932]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDocumentMgrs_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDocumentMgrs_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDocumentMgrs_Next_Proxy(
    IEnumTfDocumentMgrs* This,
    ULONG ulCount,
    ITfDocumentMgr **rgDocumentMgr,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDocumentMgrs_Next_Proxy );
    __frame->This = This;
    if (rgDocumentMgr) MIDL_memset( rgDocumentMgr, 0, sizeof( *rgDocumentMgr ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rgDocumentMgr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1584]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgDocumentMgr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4954],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDocumentMgrs_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4972], (void *)rgDocumentMgr );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4976], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDocumentMgrs_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDocumentMgrs * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    ITfDocumentMgr ** rgDocumentMgr;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumTfDocumentMgrs_Next_Stub( struct __frame_IEnumTfDocumentMgrs_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgDocumentMgr,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4972]);


}

void __RPC_STUB IEnumTfDocumentMgrs_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDocumentMgrs_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDocumentMgrs*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDocumentMgrs_Next_Stub );
    __frame->rgDocumentMgr = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1584]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgDocumentMgr = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 4);
        memset(__frame->rgDocumentMgr, 0, __frame->ulCount * 4);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->rgDocumentMgr, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgDocumentMgr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4954]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgDocumentMgr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4954]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDocumentMgrs_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDocumentMgrs_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDocumentMgrs_Reset_Proxy(
    IEnumTfDocumentMgrs* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDocumentMgrs_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1596]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDocumentMgrs_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDocumentMgrs_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDocumentMgrs * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfDocumentMgrs_Reset_Stub( struct __frame_IEnumTfDocumentMgrs_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfDocumentMgrs_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDocumentMgrs_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDocumentMgrs*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDocumentMgrs_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1596]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDocumentMgrs_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDocumentMgrs_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDocumentMgrs_Skip_Proxy(
    IEnumTfDocumentMgrs* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDocumentMgrs_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1598]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDocumentMgrs_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDocumentMgrs_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDocumentMgrs * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfDocumentMgrs_Skip_Stub( struct __frame_IEnumTfDocumentMgrs_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfDocumentMgrs_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDocumentMgrs_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDocumentMgrs*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDocumentMgrs_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1598]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDocumentMgrs_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfDocumentMgrs_FormatStringOffsetTable[] =
{
    1578,  /* IEnumTfDocumentMgrs::Clone */
    1584,  /* IEnumTfDocumentMgrs::Next */
    1596,  /* IEnumTfDocumentMgrs::Reset */
    1598,  /* IEnumTfDocumentMgrs::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfDocumentMgrsProxyVtbl =
{
    {
        &IID_IEnumTfDocumentMgrs,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfDocumentMgrs_Clone_Proxy,
        IEnumTfDocumentMgrs_Next_Proxy,
        IEnumTfDocumentMgrs_Reset_Proxy,
        IEnumTfDocumentMgrs_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfDocumentMgrs_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfDocumentMgrs_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfDocumentMgrs_table[] =
{
    IEnumTfDocumentMgrs_Clone_Stub,
    IEnumTfDocumentMgrs_Next_Stub,
    IEnumTfDocumentMgrs_Reset_Stub,
    IEnumTfDocumentMgrs_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfDocumentMgrsStubVtbl =
{
    {
        &IID_IEnumTfDocumentMgrs,
        &IEnumTfDocumentMgrs_ServerInfo,
        7,
        &IEnumTfDocumentMgrs_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfSourceSingle interface
 */
static void __finally_ITfSourceSingle_AdviseSingleSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfSourceSingle_AdviseSingleSink_Proxy(
    ITfSourceSingle* This,
    TfClientId tid,
    REFIID riid,
    IUnknown *punk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfSourceSingle_AdviseSingleSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4984]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4984]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1602]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfSourceSingle_AdviseSingleSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfSourceSingle_AdviseSingleSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfSourceSingle * _This;
    HRESULT _RetVal;
    TfClientId tid;
    REFIID riid;
    IUnknown * punk;
};

static void __finally_ITfSourceSingle_AdviseSingleSink_Stub( struct __frame_ITfSourceSingle_AdviseSingleSink_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->punk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4984]);

}

void __RPC_STUB ITfSourceSingle_AdviseSingleSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfSourceSingle_AdviseSingleSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfSourceSingle*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfSourceSingle_AdviseSingleSink_Stub );
    __frame->riid = 0;
    __frame->punk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1602]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->punk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4984],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdviseSingleSink(__frame->_This, __frame->tid, __frame->riid, __frame->punk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfSourceSingle_AdviseSingleSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfSourceSingle_UnadviseSingleSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfSourceSingle_UnadviseSingleSink_Proxy(
    ITfSourceSingle* This,
    TfClientId tid,
    REFIID riid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfSourceSingle_UnadviseSingleSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1614]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfSourceSingle_UnadviseSingleSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfSourceSingle_UnadviseSingleSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfSourceSingle * _This;
    HRESULT _RetVal;
    TfClientId tid;
    REFIID riid;
};

static void __finally_ITfSourceSingle_UnadviseSingleSink_Stub( struct __frame_ITfSourceSingle_UnadviseSingleSink_Stub *__frame )
{


}

void __RPC_STUB ITfSourceSingle_UnadviseSingleSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfSourceSingle_UnadviseSingleSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfSourceSingle*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfSourceSingle_UnadviseSingleSink_Stub );
    __frame->riid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1614]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnadviseSingleSink(__frame->_This, __frame->tid, __frame->riid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfSourceSingle_UnadviseSingleSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfSourceSingle_FormatStringOffsetTable[] =
{
    1602,  /* ITfSourceSingle::AdviseSingleSink */
    1614,  /* ITfSourceSingle::UnadviseSingleSink */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfSourceSingleProxyVtbl =
{
    {
        &IID_ITfSourceSingle,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfSourceSingle_AdviseSingleSink_Proxy,
        ITfSourceSingle_UnadviseSingleSink_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfSourceSingle_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfSourceSingle_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfSourceSingle_table[] =
{
    ITfSourceSingle_AdviseSingleSink_Stub,
    ITfSourceSingle_UnadviseSingleSink_Stub
};

static const CInterfaceStubVtbl _ITfSourceSingleStubVtbl =
{
    {
        &IID_ITfSourceSingle,
        &ITfSourceSingle_ServerInfo,
        5,
        &ITfSourceSingle_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfInputProcessorProfileActivationSink interface
 */
static void __finally_ITfInputProcessorProfileActivationSink_OnActivated_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileActivationSink_OnActivated_Proxy(
    ITfInputProcessorProfileActivationSink* This,
    DWORD dwProfileType,
    LANGID langid,
    REFCLSID clsid,
    REFGUID catid,
    REFGUID guidProfile,
    HKL hkl,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileActivationSink_OnActivated_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!catid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 90;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwProfileType;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)catid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HKL *)__frame->_StubMsg.Buffer = hkl;
            __frame->_StubMsg.Buffer += sizeof(HKL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1622]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileActivationSink_OnActivated_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileActivationSink_OnActivated_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileActivationSink * _This;
    HRESULT _RetVal;
    DWORD dwProfileType;
    LANGID langid;
    REFCLSID clsid;
    REFGUID catid;
    REFGUID guidProfile;
    HKL hkl;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileActivationSink_OnActivated_Stub( struct __frame_ITfInputProcessorProfileActivationSink_OnActivated_Stub *__frame )
{







}

void __RPC_STUB ITfInputProcessorProfileActivationSink_OnActivated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileActivationSink_OnActivated_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileActivationSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileActivationSink_OnActivated_Stub );
    __frame->clsid = 0;
    __frame->catid = 0;
    __frame->guidProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1622]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwProfileType = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->catid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HKL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hkl = *(HKL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HKL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnActivated(__frame->_This, __frame->dwProfileType, __frame->langid, __frame->clsid, __frame->catid, __frame->guidProfile, __frame->hkl, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileActivationSink_OnActivated_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfInputProcessorProfileActivationSink_FormatStringOffsetTable[] =
{
    1622,  /* ITfInputProcessorProfileActivationSink::OnActivated */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfInputProcessorProfileActivationSinkProxyVtbl =
{
    {
        &IID_ITfInputProcessorProfileActivationSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfInputProcessorProfileActivationSink_OnActivated_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfInputProcessorProfileActivationSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfInputProcessorProfileActivationSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfInputProcessorProfileActivationSink_table[] =
{
    ITfInputProcessorProfileActivationSink_OnActivated_Stub
};

static const CInterfaceStubVtbl _ITfInputProcessorProfileActivationSinkStubVtbl =
{
    {
        &IID_ITfInputProcessorProfileActivationSink,
        &ITfInputProcessorProfileActivationSink_ServerInfo,
        4,
        &ITfInputProcessorProfileActivationSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfMouseTracker interface
 */
static void __finally_ITfMouseTracker_AdviseMouseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfMouseTracker_AdviseMouseSink_Proxy(
    ITfMouseTracker* This,
    ITfRange *range,
    ITfMouseSink *pSink,
    DWORD *pdwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfMouseTracker_AdviseMouseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pdwCookie) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5006]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5024]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5006]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5024]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1644]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfMouseTracker_AdviseMouseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5042], (void *)pdwCookie );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfMouseTracker_AdviseMouseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfMouseTracker * _This;
    HRESULT _RetVal;
    ITfRange * range;
    ITfMouseSink * pSink;
    DWORD _W0;
    DWORD * pdwCookie;
};

static void __finally_ITfMouseTracker_AdviseMouseSink_Stub( struct __frame_ITfMouseTracker_AdviseMouseSink_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5006]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5024]);


}

void __RPC_STUB ITfMouseTracker_AdviseMouseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfMouseTracker_AdviseMouseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfMouseTracker*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfMouseTracker_AdviseMouseSink_Stub );
    __frame->range = 0;
    __frame->pSink = 0;
    __frame->pdwCookie = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1644]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5006],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5024],
            0);


        __frame->pdwCookie = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdviseMouseSink(__frame->_This, __frame->range, __frame->pSink, __frame->pdwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwCookie;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfMouseTracker_AdviseMouseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfMouseTracker_UnadviseMouseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfMouseTracker_UnadviseMouseSink_Proxy(
    ITfMouseTracker* This,
    DWORD dwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfMouseTracker_UnadviseMouseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwCookie;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1658]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfMouseTracker_UnadviseMouseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfMouseTracker_UnadviseMouseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfMouseTracker * _This;
    HRESULT _RetVal;
    DWORD dwCookie;
};

static void __finally_ITfMouseTracker_UnadviseMouseSink_Stub( struct __frame_ITfMouseTracker_UnadviseMouseSink_Stub *__frame )
{

}

void __RPC_STUB ITfMouseTracker_UnadviseMouseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfMouseTracker_UnadviseMouseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfMouseTracker*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfMouseTracker_UnadviseMouseSink_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1658]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnadviseMouseSink(__frame->_This, __frame->dwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfMouseTracker_UnadviseMouseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfMouseTracker_FormatStringOffsetTable[] =
{
    1644,  /* ITfMouseTracker::AdviseMouseSink */
    1658,  /* ITfMouseTracker::UnadviseMouseSink */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfMouseTrackerProxyVtbl =
{
    {
        &IID_ITfMouseTracker,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfMouseTracker_AdviseMouseSink_Proxy,
        ITfMouseTracker_UnadviseMouseSink_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfMouseTracker_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfMouseTracker_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfMouseTracker_table[] =
{
    ITfMouseTracker_AdviseMouseSink_Stub,
    ITfMouseTracker_UnadviseMouseSink_Stub
};

static const CInterfaceStubVtbl _ITfMouseTrackerStubVtbl =
{
    {
        &IID_ITfMouseTracker,
        &ITfMouseTracker_ServerInfo,
        5,
        &ITfMouseTracker_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfMouseTrackerACP interface
 */
static void __finally_ITfMouseTrackerACP_AdviseMouseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfMouseTrackerACP_AdviseMouseSink_Proxy(
    ITfMouseTrackerACP* This,
    ITfRangeACP *range,
    ITfMouseSink *pSink,
    DWORD *pdwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfMouseTrackerACP_AdviseMouseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pdwCookie) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5046]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5064]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5046]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5064]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1662]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfMouseTrackerACP_AdviseMouseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5082], (void *)pdwCookie );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfMouseTrackerACP_AdviseMouseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfMouseTrackerACP * _This;
    HRESULT _RetVal;
    ITfRangeACP * range;
    ITfMouseSink * pSink;
    DWORD _W0;
    DWORD * pdwCookie;
};

static void __finally_ITfMouseTrackerACP_AdviseMouseSink_Stub( struct __frame_ITfMouseTrackerACP_AdviseMouseSink_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5046]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5064]);


}

void __RPC_STUB ITfMouseTrackerACP_AdviseMouseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfMouseTrackerACP_AdviseMouseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfMouseTrackerACP*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfMouseTrackerACP_AdviseMouseSink_Stub );
    __frame->range = 0;
    __frame->pSink = 0;
    __frame->pdwCookie = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1662]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5046],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5064],
            0);


        __frame->pdwCookie = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdviseMouseSink(__frame->_This, __frame->range, __frame->pSink, __frame->pdwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwCookie;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfMouseTrackerACP_AdviseMouseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfMouseTrackerACP_UnadviseMouseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfMouseTrackerACP_UnadviseMouseSink_Proxy(
    ITfMouseTrackerACP* This,
    DWORD dwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfMouseTrackerACP_UnadviseMouseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwCookie;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1676]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfMouseTrackerACP_UnadviseMouseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfMouseTrackerACP_UnadviseMouseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfMouseTrackerACP * _This;
    HRESULT _RetVal;
    DWORD dwCookie;
};

static void __finally_ITfMouseTrackerACP_UnadviseMouseSink_Stub( struct __frame_ITfMouseTrackerACP_UnadviseMouseSink_Stub *__frame )
{

}

void __RPC_STUB ITfMouseTrackerACP_UnadviseMouseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfMouseTrackerACP_UnadviseMouseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfMouseTrackerACP*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfMouseTrackerACP_UnadviseMouseSink_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1676]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnadviseMouseSink(__frame->_This, __frame->dwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfMouseTrackerACP_UnadviseMouseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfMouseTrackerACP_FormatStringOffsetTable[] =
{
    1662,  /* ITfMouseTrackerACP::AdviseMouseSink */
    1676,  /* ITfMouseTrackerACP::UnadviseMouseSink */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfMouseTrackerACPProxyVtbl =
{
    {
        &IID_ITfMouseTrackerACP,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfMouseTrackerACP_AdviseMouseSink_Proxy,
        ITfMouseTrackerACP_UnadviseMouseSink_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfMouseTrackerACP_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfMouseTrackerACP_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfMouseTrackerACP_table[] =
{
    ITfMouseTrackerACP_AdviseMouseSink_Stub,
    ITfMouseTrackerACP_UnadviseMouseSink_Stub
};

static const CInterfaceStubVtbl _ITfMouseTrackerACPStubVtbl =
{
    {
        &IID_ITfMouseTrackerACP,
        &ITfMouseTrackerACP_ServerInfo,
        5,
        &ITfMouseTrackerACP_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

static const USER_MARSHAL_ROUTINE_QUADRUPLE UserMarshalRoutines[] =
{
    {
        (USER_MARSHAL_SIZING_ROUTINE)BSTR_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)BSTR_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)BSTR_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)BSTR_UserFree
    },
    {
        (USER_MARSHAL_SIZING_ROUTINE)HWND_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)HWND_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)HWND_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)HWND_UserFree
    },
    {
        (USER_MARSHAL_SIZING_ROUTINE)VARIANT_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)VARIANT_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)VARIANT_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)VARIANT_UserFree
    }
};

static const MIDL_STUB_DESC Object_StubDesc =
{
    0,
    NdrOleAllocate,
    NdrOleFree,
    {0}, 0, 0, 0, 0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    UserMarshalRoutines,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

#if !defined(__RPC_WIN32__)
#error Currently only Wine and WIN32 are supported.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter guid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14),	/* type offset = 20 */
/* 4 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter desc) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3a),	/* type offset = 58 */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3e),	/* type offset = 62 */
/* 16 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x54),	/* type offset = 84 */
/* 20 (parameter func) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5e),	/* type offset = 94 */
/* 24 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 26 (parameter ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x74),	/* type offset = 116 */
/* 30 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 32 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter prov) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8a),	/* type offset = 138 */
/* 38 (parameter fetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa0),	/* type offset = 160 */
/* 42 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 44 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 48 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 50 (parameter ptid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa4),	/* type offset = 164 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 58 (parameter ppdim) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xba),	/* type offset = 186 */
/* 62 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 64 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd0),	/* type offset = 208 */
/* 68 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 70 (parameter ppdimFocus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe6),	/* type offset = 230 */
/* 74 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter pdimFocus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xea),	/* type offset = 234 */
/* 80 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 82 (parameter hwnd) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x114),	/* type offset = 276 */
/* 86 (parameter pdimNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x11e),	/* type offset = 286 */
/* 90 (parameter ppdimPrev) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x142),	/* type offset = 322 */
/* 94 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 96 (parameter pfThreadFocus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x146),	/* type offset = 326 */
/* 100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 102 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15c),	/* type offset = 348 */
/* 106 (parameter ppFuncProv) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x172),	/* type offset = 370 */
/* 110 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 112 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x188),	/* type offset = 392 */
/* 116 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 118 (parameter ppCompMgr) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x19e),	/* type offset = 414 */
/* 122 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 124 (parameter id) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a2),	/* type offset = 418 */
/* 128 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 132 (parameter flags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a6),	/* type offset = 422 */
/* 136 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 138 (parameter pclsid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1aa),	/* type offset = 426 */
/* 142 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 144 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1c0),	/* type offset = 448 */
/* 148 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 150 (parameter tidOwner) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 152 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 154 (parameter punk) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1c4),	/* type offset = 452 */
/* 158 (parameter ppic) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1e8),	/* type offset = 488 */
/* 162 (parameter pecTextStore) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1ec),	/* type offset = 492 */
/* 166 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 168 (parameter pic) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f0),	/* type offset = 496 */
/* 172 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 174 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 176 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 178 (parameter ppic) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x214),	/* type offset = 532 */
/* 182 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 184 (parameter ppic) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x22a),	/* type offset = 554 */
/* 188 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 190 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x240),	/* type offset = 576 */
/* 194 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 196 (parameter cookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 198 (parameter pt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x24c),	/* type offset = 588 */
/* 202 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 204 (parameter range) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x262),	/* type offset = 610 */
/* 208 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 210 (parameter cookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 212 (parameter range) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x266),	/* type offset = 614 */
/* 216 (parameter rect) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x282),	/* type offset = 642 */
/* 220 (parameter clipped) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x286),	/* type offset = 646 */
/* 224 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 226 (parameter rect) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x28a),	/* type offset = 650 */
/* 230 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 232 (parameter hwnd) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x298),	/* type offset = 664 */
/* 236 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 238 (parameter ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2ae),	/* type offset = 686 */
/* 242 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 244 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 246 (parameter views) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2c4),	/* type offset = 708 */
/* 250 (parameter fetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2da),	/* type offset = 730 */
/* 254 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 256 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 258 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 262 (parameter ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2f0),	/* type offset = 752 */
/* 266 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 268 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 270 (parameter props) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x306),	/* type offset = 774 */
/* 274 (parameter fetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x31c),	/* type offset = 796 */
/* 278 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 280 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 282 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 284 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 286 (parameter cookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 288 (parameter range) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x320),	/* type offset = 800 */
/* 292 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 294 (parameter prop) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x332),	/* type offset = 818 */
/* 298 (parameter range) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x344),	/* type offset = 836 */
/* 302 (parameter header) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x368),	/* type offset = 872 */
/* 306 (parameter stream) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x36c),	/* type offset = 876 */
/* 310 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 312 (parameter prop) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x37e),	/* type offset = 894 */
/* 316 (parameter header) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3a2),	/* type offset = 930 */
/* 320 (parameter stream) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3a6),	/* type offset = 934 */
/* 324 (parameter loader) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3b8),	/* type offset = 952 */
/* 328 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 330 (parameter prop) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3ca),	/* type offset = 970 */
/* 334 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 336 (parameter start) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 338 (parameter end) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 340 (parameter range) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3ee),	/* type offset = 1006 */
/* 344 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 346 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 348 (parameter pes) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3f2),	/* type offset = 1010 */
/* 352 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 354 (parameter phrSession) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x404),	/* type offset = 1028 */
/* 358 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 360 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 362 (parameter pfWriteSession) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x408),	/* type offset = 1032 */
/* 366 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 368 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 370 (parameter ulIndex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 372 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 374 (parameter pSelection) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x43c),	/* type offset = 1084 */
/* 378 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x452),	/* type offset = 1106 */
/* 382 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 384 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 386 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 388 (parameter pSelection) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x468),	/* type offset = 1128 */
/* 392 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 394 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 396 (parameter ppStart) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x490),	/* type offset = 1168 */
/* 400 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 402 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 404 (parameter ppEnd) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4a6),	/* type offset = 1190 */
/* 408 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 410 (parameter ppView) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4bc),	/* type offset = 1212 */
/* 414 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 416 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4d2),	/* type offset = 1234 */
/* 420 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 422 (parameter pdcs) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4de),	/* type offset = 1246 */
/* 426 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 428 (parameter guidProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4e2),	/* type offset = 1250 */
/* 432 (parameter ppProp) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4f8),	/* type offset = 1272 */
/* 436 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 438 (parameter guidProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4fc),	/* type offset = 1276 */
/* 442 (parameter ppProp) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x512),	/* type offset = 1298 */
/* 446 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 448 (parameter prgProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x528),	/* type offset = 1320 */
/* 452 (parameter cProp) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 454 (parameter prgAppProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x55e),	/* type offset = 1374 */
/* 458 (parameter cAppProp) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 460 (parameter ppProperty) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x594),	/* type offset = 1428 */
/* 464 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 466 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5aa),	/* type offset = 1450 */
/* 470 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 472 (parameter ppDm) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5c0),	/* type offset = 1472 */
/* 476 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 478 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 480 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5c4),	/* type offset = 1476 */
/* 484 (parameter ppBackup) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5e8),	/* type offset = 1512 */
/* 488 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 490 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ec),	/* type offset = 1516 */
/* 494 (parameter punk) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f0),	/* type offset = 1520 */
/* 498 (parameter pdwCookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5f6),	/* type offset = 1526 */
/* 502 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 504 (parameter dwCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 506 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 508 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x60c),	/* type offset = 1548 */
/* 512 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 514 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 516 (parameter pProfile) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x628),	/* type offset = 1576 */
/* 520 (parameter pcFetch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x63e),	/* type offset = 1598 */
/* 524 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 526 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 528 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 530 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 532 (parameter dwProfileType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 534 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 536 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x642),	/* type offset = 1602 */
/* 540 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x646),	/* type offset = 1606 */
/* 544 (parameter hkl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 546 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 548 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 550 (parameter dwProfileType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 552 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 554 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x64a),	/* type offset = 1610 */
/* 558 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x64e),	/* type offset = 1614 */
/* 562 (parameter hkl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 564 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 566 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 568 (parameter dwProfileType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 570 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 572 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x652),	/* type offset = 1618 */
/* 576 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x656),	/* type offset = 1622 */
/* 580 (parameter hkl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 582 (parameter pProfile) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x65a),	/* type offset = 1626 */
/* 586 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 588 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 590 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x670),	/* type offset = 1648 */
/* 594 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 596 (parameter rclsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x674),	/* type offset = 1652 */
/* 600 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 602 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 604 (parameter rclsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x678),	/* type offset = 1656 */
/* 608 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 610 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x67c),	/* type offset = 1660 */
/* 614 (parameter pchDesc) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x680),	/* type offset = 1664 */
/* 618 (parameter cchDesc) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 620 (parameter pchIconFile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x68e),	/* type offset = 1678 */
/* 624 (parameter cchFile) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 626 (parameter uIconIndex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 628 (parameter hklsubstitute) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 630 (parameter dwPreferredLayout) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 632 (parameter bEnabledByDefault) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 634 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 636 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 638 (parameter rclsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x69c),	/* type offset = 1692 */
/* 642 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 644 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6a0),	/* type offset = 1696 */
/* 648 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 650 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 652 (parameter catid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6a4),	/* type offset = 1700 */
/* 656 (parameter pProfile) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6a8),	/* type offset = 1704 */
/* 660 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 662 (parameter pguid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6ac),	/* type offset = 1708 */
/* 666 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 668 (parameter pbstrDesc) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6b0),	/* type offset = 1712 */
/* 672 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 674 (parameter pda) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6f4),	/* type offset = 1780 */
/* 678 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 680 (parameter pda) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x710),	/* type offset = 1808 */
/* 684 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 686 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 688 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x726),	/* type offset = 1830 */
/* 692 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 694 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 696 (parameter rgInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x73c),	/* type offset = 1852 */
/* 700 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x752),	/* type offset = 1874 */
/* 704 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 706 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 708 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 710 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 712 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x768),	/* type offset = 1896 */
/* 716 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 718 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 720 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x77e),	/* type offset = 1918 */
/* 724 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x794),	/* type offset = 1940 */
/* 728 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 730 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 732 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 734 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 736 (parameter changed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x798),	/* type offset = 1944 */
/* 740 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 742 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 744 (parameter props) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7ae),	/* type offset = 1966 */
/* 748 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 750 (parameter ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7e4),	/* type offset = 2020 */
/* 754 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 756 (parameter pic) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7e8),	/* type offset = 2024 */
/* 760 (parameter ecReadOnly) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 762 (parameter pEditRecord) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7fa),	/* type offset = 2042 */
/* 766 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 768 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x80c),	/* type offset = 2060 */
/* 772 (parameter pfOk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x81e),	/* type offset = 2078 */
/* 776 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 778 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x822),	/* type offset = 2082 */
/* 782 (parameter pRangeNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x834),	/* type offset = 2100 */
/* 786 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 788 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x846),	/* type offset = 2118 */
/* 792 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 794 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x858),	/* type offset = 2136 */
/* 798 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x85c),	/* type offset = 2140 */
/* 802 (parameter fActivated) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 804 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 806 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x872),	/* type offset = 2162 */
/* 810 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 812 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 814 (parameter pProfile) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x88a),	/* type offset = 2186 */
/* 818 (parameter pcFetch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8a0),	/* type offset = 2208 */
/* 822 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 824 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 826 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 828 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 830 (parameter pdim) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8a4),	/* type offset = 2212 */
/* 834 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 836 (parameter pdim) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8b6),	/* type offset = 2230 */
/* 840 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 842 (parameter pdimFocus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8c8),	/* type offset = 2248 */
/* 846 (parameter pdimPrevFocus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8da),	/* type offset = 2266 */
/* 850 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 852 (parameter pic) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8ec),	/* type offset = 2284 */
/* 856 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 858 (parameter pic) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8fe),	/* type offset = 2302 */
/* 862 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 864 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 866 (parameter pfAccept) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x910),	/* type offset = 2320 */
/* 870 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 872 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 874 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 876 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 878 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 880 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 882 (parameter pchText) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x914),	/* type offset = 2324 */
/* 886 (parameter cchMax) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 888 (parameter pcch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x926),	/* type offset = 2342 */
/* 892 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 894 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 896 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 898 (parameter pchText) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x934),	/* type offset = 2356 */
/* 902 (parameter cch) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 904 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 906 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 908 (parameter ppDataObject) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x94a),	/* type offset = 2378 */
/* 912 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 914 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 916 (parameter rguidService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x94e),	/* type offset = 2382 */
/* 920 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x952),	/* type offset = 2386 */
/* 924 (parameter ppunk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x95c),	/* type offset = 2396 */
/* 928 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 930 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 932 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 934 (parameter pDataObject) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x960),	/* type offset = 2400 */
/* 938 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 940 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 942 (parameter cchReq) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 944 (parameter pcch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x972),	/* type offset = 2418 */
/* 948 (parameter pHalt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x998),	/* type offset = 2456 */
/* 952 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 954 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 956 (parameter cchReq) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 958 (parameter pcch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x99c),	/* type offset = 2460 */
/* 962 (parameter pHalt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9b0),	/* type offset = 2480 */
/* 966 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 968 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 970 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9b4),	/* type offset = 2484 */
/* 974 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 976 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 978 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 980 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9c6),	/* type offset = 2502 */
/* 984 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 986 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 988 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 990 (parameter dir) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 992 (parameter pfNoRegion) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9d8),	/* type offset = 2520 */
/* 996 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 998 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1000 (parameter dir) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1002 (parameter pfNoRegion) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9dc),	/* type offset = 2524 */
/* 1006 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1008 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1010 (parameter pfEmpty) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9e0),	/* type offset = 2528 */
/* 1014 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1016 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1018 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1020 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1022 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1024 (parameter pWith) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9e4),	/* type offset = 2532 */
/* 1028 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1030 (parameter pfEqual) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9f6),	/* type offset = 2550 */
/* 1034 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1036 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1038 (parameter pWith) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9fa),	/* type offset = 2554 */
/* 1042 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1044 (parameter pfEqual) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa0c),	/* type offset = 2572 */
/* 1048 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1050 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1052 (parameter pWith) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa10),	/* type offset = 2576 */
/* 1056 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1058 (parameter plResult) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa22),	/* type offset = 2594 */
/* 1062 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1064 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1066 (parameter pWith) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa26),	/* type offset = 2598 */
/* 1070 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1072 (parameter plResult) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa38),	/* type offset = 2616 */
/* 1076 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1078 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1080 (parameter cchInsert) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1082 (parameter pfInsertOk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa3c),	/* type offset = 2620 */
/* 1086 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1088 (parameter pgStart) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa40),	/* type offset = 2624 */
/* 1092 (parameter pgEnd) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa44),	/* type offset = 2628 */
/* 1096 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1098 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1100 (parameter gStart) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1102 (parameter gEnd) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1104 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1106 (parameter ppClone) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa5a),	/* type offset = 2650 */
/* 1110 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1112 (parameter ppContext) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa70),	/* type offset = 2672 */
/* 1116 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1118 (parameter pacpAnchor) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa74),	/* type offset = 2676 */
/* 1122 (parameter pcch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa78),	/* type offset = 2680 */
/* 1126 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1128 (parameter acpAnchor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1130 (parameter cch) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1132 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1134 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1136 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1138 (parameter pchText) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa7c),	/* type offset = 2684 */
/* 1142 (parameter cch) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1144 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa9c),	/* type offset = 2716 */
/* 1148 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1150 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1152 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1154 (parameter pDataObject) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xaa0),	/* type offset = 2720 */
/* 1158 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xac4),	/* type offset = 2756 */
/* 1162 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1164 (parameter pguid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xac8),	/* type offset = 2760 */
/* 1168 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1170 (parameter pdwReserved) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xacc),	/* type offset = 2764 */
/* 1174 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1176 (parameter pvarValue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf06),	/* type offset = 3846 */
/* 1180 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1182 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1184 (parameter pRangeNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf0a),	/* type offset = 3850 */
/* 1188 (parameter pfAccept) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf1c),	/* type offset = 3868 */
/* 1192 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1194 (parameter pRangeNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf20),	/* type offset = 3872 */
/* 1198 (parameter pfFree) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf32),	/* type offset = 3890 */
/* 1202 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1204 (parameter pRangeThis) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf36),	/* type offset = 3894 */
/* 1208 (parameter pRangeNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf48),	/* type offset = 3912 */
/* 1212 (parameter ppPropStore) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf6c),	/* type offset = 3948 */
/* 1216 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1218 (parameter pPropStore) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf82),	/* type offset = 3970 */
/* 1222 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1224 (parameter pclsid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf86),	/* type offset = 3974 */
/* 1228 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1230 (parameter pStream) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf8a),	/* type offset = 3978 */
/* 1234 (parameter pcb) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf9c),	/* type offset = 3996 */
/* 1238 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1240 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xfb2),	/* type offset = 4018 */
/* 1244 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1246 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1248 (parameter rgCompositionView) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xfc8),	/* type offset = 4040 */
/* 1252 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xfde),	/* type offset = 4062 */
/* 1256 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1258 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1260 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1262 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1264 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xff4),	/* type offset = 4084 */
/* 1268 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1270 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1272 (parameter pNewStart) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xff8),	/* type offset = 4088 */
/* 1276 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1278 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1280 (parameter pNewEnd) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x100a),	/* type offset = 4106 */
/* 1284 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1286 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1288 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1290 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1292 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x101c),	/* type offset = 4124 */
/* 1296 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1298 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1300 (parameter pCompositionRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x102e),	/* type offset = 4142 */
/* 1304 (parameter pSink) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1040),	/* type offset = 4160 */
/* 1308 (parameter ppComposition) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1064),	/* type offset = 4196 */
/* 1312 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1314 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x107a),	/* type offset = 4218 */
/* 1318 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1320 (parameter ecRead) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1322 (parameter pTestRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x107e),	/* type offset = 4222 */
/* 1326 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10a2),	/* type offset = 4258 */
/* 1330 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1332 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1334 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10a6),	/* type offset = 4262 */
/* 1338 (parameter pSink) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10b8),	/* type offset = 4280 */
/* 1342 (parameter ppComposition) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10dc),	/* type offset = 4316 */
/* 1346 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1348 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10e0),	/* type offset = 4320 */
/* 1352 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1354 (parameter pHdr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1104),	/* type offset = 4356 */
/* 1358 (parameter ppStream) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x111a),	/* type offset = 4378 */
/* 1362 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1364 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1366 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1368 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1370 (parameter rguidAttribute) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x111e),	/* type offset = 4382 */
/* 1374 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1376 (parameter pProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1122),	/* type offset = 4386 */
/* 1380 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1134),	/* type offset = 4404 */
/* 1384 (parameter pHdr) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1146),	/* type offset = 4422 */
/* 1388 (parameter pStream) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x114a),	/* type offset = 4426 */
/* 1392 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1394 (parameter pProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x115c),	/* type offset = 4444 */
/* 1398 (parameter pHdr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1180),	/* type offset = 4480 */
/* 1402 (parameter pStream) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1184),	/* type offset = 4484 */
/* 1406 (parameter pLoader) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1196),	/* type offset = 4502 */
/* 1410 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1412 (parameter pProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x11a8),	/* type offset = 4520 */
/* 1416 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1418 (parameter acpStart) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1420 (parameter acpEnd) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1422 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11cc),	/* type offset = 4556 */
/* 1426 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1428 (parameter pguid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11d0),	/* type offset = 4560 */
/* 1432 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1434 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1436 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11e6),	/* type offset = 4582 */
/* 1440 (parameter pTargetRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x11ea),	/* type offset = 4586 */
/* 1444 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1446 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1448 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x11fc),	/* type offset = 4604 */
/* 1452 (parameter pvarValue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x120e),	/* type offset = 4622 */
/* 1456 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1458 (parameter ppContext) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1224),	/* type offset = 4644 */
/* 1462 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1464 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1466 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1228),	/* type offset = 4648 */
/* 1470 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x124c),	/* type offset = 4684 */
/* 1474 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1476 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1478 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1480 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1250),	/* type offset = 4688 */
/* 1484 (parameter pPropStore) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1262),	/* type offset = 4706 */
/* 1488 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1490 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1492 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1274),	/* type offset = 4724 */
/* 1496 (parameter pvarValue) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1290),	/* type offset = 4752 */
/* 1500 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1502 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1504 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1294),	/* type offset = 4756 */
/* 1508 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1510 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1512 (parameter pvarValue) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12b0),	/* type offset = 4784 */
/* 1516 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1518 (parameter pvarValue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12b4),	/* type offset = 4788 */
/* 1522 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1524 (parameter rguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12b8),	/* type offset = 4792 */
/* 1528 (parameter ppcomp) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12ce),	/* type offset = 4814 */
/* 1532 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1534 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1536 (parameter rguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12d2),	/* type offset = 4818 */
/* 1540 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1542 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12e8),	/* type offset = 4840 */
/* 1546 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1548 (parameter rguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12ec),	/* type offset = 4844 */
/* 1552 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1554 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1302),	/* type offset = 4866 */
/* 1558 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1560 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1562 (parameter rgContext) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1318),	/* type offset = 4888 */
/* 1566 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x132e),	/* type offset = 4910 */
/* 1570 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1572 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1574 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1576 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1578 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1344),	/* type offset = 4932 */
/* 1582 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1584 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1586 (parameter rgDocumentMgr) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x135a),	/* type offset = 4954 */
/* 1590 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1370),	/* type offset = 4976 */
/* 1594 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1596 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1598 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1600 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1602 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1604 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1374),	/* type offset = 4980 */
/* 1608 (parameter punk) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1378),	/* type offset = 4984 */
/* 1612 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1614 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1616 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x137e),	/* type offset = 4990 */
/* 1620 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1622 (parameter dwProfileType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1624 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 1626 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1382),	/* type offset = 4994 */
/* 1630 (parameter catid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1386),	/* type offset = 4998 */
/* 1634 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x138a),	/* type offset = 5002 */
/* 1638 (parameter hkl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 1640 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1642 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1644 (parameter range) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x138e),	/* type offset = 5006 */
/* 1648 (parameter pSink) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13a0),	/* type offset = 5024 */
/* 1652 (parameter pdwCookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13b2),	/* type offset = 5042 */
/* 1656 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1658 (parameter dwCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1660 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1662 (parameter range) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13b6),	/* type offset = 5046 */
/* 1666 (parameter pSink) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13c8),	/* type offset = 5064 */
/* 1670 (parameter pdwCookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13da),	/* type offset = 5082 */
/* 1674 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1676 (parameter dwCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1678 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 8 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2) */
        0x5b,	/* FC_END */
/* 20 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff2),	/* Offset= -14 (8) */
/* 24 (unsigned short[]) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x9,	/* Corr desc: field clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 34 (FLAGGED_WORD_BLOB) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xfff2),	/* Offset= -14 (24) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 44 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (34) */
/* 48 (BSTR) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (44) */
/* 58 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff4),	/* Offset= -12 (48) */
/* 62 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffc8),	/* Offset= -56 (8) */
/* 66 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 72 (IID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (66) */
        0x5b,	/* FC_END */
/* 84 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (72) */
/* 88 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 94 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (88) */
/* 98 (IEnumTfFunctionProviders *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe4b24db0),
        NdrFcShort(0x0990),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 116 (IEnumTfFunctionProviders **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (98) */
/* 120 (ITfFunctionProvider *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x101d6610),
        NdrFcShort(0x0990),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 138 (ITfFunctionProvider **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter count, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x29,	/* Corr desc: parameter fetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (120) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 156 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (138) */
/* 160 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 164 (TfClientId *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 168 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 186 (ITfDocumentMgr **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (168) */
/* 190 (IEnumTfDocumentMgrs *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e808),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 208 (IEnumTfDocumentMgrs **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (190) */
/* 212 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 230 (ITfDocumentMgr **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (212) */
/* 234 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 252 (RemotableHandle) */
        0x2a,	/* FC_ENCAPSULATED_UNION */
        0x48,	/* Switch type= FC_LONG */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x2),	/* 2 */
        NdrFcLong(0x48746457),	/* 1215587415 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x52746457),	/* 1383359575 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcShort(0xffff),
/* 272 (wireHWND) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (252) */
/* 276 (HWND) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x1),	/* Function offset= 1 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (272) */
/* 286 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 304 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 322 (ITfDocumentMgr **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (304) */
/* 326 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 330 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 336 (CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (330) */
        0x5b,	/* FC_END */
/* 348 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (336) */
/* 352 (ITfFunctionProvider *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x101d6610),
        NdrFcShort(0x0990),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 370 (ITfFunctionProvider **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (352) */
/* 374 (IEnumTfFunctionProviders *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe4b24db0),
        NdrFcShort(0x0990),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 392 (IEnumTfFunctionProviders **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (374) */
/* 396 (ITfCompartmentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x7dcf57ac),
        NdrFcShort(0x18ad),
        NdrFcShort(0x438b),
        0x82,
        0x4d,
        0x97,
        0x9b,
        0xff,
        0xb7,
        0x4b,
        0x7c,

/* 414 (ITfCompartmentMgr **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (396) */
/* 418 (TfClientId *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 422 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 426 (CLSID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffa4),	/* Offset= -92 (336) */
/* 430 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 448 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (430) */
/* 452 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 470 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 488 (ITfContext **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (470) */
/* 492 (TfEditCookie *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 496 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 514 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 532 (ITfContext **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (514) */
/* 536 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 554 (ITfContext **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (536) */
/* 558 (IEnumTfContexts *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x8f1a7ea6),
        NdrFcShort(0x1654),
        NdrFcShort(0x4502),
        0xa8,
        0x6e,
        0xb2,
        0x90,
        0x23,
        0x44,
        0xd5,
        0x07,

/* 576 (IEnumTfContexts **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (558) */
/* 580 (const POINT) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 588 (const POINT *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (580) */
/* 592 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 610 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (592) */
/* 614 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 632 (RECT) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 642 (RECT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff4),	/* Offset= -12 (632) */
/* 646 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 650 (RECT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (632) */
/* 654 (HWND) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x1),	/* Function offset= 1 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfe7a),	/* Offset= -390 (272) */
/* 664 (HWND *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff4),	/* Offset= -12 (654) */
/* 668 (IEnumTfContextViews *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xf0c0f8dd),
        NdrFcShort(0xcf38),
        NdrFcShort(0x44e1),
        0xbb,
        0x0f,
        0x68,
        0xcf,
        0x0d,
        0x55,
        0x1c,
        0x78,

/* 686 (IEnumTfContextViews **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (668) */
/* 690 (ITfContextView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x2433bf8e),
        NdrFcShort(0x0f9b),
        NdrFcShort(0x435c),
        0xba,
        0x2c,
        0x18,
        0x06,
        0x11,
        0x97,
        0x8c,
        0x30,

/* 708 (ITfContextView **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter count, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x29,	/* Corr desc: parameter fetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (690) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 726 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (708) */
/* 730 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 734 (IEnumTfProperties *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x19188cb0),
        NdrFcShort(0xaca9),
        NdrFcShort(0x11d2),
        0xaf,
        0xc5,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 752 (IEnumTfProperties **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (734) */
/* 756 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 774 (ITfProperty **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter count, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x29,	/* Corr desc: parameter fetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (756) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 792 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (774) */
/* 796 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 800 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 818 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 836 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 854 (TF_PERSISTENT_PROPERTY_HEADER_ACP) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfcac),	/* Offset= -852 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfdec),	/* Offset= -532 (336) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 872 (TF_PERSISTENT_PROPERTY_HEADER_ACP *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (854) */
/* 876 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 894 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 912 (const TF_PERSISTENT_PROPERTY_HEADER_ACP) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfc72),	/* Offset= -910 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfdb2),	/* Offset= -590 (336) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 930 (const TF_PERSISTENT_PROPERTY_HEADER_ACP *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (912) */
/* 934 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 952 (ITfPersistentPropertyLoaderACP *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x4ef89150),
        NdrFcShort(0x0807),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 970 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 988 (ITfRangeACP *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x057a6296),
        NdrFcShort(0x029b),
        NdrFcShort(0x4154),
        0xb7,
        0x9a,
        0x0d,
        0x46,
        0x1d,
        0x4e,
        0xa9,
        0x4c,

/* 1006 (ITfRangeACP **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (988) */
/* 1010 (ITfEditSession *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e803),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1028 (HRESULT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1032 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1036 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1054 (TF_SELECTIONSTYLE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1060) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1066 (TF_SELECTION) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1072) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (1036) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (1054) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1084 (TF_SELECTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x14),	/* offset = 20 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1066) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1102 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1084) */
/* 1106 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1110 (const TF_SELECTION) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1116) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffac),	/* Offset= -84 (1036) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffba),	/* Offset= -70 (1054) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1128 (const TF_SELECTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1110) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1146 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1128) */
/* 1150 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1168 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1150) */
/* 1172 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1190 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1172) */
/* 1194 (ITfContextView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x2433bf8e),
        NdrFcShort(0x0f9b),
        NdrFcShort(0x435c),
        0xba,
        0x2c,
        0x18,
        0x06,
        0x11,
        0x97,
        0x8c,
        0x30,

/* 1212 (ITfContextView **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1194) */
/* 1216 (IEnumTfContextViews *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xf0c0f8dd),
        NdrFcShort(0xcf38),
        NdrFcShort(0x44e1),
        0xbb,
        0x0f,
        0x68,
        0xcf,
        0x0d,
        0x55,
        0x1c,
        0x78,

/* 1234 (IEnumTfContextViews **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1216) */
/* 1238 (TF_STATUS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1246 (TF_STATUS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff6),	/* Offset= -10 (1238) */
/* 1250 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb24),	/* Offset= -1244 (8) */
/* 1254 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 1272 (ITfProperty **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1254) */
/* 1276 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb0a),	/* Offset= -1270 (8) */
/* 1280 (ITfReadOnlyProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x17d49a3d),
        NdrFcShort(0xf8b8),
        NdrFcShort(0x4b2f),
        0xb2,
        0x54,
        0x52,
        0x31,
        0x9d,
        0xd6,
        0x4c,
        0x53,

/* 1298 (ITfReadOnlyProperty **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1280) */
/* 1302 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1308 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1302) */
        0x5b,	/* FC_END */
/* 1320 (const GUID **) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cProp, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (1308) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd7),	/* Offset= -41 (1308) */
        0x5b,	/* FC_END */
/* 1352 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffde),	/* Offset= -34 (1320) */
/* 1356 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1362 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1356) */
        0x5b,	/* FC_END */
/* 1374 (const GUID **) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cAppProp, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (1362) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd7),	/* Offset= -41 (1362) */
        0x5b,	/* FC_END */
/* 1406 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffde),	/* Offset= -34 (1374) */
/* 1410 (ITfReadOnlyProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x17d49a3d),
        NdrFcShort(0xf8b8),
        NdrFcShort(0x4b2f),
        0xb2,
        0x54,
        0x52,
        0x31,
        0x9d,
        0xd6,
        0x4c,
        0x53,

/* 1428 (ITfReadOnlyProperty **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1410) */
/* 1432 (IEnumTfProperties *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x19188cb0),
        NdrFcShort(0xaca9),
        NdrFcShort(0x11d2),
        0xaf,
        0xc5,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 1450 (IEnumTfProperties **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1432) */
/* 1454 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1472 (ITfDocumentMgr **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1454) */
/* 1476 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1494 (ITfRangeBackup *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x463a506d),
        NdrFcShort(0x6992),
        NdrFcShort(0x49d2),
        0x9b,
        0x88,
        0x93,
        0xd5,
        0x5e,
        0x70,
        0xbb,
        0x16,

/* 1512 (ITfRangeBackup **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1494) */
/* 1516 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfa5a),	/* Offset= -1446 (72) */
/* 1520 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
/* 1526 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1530 (IEnumTfInputProcessorProfiles *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x71c6e74d),
        NdrFcShort(0x0f28),
        NdrFcShort(0x11d8),
        0xa8,
        0x2a,
        0x00,
        0x06,
        0x5b,
        0x84,
        0x43,
        0x5c,

/* 1548 (IEnumTfInputProcessorProfiles **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1530) */
/* 1552 (TF_INPUTPROCESSORPROFILE) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x48),	/* 72 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x38,	/* FC_ALIGNM4 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfb37),	/* Offset= -1225 (336) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf9eb),	/* Offset= -1557 (8) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf9e7),	/* Offset= -1561 (8) */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1576 (TF_INPUTPROCESSORPROFILE *) */
        0x1c,	/* FC_CVARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x48),	/* 72 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x29,	/* Corr desc: parameter pcFetch, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffda),	/* Offset= -38 (1552) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1594 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1576) */
/* 1598 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1602 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb0c),	/* Offset= -1268 (336) */
/* 1606 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9c0),	/* Offset= -1600 (8) */
/* 1610 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb04),	/* Offset= -1276 (336) */
/* 1614 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9b8),	/* Offset= -1608 (8) */
/* 1618 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfafc),	/* Offset= -1284 (336) */
/* 1622 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9b0),	/* Offset= -1616 (8) */
/* 1626 (TF_INPUTPROCESSORPROFILE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffb4),	/* Offset= -76 (1552) */
/* 1630 (IEnumTfInputProcessorProfiles *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x71c6e74d),
        NdrFcShort(0x0f28),
        NdrFcShort(0x11d8),
        0xa8,
        0x2a,
        0x00,
        0x06,
        0x5b,
        0x84,
        0x43,
        0x5c,

/* 1648 (IEnumTfInputProcessorProfiles **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1630) */
/* 1652 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfada),	/* Offset= -1318 (336) */
/* 1656 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfad6),	/* Offset= -1322 (336) */
/* 1660 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf98a),	/* Offset= -1654 (8) */
/* 1664 (const WCHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x29,	/* Corr desc: parameter cchDesc, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 1674 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1664) */
/* 1678 (const WCHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x29,	/* Corr desc: parameter cchFile, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x1c),	/* offset = 28 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 1688 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1678) */
/* 1692 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfab2),	/* Offset= -1358 (336) */
/* 1696 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf966),	/* Offset= -1690 (8) */
/* 1700 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf962),	/* Offset= -1694 (8) */
/* 1704 (TF_INPUTPROCESSORPROFILE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff66),	/* Offset= -154 (1552) */
/* 1708 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf95a),	/* Offset= -1702 (8) */
/* 1712 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf97e),	/* Offset= -1666 (48) */
/* 1716 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x2),	/* 2 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcShort(0xffff),
/* 1734 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x6,	/* Corr desc: field type, FC_SHORT */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffe8),	/* Offset= -24 (1716) */
/* 1742 (TF_DA_COLOR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1748) */
        0x0d,	/* FC_ENUM16 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (1734) */
        0x5b,	/* FC_END */
/* 1756 (TF_DISPLAYATTRIBUTE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1762) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1742) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe4),	/* Offset= -28 (1742) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1742) */
        0x0d,	/* FC_ENUM16 */
        0x5b,	/* FC_END */
/* 1780 (TF_DISPLAYATTRIBUTE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffe6),	/* Offset= -26 (1756) */
/* 1784 (const TF_DISPLAYATTRIBUTE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1790) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcc),	/* Offset= -52 (1742) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffc8),	/* Offset= -56 (1742) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffc2),	/* Offset= -62 (1742) */
        0x0d,	/* FC_ENUM16 */
        0x5b,	/* FC_END */
/* 1808 (const TF_DISPLAYATTRIBUTE *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe6),	/* Offset= -26 (1784) */
/* 1812 (IEnumTfDisplayAttributeInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x7cef04d7),
        NdrFcShort(0xcb75),
        NdrFcShort(0x4e80),
        0xa7,
        0xab,
        0x5f,
        0x5b,
        0xc7,
        0xd3,
        0x32,
        0xde,

/* 1830 (IEnumTfDisplayAttributeInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1812) */
/* 1834 (ITfDisplayAttributeInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x70528852),
        NdrFcShort(0x2f26),
        NdrFcShort(0x4aea),
        0x8c,
        0x96,
        0x21,
        0x51,
        0x50,
        0x57,
        0x89,
        0x32,

/* 1852 (ITfDisplayAttributeInfo **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1834) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1870 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1852) */
/* 1874 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1878 (IEnumTfRanges *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xf99d3f40),
        NdrFcShort(0x8e32),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 1896 (IEnumTfRanges **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1878) */
/* 1900 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1918 (ITfRange **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1900) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1936 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1918) */
/* 1940 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1944 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1948 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1954 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1948) */
        0x5b,	/* FC_END */
/* 1966 (const GUID **) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter count, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (1954) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd7),	/* Offset= -41 (1954) */
        0x5b,	/* FC_END */
/* 1998 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffde),	/* Offset= -34 (1966) */
/* 2002 (IEnumTfRanges *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xf99d3f40),
        NdrFcShort(0x8e32),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 2020 (IEnumTfRanges **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2002) */
/* 2024 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2042 (ITfEditRecord *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x42d4d099),
        NdrFcShort(0x7c1a),
        NdrFcShort(0x4a89),
        0xb8,
        0x36,
        0x6c,
        0x6f,
        0x22,
        0x16,
        0x0d,
        0xf0,

/* 2060 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 2078 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2082 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 2100 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2118 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 2136 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf8f6),	/* Offset= -1802 (336) */
/* 2140 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf7aa),	/* Offset= -2134 (8) */
/* 2144 (IEnumTfLanguageProfiles *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x3d61bf11),
        NdrFcShort(0xac5f),
        NdrFcShort(0x42c8),
        0xa4,
        0xcb,
        0x93,
        0x1b,
        0xcc,
        0x28,
        0xc7,
        0x44,

/* 2162 (IEnumTfLanguageProfiles **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2144) */
/* 2166 (TF_LANGUAGEPROFILE) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x38),	/* 56 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf8d4),	/* Offset= -1836 (336) */
        0x06,	/* FC_SHORT */
        0x38,	/* FC_ALIGNM4 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf786),	/* Offset= -2170 (8) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf781),	/* Offset= -2175 (8) */
        0x5b,	/* FC_END */
/* 2186 (TF_LANGUAGEPROFILE *) */
        0x1c,	/* FC_CVARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x38),	/* 56 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x29,	/* Corr desc: parameter pcFetch, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (2166) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2204 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (2186) */
/* 2208 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2212 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2230 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2248 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2266 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2284 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2302 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2320 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2324 (WCHAR *) */
        0x1c,	/* FC_CVARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x29,	/* Corr desc: parameter cchMax, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x29,	/* Corr desc: parameter pcch, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x14),	/* offset = 20 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 2338 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff0),	/* Offset= -16 (2324) */
/* 2342 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2346 (const WCHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x28,	/* Corr desc: parameter cch, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 2356 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (2346) */
/* 2360 (IDataObject *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000010e),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2378 (IDataObject **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2360) */
/* 2382 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf6b8),	/* Offset= -2376 (8) */
/* 2386 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf6f4),	/* Offset= -2316 (72) */
/* 2390 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
/* 2396 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (2390) */
/* 2400 (IDataObject *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000010e),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2418 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2422 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2440 (const TF_HALTCOND) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (2446) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe4),	/* Offset= -28 (2422) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2456 (const TF_HALTCOND *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (2440) */
/* 2460 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2464 (const TF_HALTCOND) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (2470) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcc),	/* Offset= -52 (2422) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2480 (const TF_HALTCOND *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (2464) */
/* 2484 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2502 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2520 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2524 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2528 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2532 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2550 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2554 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2572 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2576 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2594 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2598 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2616 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2620 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2624 (TfGravity *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0d,	/* FC_ENUM16 */
        0x5c,	/* FC_PAD */
/* 2628 (TfGravity *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0d,	/* FC_ENUM16 */
        0x5c,	/* FC_PAD */
/* 2632 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2650 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2632) */
/* 2654 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2672 (ITfContext **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2654) */
/* 2676 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2680 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2684 (const WCHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x28,	/* Corr desc: parameter cch, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 2694 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (2684) */
/* 2698 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2716 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2698) */
/* 2720 (IDataObject *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000010e),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2738 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2756 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2738) */
/* 2760 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf53e),	/* Offset= -2754 (8) */
/* 2764 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2768 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf550),	/* Offset= -2736 (34) */
/* 2772 (CY) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 2778 (DECIMAL) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x08,	/* FC_LONG */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 2788 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2806 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2824 (wireBSTR *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf502),	/* Offset= -2814 (34) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf4fd),	/* Offset= -2819 (34) */
        0x5b,	/* FC_END */
/* 2856 (SAFEARR_BSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2868) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2868 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (2824) */
/* 2872 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2890 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (2872) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2908 (SAFEARR_UNKNOWN) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2920) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2920 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2890) */
/* 2924 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2942 (IDispatch **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (2924) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2960 (SAFEARR_DISPATCH) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2972) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2972 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2942) */
/* 2976 (wireVARIANT *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x32c),	/* Offset= 812 (3812) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x327),	/* Offset= 807 (3812) */
        0x5b,	/* FC_END */
/* 3008 (SAFEARR_VARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (3020) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3020 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (2976) */
/* 3024 (IRecordInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000002f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3042 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3052 (struct _wireBRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (3068) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (3024) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 3068 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (3042) */
/* 3072 (wireBRECORD *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (3052) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffcf),	/* Offset= -49 (3052) */
        0x5b,	/* FC_END */
/* 3104 (SAFEARR_BRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (3116) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3116 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (3072) */
/* 3120 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3138 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (3120) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3156 (SAFEARR_HAVEIID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (3172) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf3e8),	/* Offset= -3096 (72) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3172 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffdc),	/* Offset= -36 (3138) */
/* 3176 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3186 (BYTE_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (3176) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3206 (unsigned short *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 3216 (WORD_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (3206) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3236 (ULONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3246 (DWORD_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (3236) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3266 (hyper *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 3276 (HYPER_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (3266) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3296 (SAFEARRAYUNION) */
        0x2a,	/* FC_ENCAPSULATED_UNION */
        0x49,	/* Switch type= FC_ULONG */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0xa),	/* 10 */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xfe3e),	/* Offset= -450 (2856) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfe6c),	/* Offset= -404 (2908) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfe9a),	/* Offset= -358 (2960) */
        NdrFcLong(0xc),	/* 12 */
        NdrFcShort(0xfec4),	/* Offset= -316 (3008) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xff1e),	/* Offset= -226 (3104) */
        NdrFcLong(0x800d),	/* 32781 */
        NdrFcShort(0xff4c),	/* Offset= -180 (3156) */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0xff64),	/* Offset= -156 (3186) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xff7c),	/* Offset= -132 (3216) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xff94),	/* Offset= -108 (3246) */
        NdrFcLong(0x14),	/* 20 */
        NdrFcShort(0xffac),	/* Offset= -84 (3276) */
        NdrFcShort(0xffff),
/* 3364 (SAFEARRAYBOUND) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3372 (SAFEARRAYBOUND[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x7,	/* Corr desc: field cDims, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xffd8),	/* offset = -40 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffee),	/* Offset= -18 (3364) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3386 (struct _wireSAFEARRAY) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x28),	/* 40 */
        NdrFcShort(0xffee),	/* Offset= -18 (3372) */
        NdrFcShort(0x0),	/* Offset= 0 (3392) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff98),	/* Offset= -104 (3296) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3404 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (3386) */
/* 3408 (signed char *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 3412 (USHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x07,	/* FC_USHORT */
        0x5c,	/* FC_PAD */
/* 3416 (ULONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 3420 (INT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3424 (UINT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 3428 (BYTE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 3432 (SHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 3436 (LONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3440 (FLOAT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0a,	/* FC_FLOAT */
        0x5c,	/* FC_PAD */
/* 3444 (DOUBLE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 3448 (VARIANT_BOOL *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 3452 (SCODE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3456 (DATE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 3460 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf29c),	/* Offset= -3428 (34) */
/* 3464 (wireBSTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3460) */
/* 3468 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x156),	/* Offset= 342 (3812) */
/* 3472 (wireVARIANT *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3468) */
/* 3476 (CY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd3e),	/* Offset= -706 (2772) */
/* 3480 (DECIMAL *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd40),	/* Offset= -704 (2778) */
/* 3484 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3502 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3484) */
/* 3506 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3524 (IDispatch **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3506) */
/* 3528 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff70),	/* Offset= -144 (3386) */
/* 3532 (wireSAFEARRAY *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3528) */
/* 3536 (wireBRECORD) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfe1a),	/* Offset= -486 (3052) */
/* 3540 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x2b),	/* 43 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x12),	/* 18 */
        NdrFcShort(0x8007),	/* Simple arm type: FC_USHORT */
        NdrFcLong(0x13),	/* 19 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x16),	/* 22 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x17),	/* 23 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x11),	/* 17 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x800a),	/* Simple arm type: FC_FLOAT */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0xb),	/* 11 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0xa),	/* 10 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xff4e),	/* Offset= -178 (3460) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xfc98),	/* Offset= -872 (2772) */
        NdrFcLong(0xe),	/* 14 */
        NdrFcShort(0xfc98),	/* Offset= -872 (2778) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfc9c),	/* Offset= -868 (2788) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfca8),	/* Offset= -856 (2806) */
        NdrFcLong(0x2000),	/* 8192 */
        NdrFcShort(0xff74),	/* Offset= -140 (3528) */
        NdrFcLong(0x4010),	/* 16400 */
        NdrFcShort(0xfef6),	/* Offset= -266 (3408) */
        NdrFcLong(0x4012),	/* 16402 */
        NdrFcShort(0xfef4),	/* Offset= -268 (3412) */
        NdrFcLong(0x4013),	/* 16403 */
        NdrFcShort(0xfef2),	/* Offset= -270 (3416) */
        NdrFcLong(0x4016),	/* 16406 */
        NdrFcShort(0xfef0),	/* Offset= -272 (3420) */
        NdrFcLong(0x4017),	/* 16407 */
        NdrFcShort(0xfeee),	/* Offset= -274 (3424) */
        NdrFcLong(0x4011),	/* 16401 */
        NdrFcShort(0xfeec),	/* Offset= -276 (3428) */
        NdrFcLong(0x4002),	/* 16386 */
        NdrFcShort(0xfeea),	/* Offset= -278 (3432) */
        NdrFcLong(0x4003),	/* 16387 */
        NdrFcShort(0xfee8),	/* Offset= -280 (3436) */
        NdrFcLong(0x4004),	/* 16388 */
        NdrFcShort(0xfee6),	/* Offset= -282 (3440) */
        NdrFcLong(0x4005),	/* 16389 */
        NdrFcShort(0xfee4),	/* Offset= -284 (3444) */
        NdrFcLong(0x400b),	/* 16395 */
        NdrFcShort(0xfee2),	/* Offset= -286 (3448) */
        NdrFcLong(0x400a),	/* 16394 */
        NdrFcShort(0xfee0),	/* Offset= -288 (3452) */
        NdrFcLong(0x4007),	/* 16391 */
        NdrFcShort(0xfede),	/* Offset= -290 (3456) */
        NdrFcLong(0x4008),	/* 16392 */
        NdrFcShort(0xfee0),	/* Offset= -288 (3464) */
        NdrFcLong(0x400c),	/* 16396 */
        NdrFcShort(0xfee2),	/* Offset= -286 (3472) */
        NdrFcLong(0x4006),	/* 16390 */
        NdrFcShort(0xfee0),	/* Offset= -288 (3476) */
        NdrFcLong(0x400e),	/* 16398 */
        NdrFcShort(0xfede),	/* Offset= -290 (3480) */
        NdrFcLong(0x400d),	/* 16397 */
        NdrFcShort(0xfeee),	/* Offset= -274 (3502) */
        NdrFcLong(0x4009),	/* 16393 */
        NdrFcShort(0xfefe),	/* Offset= -258 (3524) */
        NdrFcLong(0x6000),	/* 24576 */
        NdrFcShort(0xff00),	/* Offset= -256 (3532) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xfefe),	/* Offset= -258 (3536) */
        NdrFcLong(0x4024),	/* 16420 */
        NdrFcShort(0xfef8),	/* Offset= -264 (3536) */
        NdrFcShort(0xffff),
/* 3804 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x7,	/* Corr desc: field vt, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xfef2),	/* Offset= -270 (3540) */
/* 3812 (struct _wireVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (3818) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (3804) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3832 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (3812) */
/* 3836 (VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x2),	/* Function offset= 2 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (3832) */
/* 3846 (VARIANT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff4),	/* Offset= -12 (3836) */
/* 3850 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 3868 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3872 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 3890 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3894 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 3912 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 3930 (ITfPropertyStore *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x6834b120),
        NdrFcShort(0x88cb),
        NdrFcShort(0x11d2),
        0xbf,
        0x45,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 3948 (ITfPropertyStore **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3930) */
/* 3952 (ITfPropertyStore *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x6834b120),
        NdrFcShort(0x88cb),
        NdrFcShort(0x11d2),
        0xbf,
        0x45,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 3970 (ITfPropertyStore **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3952) */
/* 3974 (CLSID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf1c8),	/* Offset= -3640 (336) */
/* 3978 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3996 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4000 (IEnumITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x5efd22ba),
        NdrFcShort(0x7838),
        NdrFcShort(0x46cb),
        0x88,
        0xe2,
        0xca,
        0xdb,
        0x14,
        0x12,
        0x4f,
        0x8f,

/* 4018 (IEnumITfCompositionView **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4000) */
/* 4022 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 4040 (ITfCompositionView **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (4022) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4058 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4040) */
/* 4062 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4066 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4084 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4066) */
/* 4088 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4106 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4124 (ITfComposition *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x20168d64),
        NdrFcShort(0x5a8f),
        NdrFcShort(0x4a5a),
        0xb7,
        0xbd,
        0xcf,
        0xa2,
        0x9f,
        0x4d,
        0x0f,
        0xd9,

/* 4142 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4160 (ITfCompositionSink *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa781718c),
        NdrFcShort(0x579a),
        NdrFcShort(0x4b15),
        0xa2,
        0x80,
        0x32,
        0xb8,
        0x57,
        0x7a,
        0xcc,
        0x5e,

/* 4178 (ITfComposition *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x20168d64),
        NdrFcShort(0x5a8f),
        NdrFcShort(0x4a5a),
        0xb7,
        0xbd,
        0xcf,
        0xa2,
        0x9f,
        0x4d,
        0x0f,
        0xd9,

/* 4196 (ITfComposition **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4178) */
/* 4200 (IEnumITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x5efd22ba),
        NdrFcShort(0x7838),
        NdrFcShort(0x46cb),
        0x88,
        0xe2,
        0xca,
        0xdb,
        0x14,
        0x12,
        0x4f,
        0x8f,

/* 4218 (IEnumITfCompositionView **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4200) */
/* 4222 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4240 (IEnumITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x5efd22ba),
        NdrFcShort(0x7838),
        NdrFcShort(0x46cb),
        0x88,
        0xe2,
        0xca,
        0xdb,
        0x14,
        0x12,
        0x4f,
        0x8f,

/* 4258 (IEnumITfCompositionView **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4240) */
/* 4262 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 4280 (ITfCompositionSink *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa781718c),
        NdrFcShort(0x579a),
        NdrFcShort(0x4b15),
        0xa2,
        0x80,
        0x32,
        0xb8,
        0x57,
        0x7a,
        0xcc,
        0x5e,

/* 4298 (ITfComposition *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x20168d64),
        NdrFcShort(0x5a8f),
        NdrFcShort(0x4a5a),
        0xb7,
        0xbd,
        0xcf,
        0xa2,
        0x9f,
        0x4d,
        0x0f,
        0xd9,

/* 4316 (ITfComposition **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4298) */
/* 4320 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 4338 (const TF_PERSISTENT_PROPERTY_HEADER_ACP) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xef10),	/* Offset= -4336 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf050),	/* Offset= -4016 (336) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4356 (const TF_PERSISTENT_PROPERTY_HEADER_ACP *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4338) */
/* 4360 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4378 (IStream **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4360) */
/* 4382 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xeee8),	/* Offset= -4376 (8) */
/* 4386 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4404 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4422 (TF_PERSISTENT_PROPERTY_HEADER_ACP *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf20e),	/* Offset= -3570 (854) */
/* 4426 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4444 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4462 (const TF_PERSISTENT_PROPERTY_HEADER_ACP) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xee94),	/* Offset= -4460 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xefd4),	/* Offset= -4140 (336) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4480 (const TF_PERSISTENT_PROPERTY_HEADER_ACP *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4462) */
/* 4484 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4502 (ITfPersistentPropertyLoaderACP *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x4ef89150),
        NdrFcShort(0x0807),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4520 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4538 (ITfRangeACP *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x057a6296),
        NdrFcShort(0x029b),
        NdrFcShort(0x4154),
        0xb7,
        0x9a,
        0x0d,
        0x46,
        0x1d,
        0x4e,
        0xa9,
        0x4c,

/* 4556 (ITfRangeACP **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4538) */
/* 4560 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xee36),	/* Offset= -4554 (8) */
/* 4564 (IEnumTfRanges *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xf99d3f40),
        NdrFcShort(0x8e32),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4582 (IEnumTfRanges **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4564) */
/* 4586 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4604 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4622 (VARIANT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfcec),	/* Offset= -788 (3836) */
/* 4626 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4644 (ITfContext **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4626) */
/* 4648 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4666 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4684 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4666) */
/* 4688 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4706 (ITfPropertyStore *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x6834b120),
        NdrFcShort(0x88cb),
        NdrFcShort(0x11d2),
        0xbf,
        0x45,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4724 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4742 (const VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x2),	/* Function offset= 2 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfc6a),	/* Offset= -918 (3832) */
/* 4752 (const VARIANT *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4742) */
/* 4756 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4774 (const VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x2),	/* Function offset= 2 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfc4a),	/* Offset= -950 (3832) */
/* 4784 (const VARIANT *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4774) */
/* 4788 (VARIANT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfc46),	/* Offset= -954 (3836) */
/* 4792 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xed4e),	/* Offset= -4786 (8) */
/* 4796 (ITfCompartment *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xbb08f7a9),
        NdrFcShort(0x607a),
        NdrFcShort(0x4384),
        0x86,
        0x23,
        0x05,
        0x68,
        0x92,
        0xb6,
        0x43,
        0x71,

/* 4814 (ITfCompartment **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4796) */
/* 4818 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xed34),	/* Offset= -4812 (8) */
/* 4822 (IEnumGUID *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0002e000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4840 (IEnumGUID **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4822) */
/* 4844 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xed1a),	/* Offset= -4838 (8) */
/* 4848 (IEnumTfContexts *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x8f1a7ea6),
        NdrFcShort(0x1654),
        NdrFcShort(0x4502),
        0xa8,
        0x6e,
        0xb2,
        0x90,
        0x23,
        0x44,
        0xd5,
        0x07,

/* 4866 (IEnumTfContexts **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4848) */
/* 4870 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4888 (ITfContext **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (4870) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4906 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4888) */
/* 4910 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4914 (IEnumTfDocumentMgrs *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e808),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4932 (IEnumTfDocumentMgrs **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4914) */
/* 4936 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4954 (ITfDocumentMgr **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (4936) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4972 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4954) */
/* 4976 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4980 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xecd2),	/* Offset= -4910 (72) */
/* 4984 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 4990 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xecc8),	/* Offset= -4920 (72) */
/* 4994 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xedcc),	/* Offset= -4660 (336) */
/* 4998 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xec80),	/* Offset= -4992 (8) */
/* 5002 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xec7c),	/* Offset= -4996 (8) */
/* 5006 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 5024 (ITfMouseSink *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa1adaaa2),
        NdrFcShort(0x3a24),
        NdrFcShort(0x449d),
        0xac,
        0x96,
        0x51,
        0x83,
        0xe7,
        0xf5,
        0xc2,
        0x17,

/* 5042 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5046 (ITfRangeACP *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x057a6296),
        NdrFcShort(0x029b),
        NdrFcShort(0x4154),
        0xb7,
        0x9a,
        0x0d,
        0x46,
        0x1d,
        0x4e,
        0xa9,
        0x4c,

/* 5064 (ITfMouseSink *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa1adaaa2),
        NdrFcShort(0x3a24),
        NdrFcShort(0x449d),
        0xac,
        0x96,
        0x51,
        0x83,
        0xe7,
        0xf5,
        0xc2,
        0x17,

/* 5082 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
        0x0
    }
};

static const CInterfaceProxyVtbl* const _msctfp_ProxyVtblList[] =
{
    (const CInterfaceProxyVtbl*)&_ITfThreadMgrProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITextStoreACPServicesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfEditSessionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfDocumentMgrsProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfTextEditSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfThreadMgrEventSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextOwnerCompositionServicesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfFunctionProviderProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfLanguageProfilesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfLanguageProfileNotifySinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfPropertyStoreProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextOwnerServicesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfSourceProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfReadOnlyPropertyProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfRangesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextOwnerCompositionSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompositionViewProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfInputProcessorProfileMgrProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfInputProcessorProfilesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfInputProcessorProfileActivationSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfPersistentPropertyLoaderACPProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfDisplayAttributeInfoProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompartmentEventSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfPropertyProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompositionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfRangeBackupProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfActiveLanguageProfileNotifySinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompositionSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextViewProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfRangeACPProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfEditRecordProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfSourceSingleProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfContextsProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompartmentProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompartmentMgrProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextCompositionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfFunctionProvidersProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfPropertiesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfInsertAtSelectionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumITfCompositionViewProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfMouseTrackerProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfDisplayAttributeInfoProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfContextViewsProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfMouseTrackerACPProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfThreadMgrExProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfDocumentMgrProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfRangeProxyVtbl,
    0
};

static const CInterfaceStubVtbl* const _msctfp_StubVtblList[] =
{
    &_ITfThreadMgrStubVtbl,
    &_ITextStoreACPServicesStubVtbl,
    &_ITfEditSessionStubVtbl,
    &_IEnumTfDocumentMgrsStubVtbl,
    &_ITfTextEditSinkStubVtbl,
    &_ITfThreadMgrEventSinkStubVtbl,
    &_ITfContextOwnerCompositionServicesStubVtbl,
    &_ITfFunctionProviderStubVtbl,
    &_IEnumTfLanguageProfilesStubVtbl,
    &_ITfLanguageProfileNotifySinkStubVtbl,
    &_ITfPropertyStoreStubVtbl,
    &_ITfContextOwnerServicesStubVtbl,
    &_ITfSourceStubVtbl,
    &_ITfReadOnlyPropertyStubVtbl,
    &_IEnumTfRangesStubVtbl,
    &_ITfContextOwnerCompositionSinkStubVtbl,
    &_ITfCompositionViewStubVtbl,
    &_ITfInputProcessorProfileMgrStubVtbl,
    &_IEnumTfInputProcessorProfilesStubVtbl,
    &_ITfInputProcessorProfileActivationSinkStubVtbl,
    &_ITfPersistentPropertyLoaderACPStubVtbl,
    &_ITfDisplayAttributeInfoStubVtbl,
    &_ITfCompartmentEventSinkStubVtbl,
    &_ITfPropertyStubVtbl,
    &_ITfCompositionStubVtbl,
    &_ITfRangeBackupStubVtbl,
    &_ITfActiveLanguageProfileNotifySinkStubVtbl,
    &_ITfCompositionSinkStubVtbl,
    &_ITfContextViewStubVtbl,
    &_ITfRangeACPStubVtbl,
    &_ITfEditRecordStubVtbl,
    &_ITfSourceSingleStubVtbl,
    &_IEnumTfContextsStubVtbl,
    &_ITfCompartmentStubVtbl,
    &_ITfCompartmentMgrStubVtbl,
    &_ITfContextCompositionStubVtbl,
    &_IEnumTfFunctionProvidersStubVtbl,
    &_IEnumTfPropertiesStubVtbl,
    &_ITfInsertAtSelectionStubVtbl,
    &_IEnumITfCompositionViewStubVtbl,
    &_ITfMouseTrackerStubVtbl,
    &_IEnumTfDisplayAttributeInfoStubVtbl,
    &_IEnumTfContextViewsStubVtbl,
    &_ITfMouseTrackerACPStubVtbl,
    &_ITfThreadMgrExStubVtbl,
    &_ITfDocumentMgrStubVtbl,
    &_ITfContextStubVtbl,
    &_ITfRangeStubVtbl,
    0
};

static PCInterfaceName const _msctfp_InterfaceNamesList[] =
{
    "ITfThreadMgr",
    "ITextStoreACPServices",
    "ITfEditSession",
    "IEnumTfDocumentMgrs",
    "ITfTextEditSink",
    "ITfThreadMgrEventSink",
    "ITfContextOwnerCompositionServices",
    "ITfFunctionProvider",
    "IEnumTfLanguageProfiles",
    "ITfLanguageProfileNotifySink",
    "ITfPropertyStore",
    "ITfContextOwnerServices",
    "ITfSource",
    "ITfReadOnlyProperty",
    "IEnumTfRanges",
    "ITfContextOwnerCompositionSink",
    "ITfCompositionView",
    "ITfInputProcessorProfileMgr",
    "IEnumTfInputProcessorProfiles",
    "ITfInputProcessorProfileActivationSink",
    "ITfPersistentPropertyLoaderACP",
    "ITfDisplayAttributeInfo",
    "ITfCompartmentEventSink",
    "ITfProperty",
    "ITfComposition",
    "ITfRangeBackup",
    "ITfActiveLanguageProfileNotifySink",
    "ITfCompositionSink",
    "ITfContextView",
    "ITfRangeACP",
    "ITfEditRecord",
    "ITfSourceSingle",
    "IEnumTfContexts",
    "ITfCompartment",
    "ITfCompartmentMgr",
    "ITfContextComposition",
    "IEnumTfFunctionProviders",
    "IEnumTfProperties",
    "ITfInsertAtSelection",
    "IEnumITfCompositionView",
    "ITfMouseTracker",
    "IEnumTfDisplayAttributeInfo",
    "IEnumTfContextViews",
    "ITfMouseTrackerACP",
    "ITfThreadMgrEx",
    "ITfDocumentMgr",
    "ITfContext",
    "ITfRange",
    0
};

static int __stdcall _msctfp_IID_Lookup(const IID* pIID, int* pIndex)
{
    int low = 0, high = 47;

    while (low <= high)
    {
        int pos = (low + high) / 2;
        int res = IID_GENERIC_CHECK_IID(_msctfp, pIID, pos);
        if (!res) { *pIndex = pos; return 1; }
        if (res > 0) low = pos + 1;
        else high = pos - 1;
    }
    return 0;
}

const ExtendedProxyFileInfo msctfp_ProxyFileInfo DECLSPEC_HIDDEN =
{
    (const PCInterfaceProxyVtblList*)_msctfp_ProxyVtblList,
    (const PCInterfaceStubVtblList*)_msctfp_StubVtblList,
    _msctfp_InterfaceNamesList,
    0,
    _msctfp_IID_Lookup,
    48,
    1,
    0,
    0,
    0,
    0
};

#else /* _WIN64 */

#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 440
#endif

#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error This code needs a newer version of rpcproxy.h
#endif /* __RPCPROXY_H_VERSION__ */

#include "msctfp.h"

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __proxy_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    void             *This;
};

static int __proxy_filter( struct __proxy_frame *__frame )
{
    return (__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE);
}

#define TYPE_FORMAT_STRING_SIZE 4993
#define PROC_FORMAT_STRING_SIZE 1681

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const MIDL_STUB_DESC Object_StubDesc;

/*****************************************************************************
 * ITfFunctionProvider interface
 */
static void __finally_ITfFunctionProvider_GetType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfFunctionProvider_GetType_Proxy(
    ITfFunctionProvider* This,
    GUID *guid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfFunctionProvider_GetType_Proxy );
    __frame->This = This;
    if (guid) MIDL_memset( guid, 0, sizeof( *guid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!guid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&guid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfFunctionProvider_GetType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[20], (void *)guid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfFunctionProvider_GetType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfFunctionProvider * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * guid;
};

static void __finally_ITfFunctionProvider_GetType_Stub( struct __frame_ITfFunctionProvider_GetType_Stub *__frame )
{

}

void __RPC_STUB ITfFunctionProvider_GetType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfFunctionProvider_GetType_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfFunctionProvider*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfFunctionProvider_GetType_Stub );
    __frame->guid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);


        __frame->guid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetType(__frame->_This, __frame->guid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfFunctionProvider_GetType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfFunctionProvider_GetDescription_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfFunctionProvider_GetDescription_Proxy(
    ITfFunctionProvider* This,
    BSTR *desc)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfFunctionProvider_GetDescription_Proxy );
    __frame->This = This;
    if (desc) MIDL_memset( desc, 0, sizeof( *desc ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!desc) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[6]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&desc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfFunctionProvider_GetDescription_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[58], (void *)desc );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfFunctionProvider_GetDescription_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfFunctionProvider * _This;
    HRESULT _RetVal;
    BSTR _W0;
    BSTR * desc;
};

static void __finally_ITfFunctionProvider_GetDescription_Stub( struct __frame_ITfFunctionProvider_GetDescription_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->desc,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[58]);

}

void __RPC_STUB ITfFunctionProvider_GetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfFunctionProvider_GetDescription_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfFunctionProvider*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfFunctionProvider_GetDescription_Stub );
    __frame->desc = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[6]);


        __frame->desc = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDescription(__frame->_This, __frame->desc);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->desc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->desc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfFunctionProvider_GetDescription_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfFunctionProvider_GetFunction_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfFunctionProvider_GetFunction_Proxy(
    ITfFunctionProvider* This,
    REFGUID guid,
    REFIID riid,
    IUnknown **func)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfFunctionProvider_GetFunction_Proxy );
    __frame->This = This;
    if (func) MIDL_memset( func, 0, sizeof( *func ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!guid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!func) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&func,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[94],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfFunctionProvider_GetFunction_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[94], (void *)func );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfFunctionProvider_GetFunction_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfFunctionProvider * _This;
    HRESULT _RetVal;
    REFGUID guid;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** func;
};

static void __finally_ITfFunctionProvider_GetFunction_Stub( struct __frame_ITfFunctionProvider_GetFunction_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->func,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[94]);

}

void __RPC_STUB ITfFunctionProvider_GetFunction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfFunctionProvider_GetFunction_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfFunctionProvider*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfFunctionProvider_GetFunction_Stub );
    __frame->guid = 0;
    __frame->riid = 0;
    __frame->func = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
            0);


        __frame->func = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFunction(__frame->_This, __frame->guid, __frame->riid, __frame->func);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->func,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[94]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->func,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[94]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfFunctionProvider_GetFunction_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfFunctionProvider_FormatStringOffsetTable[] =
{
    0,  /* ITfFunctionProvider::GetType */
    6,  /* ITfFunctionProvider::GetDescription */
    12,  /* ITfFunctionProvider::GetFunction */
};

static const CINTERFACE_PROXY_VTABLE(6) _ITfFunctionProviderProxyVtbl =
{
    {
        &IID_ITfFunctionProvider,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfFunctionProvider_GetType_Proxy,
        ITfFunctionProvider_GetDescription_Proxy,
        ITfFunctionProvider_GetFunction_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfFunctionProvider_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfFunctionProvider_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfFunctionProvider_table[] =
{
    ITfFunctionProvider_GetType_Stub,
    ITfFunctionProvider_GetDescription_Stub,
    ITfFunctionProvider_GetFunction_Stub
};

static const CInterfaceStubVtbl _ITfFunctionProviderStubVtbl =
{
    {
        &IID_ITfFunctionProvider,
        &ITfFunctionProvider_ServerInfo,
        6,
        &ITfFunctionProvider_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfFunctionProviders interface
 */
static void __finally_IEnumTfFunctionProviders_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfFunctionProviders_Clone_Proxy(
    IEnumTfFunctionProviders* This,
    IEnumTfFunctionProviders **ret)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfFunctionProviders_Clone_Proxy );
    __frame->This = This;
    if (ret) MIDL_memset( ret, 0, sizeof( *ret ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[26]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ret,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[116],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfFunctionProviders_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[116], (void *)ret );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfFunctionProviders_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfFunctionProviders * _This;
    HRESULT _RetVal;
    IEnumTfFunctionProviders *_W0;
    IEnumTfFunctionProviders ** ret;
};

static void __finally_IEnumTfFunctionProviders_Clone_Stub( struct __frame_IEnumTfFunctionProviders_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ret,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[116]);

}

void __RPC_STUB IEnumTfFunctionProviders_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfFunctionProviders_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfFunctionProviders*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfFunctionProviders_Clone_Stub );
    __frame->ret = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[26]);


        __frame->ret = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ret);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[116]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[116]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfFunctionProviders_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfFunctionProviders_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfFunctionProviders_Next_Proxy(
    IEnumTfFunctionProviders* This,
    ULONG count,
    ITfFunctionProvider **prov,
    ULONG *fetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfFunctionProviders_Next_Proxy );
    __frame->This = This;
    if (prov) MIDL_memset( prov, 0, sizeof( *prov ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!prov) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!fetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[32]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prov,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *fetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfFunctionProviders_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[156], (void *)prov );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[160], (void *)fetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfFunctionProviders_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfFunctionProviders * _This;
    HRESULT _RetVal;
    ULONG count;
    ITfFunctionProvider ** prov;
    ULONG _W0;
    ULONG * fetched;
};

static void __finally_IEnumTfFunctionProviders_Next_Stub( struct __frame_IEnumTfFunctionProviders_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prov,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[156]);


}

void __RPC_STUB IEnumTfFunctionProviders_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfFunctionProviders_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfFunctionProviders*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfFunctionProviders_Next_Stub );
    __frame->prov = 0;
    __frame->fetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[32]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->prov = NdrAllocate(&__frame->_StubMsg, __frame->count * 8);
        memset(__frame->prov, 0, __frame->count * 8);
        __frame->fetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->count, __frame->prov, __frame->fetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prov,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prov,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->fetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfFunctionProviders_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfFunctionProviders_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfFunctionProviders_Reset_Proxy(
    IEnumTfFunctionProviders* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfFunctionProviders_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[44]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfFunctionProviders_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfFunctionProviders_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfFunctionProviders * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfFunctionProviders_Reset_Stub( struct __frame_IEnumTfFunctionProviders_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfFunctionProviders_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfFunctionProviders_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfFunctionProviders*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfFunctionProviders_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[44]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfFunctionProviders_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfFunctionProviders_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfFunctionProviders_Skip_Proxy(
    IEnumTfFunctionProviders* This,
    ULONG count)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfFunctionProviders_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfFunctionProviders_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfFunctionProviders_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfFunctionProviders * _This;
    HRESULT _RetVal;
    ULONG count;
};

static void __finally_IEnumTfFunctionProviders_Skip_Stub( struct __frame_IEnumTfFunctionProviders_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfFunctionProviders_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfFunctionProviders_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfFunctionProviders*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfFunctionProviders_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->count);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfFunctionProviders_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfFunctionProviders_FormatStringOffsetTable[] =
{
    26,  /* IEnumTfFunctionProviders::Clone */
    32,  /* IEnumTfFunctionProviders::Next */
    44,  /* IEnumTfFunctionProviders::Reset */
    46,  /* IEnumTfFunctionProviders::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfFunctionProvidersProxyVtbl =
{
    {
        &IID_IEnumTfFunctionProviders,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfFunctionProviders_Clone_Proxy,
        IEnumTfFunctionProviders_Next_Proxy,
        IEnumTfFunctionProviders_Reset_Proxy,
        IEnumTfFunctionProviders_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfFunctionProviders_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfFunctionProviders_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfFunctionProviders_table[] =
{
    IEnumTfFunctionProviders_Clone_Stub,
    IEnumTfFunctionProviders_Next_Stub,
    IEnumTfFunctionProviders_Reset_Stub,
    IEnumTfFunctionProviders_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfFunctionProvidersStubVtbl =
{
    {
        &IID_IEnumTfFunctionProviders,
        &IEnumTfFunctionProviders_ServerInfo,
        7,
        &IEnumTfFunctionProviders_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfThreadMgr interface
 */
static void __finally_ITfThreadMgr_Activate_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_Activate_Proxy(
    ITfThreadMgr* This,
    TfClientId *ptid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_Activate_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ptid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[50]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *ptid = *(TfClientId *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_Activate_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[164], (void *)ptid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_Activate_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    TfClientId _W0;
    TfClientId * ptid;
};

static void __finally_ITfThreadMgr_Activate_Stub( struct __frame_ITfThreadMgr_Activate_Stub *__frame )
{

}

void __RPC_STUB ITfThreadMgr_Activate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_Activate_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_Activate_Stub );
    __frame->ptid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[50]);


        __frame->ptid = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Activate(__frame->_This, __frame->ptid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(TfClientId *)__frame->_StubMsg.Buffer = *__frame->ptid;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_Activate_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_Deactivate_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_Deactivate_Proxy(
    ITfThreadMgr* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_Deactivate_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[56]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_Deactivate_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_Deactivate_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
};

static void __finally_ITfThreadMgr_Deactivate_Stub( struct __frame_ITfThreadMgr_Deactivate_Stub *__frame )
{
}

void __RPC_STUB ITfThreadMgr_Deactivate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_Deactivate_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_Deactivate_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[56]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Deactivate(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_Deactivate_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_CreateDocumentMgr_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_CreateDocumentMgr_Proxy(
    ITfThreadMgr* This,
    ITfDocumentMgr **ppdim)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_CreateDocumentMgr_Proxy );
    __frame->This = This;
    if (ppdim) MIDL_memset( ppdim, 0, sizeof( *ppdim ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppdim) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppdim,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[186],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_CreateDocumentMgr_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[186], (void *)ppdim );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_CreateDocumentMgr_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    ITfDocumentMgr *_W0;
    ITfDocumentMgr ** ppdim;
};

static void __finally_ITfThreadMgr_CreateDocumentMgr_Stub( struct __frame_ITfThreadMgr_CreateDocumentMgr_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppdim,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[186]);

}

void __RPC_STUB ITfThreadMgr_CreateDocumentMgr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_CreateDocumentMgr_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_CreateDocumentMgr_Stub );
    __frame->ppdim = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);


        __frame->ppdim = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateDocumentMgr(__frame->_This, __frame->ppdim);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdim,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[186]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdim,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[186]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_CreateDocumentMgr_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_EnumDocumentMgrs_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_EnumDocumentMgrs_Proxy(
    ITfThreadMgr* This,
    IEnumTfDocumentMgrs **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_EnumDocumentMgrs_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[64]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_EnumDocumentMgrs_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[208], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_EnumDocumentMgrs_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    IEnumTfDocumentMgrs *_W0;
    IEnumTfDocumentMgrs ** ppEnum;
};

static void __finally_ITfThreadMgr_EnumDocumentMgrs_Stub( struct __frame_ITfThreadMgr_EnumDocumentMgrs_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208]);

}

void __RPC_STUB ITfThreadMgr_EnumDocumentMgrs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_EnumDocumentMgrs_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_EnumDocumentMgrs_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[64]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumDocumentMgrs(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_EnumDocumentMgrs_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_GetFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_GetFocus_Proxy(
    ITfThreadMgr* This,
    ITfDocumentMgr **ppdimFocus)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_GetFocus_Proxy );
    __frame->This = This;
    if (ppdimFocus) MIDL_memset( ppdimFocus, 0, sizeof( *ppdimFocus ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppdimFocus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[70]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppdimFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_GetFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[230], (void *)ppdimFocus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_GetFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    ITfDocumentMgr *_W0;
    ITfDocumentMgr ** ppdimFocus;
};

static void __finally_ITfThreadMgr_GetFocus_Stub( struct __frame_ITfThreadMgr_GetFocus_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppdimFocus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);

}

void __RPC_STUB ITfThreadMgr_GetFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_GetFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_GetFocus_Stub );
    __frame->ppdimFocus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[70]);


        __frame->ppdimFocus = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFocus(__frame->_This, __frame->ppdimFocus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdimFocus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdimFocus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_GetFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_SetFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_SetFocus_Proxy(
    ITfThreadMgr* This,
    ITfDocumentMgr *pdimFocus)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_SetFocus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdimFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdimFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_SetFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_SetFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    ITfDocumentMgr * pdimFocus;
};

static void __finally_ITfThreadMgr_SetFocus_Stub( struct __frame_ITfThreadMgr_SetFocus_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdimFocus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234]);

}

void __RPC_STUB ITfThreadMgr_SetFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_SetFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_SetFocus_Stub );
    __frame->pdimFocus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdimFocus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFocus(__frame->_This, __frame->pdimFocus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_SetFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_AssociateFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_AssociateFocus_Proxy(
    ITfThreadMgr* This,
    HWND hwnd,
    ITfDocumentMgr *pdimNew,
    ITfDocumentMgr **ppdimPrev)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_AssociateFocus_Proxy );
    __frame->This = This;
    if (ppdimPrev) MIDL_memset( ppdimPrev, 0, sizeof( *ppdimPrev ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!ppdimPrev) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)&hwnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdimNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[286]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hwnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdimNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[286]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[82]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppdimPrev,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_AssociateFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[322], (void *)ppdimPrev );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_AssociateFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    HWND hwnd;
    void *_p_hwnd;
    ITfDocumentMgr * pdimNew;
    ITfDocumentMgr *_W0;
    ITfDocumentMgr ** ppdimPrev;
};

static void __finally_ITfThreadMgr_AssociateFocus_Stub( struct __frame_ITfThreadMgr_AssociateFocus_Stub *__frame )
{
    NdrUserMarshalFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->hwnd,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdimNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[286]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppdimPrev,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322]);

}

void __RPC_STUB ITfThreadMgr_AssociateFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_AssociateFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_AssociateFocus_Stub );
    MIDL_memset(&__frame->hwnd, 0, sizeof(__frame->hwnd));
    __frame->_p_hwnd = &__frame->hwnd;
    __frame->pdimNew = 0;
    __frame->ppdimPrev = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[82]);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_hwnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdimNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[286],
            0);


        __frame->ppdimPrev = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AssociateFocus(__frame->_This, __frame->hwnd, __frame->pdimNew, __frame->ppdimPrev);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdimPrev,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppdimPrev,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_AssociateFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_IsThreadFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_IsThreadFocus_Proxy(
    ITfThreadMgr* This,
    BOOL *pfThreadFocus)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_IsThreadFocus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!pfThreadFocus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[96]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfThreadFocus = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_IsThreadFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[326], (void *)pfThreadFocus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_IsThreadFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    BOOL _W0;
    BOOL * pfThreadFocus;
};

static void __finally_ITfThreadMgr_IsThreadFocus_Stub( struct __frame_ITfThreadMgr_IsThreadFocus_Stub *__frame )
{

}

void __RPC_STUB ITfThreadMgr_IsThreadFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_IsThreadFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_IsThreadFocus_Stub );
    __frame->pfThreadFocus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[96]);


        __frame->pfThreadFocus = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsThreadFocus(__frame->_This, __frame->pfThreadFocus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfThreadFocus;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_IsThreadFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_GetFunctionProvider_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_GetFunctionProvider_Proxy(
    ITfThreadMgr* This,
    REFCLSID clsid,
    ITfFunctionProvider **ppFuncProv)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_GetFunctionProvider_Proxy );
    __frame->This = This;
    if (ppFuncProv) MIDL_memset( ppFuncProv, 0, sizeof( *ppFuncProv ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppFuncProv) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[102]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppFuncProv,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_GetFunctionProvider_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[370], (void *)ppFuncProv );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_GetFunctionProvider_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    REFCLSID clsid;
    ITfFunctionProvider *_W0;
    ITfFunctionProvider ** ppFuncProv;
};

static void __finally_ITfThreadMgr_GetFunctionProvider_Stub( struct __frame_ITfThreadMgr_GetFunctionProvider_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppFuncProv,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370]);

}

void __RPC_STUB ITfThreadMgr_GetFunctionProvider_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_GetFunctionProvider_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_GetFunctionProvider_Stub );
    __frame->clsid = 0;
    __frame->ppFuncProv = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[102]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);


        __frame->ppFuncProv = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFunctionProvider(__frame->_This, __frame->clsid, __frame->ppFuncProv);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFuncProv,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFuncProv,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_GetFunctionProvider_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_EnumFunctionProviders_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_EnumFunctionProviders_Proxy(
    ITfThreadMgr* This,
    IEnumTfFunctionProviders **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_EnumFunctionProviders_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[112]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[392],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_EnumFunctionProviders_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[392], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_EnumFunctionProviders_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    IEnumTfFunctionProviders *_W0;
    IEnumTfFunctionProviders ** ppEnum;
};

static void __finally_ITfThreadMgr_EnumFunctionProviders_Stub( struct __frame_ITfThreadMgr_EnumFunctionProviders_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[392]);

}

void __RPC_STUB ITfThreadMgr_EnumFunctionProviders_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_EnumFunctionProviders_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_EnumFunctionProviders_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[112]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumFunctionProviders(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[392]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[392]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_EnumFunctionProviders_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgr_GetGlobalCompartment_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgr_GetGlobalCompartment_Proxy(
    ITfThreadMgr* This,
    ITfCompartmentMgr **ppCompMgr)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgr_GetGlobalCompartment_Proxy );
    __frame->This = This;
    if (ppCompMgr) MIDL_memset( ppCompMgr, 0, sizeof( *ppCompMgr ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!ppCompMgr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppCompMgr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgr_GetGlobalCompartment_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[414], (void *)ppCompMgr );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgr_GetGlobalCompartment_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgr * _This;
    HRESULT _RetVal;
    ITfCompartmentMgr *_W0;
    ITfCompartmentMgr ** ppCompMgr;
};

static void __finally_ITfThreadMgr_GetGlobalCompartment_Stub( struct __frame_ITfThreadMgr_GetGlobalCompartment_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppCompMgr,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414]);

}

void __RPC_STUB ITfThreadMgr_GetGlobalCompartment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgr_GetGlobalCompartment_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgr_GetGlobalCompartment_Stub );
    __frame->ppCompMgr = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);


        __frame->ppCompMgr = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetGlobalCompartment(__frame->_This, __frame->ppCompMgr);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppCompMgr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppCompMgr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgr_GetGlobalCompartment_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfThreadMgr_FormatStringOffsetTable[] =
{
    50,  /* ITfThreadMgr::Activate */
    56,  /* ITfThreadMgr::Deactivate */
    58,  /* ITfThreadMgr::CreateDocumentMgr */
    64,  /* ITfThreadMgr::EnumDocumentMgrs */
    70,  /* ITfThreadMgr::GetFocus */
    76,  /* ITfThreadMgr::SetFocus */
    82,  /* ITfThreadMgr::AssociateFocus */
    96,  /* ITfThreadMgr::IsThreadFocus */
    102,  /* ITfThreadMgr::GetFunctionProvider */
    112,  /* ITfThreadMgr::EnumFunctionProviders */
    118,  /* ITfThreadMgr::GetGlobalCompartment */
};

static const CINTERFACE_PROXY_VTABLE(14) _ITfThreadMgrProxyVtbl =
{
    {
        &IID_ITfThreadMgr,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfThreadMgr_Activate_Proxy,
        ITfThreadMgr_Deactivate_Proxy,
        ITfThreadMgr_CreateDocumentMgr_Proxy,
        ITfThreadMgr_EnumDocumentMgrs_Proxy,
        ITfThreadMgr_GetFocus_Proxy,
        ITfThreadMgr_SetFocus_Proxy,
        ITfThreadMgr_AssociateFocus_Proxy,
        ITfThreadMgr_IsThreadFocus_Proxy,
        ITfThreadMgr_GetFunctionProvider_Proxy,
        ITfThreadMgr_EnumFunctionProviders_Proxy,
        ITfThreadMgr_GetGlobalCompartment_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfThreadMgr_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfThreadMgr_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfThreadMgr_table[] =
{
    ITfThreadMgr_Activate_Stub,
    ITfThreadMgr_Deactivate_Stub,
    ITfThreadMgr_CreateDocumentMgr_Stub,
    ITfThreadMgr_EnumDocumentMgrs_Stub,
    ITfThreadMgr_GetFocus_Stub,
    ITfThreadMgr_SetFocus_Stub,
    ITfThreadMgr_AssociateFocus_Stub,
    ITfThreadMgr_IsThreadFocus_Stub,
    ITfThreadMgr_GetFunctionProvider_Stub,
    ITfThreadMgr_EnumFunctionProviders_Stub,
    ITfThreadMgr_GetGlobalCompartment_Stub
};

static const CInterfaceStubVtbl _ITfThreadMgrStubVtbl =
{
    {
        &IID_ITfThreadMgr,
        &ITfThreadMgr_ServerInfo,
        14,
        &ITfThreadMgr_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfThreadMgrEx interface
 */
static void __finally_ITfThreadMgrEx_ActivateEx_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEx_ActivateEx_Proxy(
    ITfThreadMgrEx* This,
    TfClientId *id,
    DWORD flags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEx_ActivateEx_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!id) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = flags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[124]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *id = *(TfClientId *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEx_ActivateEx_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[418], (void *)id );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEx_ActivateEx_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEx * _This;
    HRESULT _RetVal;
    TfClientId _W0;
    TfClientId * id;
    DWORD flags;
};

static void __finally_ITfThreadMgrEx_ActivateEx_Stub( struct __frame_ITfThreadMgrEx_ActivateEx_Stub *__frame )
{


}

void __RPC_STUB ITfThreadMgrEx_ActivateEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEx_ActivateEx_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEx_ActivateEx_Stub );
    __frame->id = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[124]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->id = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ActivateEx(__frame->_This, __frame->id, __frame->flags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(TfClientId *)__frame->_StubMsg.Buffer = *__frame->id;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEx_ActivateEx_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgrEx_GetActiveFlags_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEx_GetActiveFlags_Proxy(
    ITfThreadMgrEx* This,
    DWORD *flags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEx_GetActiveFlags_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        if (!flags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[132]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEx_GetActiveFlags_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[422], (void *)flags );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEx_GetActiveFlags_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEx * _This;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * flags;
};

static void __finally_ITfThreadMgrEx_GetActiveFlags_Stub( struct __frame_ITfThreadMgrEx_GetActiveFlags_Stub *__frame )
{

}

void __RPC_STUB ITfThreadMgrEx_GetActiveFlags_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEx_GetActiveFlags_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEx*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEx_GetActiveFlags_Stub );
    __frame->flags = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[132]);


        __frame->flags = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetActiveFlags(__frame->_This, __frame->flags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEx_GetActiveFlags_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfThreadMgrEx_FormatStringOffsetTable[] =
{
    50,  /* ITfThreadMgr::Activate */
    56,  /* ITfThreadMgr::Deactivate */
    58,  /* ITfThreadMgr::CreateDocumentMgr */
    64,  /* ITfThreadMgr::EnumDocumentMgrs */
    70,  /* ITfThreadMgr::GetFocus */
    76,  /* ITfThreadMgr::SetFocus */
    82,  /* ITfThreadMgr::AssociateFocus */
    96,  /* ITfThreadMgr::IsThreadFocus */
    102,  /* ITfThreadMgr::GetFunctionProvider */
    112,  /* ITfThreadMgr::EnumFunctionProviders */
    118,  /* ITfThreadMgr::GetGlobalCompartment */
    124,  /* ITfThreadMgrEx::ActivateEx */
    132,  /* ITfThreadMgrEx::GetActiveFlags */
};

static const CINTERFACE_PROXY_VTABLE(16) _ITfThreadMgrExProxyVtbl =
{
    {
        &IID_ITfThreadMgrEx,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfThreadMgr_Activate_Proxy,
        ITfThreadMgr_Deactivate_Proxy,
        ITfThreadMgr_CreateDocumentMgr_Proxy,
        ITfThreadMgr_EnumDocumentMgrs_Proxy,
        ITfThreadMgr_GetFocus_Proxy,
        ITfThreadMgr_SetFocus_Proxy,
        ITfThreadMgr_AssociateFocus_Proxy,
        ITfThreadMgr_IsThreadFocus_Proxy,
        ITfThreadMgr_GetFunctionProvider_Proxy,
        ITfThreadMgr_EnumFunctionProviders_Proxy,
        ITfThreadMgr_GetGlobalCompartment_Proxy,
        ITfThreadMgrEx_ActivateEx_Proxy,
        ITfThreadMgrEx_GetActiveFlags_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfThreadMgrEx_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfThreadMgrEx_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfThreadMgrEx_table[] =
{
    ITfThreadMgr_Activate_Stub,
    ITfThreadMgr_Deactivate_Stub,
    ITfThreadMgr_CreateDocumentMgr_Stub,
    ITfThreadMgr_EnumDocumentMgrs_Stub,
    ITfThreadMgr_GetFocus_Stub,
    ITfThreadMgr_SetFocus_Stub,
    ITfThreadMgr_AssociateFocus_Stub,
    ITfThreadMgr_IsThreadFocus_Stub,
    ITfThreadMgr_GetFunctionProvider_Stub,
    ITfThreadMgr_EnumFunctionProviders_Stub,
    ITfThreadMgr_GetGlobalCompartment_Stub,
    ITfThreadMgrEx_ActivateEx_Stub,
    ITfThreadMgrEx_GetActiveFlags_Stub
};

static const CInterfaceStubVtbl _ITfThreadMgrExStubVtbl =
{
    {
        &IID_ITfThreadMgrEx,
        &ITfThreadMgrEx_ServerInfo,
        16,
        &ITfThreadMgrEx_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfCompositionView interface
 */
static void __finally_ITfCompositionView_GetOwnerClsid_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompositionView_GetOwnerClsid_Proxy(
    ITfCompositionView* This,
    CLSID *pclsid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompositionView_GetOwnerClsid_Proxy );
    __frame->This = This;
    if (pclsid) MIDL_memset( pclsid, 0, sizeof( *pclsid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pclsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[138]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pclsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompositionView_GetOwnerClsid_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[426], (void *)pclsid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompositionView_GetOwnerClsid_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompositionView * _This;
    HRESULT _RetVal;
    CLSID _W0;
    CLSID * pclsid;
};

static void __finally_ITfCompositionView_GetOwnerClsid_Stub( struct __frame_ITfCompositionView_GetOwnerClsid_Stub *__frame )
{

}

void __RPC_STUB ITfCompositionView_GetOwnerClsid_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompositionView_GetOwnerClsid_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompositionView_GetOwnerClsid_Stub );
    __frame->pclsid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[138]);


        __frame->pclsid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetOwnerClsid(__frame->_This, __frame->pclsid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pclsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompositionView_GetOwnerClsid_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfCompositionView_GetRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompositionView_GetRange_Proxy(
    ITfCompositionView* This,
    ITfRange **ppRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompositionView_GetRange_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[144]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[448],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompositionView_GetRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[448], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompositionView_GetRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompositionView * _This;
    HRESULT _RetVal;
    ITfRange *_W0;
    ITfRange ** ppRange;
};

static void __finally_ITfCompositionView_GetRange_Stub( struct __frame_ITfCompositionView_GetRange_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[448]);

}

void __RPC_STUB ITfCompositionView_GetRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompositionView_GetRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompositionView_GetRange_Stub );
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[144]);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRange(__frame->_This, __frame->ppRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[448]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[448]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompositionView_GetRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfCompositionView_FormatStringOffsetTable[] =
{
    138,  /* ITfCompositionView::GetOwnerClsid */
    144,  /* ITfCompositionView::GetRange */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfCompositionViewProxyVtbl =
{
    {
        &IID_ITfCompositionView,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfCompositionView_GetOwnerClsid_Proxy,
        ITfCompositionView_GetRange_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfCompositionView_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfCompositionView_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfCompositionView_table[] =
{
    ITfCompositionView_GetOwnerClsid_Stub,
    ITfCompositionView_GetRange_Stub
};

static const CInterfaceStubVtbl _ITfCompositionViewStubVtbl =
{
    {
        &IID_ITfCompositionView,
        &ITfCompositionView_ServerInfo,
        5,
        &ITfCompositionView_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfDocumentMgr interface
 */
static void __finally_ITfDocumentMgr_CreateContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_CreateContext_Proxy(
    ITfDocumentMgr* This,
    TfClientId tidOwner,
    DWORD dwFlags,
    IUnknown *punk,
    ITfContext **ppic,
    TfEditCookie *pecTextStore)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_CreateContext_Proxy );
    __frame->This = This;
    if (ppic) MIDL_memset( ppic, 0, sizeof( *ppic ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppic) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pecTextStore) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[452]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tidOwner;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[452]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pecTextStore = *(TfEditCookie *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_CreateContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[488], (void *)ppic );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[492], (void *)pecTextStore );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_CreateContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    TfClientId tidOwner;
    DWORD dwFlags;
    IUnknown * punk;
    ITfContext *_W0;
    ITfContext ** ppic;
    TfEditCookie _W1;
    TfEditCookie * pecTextStore;
};

static void __finally_ITfDocumentMgr_CreateContext_Stub( struct __frame_ITfDocumentMgr_CreateContext_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->punk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[452]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488]);


}

void __RPC_STUB ITfDocumentMgr_CreateContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_CreateContext_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_CreateContext_Stub );
    __frame->punk = 0;
    __frame->ppic = 0;
    __frame->pecTextStore = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tidOwner = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->punk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[452],
            0);


        __frame->ppic = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pecTextStore = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateContext(__frame->_This, __frame->tidOwner, __frame->dwFlags, __frame->punk, __frame->ppic, __frame->pecTextStore);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(TfEditCookie *)__frame->_StubMsg.Buffer = *__frame->pecTextStore;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_CreateContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDocumentMgr_Push_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_Push_Proxy(
    ITfDocumentMgr* This,
    ITfContext *pic)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_Push_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[496]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[496]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[168]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_Push_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_Push_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    ITfContext * pic;
};

static void __finally_ITfDocumentMgr_Push_Stub( struct __frame_ITfDocumentMgr_Push_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[496]);

}

void __RPC_STUB ITfDocumentMgr_Push_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_Push_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_Push_Stub );
    __frame->pic = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[168]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[496],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Push(__frame->_This, __frame->pic);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_Push_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDocumentMgr_Pop_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_Pop_Proxy(
    ITfDocumentMgr* This,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_Pop_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[174]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_Pop_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_Pop_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    DWORD dwFlags;
};

static void __finally_ITfDocumentMgr_Pop_Stub( struct __frame_ITfDocumentMgr_Pop_Stub *__frame )
{

}

void __RPC_STUB ITfDocumentMgr_Pop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_Pop_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_Pop_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[174]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Pop(__frame->_This, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_Pop_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDocumentMgr_GetTop_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_GetTop_Proxy(
    ITfDocumentMgr* This,
    ITfContext **ppic)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_GetTop_Proxy );
    __frame->This = This;
    if (ppic) MIDL_memset( ppic, 0, sizeof( *ppic ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppic) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[178]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_GetTop_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[532], (void *)ppic );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_GetTop_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    ITfContext *_W0;
    ITfContext ** ppic;
};

static void __finally_ITfDocumentMgr_GetTop_Stub( struct __frame_ITfDocumentMgr_GetTop_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532]);

}

void __RPC_STUB ITfDocumentMgr_GetTop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_GetTop_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_GetTop_Stub );
    __frame->ppic = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[178]);


        __frame->ppic = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetTop(__frame->_This, __frame->ppic);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_GetTop_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDocumentMgr_GetBase_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_GetBase_Proxy(
    ITfDocumentMgr* This,
    ITfContext **ppic)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_GetBase_Proxy );
    __frame->This = This;
    if (ppic) MIDL_memset( ppic, 0, sizeof( *ppic ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppic) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[184]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_GetBase_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[554], (void *)ppic );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_GetBase_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    ITfContext *_W0;
    ITfContext ** ppic;
};

static void __finally_ITfDocumentMgr_GetBase_Stub( struct __frame_ITfDocumentMgr_GetBase_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554]);

}

void __RPC_STUB ITfDocumentMgr_GetBase_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_GetBase_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_GetBase_Stub );
    __frame->ppic = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[184]);


        __frame->ppic = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetBase(__frame->_This, __frame->ppic);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_GetBase_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDocumentMgr_EnumContexts_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDocumentMgr_EnumContexts_Proxy(
    ITfDocumentMgr* This,
    IEnumTfContexts **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDocumentMgr_EnumContexts_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[190]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[576],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDocumentMgr_EnumContexts_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[576], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDocumentMgr_EnumContexts_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDocumentMgr * _This;
    HRESULT _RetVal;
    IEnumTfContexts *_W0;
    IEnumTfContexts ** ppEnum;
};

static void __finally_ITfDocumentMgr_EnumContexts_Stub( struct __frame_ITfDocumentMgr_EnumContexts_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[576]);

}

void __RPC_STUB ITfDocumentMgr_EnumContexts_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDocumentMgr_EnumContexts_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDocumentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDocumentMgr_EnumContexts_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[190]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumContexts(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[576]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[576]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDocumentMgr_EnumContexts_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfDocumentMgr_FormatStringOffsetTable[] =
{
    150,  /* ITfDocumentMgr::CreateContext */
    168,  /* ITfDocumentMgr::Push */
    174,  /* ITfDocumentMgr::Pop */
    178,  /* ITfDocumentMgr::GetTop */
    184,  /* ITfDocumentMgr::GetBase */
    190,  /* ITfDocumentMgr::EnumContexts */
};

static const CINTERFACE_PROXY_VTABLE(9) _ITfDocumentMgrProxyVtbl =
{
    {
        &IID_ITfDocumentMgr,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfDocumentMgr_CreateContext_Proxy,
        ITfDocumentMgr_Push_Proxy,
        ITfDocumentMgr_Pop_Proxy,
        ITfDocumentMgr_GetTop_Proxy,
        ITfDocumentMgr_GetBase_Proxy,
        ITfDocumentMgr_EnumContexts_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfDocumentMgr_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfDocumentMgr_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfDocumentMgr_table[] =
{
    ITfDocumentMgr_CreateContext_Stub,
    ITfDocumentMgr_Push_Stub,
    ITfDocumentMgr_Pop_Stub,
    ITfDocumentMgr_GetTop_Stub,
    ITfDocumentMgr_GetBase_Stub,
    ITfDocumentMgr_EnumContexts_Stub
};

static const CInterfaceStubVtbl _ITfDocumentMgrStubVtbl =
{
    {
        &IID_ITfDocumentMgr,
        &ITfDocumentMgr_ServerInfo,
        9,
        &ITfDocumentMgr_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContextView interface
 */
static void __finally_ITfContextView_GetRangeFromPoint_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextView_GetRangeFromPoint_Proxy(
    ITfContextView* This,
    TfEditCookie cookie,
    const POINT *pt,
    DWORD flags,
    ITfRange **range)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextView_GetRangeFromPoint_Proxy );
    __frame->This = This;
    if (range) MIDL_memset( range, 0, sizeof( *range ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!range) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = cookie;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[580]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = flags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[196]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[610],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextView_GetRangeFromPoint_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[610], (void *)range );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextView_GetRangeFromPoint_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextView * _This;
    HRESULT _RetVal;
    TfEditCookie cookie;
    const POINT * pt;
    DWORD flags;
    ITfRange *_W0;
    ITfRange ** range;
};

static void __finally_ITfContextView_GetRangeFromPoint_Stub( struct __frame_ITfContextView_GetRangeFromPoint_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[610]);

}

void __RPC_STUB ITfContextView_GetRangeFromPoint_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextView_GetRangeFromPoint_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextView_GetRangeFromPoint_Stub );
    __frame->pt = 0;
    __frame->range = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[196]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cookie = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[580],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->range = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRangeFromPoint(__frame->_This, __frame->cookie, __frame->pt, __frame->flags, __frame->range);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[610]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[610]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextView_GetRangeFromPoint_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextView_GetTextExt_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextView_GetTextExt_Proxy(
    ITfContextView* This,
    TfEditCookie cookie,
    ITfRange *range,
    RECT *rect,
    BOOL *clipped)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextView_GetTextExt_Proxy );
    __frame->This = This;
    if (rect) MIDL_memset( rect, 0, sizeof( *rect ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rect) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!clipped) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = cookie;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[210]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rect,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[632],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *clipped = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextView_GetTextExt_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[642], (void *)rect );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[646], (void *)clipped );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextView_GetTextExt_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextView * _This;
    HRESULT _RetVal;
    TfEditCookie cookie;
    ITfRange * range;
    RECT _W0;
    RECT * rect;
    BOOL _W1;
    BOOL * clipped;
};

static void __finally_ITfContextView_GetTextExt_Stub( struct __frame_ITfContextView_GetTextExt_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614]);



}

void __RPC_STUB ITfContextView_GetTextExt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextView_GetTextExt_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextView_GetTextExt_Stub );
    __frame->range = 0;
    __frame->rect = 0;
    __frame->clipped = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[210]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cookie = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614],
            0);


        __frame->rect = &__frame->_W0;
        __frame->clipped = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetTextExt(__frame->_This, __frame->cookie, __frame->range, __frame->rect, __frame->clipped);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 36;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rect,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[632]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->clipped;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextView_GetTextExt_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextView_GetScreenExt_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextView_GetScreenExt_Proxy(
    ITfContextView* This,
    RECT *rect)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextView_GetScreenExt_Proxy );
    __frame->This = This;
    if (rect) MIDL_memset( rect, 0, sizeof( *rect ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!rect) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[226]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rect,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[632],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextView_GetScreenExt_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[650], (void *)rect );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextView_GetScreenExt_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextView * _This;
    HRESULT _RetVal;
    RECT _W0;
    RECT * rect;
};

static void __finally_ITfContextView_GetScreenExt_Stub( struct __frame_ITfContextView_GetScreenExt_Stub *__frame )
{

}

void __RPC_STUB ITfContextView_GetScreenExt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextView_GetScreenExt_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextView_GetScreenExt_Stub );
    __frame->rect = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[226]);


        __frame->rect = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetScreenExt(__frame->_This, __frame->rect);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rect,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[632]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextView_GetScreenExt_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextView_GetWnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextView_GetWnd_Proxy(
    ITfContextView* This,
    HWND *hwnd)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextView_GetWnd_Proxy );
    __frame->This = This;
    if (hwnd) MIDL_memset( hwnd, 0, sizeof( *hwnd ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!hwnd) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[232]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&hwnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextView_GetWnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[664], (void *)hwnd );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextView_GetWnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextView * _This;
    HRESULT _RetVal;
    HWND _W0;
    HWND * hwnd;
};

static void __finally_ITfContextView_GetWnd_Stub( struct __frame_ITfContextView_GetWnd_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->hwnd,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[664]);

}

void __RPC_STUB ITfContextView_GetWnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextView_GetWnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextView_GetWnd_Stub );
    __frame->hwnd = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[232]);


        __frame->hwnd = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetWnd(__frame->_This, __frame->hwnd);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->hwnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->hwnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextView_GetWnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContextView_FormatStringOffsetTable[] =
{
    196,  /* ITfContextView::GetRangeFromPoint */
    210,  /* ITfContextView::GetTextExt */
    226,  /* ITfContextView::GetScreenExt */
    232,  /* ITfContextView::GetWnd */
};

static const CINTERFACE_PROXY_VTABLE(7) _ITfContextViewProxyVtbl =
{
    {
        &IID_ITfContextView,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContextView_GetRangeFromPoint_Proxy,
        ITfContextView_GetTextExt_Proxy,
        ITfContextView_GetScreenExt_Proxy,
        ITfContextView_GetWnd_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContextView_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContextView_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContextView_table[] =
{
    ITfContextView_GetRangeFromPoint_Stub,
    ITfContextView_GetTextExt_Stub,
    ITfContextView_GetScreenExt_Stub,
    ITfContextView_GetWnd_Stub
};

static const CInterfaceStubVtbl _ITfContextViewStubVtbl =
{
    {
        &IID_ITfContextView,
        &ITfContextView_ServerInfo,
        7,
        &ITfContextView_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfContextViews interface
 */
static void __finally_IEnumTfContextViews_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContextViews_Clone_Proxy(
    IEnumTfContextViews* This,
    IEnumTfContextViews **ret)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContextViews_Clone_Proxy );
    __frame->This = This;
    if (ret) MIDL_memset( ret, 0, sizeof( *ret ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[238]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ret,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[686],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContextViews_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[686], (void *)ret );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContextViews_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContextViews * _This;
    HRESULT _RetVal;
    IEnumTfContextViews *_W0;
    IEnumTfContextViews ** ret;
};

static void __finally_IEnumTfContextViews_Clone_Stub( struct __frame_IEnumTfContextViews_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ret,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[686]);

}

void __RPC_STUB IEnumTfContextViews_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContextViews_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContextViews*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContextViews_Clone_Stub );
    __frame->ret = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[238]);


        __frame->ret = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ret);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[686]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[686]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContextViews_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContextViews_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContextViews_Next_Proxy(
    IEnumTfContextViews* This,
    ULONG count,
    ITfContextView **views,
    ULONG *fetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContextViews_Next_Proxy );
    __frame->This = This;
    if (views) MIDL_memset( views, 0, sizeof( *views ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!views) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!fetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[244]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&views,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[708],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *fetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContextViews_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[726], (void *)views );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[730], (void *)fetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContextViews_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContextViews * _This;
    HRESULT _RetVal;
    ULONG count;
    ITfContextView ** views;
    ULONG _W0;
    ULONG * fetched;
};

static void __finally_IEnumTfContextViews_Next_Stub( struct __frame_IEnumTfContextViews_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->views,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[726]);


}

void __RPC_STUB IEnumTfContextViews_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContextViews_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContextViews*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContextViews_Next_Stub );
    __frame->views = 0;
    __frame->fetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[244]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->views = NdrAllocate(&__frame->_StubMsg, __frame->count * 8);
        memset(__frame->views, 0, __frame->count * 8);
        __frame->fetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->count, __frame->views, __frame->fetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->views,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[708]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->views,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[708]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->fetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContextViews_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContextViews_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContextViews_Reset_Proxy(
    IEnumTfContextViews* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContextViews_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[256]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContextViews_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContextViews_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContextViews * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfContextViews_Reset_Stub( struct __frame_IEnumTfContextViews_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfContextViews_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContextViews_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContextViews*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContextViews_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[256]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContextViews_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContextViews_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContextViews_Skip_Proxy(
    IEnumTfContextViews* This,
    ULONG count)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContextViews_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[258]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContextViews_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContextViews_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContextViews * _This;
    HRESULT _RetVal;
    ULONG count;
};

static void __finally_IEnumTfContextViews_Skip_Stub( struct __frame_IEnumTfContextViews_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfContextViews_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContextViews_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContextViews*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContextViews_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[258]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->count);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContextViews_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfContextViews_FormatStringOffsetTable[] =
{
    238,  /* IEnumTfContextViews::Clone */
    244,  /* IEnumTfContextViews::Next */
    256,  /* IEnumTfContextViews::Reset */
    258,  /* IEnumTfContextViews::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfContextViewsProxyVtbl =
{
    {
        &IID_IEnumTfContextViews,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfContextViews_Clone_Proxy,
        IEnumTfContextViews_Next_Proxy,
        IEnumTfContextViews_Reset_Proxy,
        IEnumTfContextViews_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfContextViews_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfContextViews_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfContextViews_table[] =
{
    IEnumTfContextViews_Clone_Stub,
    IEnumTfContextViews_Next_Stub,
    IEnumTfContextViews_Reset_Stub,
    IEnumTfContextViews_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfContextViewsStubVtbl =
{
    {
        &IID_IEnumTfContextViews,
        &IEnumTfContextViews_ServerInfo,
        7,
        &IEnumTfContextViews_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfProperties interface
 */
static void __finally_IEnumTfProperties_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfProperties_Clone_Proxy(
    IEnumTfProperties* This,
    IEnumTfProperties **ret)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfProperties_Clone_Proxy );
    __frame->This = This;
    if (ret) MIDL_memset( ret, 0, sizeof( *ret ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[262]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ret,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[752],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfProperties_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[752], (void *)ret );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfProperties_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfProperties * _This;
    HRESULT _RetVal;
    IEnumTfProperties *_W0;
    IEnumTfProperties ** ret;
};

static void __finally_IEnumTfProperties_Clone_Stub( struct __frame_IEnumTfProperties_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ret,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[752]);

}

void __RPC_STUB IEnumTfProperties_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfProperties_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfProperties_Clone_Stub );
    __frame->ret = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[262]);


        __frame->ret = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ret);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[752]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[752]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfProperties_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfProperties_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfProperties_Next_Proxy(
    IEnumTfProperties* This,
    ULONG count,
    ITfProperty **props,
    ULONG *fetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfProperties_Next_Proxy );
    __frame->This = This;
    if (props) MIDL_memset( props, 0, sizeof( *props ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!props) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!fetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[268]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&props,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[774],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *fetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfProperties_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[792], (void *)props );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[796], (void *)fetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfProperties_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfProperties * _This;
    HRESULT _RetVal;
    ULONG count;
    ITfProperty ** props;
    ULONG _W0;
    ULONG * fetched;
};

static void __finally_IEnumTfProperties_Next_Stub( struct __frame_IEnumTfProperties_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->props,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[792]);


}

void __RPC_STUB IEnumTfProperties_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfProperties_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfProperties_Next_Stub );
    __frame->props = 0;
    __frame->fetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[268]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->props = NdrAllocate(&__frame->_StubMsg, __frame->count * 8);
        memset(__frame->props, 0, __frame->count * 8);
        __frame->fetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->count, __frame->props, __frame->fetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->props,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[774]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->fetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->props,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[774]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->fetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfProperties_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfProperties_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfProperties_Reset_Proxy(
    IEnumTfProperties* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfProperties_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[280]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfProperties_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfProperties_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfProperties * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfProperties_Reset_Stub( struct __frame_IEnumTfProperties_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfProperties_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfProperties_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfProperties_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[280]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfProperties_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfProperties_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfProperties_Skip_Proxy(
    IEnumTfProperties* This,
    ULONG count)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfProperties_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfProperties_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfProperties_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfProperties * _This;
    HRESULT _RetVal;
    ULONG count;
};

static void __finally_IEnumTfProperties_Skip_Stub( struct __frame_IEnumTfProperties_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfProperties_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfProperties_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfProperties_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->count);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfProperties_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfProperties_FormatStringOffsetTable[] =
{
    262,  /* IEnumTfProperties::Clone */
    268,  /* IEnumTfProperties::Next */
    280,  /* IEnumTfProperties::Reset */
    282,  /* IEnumTfProperties::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfPropertiesProxyVtbl =
{
    {
        &IID_IEnumTfProperties,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfProperties_Clone_Proxy,
        IEnumTfProperties_Next_Proxy,
        IEnumTfProperties_Reset_Proxy,
        IEnumTfProperties_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfProperties_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfProperties_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfProperties_table[] =
{
    IEnumTfProperties_Clone_Stub,
    IEnumTfProperties_Next_Stub,
    IEnumTfProperties_Reset_Stub,
    IEnumTfProperties_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfPropertiesStubVtbl =
{
    {
        &IID_IEnumTfProperties,
        &IEnumTfProperties_ServerInfo,
        7,
        &IEnumTfProperties_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfRangeBackup interface
 */
static void __finally_ITfRangeBackup_Restore_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRangeBackup_Restore_Proxy(
    ITfRangeBackup* This,
    TfEditCookie cookie,
    ITfRange *range)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRangeBackup_Restore_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[800]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = cookie;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[800]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[286]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRangeBackup_Restore_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRangeBackup_Restore_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRangeBackup * _This;
    HRESULT _RetVal;
    TfEditCookie cookie;
    ITfRange * range;
};

static void __finally_ITfRangeBackup_Restore_Stub( struct __frame_ITfRangeBackup_Restore_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[800]);

}

void __RPC_STUB ITfRangeBackup_Restore_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRangeBackup_Restore_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRangeBackup*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRangeBackup_Restore_Stub );
    __frame->range = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[286]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cookie = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[800],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Restore(__frame->_This, __frame->cookie, __frame->range);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRangeBackup_Restore_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfRangeBackup_FormatStringOffsetTable[] =
{
    286,  /* ITfRangeBackup::Restore */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfRangeBackupProxyVtbl =
{
    {
        &IID_ITfRangeBackup,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfRangeBackup_Restore_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfRangeBackup_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfRangeBackup_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfRangeBackup_table[] =
{
    ITfRangeBackup_Restore_Stub
};

static const CInterfaceStubVtbl _ITfRangeBackupStubVtbl =
{
    {
        &IID_ITfRangeBackup,
        &ITfRangeBackup_ServerInfo,
        4,
        &ITfRangeBackup_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITextStoreACPServices interface
 */
static void __finally_ITextStoreACPServices_Serialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITextStoreACPServices_Serialize_Proxy(
    ITextStoreACPServices* This,
    ITfProperty *prop,
    ITfRange *range,
    TF_PERSISTENT_PROPERTY_HEADER_ACP *header,
    IStream *stream)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITextStoreACPServices_Serialize_Proxy );
    __frame->This = This;
    if (header) MIDL_memset( header, 0, sizeof( *header ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!header) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[836]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)stream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[876]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[836]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)stream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[876]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[294]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&header,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITextStoreACPServices_Serialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[872], (void *)header );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITextStoreACPServices_Serialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITextStoreACPServices * _This;
    HRESULT _RetVal;
    ITfProperty * prop;
    ITfRange * range;
    TF_PERSISTENT_PROPERTY_HEADER_ACP _W0;
    TF_PERSISTENT_PROPERTY_HEADER_ACP * header;
    IStream * stream;
};

static void __finally_ITextStoreACPServices_Serialize_Stub( struct __frame_ITextStoreACPServices_Serialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prop,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[836]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->stream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[876]);

}

void __RPC_STUB ITextStoreACPServices_Serialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITextStoreACPServices_Serialize_Stub __f, * const __frame = &__f;

    __frame->_This = (ITextStoreACPServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITextStoreACPServices_Serialize_Stub );
    __frame->prop = 0;
    __frame->range = 0;
    __frame->header = 0;
    __frame->stream = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[294]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prop,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[836],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->stream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[876],
            0);


        __frame->header = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Serialize(__frame->_This, __frame->prop, __frame->range, __frame->header, __frame->stream);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 60;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->header,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITextStoreACPServices_Serialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITextStoreACPServices_Unserialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITextStoreACPServices_Unserialize_Proxy(
    ITextStoreACPServices* This,
    ITfProperty *prop,
    const TF_PERSISTENT_PROPERTY_HEADER_ACP *header,
    IStream *stream,
    ITfPersistentPropertyLoaderACP *loader)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITextStoreACPServices_Unserialize_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!header) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 52;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[894]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)stream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[934]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)loader,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[952]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[894]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)header,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[912]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)stream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[934]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)loader,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[952]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[312]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITextStoreACPServices_Unserialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITextStoreACPServices_Unserialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITextStoreACPServices * _This;
    HRESULT _RetVal;
    ITfProperty * prop;
    const TF_PERSISTENT_PROPERTY_HEADER_ACP * header;
    IStream * stream;
    ITfPersistentPropertyLoaderACP * loader;
};

static void __finally_ITextStoreACPServices_Unserialize_Stub( struct __frame_ITextStoreACPServices_Unserialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prop,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[894]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->stream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[934]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->loader,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[952]);

}

void __RPC_STUB ITextStoreACPServices_Unserialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITextStoreACPServices_Unserialize_Stub __f, * const __frame = &__f;

    __frame->_This = (ITextStoreACPServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITextStoreACPServices_Unserialize_Stub );
    __frame->prop = 0;
    __frame->header = 0;
    __frame->stream = 0;
    __frame->loader = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[312]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prop,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[894],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->header,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[912],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->stream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[934],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->loader,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[952],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Unserialize(__frame->_This, __frame->prop, __frame->header, __frame->stream, __frame->loader);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITextStoreACPServices_Unserialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITextStoreACPServices_ForceLoadProperty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITextStoreACPServices_ForceLoadProperty_Proxy(
    ITextStoreACPServices* This,
    ITfProperty *prop)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITextStoreACPServices_ForceLoadProperty_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[970]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prop,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[970]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[330]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITextStoreACPServices_ForceLoadProperty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITextStoreACPServices_ForceLoadProperty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITextStoreACPServices * _This;
    HRESULT _RetVal;
    ITfProperty * prop;
};

static void __finally_ITextStoreACPServices_ForceLoadProperty_Stub( struct __frame_ITextStoreACPServices_ForceLoadProperty_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prop,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[970]);

}

void __RPC_STUB ITextStoreACPServices_ForceLoadProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITextStoreACPServices_ForceLoadProperty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITextStoreACPServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITextStoreACPServices_ForceLoadProperty_Stub );
    __frame->prop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[330]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prop,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[970],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ForceLoadProperty(__frame->_This, __frame->prop);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITextStoreACPServices_ForceLoadProperty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITextStoreACPServices_CreateRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITextStoreACPServices_CreateRange_Proxy(
    ITextStoreACPServices* This,
    LONG start,
    LONG end,
    ITfRangeACP **range)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITextStoreACPServices_CreateRange_Proxy );
    __frame->This = This;
    if (range) MIDL_memset( range, 0, sizeof( *range ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!range) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = start;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = end;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[336]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1006],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITextStoreACPServices_CreateRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1006], (void *)range );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITextStoreACPServices_CreateRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITextStoreACPServices * _This;
    HRESULT _RetVal;
    LONG start;
    LONG end;
    ITfRangeACP *_W0;
    ITfRangeACP ** range;
};

static void __finally_ITextStoreACPServices_CreateRange_Stub( struct __frame_ITextStoreACPServices_CreateRange_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1006]);

}

void __RPC_STUB ITextStoreACPServices_CreateRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITextStoreACPServices_CreateRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITextStoreACPServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITextStoreACPServices_CreateRange_Stub );
    __frame->range = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[336]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->start = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->end = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->range = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateRange(__frame->_This, __frame->start, __frame->end, __frame->range);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1006]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1006]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITextStoreACPServices_CreateRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITextStoreACPServices_FormatStringOffsetTable[] =
{
    294,  /* ITextStoreACPServices::Serialize */
    312,  /* ITextStoreACPServices::Unserialize */
    330,  /* ITextStoreACPServices::ForceLoadProperty */
    336,  /* ITextStoreACPServices::CreateRange */
};

static const CINTERFACE_PROXY_VTABLE(7) _ITextStoreACPServicesProxyVtbl =
{
    {
        &IID_ITextStoreACPServices,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITextStoreACPServices_Serialize_Proxy,
        ITextStoreACPServices_Unserialize_Proxy,
        ITextStoreACPServices_ForceLoadProperty_Proxy,
        ITextStoreACPServices_CreateRange_Proxy,
    }
};

static const MIDL_SERVER_INFO ITextStoreACPServices_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITextStoreACPServices_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITextStoreACPServices_table[] =
{
    ITextStoreACPServices_Serialize_Stub,
    ITextStoreACPServices_Unserialize_Stub,
    ITextStoreACPServices_ForceLoadProperty_Stub,
    ITextStoreACPServices_CreateRange_Stub
};

static const CInterfaceStubVtbl _ITextStoreACPServicesStubVtbl =
{
    {
        &IID_ITextStoreACPServices,
        &ITextStoreACPServices_ServerInfo,
        7,
        &ITextStoreACPServices_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContext interface
 */
static void __finally_ITfContext_RequestEditSession_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_RequestEditSession_Proxy(
    ITfContext* This,
    TfClientId tid,
    ITfEditSession *pes,
    DWORD dwFlags,
    HRESULT *phrSession)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_RequestEditSession_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!phrSession) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1010]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1010]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[346]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *phrSession = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_RequestEditSession_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1028], (void *)phrSession );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_RequestEditSession_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfClientId tid;
    ITfEditSession * pes;
    DWORD dwFlags;
    HRESULT _W0;
    HRESULT * phrSession;
};

static void __finally_ITfContext_RequestEditSession_Stub( struct __frame_ITfContext_RequestEditSession_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1010]);



}

void __RPC_STUB ITfContext_RequestEditSession_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_RequestEditSession_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_RequestEditSession_Stub );
    __frame->pes = 0;
    __frame->phrSession = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[346]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1010],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->phrSession = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RequestEditSession(__frame->_This, __frame->tid, __frame->pes, __frame->dwFlags, __frame->phrSession);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = *__frame->phrSession;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_RequestEditSession_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_InWriteSession_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_InWriteSession_Proxy(
    ITfContext* This,
    TfClientId tid,
    BOOL *pfWriteSession)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_InWriteSession_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pfWriteSession) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[360]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfWriteSession = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_InWriteSession_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1032], (void *)pfWriteSession );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_InWriteSession_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfClientId tid;
    BOOL _W0;
    BOOL * pfWriteSession;
};

static void __finally_ITfContext_InWriteSession_Stub( struct __frame_ITfContext_InWriteSession_Stub *__frame )
{


}

void __RPC_STUB ITfContext_InWriteSession_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_InWriteSession_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_InWriteSession_Stub );
    __frame->pfWriteSession = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[360]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);


        __frame->pfWriteSession = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->InWriteSession(__frame->_This, __frame->tid, __frame->pfWriteSession);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfWriteSession;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_InWriteSession_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetSelection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetSelection_Proxy(
    ITfContext* This,
    TfEditCookie ec,
    ULONG ulIndex,
    ULONG ulCount,
    TF_SELECTION *pSelection,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetSelection_Proxy );
    __frame->This = This;
    if (pSelection) MIDL_memset( pSelection, 0, sizeof( *pSelection ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pSelection) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulIndex;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pSelection,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1084],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetSelection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1102], (void *)pSelection );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1106], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetSelection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ULONG ulIndex;
    ULONG ulCount;
    TF_SELECTION * pSelection;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_ITfContext_GetSelection_Stub( struct __frame_ITfContext_GetSelection_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSelection,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1102]);


}

void __RPC_STUB ITfContext_GetSelection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetSelection_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetSelection_Stub );
    __frame->pSelection = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulIndex = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pSelection = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 16);
        memset(__frame->pSelection, 0, __frame->ulCount * 16);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSelection(__frame->_This, __frame->ec, __frame->ulIndex, __frame->ulCount, __frame->pSelection, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pSelection,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1084]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pSelection,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1084]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetSelection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_SetSelection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_SetSelection_Proxy(
    ITfContext* This,
    TfEditCookie ec,
    ULONG ulCount,
    const TF_SELECTION *pSelection)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_SetSelection_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pSelection) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSelection,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1128]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSelection,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1128]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[384]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_SetSelection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_SetSelection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ULONG ulCount;
    const TF_SELECTION * pSelection;
};

static void __finally_ITfContext_SetSelection_Stub( struct __frame_ITfContext_SetSelection_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSelection,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1146]);

}

void __RPC_STUB ITfContext_SetSelection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_SetSelection_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_SetSelection_Stub );
    __frame->pSelection = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[384]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSelection,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1128],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetSelection(__frame->_This, __frame->ec, __frame->ulCount, __frame->pSelection);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_SetSelection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetStart_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetStart_Proxy(
    ITfContext* This,
    TfEditCookie ec,
    ITfRange **ppStart)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetStart_Proxy );
    __frame->This = This;
    if (ppStart) MIDL_memset( ppStart, 0, sizeof( *ppStart ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppStart) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[394]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppStart,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1168],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetStart_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1168], (void *)ppStart );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetStart_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange *_W0;
    ITfRange ** ppStart;
};

static void __finally_ITfContext_GetStart_Stub( struct __frame_ITfContext_GetStart_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppStart,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1168]);

}

void __RPC_STUB ITfContext_GetStart_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetStart_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetStart_Stub );
    __frame->ppStart = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[394]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        __frame->ppStart = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetStart(__frame->_This, __frame->ec, __frame->ppStart);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppStart,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1168]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppStart,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1168]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetStart_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetEnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetEnd_Proxy(
    ITfContext* This,
    TfEditCookie ec,
    ITfRange **ppEnd)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetEnd_Proxy );
    __frame->This = This;
    if (ppEnd) MIDL_memset( ppEnd, 0, sizeof( *ppEnd ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!ppEnd) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[402]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetEnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1190], (void *)ppEnd );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetEnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange *_W0;
    ITfRange ** ppEnd;
};

static void __finally_ITfContext_GetEnd_Stub( struct __frame_ITfContext_GetEnd_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnd,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190]);

}

void __RPC_STUB ITfContext_GetEnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetEnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetEnd_Stub );
    __frame->ppEnd = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[402]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        __frame->ppEnd = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetEnd(__frame->_This, __frame->ec, __frame->ppEnd);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetEnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetActiveView_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetActiveView_Proxy(
    ITfContext* This,
    ITfContextView **ppView)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetActiveView_Proxy );
    __frame->This = This;
    if (ppView) MIDL_memset( ppView, 0, sizeof( *ppView ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!ppView) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[410]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppView,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1212],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetActiveView_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1212], (void *)ppView );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetActiveView_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    ITfContextView *_W0;
    ITfContextView ** ppView;
};

static void __finally_ITfContext_GetActiveView_Stub( struct __frame_ITfContext_GetActiveView_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppView,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1212]);

}

void __RPC_STUB ITfContext_GetActiveView_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetActiveView_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetActiveView_Stub );
    __frame->ppView = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[410]);


        __frame->ppView = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetActiveView(__frame->_This, __frame->ppView);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppView,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1212]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppView,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1212]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetActiveView_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_EnumViews_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_EnumViews_Proxy(
    ITfContext* This,
    IEnumTfContextViews **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_EnumViews_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[416]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1234],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_EnumViews_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1234], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_EnumViews_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    IEnumTfContextViews *_W0;
    IEnumTfContextViews ** ppEnum;
};

static void __finally_ITfContext_EnumViews_Stub( struct __frame_ITfContext_EnumViews_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1234]);

}

void __RPC_STUB ITfContext_EnumViews_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_EnumViews_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_EnumViews_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[416]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumViews(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1234]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1234]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_EnumViews_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetStatus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetStatus_Proxy(
    ITfContext* This,
    TF_STATUS *pdcs)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetStatus_Proxy );
    __frame->This = This;
    if (pdcs) MIDL_memset( pdcs, 0, sizeof( *pdcs ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pdcs) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[422]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pdcs,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1238],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetStatus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1246], (void *)pdcs );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetStatus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TF_STATUS _W0;
    TF_STATUS * pdcs;
};

static void __finally_ITfContext_GetStatus_Stub( struct __frame_ITfContext_GetStatus_Stub *__frame )
{

}

void __RPC_STUB ITfContext_GetStatus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetStatus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetStatus_Stub );
    __frame->pdcs = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[422]);


        __frame->pdcs = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetStatus(__frame->_This, __frame->pdcs);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 20;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pdcs,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1238]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetStatus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetProperty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetProperty_Proxy(
    ITfContext* This,
    REFGUID guidProp,
    ITfProperty **ppProp)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetProperty_Proxy );
    __frame->This = This;
    if (ppProp) MIDL_memset( ppProp, 0, sizeof( *ppProp ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!guidProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1272],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetProperty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1272], (void *)ppProp );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetProperty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    REFGUID guidProp;
    ITfProperty *_W0;
    ITfProperty ** ppProp;
};

static void __finally_ITfContext_GetProperty_Stub( struct __frame_ITfContext_GetProperty_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1272]);

}

void __RPC_STUB ITfContext_GetProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetProperty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetProperty_Stub );
    __frame->guidProp = 0;
    __frame->ppProp = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        __frame->ppProp = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetProperty(__frame->_This, __frame->guidProp, __frame->ppProp);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1272]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1272]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetProperty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetAppProperty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetAppProperty_Proxy(
    ITfContext* This,
    REFGUID guidProp,
    ITfReadOnlyProperty **ppProp)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetAppProperty_Proxy );
    __frame->This = This;
    if (ppProp) MIDL_memset( ppProp, 0, sizeof( *ppProp ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!guidProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[438]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1298],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetAppProperty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1298], (void *)ppProp );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetAppProperty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    REFGUID guidProp;
    ITfReadOnlyProperty *_W0;
    ITfReadOnlyProperty ** ppProp;
};

static void __finally_ITfContext_GetAppProperty_Stub( struct __frame_ITfContext_GetAppProperty_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1298]);

}

void __RPC_STUB ITfContext_GetAppProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetAppProperty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetAppProperty_Stub );
    __frame->guidProp = 0;
    __frame->ppProp = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[438]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        __frame->ppProp = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetAppProperty(__frame->_This, __frame->guidProp, __frame->ppProp);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1298]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1298]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetAppProperty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_TrackProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_TrackProperties_Proxy(
    ITfContext* This,
    const GUID **prgProp,
    ULONG cProp,
    const GUID **prgAppProp,
    ULONG cAppProp,
    ITfReadOnlyProperty **ppProperty)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_TrackProperties_Proxy );
    __frame->This = This;
    if (ppProperty) MIDL_memset( ppProperty, 0, sizeof( *ppProperty ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!prgProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgAppProp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppProperty) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cProp;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prgProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1320]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cAppProp;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prgAppProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1360]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cProp;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prgProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1320]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cProp;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cAppProp;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prgAppProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1360]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cAppProp;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[448]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppProperty,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1400],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_TrackProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1400], (void *)ppProperty );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_TrackProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    const GUID ** prgProp;
    ULONG cProp;
    const GUID ** prgAppProp;
    ULONG cAppProp;
    ITfReadOnlyProperty *_W0;
    ITfReadOnlyProperty ** ppProperty;
};

static void __finally_ITfContext_TrackProperties_Stub( struct __frame_ITfContext_TrackProperties_Stub *__frame )
{
    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cProp;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1338]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cAppProp;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgAppProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1378]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppProperty,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1400]);

}

void __RPC_STUB ITfContext_TrackProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_TrackProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_TrackProperties_Stub );
    __frame->prgProp = 0;
    __frame->prgAppProp = 0;
    __frame->ppProperty = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[448]);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prgProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1320],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cProp = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prgAppProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1360],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cAppProp = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppProperty = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->TrackProperties(__frame->_This, __frame->prgProp, __frame->cProp, __frame->prgAppProp, __frame->cAppProp, __frame->ppProperty);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProperty,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1400]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppProperty,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1400]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_TrackProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_EnumProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_EnumProperties_Proxy(
    ITfContext* This,
    IEnumTfProperties **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_EnumProperties_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[466]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1422],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_EnumProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1422], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_EnumProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    IEnumTfProperties *_W0;
    IEnumTfProperties ** ppEnum;
};

static void __finally_ITfContext_EnumProperties_Stub( struct __frame_ITfContext_EnumProperties_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1422]);

}

void __RPC_STUB ITfContext_EnumProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_EnumProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_EnumProperties_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[466]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumProperties(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1422]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1422]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_EnumProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_GetDocumentMgr_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_GetDocumentMgr_Proxy(
    ITfContext* This,
    ITfDocumentMgr **ppDm)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_GetDocumentMgr_Proxy );
    __frame->This = This;
    if (ppDm) MIDL_memset( ppDm, 0, sizeof( *ppDm ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        if (!ppDm) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[472]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDm,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_GetDocumentMgr_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1444], (void *)ppDm );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_GetDocumentMgr_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    ITfDocumentMgr *_W0;
    ITfDocumentMgr ** ppDm;
};

static void __finally_ITfContext_GetDocumentMgr_Stub( struct __frame_ITfContext_GetDocumentMgr_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDm,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);

}

void __RPC_STUB ITfContext_GetDocumentMgr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_GetDocumentMgr_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_GetDocumentMgr_Stub );
    __frame->ppDm = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[472]);


        __frame->ppDm = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDocumentMgr(__frame->_This, __frame->ppDm);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDm,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDm,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_GetDocumentMgr_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContext_CreateRangeBackup_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContext_CreateRangeBackup_Proxy(
    ITfContext* This,
    TfEditCookie ec,
    ITfRange *pRange,
    ITfRangeBackup **ppBackup)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContext_CreateRangeBackup_Proxy );
    __frame->This = This;
    if (ppBackup) MIDL_memset( ppBackup, 0, sizeof( *ppBackup ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        if (!ppBackup) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1448]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1448]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[478]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppBackup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1484],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContext_CreateRangeBackup_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1484], (void *)ppBackup );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContext_CreateRangeBackup_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContext * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    ITfRangeBackup *_W0;
    ITfRangeBackup ** ppBackup;
};

static void __finally_ITfContext_CreateRangeBackup_Stub( struct __frame_ITfContext_CreateRangeBackup_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1448]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppBackup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1484]);

}

void __RPC_STUB ITfContext_CreateRangeBackup_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContext_CreateRangeBackup_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContext*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContext_CreateRangeBackup_Stub );
    __frame->pRange = 0;
    __frame->ppBackup = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[478]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1448],
            0);


        __frame->ppBackup = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateRangeBackup(__frame->_This, __frame->ec, __frame->pRange, __frame->ppBackup);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppBackup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1484]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppBackup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1484]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContext_CreateRangeBackup_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContext_FormatStringOffsetTable[] =
{
    346,  /* ITfContext::RequestEditSession */
    360,  /* ITfContext::InWriteSession */
    368,  /* ITfContext::GetSelection */
    384,  /* ITfContext::SetSelection */
    394,  /* ITfContext::GetStart */
    402,  /* ITfContext::GetEnd */
    410,  /* ITfContext::GetActiveView */
    416,  /* ITfContext::EnumViews */
    422,  /* ITfContext::GetStatus */
    428,  /* ITfContext::GetProperty */
    438,  /* ITfContext::GetAppProperty */
    448,  /* ITfContext::TrackProperties */
    466,  /* ITfContext::EnumProperties */
    472,  /* ITfContext::GetDocumentMgr */
    478,  /* ITfContext::CreateRangeBackup */
};

static const CINTERFACE_PROXY_VTABLE(18) _ITfContextProxyVtbl =
{
    {
        &IID_ITfContext,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContext_RequestEditSession_Proxy,
        ITfContext_InWriteSession_Proxy,
        ITfContext_GetSelection_Proxy,
        ITfContext_SetSelection_Proxy,
        ITfContext_GetStart_Proxy,
        ITfContext_GetEnd_Proxy,
        ITfContext_GetActiveView_Proxy,
        ITfContext_EnumViews_Proxy,
        ITfContext_GetStatus_Proxy,
        ITfContext_GetProperty_Proxy,
        ITfContext_GetAppProperty_Proxy,
        ITfContext_TrackProperties_Proxy,
        ITfContext_EnumProperties_Proxy,
        ITfContext_GetDocumentMgr_Proxy,
        ITfContext_CreateRangeBackup_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContext_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContext_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContext_table[] =
{
    ITfContext_RequestEditSession_Stub,
    ITfContext_InWriteSession_Stub,
    ITfContext_GetSelection_Stub,
    ITfContext_SetSelection_Stub,
    ITfContext_GetStart_Stub,
    ITfContext_GetEnd_Stub,
    ITfContext_GetActiveView_Stub,
    ITfContext_EnumViews_Stub,
    ITfContext_GetStatus_Stub,
    ITfContext_GetProperty_Stub,
    ITfContext_GetAppProperty_Stub,
    ITfContext_TrackProperties_Stub,
    ITfContext_EnumProperties_Stub,
    ITfContext_GetDocumentMgr_Stub,
    ITfContext_CreateRangeBackup_Stub
};

static const CInterfaceStubVtbl _ITfContextStubVtbl =
{
    {
        &IID_ITfContext,
        &ITfContext_ServerInfo,
        18,
        &ITfContext_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfSource interface
 */
static void __finally_ITfSource_AdviseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfSource_AdviseSink_Proxy(
    ITfSource* This,
    REFIID riid,
    IUnknown *punk,
    DWORD *pdwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfSource_AdviseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pdwCookie) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1492]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1492]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[490]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfSource_AdviseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1498], (void *)pdwCookie );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfSource_AdviseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfSource * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown * punk;
    DWORD _W0;
    DWORD * pdwCookie;
};

static void __finally_ITfSource_AdviseSink_Stub( struct __frame_ITfSource_AdviseSink_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->punk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1492]);


}

void __RPC_STUB ITfSource_AdviseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfSource_AdviseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfSource*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfSource_AdviseSink_Stub );
    __frame->riid = 0;
    __frame->punk = 0;
    __frame->pdwCookie = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[490]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->punk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1492],
            0);


        __frame->pdwCookie = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdviseSink(__frame->_This, __frame->riid, __frame->punk, __frame->pdwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwCookie;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfSource_AdviseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfSource_UnadviseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfSource_UnadviseSink_Proxy(
    ITfSource* This,
    DWORD dwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfSource_UnadviseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwCookie;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[504]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfSource_UnadviseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfSource_UnadviseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfSource * _This;
    HRESULT _RetVal;
    DWORD dwCookie;
};

static void __finally_ITfSource_UnadviseSink_Stub( struct __frame_ITfSource_UnadviseSink_Stub *__frame )
{

}

void __RPC_STUB ITfSource_UnadviseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfSource_UnadviseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfSource*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfSource_UnadviseSink_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[504]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnadviseSink(__frame->_This, __frame->dwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfSource_UnadviseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfSource_FormatStringOffsetTable[] =
{
    490,  /* ITfSource::AdviseSink */
    504,  /* ITfSource::UnadviseSink */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfSourceProxyVtbl =
{
    {
        &IID_ITfSource,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfSource_AdviseSink_Proxy,
        ITfSource_UnadviseSink_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfSource_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfSource_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfSource_table[] =
{
    ITfSource_AdviseSink_Stub,
    ITfSource_UnadviseSink_Stub
};

static const CInterfaceStubVtbl _ITfSourceStubVtbl =
{
    {
        &IID_ITfSource,
        &ITfSource_ServerInfo,
        5,
        &ITfSource_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfInputProcessorProfiles interface
 */
static void __finally_IEnumTfInputProcessorProfiles_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfInputProcessorProfiles_Clone_Proxy(
    IEnumTfInputProcessorProfiles* This,
    IEnumTfInputProcessorProfiles **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfInputProcessorProfiles_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[508]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1520],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfInputProcessorProfiles_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1520], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfInputProcessorProfiles_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfInputProcessorProfiles * _This;
    HRESULT _RetVal;
    IEnumTfInputProcessorProfiles *_W0;
    IEnumTfInputProcessorProfiles ** ppEnum;
};

static void __finally_IEnumTfInputProcessorProfiles_Clone_Stub( struct __frame_IEnumTfInputProcessorProfiles_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1520]);

}

void __RPC_STUB IEnumTfInputProcessorProfiles_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfInputProcessorProfiles_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfInputProcessorProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfInputProcessorProfiles_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[508]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1520]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1520]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfInputProcessorProfiles_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfInputProcessorProfiles_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfInputProcessorProfiles_Next_Proxy(
    IEnumTfInputProcessorProfiles* This,
    ULONG ulCount,
    TF_INPUTPROCESSORPROFILE *pProfile,
    ULONG *pcFetch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfInputProcessorProfiles_Next_Proxy );
    __frame->This = This;
    if (pProfile) MIDL_memset( pProfile, 0, sizeof( *pProfile ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[514]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1554],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetch = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfInputProcessorProfiles_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1572], (void *)pProfile );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1576], (void *)pcFetch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfInputProcessorProfiles_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfInputProcessorProfiles * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    TF_INPUTPROCESSORPROFILE * pProfile;
    ULONG _W0;
    ULONG * pcFetch;
};

static void __finally_IEnumTfInputProcessorProfiles_Next_Stub( struct __frame_IEnumTfInputProcessorProfiles_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProfile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1572]);


}

void __RPC_STUB IEnumTfInputProcessorProfiles_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfInputProcessorProfiles_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfInputProcessorProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfInputProcessorProfiles_Next_Stub );
    __frame->pProfile = 0;
    __frame->pcFetch = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[514]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pProfile = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 88);
        memset(__frame->pProfile, 0, __frame->ulCount * 88);
        __frame->pcFetch = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->pProfile, __frame->pcFetch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1554]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1554]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetch;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfInputProcessorProfiles_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfInputProcessorProfiles_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfInputProcessorProfiles_Reset_Proxy(
    IEnumTfInputProcessorProfiles* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfInputProcessorProfiles_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[526]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfInputProcessorProfiles_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfInputProcessorProfiles_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfInputProcessorProfiles * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfInputProcessorProfiles_Reset_Stub( struct __frame_IEnumTfInputProcessorProfiles_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfInputProcessorProfiles_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfInputProcessorProfiles_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfInputProcessorProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfInputProcessorProfiles_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[526]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfInputProcessorProfiles_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfInputProcessorProfiles_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfInputProcessorProfiles_Skip_Proxy(
    IEnumTfInputProcessorProfiles* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfInputProcessorProfiles_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[528]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfInputProcessorProfiles_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfInputProcessorProfiles_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfInputProcessorProfiles * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfInputProcessorProfiles_Skip_Stub( struct __frame_IEnumTfInputProcessorProfiles_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfInputProcessorProfiles_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfInputProcessorProfiles_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfInputProcessorProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfInputProcessorProfiles_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[528]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfInputProcessorProfiles_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfInputProcessorProfiles_FormatStringOffsetTable[] =
{
    508,  /* IEnumTfInputProcessorProfiles::Clone */
    514,  /* IEnumTfInputProcessorProfiles::Next */
    526,  /* IEnumTfInputProcessorProfiles::Reset */
    528,  /* IEnumTfInputProcessorProfiles::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfInputProcessorProfilesProxyVtbl =
{
    {
        &IID_IEnumTfInputProcessorProfiles,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfInputProcessorProfiles_Clone_Proxy,
        IEnumTfInputProcessorProfiles_Next_Proxy,
        IEnumTfInputProcessorProfiles_Reset_Proxy,
        IEnumTfInputProcessorProfiles_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfInputProcessorProfiles_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfInputProcessorProfiles_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfInputProcessorProfiles_table[] =
{
    IEnumTfInputProcessorProfiles_Clone_Stub,
    IEnumTfInputProcessorProfiles_Next_Stub,
    IEnumTfInputProcessorProfiles_Reset_Stub,
    IEnumTfInputProcessorProfiles_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfInputProcessorProfilesStubVtbl =
{
    {
        &IID_IEnumTfInputProcessorProfiles,
        &IEnumTfInputProcessorProfiles_ServerInfo,
        7,
        &IEnumTfInputProcessorProfiles_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfInputProcessorProfileMgr interface
 */
static void __finally_ITfInputProcessorProfileMgr_ActivateProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_ActivateProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    DWORD dwProfileType,
    LANGID langid,
    REFCLSID clsid,
    REFGUID guidProfile,
    HKL hkl,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_ActivateProfile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 78;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwProfileType;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hkl,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[532]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_ActivateProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_ActivateProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    DWORD dwProfileType;
    LANGID langid;
    REFCLSID clsid;
    REFGUID guidProfile;
    HKL hkl;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileMgr_ActivateProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_ActivateProfile_Stub *__frame )
{






}

void __RPC_STUB ITfInputProcessorProfileMgr_ActivateProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_ActivateProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_ActivateProfile_Stub );
    __frame->clsid = 0;
    __frame->guidProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[532]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwProfileType = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hkl,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ActivateProfile(__frame->_This, __frame->dwProfileType, __frame->langid, __frame->clsid, __frame->guidProfile, __frame->hkl, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_ActivateProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_DeactivateProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    DWORD dwProfileType,
    LANGID langid,
    REFCLSID clsid,
    REFGUID guidProfile,
    HKL hkl,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 78;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwProfileType;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hkl,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[550]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_DeactivateProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    DWORD dwProfileType;
    LANGID langid;
    REFCLSID clsid;
    REFGUID guidProfile;
    HKL hkl;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_DeactivateProfile_Stub *__frame )
{






}

void __RPC_STUB ITfInputProcessorProfileMgr_DeactivateProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_DeactivateProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Stub );
    __frame->clsid = 0;
    __frame->guidProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[550]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwProfileType = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hkl,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->DeactivateProfile(__frame->_This, __frame->dwProfileType, __frame->langid, __frame->clsid, __frame->guidProfile, __frame->hkl, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_DeactivateProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_GetProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_GetProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    DWORD dwProfileType,
    LANGID langid,
    REFCLSID clsid,
    REFGUID guidProfile,
    HKL hkl,
    TF_INPUTPROCESSORPROFILE *pProfile)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_GetProfile_Proxy );
    __frame->This = This;
    if (pProfile) MIDL_memset( pProfile, 0, sizeof( *pProfile ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 70;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwProfileType;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hkl,
                0xb9 /* FC_UINT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[568]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1524],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_GetProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1604], (void *)pProfile );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_GetProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    DWORD dwProfileType;
    LANGID langid;
    REFCLSID clsid;
    REFGUID guidProfile;
    HKL hkl;
    TF_INPUTPROCESSORPROFILE _W0;
    TF_INPUTPROCESSORPROFILE * pProfile;
};

static void __finally_ITfInputProcessorProfileMgr_GetProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_GetProfile_Stub *__frame )
{





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProfile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1604]);

}

void __RPC_STUB ITfInputProcessorProfileMgr_GetProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_GetProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_GetProfile_Stub );
    __frame->clsid = 0;
    __frame->guidProfile = 0;
    __frame->pProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[568]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwProfileType = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hkl,
            0xb9 /* FC_UINT3264 */);


        __frame->pProfile = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetProfile(__frame->_This, __frame->dwProfileType, __frame->langid, __frame->clsid, __frame->guidProfile, __frame->hkl, __frame->pProfile);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1524]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1524]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_GetProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_EnumProfiles_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_EnumProfiles_Proxy(
    ITfInputProcessorProfileMgr* This,
    LANGID langid,
    IEnumTfInputProcessorProfiles **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_EnumProfiles_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 6;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[588]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_EnumProfiles_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1626], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_EnumProfiles_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    LANGID langid;
    IEnumTfInputProcessorProfiles *_W0;
    IEnumTfInputProcessorProfiles ** ppEnum;
};

static void __finally_ITfInputProcessorProfileMgr_EnumProfiles_Stub( struct __frame_ITfInputProcessorProfileMgr_EnumProfiles_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626]);

}

void __RPC_STUB ITfInputProcessorProfileMgr_EnumProfiles_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_EnumProfiles_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_EnumProfiles_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[588]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumProfiles(__frame->_This, __frame->langid, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_EnumProfiles_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_ReleaseInputProcessor_Proxy(
    ITfInputProcessorProfileMgr* This,
    REFCLSID rclsid,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!rclsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rclsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[596]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    REFCLSID rclsid;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub( struct __frame_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub *__frame )
{


}

void __RPC_STUB ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub );
    __frame->rclsid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[596]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rclsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseInputProcessor(__frame->_This, __frame->rclsid, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_RegisterProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_RegisterProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    REFCLSID rclsid,
    LANGID langid,
    REFGUID guidProfile,
    const WCHAR *pchDesc,
    ULONG cchDesc,
    const WCHAR *pchIconFile,
    ULONG cchFile,
    ULONG uIconIndex,
    HKL hklsubstitute,
    DWORD dwPreferredLayout,
    BOOL bEnabledByDefault,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_RegisterProfile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!rclsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pchDesc) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pchIconFile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 110;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cchDesc;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pchDesc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1642]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cchFile;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pchIconFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1656]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rclsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cchDesc;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pchDesc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1642]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cchDesc;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cchFile;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pchIconFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1656]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cchFile;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = uIconIndex;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hklsubstitute,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwPreferredLayout;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bEnabledByDefault;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[604]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_RegisterProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_RegisterProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    REFCLSID rclsid;
    LANGID langid;
    REFGUID guidProfile;
    const WCHAR * pchDesc;
    ULONG cchDesc;
    const WCHAR * pchIconFile;
    ULONG cchFile;
    ULONG uIconIndex;
    HKL hklsubstitute;
    DWORD dwPreferredLayout;
    BOOL bEnabledByDefault;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileMgr_RegisterProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_RegisterProfile_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cchDesc;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pchDesc,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1642]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cchFile;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pchIconFile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1656]);







}

void __RPC_STUB ITfInputProcessorProfileMgr_RegisterProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_RegisterProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_RegisterProfile_Stub );
    __frame->rclsid = 0;
    __frame->guidProfile = 0;
    __frame->pchDesc = 0;
    __frame->pchIconFile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[604]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rclsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pchDesc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1642],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchDesc = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pchIconFile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1656],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchFile = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->uIconIndex = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hklsubstitute,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwPreferredLayout = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bEnabledByDefault = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterProfile(__frame->_This, __frame->rclsid, __frame->langid, __frame->guidProfile, __frame->pchDesc, __frame->cchDesc, __frame->pchIconFile, __frame->cchFile, __frame->uIconIndex, __frame->hklsubstitute, __frame->dwPreferredLayout, __frame->bEnabledByDefault, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_RegisterProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_UnregisterProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    REFCLSID rclsid,
    LANGID langid,
    REFGUID guidProfile,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!rclsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 54;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rclsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[638]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_UnregisterProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    REFCLSID rclsid;
    LANGID langid;
    REFGUID guidProfile;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_UnregisterProfile_Stub *__frame )
{




}

void __RPC_STUB ITfInputProcessorProfileMgr_UnregisterProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_UnregisterProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Stub );
    __frame->rclsid = 0;
    __frame->guidProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[638]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rclsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnregisterProfile(__frame->_This, __frame->rclsid, __frame->langid, __frame->guidProfile, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_UnregisterProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileMgr_GetActiveProfile_Proxy(
    ITfInputProcessorProfileMgr* This,
    REFGUID catid,
    TF_INPUTPROCESSORPROFILE *pProfile)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Proxy );
    __frame->This = This;
    if (pProfile) MIDL_memset( pProfile, 0, sizeof( *pProfile ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!catid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)catid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[652]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1524],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1682], (void *)pProfile );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileMgr_GetActiveProfile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileMgr * _This;
    HRESULT _RetVal;
    REFGUID catid;
    TF_INPUTPROCESSORPROFILE _W0;
    TF_INPUTPROCESSORPROFILE * pProfile;
};

static void __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Stub( struct __frame_ITfInputProcessorProfileMgr_GetActiveProfile_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProfile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

}

void __RPC_STUB ITfInputProcessorProfileMgr_GetActiveProfile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileMgr_GetActiveProfile_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Stub );
    __frame->catid = 0;
    __frame->pProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[652]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->catid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        __frame->pProfile = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetActiveProfile(__frame->_This, __frame->catid, __frame->pProfile);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1524]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1524]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileMgr_GetActiveProfile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfInputProcessorProfileMgr_FormatStringOffsetTable[] =
{
    532,  /* ITfInputProcessorProfileMgr::ActivateProfile */
    550,  /* ITfInputProcessorProfileMgr::DeactivateProfile */
    568,  /* ITfInputProcessorProfileMgr::GetProfile */
    588,  /* ITfInputProcessorProfileMgr::EnumProfiles */
    596,  /* ITfInputProcessorProfileMgr::ReleaseInputProcessor */
    604,  /* ITfInputProcessorProfileMgr::RegisterProfile */
    638,  /* ITfInputProcessorProfileMgr::UnregisterProfile */
    652,  /* ITfInputProcessorProfileMgr::GetActiveProfile */
};

static const CINTERFACE_PROXY_VTABLE(11) _ITfInputProcessorProfileMgrProxyVtbl =
{
    {
        &IID_ITfInputProcessorProfileMgr,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfInputProcessorProfileMgr_ActivateProfile_Proxy,
        ITfInputProcessorProfileMgr_DeactivateProfile_Proxy,
        ITfInputProcessorProfileMgr_GetProfile_Proxy,
        ITfInputProcessorProfileMgr_EnumProfiles_Proxy,
        ITfInputProcessorProfileMgr_ReleaseInputProcessor_Proxy,
        ITfInputProcessorProfileMgr_RegisterProfile_Proxy,
        ITfInputProcessorProfileMgr_UnregisterProfile_Proxy,
        ITfInputProcessorProfileMgr_GetActiveProfile_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfInputProcessorProfileMgr_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfInputProcessorProfileMgr_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfInputProcessorProfileMgr_table[] =
{
    ITfInputProcessorProfileMgr_ActivateProfile_Stub,
    ITfInputProcessorProfileMgr_DeactivateProfile_Stub,
    ITfInputProcessorProfileMgr_GetProfile_Stub,
    ITfInputProcessorProfileMgr_EnumProfiles_Stub,
    ITfInputProcessorProfileMgr_ReleaseInputProcessor_Stub,
    ITfInputProcessorProfileMgr_RegisterProfile_Stub,
    ITfInputProcessorProfileMgr_UnregisterProfile_Stub,
    ITfInputProcessorProfileMgr_GetActiveProfile_Stub
};

static const CInterfaceStubVtbl _ITfInputProcessorProfileMgrStubVtbl =
{
    {
        &IID_ITfInputProcessorProfileMgr,
        &ITfInputProcessorProfileMgr_ServerInfo,
        11,
        &ITfInputProcessorProfileMgr_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfDisplayAttributeInfo interface
 */
static void __finally_ITfDisplayAttributeInfo_GetGUID_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDisplayAttributeInfo_GetGUID_Proxy(
    ITfDisplayAttributeInfo* This,
    GUID *pguid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDisplayAttributeInfo_GetGUID_Proxy );
    __frame->This = This;
    if (pguid) MIDL_memset( pguid, 0, sizeof( *pguid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[662]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDisplayAttributeInfo_GetGUID_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1686], (void *)pguid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDisplayAttributeInfo_GetGUID_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * pguid;
};

static void __finally_ITfDisplayAttributeInfo_GetGUID_Stub( struct __frame_ITfDisplayAttributeInfo_GetGUID_Stub *__frame )
{

}

void __RPC_STUB ITfDisplayAttributeInfo_GetGUID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDisplayAttributeInfo_GetGUID_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDisplayAttributeInfo_GetGUID_Stub );
    __frame->pguid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[662]);


        __frame->pguid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetGUID(__frame->_This, __frame->pguid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDisplayAttributeInfo_GetGUID_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDisplayAttributeInfo_GetDescription_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDisplayAttributeInfo_GetDescription_Proxy(
    ITfDisplayAttributeInfo* This,
    BSTR *pbstrDesc)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDisplayAttributeInfo_GetDescription_Proxy );
    __frame->This = This;
    if (pbstrDesc) MIDL_memset( pbstrDesc, 0, sizeof( *pbstrDesc ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pbstrDesc) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[668]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pbstrDesc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDisplayAttributeInfo_GetDescription_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1690], (void *)pbstrDesc );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDisplayAttributeInfo_GetDescription_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    BSTR _W0;
    BSTR * pbstrDesc;
};

static void __finally_ITfDisplayAttributeInfo_GetDescription_Stub( struct __frame_ITfDisplayAttributeInfo_GetDescription_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pbstrDesc,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1690]);

}

void __RPC_STUB ITfDisplayAttributeInfo_GetDescription_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDisplayAttributeInfo_GetDescription_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDisplayAttributeInfo_GetDescription_Stub );
    __frame->pbstrDesc = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[668]);


        __frame->pbstrDesc = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDescription(__frame->_This, __frame->pbstrDesc);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrDesc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pbstrDesc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[48]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDisplayAttributeInfo_GetDescription_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDisplayAttributeInfo_GetAttributeInfo_Proxy(
    ITfDisplayAttributeInfo* This,
    TF_DISPLAYATTRIBUTE *pda)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Proxy );
    __frame->This = This;
    if (pda) MIDL_memset( pda, 0, sizeof( *pda ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pda) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[674]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pda,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1734],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1758], (void *)pda );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDisplayAttributeInfo_GetAttributeInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    TF_DISPLAYATTRIBUTE _W0;
    TF_DISPLAYATTRIBUTE * pda;
};

static void __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Stub( struct __frame_ITfDisplayAttributeInfo_GetAttributeInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pda,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1758]);

}

void __RPC_STUB ITfDisplayAttributeInfo_GetAttributeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDisplayAttributeInfo_GetAttributeInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Stub );
    __frame->pda = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[674]);


        __frame->pda = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetAttributeInfo(__frame->_This, __frame->pda);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pda,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1734]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pda,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1734]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDisplayAttributeInfo_GetAttributeInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDisplayAttributeInfo_SetAttributeInfo_Proxy(
    ITfDisplayAttributeInfo* This,
    const TF_DISPLAYATTRIBUTE *pda)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pda) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pda,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1762]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pda,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1762]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[680]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDisplayAttributeInfo_SetAttributeInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    const TF_DISPLAYATTRIBUTE * pda;
};

static void __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Stub( struct __frame_ITfDisplayAttributeInfo_SetAttributeInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pda,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1786]);

}

void __RPC_STUB ITfDisplayAttributeInfo_SetAttributeInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDisplayAttributeInfo_SetAttributeInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Stub );
    __frame->pda = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[680]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pda,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1762],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetAttributeInfo(__frame->_This, __frame->pda);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDisplayAttributeInfo_SetAttributeInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfDisplayAttributeInfo_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfDisplayAttributeInfo_Reset_Proxy(
    ITfDisplayAttributeInfo* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfDisplayAttributeInfo_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[686]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfDisplayAttributeInfo_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfDisplayAttributeInfo_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
};

static void __finally_ITfDisplayAttributeInfo_Reset_Stub( struct __frame_ITfDisplayAttributeInfo_Reset_Stub *__frame )
{
}

void __RPC_STUB ITfDisplayAttributeInfo_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfDisplayAttributeInfo_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfDisplayAttributeInfo_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[686]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfDisplayAttributeInfo_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfDisplayAttributeInfo_FormatStringOffsetTable[] =
{
    662,  /* ITfDisplayAttributeInfo::GetGUID */
    668,  /* ITfDisplayAttributeInfo::GetDescription */
    674,  /* ITfDisplayAttributeInfo::GetAttributeInfo */
    680,  /* ITfDisplayAttributeInfo::SetAttributeInfo */
    686,  /* ITfDisplayAttributeInfo::Reset */
};

static const CINTERFACE_PROXY_VTABLE(8) _ITfDisplayAttributeInfoProxyVtbl =
{
    {
        &IID_ITfDisplayAttributeInfo,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfDisplayAttributeInfo_GetGUID_Proxy,
        ITfDisplayAttributeInfo_GetDescription_Proxy,
        ITfDisplayAttributeInfo_GetAttributeInfo_Proxy,
        ITfDisplayAttributeInfo_SetAttributeInfo_Proxy,
        ITfDisplayAttributeInfo_Reset_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfDisplayAttributeInfo_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfDisplayAttributeInfo_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfDisplayAttributeInfo_table[] =
{
    ITfDisplayAttributeInfo_GetGUID_Stub,
    ITfDisplayAttributeInfo_GetDescription_Stub,
    ITfDisplayAttributeInfo_GetAttributeInfo_Stub,
    ITfDisplayAttributeInfo_SetAttributeInfo_Stub,
    ITfDisplayAttributeInfo_Reset_Stub
};

static const CInterfaceStubVtbl _ITfDisplayAttributeInfoStubVtbl =
{
    {
        &IID_ITfDisplayAttributeInfo,
        &ITfDisplayAttributeInfo_ServerInfo,
        8,
        &ITfDisplayAttributeInfo_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfDisplayAttributeInfo interface
 */
static void __finally_IEnumTfDisplayAttributeInfo_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDisplayAttributeInfo_Clone_Proxy(
    IEnumTfDisplayAttributeInfo* This,
    IEnumTfDisplayAttributeInfo **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDisplayAttributeInfo_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[688]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1808],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDisplayAttributeInfo_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1808], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDisplayAttributeInfo_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    IEnumTfDisplayAttributeInfo *_W0;
    IEnumTfDisplayAttributeInfo ** ppEnum;
};

static void __finally_IEnumTfDisplayAttributeInfo_Clone_Stub( struct __frame_IEnumTfDisplayAttributeInfo_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1808]);

}

void __RPC_STUB IEnumTfDisplayAttributeInfo_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDisplayAttributeInfo_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDisplayAttributeInfo_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[688]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1808]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1808]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDisplayAttributeInfo_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDisplayAttributeInfo_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDisplayAttributeInfo_Next_Proxy(
    IEnumTfDisplayAttributeInfo* This,
    ULONG ulCount,
    ITfDisplayAttributeInfo **rgInfo,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDisplayAttributeInfo_Next_Proxy );
    __frame->This = This;
    if (rgInfo) MIDL_memset( rgInfo, 0, sizeof( *rgInfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rgInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[694]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDisplayAttributeInfo_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1848], (void *)rgInfo );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1852], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDisplayAttributeInfo_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    ITfDisplayAttributeInfo ** rgInfo;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumTfDisplayAttributeInfo_Next_Stub( struct __frame_IEnumTfDisplayAttributeInfo_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1848]);


}

void __RPC_STUB IEnumTfDisplayAttributeInfo_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDisplayAttributeInfo_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDisplayAttributeInfo_Next_Stub );
    __frame->rgInfo = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[694]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgInfo = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 8);
        memset(__frame->rgInfo, 0, __frame->ulCount * 8);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->rgInfo, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDisplayAttributeInfo_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDisplayAttributeInfo_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDisplayAttributeInfo_Reset_Proxy(
    IEnumTfDisplayAttributeInfo* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDisplayAttributeInfo_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[706]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDisplayAttributeInfo_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDisplayAttributeInfo_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfDisplayAttributeInfo_Reset_Stub( struct __frame_IEnumTfDisplayAttributeInfo_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfDisplayAttributeInfo_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDisplayAttributeInfo_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDisplayAttributeInfo_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[706]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDisplayAttributeInfo_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDisplayAttributeInfo_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDisplayAttributeInfo_Skip_Proxy(
    IEnumTfDisplayAttributeInfo* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDisplayAttributeInfo_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[708]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDisplayAttributeInfo_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDisplayAttributeInfo_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDisplayAttributeInfo * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfDisplayAttributeInfo_Skip_Stub( struct __frame_IEnumTfDisplayAttributeInfo_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfDisplayAttributeInfo_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDisplayAttributeInfo_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDisplayAttributeInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDisplayAttributeInfo_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[708]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDisplayAttributeInfo_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfDisplayAttributeInfo_FormatStringOffsetTable[] =
{
    688,  /* IEnumTfDisplayAttributeInfo::Clone */
    694,  /* IEnumTfDisplayAttributeInfo::Next */
    706,  /* IEnumTfDisplayAttributeInfo::Reset */
    708,  /* IEnumTfDisplayAttributeInfo::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfDisplayAttributeInfoProxyVtbl =
{
    {
        &IID_IEnumTfDisplayAttributeInfo,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfDisplayAttributeInfo_Clone_Proxy,
        IEnumTfDisplayAttributeInfo_Next_Proxy,
        IEnumTfDisplayAttributeInfo_Reset_Proxy,
        IEnumTfDisplayAttributeInfo_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfDisplayAttributeInfo_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfDisplayAttributeInfo_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfDisplayAttributeInfo_table[] =
{
    IEnumTfDisplayAttributeInfo_Clone_Stub,
    IEnumTfDisplayAttributeInfo_Next_Stub,
    IEnumTfDisplayAttributeInfo_Reset_Stub,
    IEnumTfDisplayAttributeInfo_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfDisplayAttributeInfoStubVtbl =
{
    {
        &IID_IEnumTfDisplayAttributeInfo,
        &IEnumTfDisplayAttributeInfo_ServerInfo,
        7,
        &IEnumTfDisplayAttributeInfo_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfRanges interface
 */
static void __finally_IEnumTfRanges_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfRanges_Clone_Proxy(
    IEnumTfRanges* This,
    IEnumTfRanges **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfRanges_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[712]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1874],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfRanges_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1874], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfRanges_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfRanges * _This;
    HRESULT _RetVal;
    IEnumTfRanges *_W0;
    IEnumTfRanges ** ppEnum;
};

static void __finally_IEnumTfRanges_Clone_Stub( struct __frame_IEnumTfRanges_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1874]);

}

void __RPC_STUB IEnumTfRanges_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfRanges_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfRanges*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfRanges_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[712]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1874]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1874]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfRanges_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfRanges_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfRanges_Next_Proxy(
    IEnumTfRanges* This,
    ULONG ulCount,
    ITfRange **ppRange,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfRanges_Next_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfRanges_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1914], (void *)ppRange );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1918], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfRanges_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfRanges * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    ITfRange ** ppRange;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumTfRanges_Next_Stub( struct __frame_IEnumTfRanges_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1914]);


}

void __RPC_STUB IEnumTfRanges_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfRanges_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfRanges*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfRanges_Next_Stub );
    __frame->ppRange = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppRange = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 8);
        memset(__frame->ppRange, 0, __frame->ulCount * 8);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->ppRange, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfRanges_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfRanges_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfRanges_Reset_Proxy(
    IEnumTfRanges* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfRanges_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[730]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfRanges_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfRanges_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfRanges * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfRanges_Reset_Stub( struct __frame_IEnumTfRanges_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfRanges_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfRanges_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfRanges*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfRanges_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[730]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfRanges_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfRanges_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfRanges_Skip_Proxy(
    IEnumTfRanges* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfRanges_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[732]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfRanges_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfRanges_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfRanges * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfRanges_Skip_Stub( struct __frame_IEnumTfRanges_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfRanges_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfRanges_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfRanges*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfRanges_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[732]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfRanges_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfRanges_FormatStringOffsetTable[] =
{
    712,  /* IEnumTfRanges::Clone */
    718,  /* IEnumTfRanges::Next */
    730,  /* IEnumTfRanges::Reset */
    732,  /* IEnumTfRanges::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfRangesProxyVtbl =
{
    {
        &IID_IEnumTfRanges,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfRanges_Clone_Proxy,
        IEnumTfRanges_Next_Proxy,
        IEnumTfRanges_Reset_Proxy,
        IEnumTfRanges_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfRanges_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfRanges_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfRanges_table[] =
{
    IEnumTfRanges_Clone_Stub,
    IEnumTfRanges_Next_Stub,
    IEnumTfRanges_Reset_Stub,
    IEnumTfRanges_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfRangesStubVtbl =
{
    {
        &IID_IEnumTfRanges,
        &IEnumTfRanges_ServerInfo,
        7,
        &IEnumTfRanges_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfEditRecord interface
 */
static void __finally_ITfEditRecord_GetSelectionStatus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfEditRecord_GetSelectionStatus_Proxy(
    ITfEditRecord* This,
    BOOL *changed)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfEditRecord_GetSelectionStatus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!changed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[736]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *changed = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfEditRecord_GetSelectionStatus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1922], (void *)changed );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfEditRecord_GetSelectionStatus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfEditRecord * _This;
    HRESULT _RetVal;
    BOOL _W0;
    BOOL * changed;
};

static void __finally_ITfEditRecord_GetSelectionStatus_Stub( struct __frame_ITfEditRecord_GetSelectionStatus_Stub *__frame )
{

}

void __RPC_STUB ITfEditRecord_GetSelectionStatus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfEditRecord_GetSelectionStatus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfEditRecord*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfEditRecord_GetSelectionStatus_Stub );
    __frame->changed = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[736]);


        __frame->changed = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSelectionStatus(__frame->_This, __frame->changed);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->changed;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfEditRecord_GetSelectionStatus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfEditRecord_GetTextAndPropertyUpdates_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfEditRecord_GetTextAndPropertyUpdates_Proxy(
    ITfEditRecord* This,
    DWORD flags,
    const GUID **props,
    ULONG count,
    IEnumTfRanges **ret)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfEditRecord_GetTextAndPropertyUpdates_Proxy );
    __frame->This = This;
    if (ret) MIDL_memset( ret, 0, sizeof( *ret ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!props) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)count;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)props,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1944]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = flags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)count;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)props,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1944]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = count;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[742]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ret,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1984],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfEditRecord_GetTextAndPropertyUpdates_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1984], (void *)ret );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfEditRecord_GetTextAndPropertyUpdates_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfEditRecord * _This;
    HRESULT _RetVal;
    DWORD flags;
    const GUID ** props;
    ULONG count;
    IEnumTfRanges *_W0;
    IEnumTfRanges ** ret;
};

static void __finally_ITfEditRecord_GetTextAndPropertyUpdates_Stub( struct __frame_ITfEditRecord_GetTextAndPropertyUpdates_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->count;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->props,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1962]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ret,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1984]);

}

void __RPC_STUB ITfEditRecord_GetTextAndPropertyUpdates_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfEditRecord_GetTextAndPropertyUpdates_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfEditRecord*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfEditRecord_GetTextAndPropertyUpdates_Stub );
    __frame->props = 0;
    __frame->ret = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[742]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->props,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1944],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->count = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ret = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetTextAndPropertyUpdates(__frame->_This, __frame->flags, __frame->props, __frame->count, __frame->ret);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1984]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ret,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1984]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfEditRecord_GetTextAndPropertyUpdates_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfEditRecord_FormatStringOffsetTable[] =
{
    736,  /* ITfEditRecord::GetSelectionStatus */
    742,  /* ITfEditRecord::GetTextAndPropertyUpdates */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfEditRecordProxyVtbl =
{
    {
        &IID_ITfEditRecord,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfEditRecord_GetSelectionStatus_Proxy,
        ITfEditRecord_GetTextAndPropertyUpdates_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfEditRecord_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfEditRecord_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfEditRecord_table[] =
{
    ITfEditRecord_GetSelectionStatus_Stub,
    ITfEditRecord_GetTextAndPropertyUpdates_Stub
};

static const CInterfaceStubVtbl _ITfEditRecordStubVtbl =
{
    {
        &IID_ITfEditRecord,
        &ITfEditRecord_ServerInfo,
        5,
        &ITfEditRecord_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfTextEditSink interface
 */
static void __finally_ITfTextEditSink_OnEndEdit_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfTextEditSink_OnEndEdit_Proxy(
    ITfTextEditSink* This,
    ITfContext *pic,
    TfEditCookie ecReadOnly,
    ITfEditRecord *pEditRecord)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfTextEditSink_OnEndEdit_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1988]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pEditRecord,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2006]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1988]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecReadOnly;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pEditRecord,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2006]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[756]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfTextEditSink_OnEndEdit_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfTextEditSink_OnEndEdit_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfTextEditSink * _This;
    HRESULT _RetVal;
    ITfContext * pic;
    TfEditCookie ecReadOnly;
    ITfEditRecord * pEditRecord;
};

static void __finally_ITfTextEditSink_OnEndEdit_Stub( struct __frame_ITfTextEditSink_OnEndEdit_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1988]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pEditRecord,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2006]);

}

void __RPC_STUB ITfTextEditSink_OnEndEdit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfTextEditSink_OnEndEdit_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfTextEditSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfTextEditSink_OnEndEdit_Stub );
    __frame->pic = 0;
    __frame->pEditRecord = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[756]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1988],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecReadOnly = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pEditRecord,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2006],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnEndEdit(__frame->_This, __frame->pic, __frame->ecReadOnly, __frame->pEditRecord);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfTextEditSink_OnEndEdit_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfTextEditSink_FormatStringOffsetTable[] =
{
    756,  /* ITfTextEditSink::OnEndEdit */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfTextEditSinkProxyVtbl =
{
    {
        &IID_ITfTextEditSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfTextEditSink_OnEndEdit_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfTextEditSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfTextEditSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfTextEditSink_table[] =
{
    ITfTextEditSink_OnEndEdit_Stub
};

static const CInterfaceStubVtbl _ITfTextEditSinkStubVtbl =
{
    {
        &IID_ITfTextEditSink,
        &ITfTextEditSink_ServerInfo,
        4,
        &ITfTextEditSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContextOwnerCompositionSink interface
 */
static void __finally_ITfContextOwnerCompositionSink_OnStartComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerCompositionSink_OnStartComposition_Proxy(
    ITfContextOwnerCompositionSink* This,
    ITfCompositionView *pComposition,
    BOOL *pfOk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerCompositionSink_OnStartComposition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pfOk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2024]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2024]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[768]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfOk = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerCompositionSink_OnStartComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2042], (void *)pfOk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerCompositionSink_OnStartComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerCompositionSink * _This;
    HRESULT _RetVal;
    ITfCompositionView * pComposition;
    BOOL _W0;
    BOOL * pfOk;
};

static void __finally_ITfContextOwnerCompositionSink_OnStartComposition_Stub( struct __frame_ITfContextOwnerCompositionSink_OnStartComposition_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2024]);


}

void __RPC_STUB ITfContextOwnerCompositionSink_OnStartComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerCompositionSink_OnStartComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerCompositionSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerCompositionSink_OnStartComposition_Stub );
    __frame->pComposition = 0;
    __frame->pfOk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[768]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2024],
            0);


        __frame->pfOk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnStartComposition(__frame->_This, __frame->pComposition, __frame->pfOk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfOk;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerCompositionSink_OnStartComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerCompositionSink_OnUpdateComposition_Proxy(
    ITfContextOwnerCompositionSink* This,
    ITfCompositionView *pComposition,
    ITfRange *pRangeNew)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2046]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2064]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2046]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2064]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[778]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerCompositionSink * _This;
    HRESULT _RetVal;
    ITfCompositionView * pComposition;
    ITfRange * pRangeNew;
};

static void __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub( struct __frame_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2046]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRangeNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2064]);

}

void __RPC_STUB ITfContextOwnerCompositionSink_OnUpdateComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerCompositionSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub );
    __frame->pComposition = 0;
    __frame->pRangeNew = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[778]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2046],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRangeNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2064],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnUpdateComposition(__frame->_This, __frame->pComposition, __frame->pRangeNew);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerCompositionSink_OnUpdateComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerCompositionSink_OnEndComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerCompositionSink_OnEndComposition_Proxy(
    ITfContextOwnerCompositionSink* This,
    ITfCompositionView *pComposition)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerCompositionSink_OnEndComposition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2082]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2082]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[788]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerCompositionSink_OnEndComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerCompositionSink_OnEndComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerCompositionSink * _This;
    HRESULT _RetVal;
    ITfCompositionView * pComposition;
};

static void __finally_ITfContextOwnerCompositionSink_OnEndComposition_Stub( struct __frame_ITfContextOwnerCompositionSink_OnEndComposition_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2082]);

}

void __RPC_STUB ITfContextOwnerCompositionSink_OnEndComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerCompositionSink_OnEndComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerCompositionSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerCompositionSink_OnEndComposition_Stub );
    __frame->pComposition = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[788]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2082],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnEndComposition(__frame->_This, __frame->pComposition);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerCompositionSink_OnEndComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContextOwnerCompositionSink_FormatStringOffsetTable[] =
{
    768,  /* ITfContextOwnerCompositionSink::OnStartComposition */
    778,  /* ITfContextOwnerCompositionSink::OnUpdateComposition */
    788,  /* ITfContextOwnerCompositionSink::OnEndComposition */
};

static const CINTERFACE_PROXY_VTABLE(6) _ITfContextOwnerCompositionSinkProxyVtbl =
{
    {
        &IID_ITfContextOwnerCompositionSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContextOwnerCompositionSink_OnStartComposition_Proxy,
        ITfContextOwnerCompositionSink_OnUpdateComposition_Proxy,
        ITfContextOwnerCompositionSink_OnEndComposition_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContextOwnerCompositionSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContextOwnerCompositionSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContextOwnerCompositionSink_table[] =
{
    ITfContextOwnerCompositionSink_OnStartComposition_Stub,
    ITfContextOwnerCompositionSink_OnUpdateComposition_Stub,
    ITfContextOwnerCompositionSink_OnEndComposition_Stub
};

static const CInterfaceStubVtbl _ITfContextOwnerCompositionSinkStubVtbl =
{
    {
        &IID_ITfContextOwnerCompositionSink,
        &ITfContextOwnerCompositionSink_ServerInfo,
        6,
        &ITfContextOwnerCompositionSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfActiveLanguageProfileNotifySink interface
 */
static void __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfActiveLanguageProfileNotifySink_OnActivated_Proxy(
    ITfActiveLanguageProfileNotifySink* This,
    REFCLSID clsid,
    REFGUID guidProfile,
    BOOL fActivated)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = fActivated;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[794]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfActiveLanguageProfileNotifySink_OnActivated_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfActiveLanguageProfileNotifySink * _This;
    HRESULT _RetVal;
    REFCLSID clsid;
    REFGUID guidProfile;
    BOOL fActivated;
};

static void __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Stub( struct __frame_ITfActiveLanguageProfileNotifySink_OnActivated_Stub *__frame )
{



}

void __RPC_STUB ITfActiveLanguageProfileNotifySink_OnActivated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfActiveLanguageProfileNotifySink_OnActivated_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfActiveLanguageProfileNotifySink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Stub );
    __frame->clsid = 0;
    __frame->guidProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[794]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->fActivated = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnActivated(__frame->_This, __frame->clsid, __frame->guidProfile, __frame->fActivated);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfActiveLanguageProfileNotifySink_OnActivated_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfActiveLanguageProfileNotifySink_FormatStringOffsetTable[] =
{
    794,  /* ITfActiveLanguageProfileNotifySink::OnActivated */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfActiveLanguageProfileNotifySinkProxyVtbl =
{
    {
        &IID_ITfActiveLanguageProfileNotifySink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfActiveLanguageProfileNotifySink_OnActivated_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfActiveLanguageProfileNotifySink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfActiveLanguageProfileNotifySink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfActiveLanguageProfileNotifySink_table[] =
{
    ITfActiveLanguageProfileNotifySink_OnActivated_Stub
};

static const CInterfaceStubVtbl _ITfActiveLanguageProfileNotifySinkStubVtbl =
{
    {
        &IID_ITfActiveLanguageProfileNotifySink,
        &ITfActiveLanguageProfileNotifySink_ServerInfo,
        4,
        &ITfActiveLanguageProfileNotifySink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfLanguageProfiles interface
 */
static void __finally_IEnumTfLanguageProfiles_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfLanguageProfiles_Clone_Proxy(
    IEnumTfLanguageProfiles* This,
    IEnumTfLanguageProfiles **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfLanguageProfiles_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[806]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2126],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfLanguageProfiles_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2126], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfLanguageProfiles_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfLanguageProfiles * _This;
    HRESULT _RetVal;
    IEnumTfLanguageProfiles *_W0;
    IEnumTfLanguageProfiles ** ppEnum;
};

static void __finally_IEnumTfLanguageProfiles_Clone_Stub( struct __frame_IEnumTfLanguageProfiles_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2126]);

}

void __RPC_STUB IEnumTfLanguageProfiles_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfLanguageProfiles_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfLanguageProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfLanguageProfiles_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[806]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2126]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2126]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfLanguageProfiles_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfLanguageProfiles_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfLanguageProfiles_Next_Proxy(
    IEnumTfLanguageProfiles* This,
    ULONG ulCount,
    TF_LANGUAGEPROFILE *pProfile,
    ULONG *pcFetch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfLanguageProfiles_Next_Proxy );
    __frame->This = This;
    if (pProfile) MIDL_memset( pProfile, 0, sizeof( *pProfile ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[812]);

            NdrConformantVaryingArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2150],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetch = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfLanguageProfiles_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2168], (void *)pProfile );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2172], (void *)pcFetch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfLanguageProfiles_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfLanguageProfiles * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    TF_LANGUAGEPROFILE * pProfile;
    ULONG _W0;
    ULONG * pcFetch;
};

static void __finally_IEnumTfLanguageProfiles_Next_Stub( struct __frame_IEnumTfLanguageProfiles_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProfile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2168]);


}

void __RPC_STUB IEnumTfLanguageProfiles_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfLanguageProfiles_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfLanguageProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfLanguageProfiles_Next_Stub );
    __frame->pProfile = 0;
    __frame->pcFetch = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[812]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pProfile = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 56);
        memset(__frame->pProfile, 0, __frame->ulCount * 56);
        __frame->pcFetch = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->pProfile, __frame->pcFetch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

        NdrConformantVaryingArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2150]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetch;

        NdrConformantVaryingArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2150]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetch;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfLanguageProfiles_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfLanguageProfiles_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfLanguageProfiles_Reset_Proxy(
    IEnumTfLanguageProfiles* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfLanguageProfiles_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[824]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfLanguageProfiles_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfLanguageProfiles_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfLanguageProfiles * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfLanguageProfiles_Reset_Stub( struct __frame_IEnumTfLanguageProfiles_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfLanguageProfiles_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfLanguageProfiles_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfLanguageProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfLanguageProfiles_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[824]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfLanguageProfiles_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfLanguageProfiles_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfLanguageProfiles_Skip_Proxy(
    IEnumTfLanguageProfiles* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfLanguageProfiles_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[826]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfLanguageProfiles_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfLanguageProfiles_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfLanguageProfiles * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfLanguageProfiles_Skip_Stub( struct __frame_IEnumTfLanguageProfiles_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfLanguageProfiles_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfLanguageProfiles_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfLanguageProfiles*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfLanguageProfiles_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[826]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfLanguageProfiles_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfLanguageProfiles_FormatStringOffsetTable[] =
{
    806,  /* IEnumTfLanguageProfiles::Clone */
    812,  /* IEnumTfLanguageProfiles::Next */
    824,  /* IEnumTfLanguageProfiles::Reset */
    826,  /* IEnumTfLanguageProfiles::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfLanguageProfilesProxyVtbl =
{
    {
        &IID_IEnumTfLanguageProfiles,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfLanguageProfiles_Clone_Proxy,
        IEnumTfLanguageProfiles_Next_Proxy,
        IEnumTfLanguageProfiles_Reset_Proxy,
        IEnumTfLanguageProfiles_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfLanguageProfiles_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfLanguageProfiles_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfLanguageProfiles_table[] =
{
    IEnumTfLanguageProfiles_Clone_Stub,
    IEnumTfLanguageProfiles_Next_Stub,
    IEnumTfLanguageProfiles_Reset_Stub,
    IEnumTfLanguageProfiles_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfLanguageProfilesStubVtbl =
{
    {
        &IID_IEnumTfLanguageProfiles,
        &IEnumTfLanguageProfiles_ServerInfo,
        7,
        &IEnumTfLanguageProfiles_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfThreadMgrEventSink interface
 */
static void __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEventSink_OnInitDocumentMgr_Proxy(
    ITfThreadMgrEventSink* This,
    ITfDocumentMgr *pdim)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdim,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdim,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[830]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEventSink * _This;
    HRESULT _RetVal;
    ITfDocumentMgr * pdim;
};

static void __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub( struct __frame_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdim,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176]);

}

void __RPC_STUB ITfThreadMgrEventSink_OnInitDocumentMgr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub );
    __frame->pdim = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[830]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdim,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnInitDocumentMgr(__frame->_This, __frame->pdim);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEventSink_OnInitDocumentMgr_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEventSink_OnUninitDocumentMgr_Proxy(
    ITfThreadMgrEventSink* This,
    ITfDocumentMgr *pdim)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdim,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2194]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdim,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2194]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[836]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEventSink * _This;
    HRESULT _RetVal;
    ITfDocumentMgr * pdim;
};

static void __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub( struct __frame_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdim,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2194]);

}

void __RPC_STUB ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub );
    __frame->pdim = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[836]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdim,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2194],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnUninitDocumentMgr(__frame->_This, __frame->pdim);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgrEventSink_OnSetFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEventSink_OnSetFocus_Proxy(
    ITfThreadMgrEventSink* This,
    ITfDocumentMgr *pdimFocus,
    ITfDocumentMgr *pdimPrevFocus)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEventSink_OnSetFocus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdimFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdimPrevFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2230]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdimFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdimPrevFocus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2230]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[842]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEventSink_OnSetFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEventSink_OnSetFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEventSink * _This;
    HRESULT _RetVal;
    ITfDocumentMgr * pdimFocus;
    ITfDocumentMgr * pdimPrevFocus;
};

static void __finally_ITfThreadMgrEventSink_OnSetFocus_Stub( struct __frame_ITfThreadMgrEventSink_OnSetFocus_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdimFocus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdimPrevFocus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2230]);

}

void __RPC_STUB ITfThreadMgrEventSink_OnSetFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEventSink_OnSetFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEventSink_OnSetFocus_Stub );
    __frame->pdimFocus = 0;
    __frame->pdimPrevFocus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[842]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdimFocus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdimPrevFocus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2230],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnSetFocus(__frame->_This, __frame->pdimFocus, __frame->pdimPrevFocus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEventSink_OnSetFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgrEventSink_OnPushContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEventSink_OnPushContext_Proxy(
    ITfThreadMgrEventSink* This,
    ITfContext *pic)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEventSink_OnPushContext_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2248]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2248]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[852]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEventSink_OnPushContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEventSink_OnPushContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEventSink * _This;
    HRESULT _RetVal;
    ITfContext * pic;
};

static void __finally_ITfThreadMgrEventSink_OnPushContext_Stub( struct __frame_ITfThreadMgrEventSink_OnPushContext_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2248]);

}

void __RPC_STUB ITfThreadMgrEventSink_OnPushContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEventSink_OnPushContext_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEventSink_OnPushContext_Stub );
    __frame->pic = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[852]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2248],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnPushContext(__frame->_This, __frame->pic);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEventSink_OnPushContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfThreadMgrEventSink_OnPopContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfThreadMgrEventSink_OnPopContext_Proxy(
    ITfThreadMgrEventSink* This,
    ITfContext *pic)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfThreadMgrEventSink_OnPopContext_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pic,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[858]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfThreadMgrEventSink_OnPopContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfThreadMgrEventSink_OnPopContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfThreadMgrEventSink * _This;
    HRESULT _RetVal;
    ITfContext * pic;
};

static void __finally_ITfThreadMgrEventSink_OnPopContext_Stub( struct __frame_ITfThreadMgrEventSink_OnPopContext_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pic,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266]);

}

void __RPC_STUB ITfThreadMgrEventSink_OnPopContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfThreadMgrEventSink_OnPopContext_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfThreadMgrEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfThreadMgrEventSink_OnPopContext_Stub );
    __frame->pic = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[858]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pic,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnPopContext(__frame->_This, __frame->pic);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfThreadMgrEventSink_OnPopContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfThreadMgrEventSink_FormatStringOffsetTable[] =
{
    830,  /* ITfThreadMgrEventSink::OnInitDocumentMgr */
    836,  /* ITfThreadMgrEventSink::OnUninitDocumentMgr */
    842,  /* ITfThreadMgrEventSink::OnSetFocus */
    852,  /* ITfThreadMgrEventSink::OnPushContext */
    858,  /* ITfThreadMgrEventSink::OnPopContext */
};

static const CINTERFACE_PROXY_VTABLE(8) _ITfThreadMgrEventSinkProxyVtbl =
{
    {
        &IID_ITfThreadMgrEventSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfThreadMgrEventSink_OnInitDocumentMgr_Proxy,
        ITfThreadMgrEventSink_OnUninitDocumentMgr_Proxy,
        ITfThreadMgrEventSink_OnSetFocus_Proxy,
        ITfThreadMgrEventSink_OnPushContext_Proxy,
        ITfThreadMgrEventSink_OnPopContext_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfThreadMgrEventSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfThreadMgrEventSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfThreadMgrEventSink_table[] =
{
    ITfThreadMgrEventSink_OnInitDocumentMgr_Stub,
    ITfThreadMgrEventSink_OnUninitDocumentMgr_Stub,
    ITfThreadMgrEventSink_OnSetFocus_Stub,
    ITfThreadMgrEventSink_OnPushContext_Stub,
    ITfThreadMgrEventSink_OnPopContext_Stub
};

static const CInterfaceStubVtbl _ITfThreadMgrEventSinkStubVtbl =
{
    {
        &IID_ITfThreadMgrEventSink,
        &ITfThreadMgrEventSink_ServerInfo,
        8,
        &ITfThreadMgrEventSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfLanguageProfileNotifySink interface
 */
static void __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfLanguageProfileNotifySink_OnLanguageChange_Proxy(
    ITfLanguageProfileNotifySink* This,
    LANGID langid,
    BOOL *pfAccept)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pfAccept) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 6;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[864]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfAccept = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2284], (void *)pfAccept );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfLanguageProfileNotifySink_OnLanguageChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfLanguageProfileNotifySink * _This;
    HRESULT _RetVal;
    LANGID langid;
    BOOL _W0;
    BOOL * pfAccept;
};

static void __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Stub( struct __frame_ITfLanguageProfileNotifySink_OnLanguageChange_Stub *__frame )
{


}

void __RPC_STUB ITfLanguageProfileNotifySink_OnLanguageChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfLanguageProfileNotifySink_OnLanguageChange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfLanguageProfileNotifySink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Stub );
    __frame->pfAccept = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[864]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);


        __frame->pfAccept = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnLanguageChange(__frame->_This, __frame->langid, __frame->pfAccept);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfAccept;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfLanguageProfileNotifySink_OnLanguageChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfLanguageProfileNotifySink_OnLanguageChanged_Proxy(
    ITfLanguageProfileNotifySink* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[872]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfLanguageProfileNotifySink * _This;
    HRESULT _RetVal;
};

static void __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub( struct __frame_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub *__frame )
{
}

void __RPC_STUB ITfLanguageProfileNotifySink_OnLanguageChanged_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfLanguageProfileNotifySink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[872]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnLanguageChanged(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfLanguageProfileNotifySink_OnLanguageChanged_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfLanguageProfileNotifySink_FormatStringOffsetTable[] =
{
    864,  /* ITfLanguageProfileNotifySink::OnLanguageChange */
    872,  /* ITfLanguageProfileNotifySink::OnLanguageChanged */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfLanguageProfileNotifySinkProxyVtbl =
{
    {
        &IID_ITfLanguageProfileNotifySink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfLanguageProfileNotifySink_OnLanguageChange_Proxy,
        ITfLanguageProfileNotifySink_OnLanguageChanged_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfLanguageProfileNotifySink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfLanguageProfileNotifySink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfLanguageProfileNotifySink_table[] =
{
    ITfLanguageProfileNotifySink_OnLanguageChange_Stub,
    ITfLanguageProfileNotifySink_OnLanguageChanged_Stub
};

static const CInterfaceStubVtbl _ITfLanguageProfileNotifySinkStubVtbl =
{
    {
        &IID_ITfLanguageProfileNotifySink,
        &ITfLanguageProfileNotifySink_ServerInfo,
        5,
        &ITfLanguageProfileNotifySink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfEditSession interface
 */
static void __finally_ITfEditSession_DoEditSession_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfEditSession_DoEditSession_Proxy(
    ITfEditSession* This,
    TfEditCookie ec)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfEditSession_DoEditSession_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[874]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfEditSession_DoEditSession_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfEditSession_DoEditSession_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfEditSession * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
};

static void __finally_ITfEditSession_DoEditSession_Stub( struct __frame_ITfEditSession_DoEditSession_Stub *__frame )
{

}

void __RPC_STUB ITfEditSession_DoEditSession_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfEditSession_DoEditSession_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfEditSession*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfEditSession_DoEditSession_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[874]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->DoEditSession(__frame->_This, __frame->ec);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfEditSession_DoEditSession_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfEditSession_FormatStringOffsetTable[] =
{
    874,  /* ITfEditSession::DoEditSession */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfEditSessionProxyVtbl =
{
    {
        &IID_ITfEditSession,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfEditSession_DoEditSession_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfEditSession_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfEditSession_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfEditSession_table[] =
{
    ITfEditSession_DoEditSession_Stub
};

static const CInterfaceStubVtbl _ITfEditSessionStubVtbl =
{
    {
        &IID_ITfEditSession,
        &ITfEditSession_ServerInfo,
        4,
        &ITfEditSession_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfRange interface
 */
static void __finally_ITfRange_GetText_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_GetText_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    DWORD dwFlags,
    WCHAR *pchText,
    ULONG cchMax,
    ULONG *pcch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_GetText_Proxy );
    __frame->This = This;
    if (pchText) MIDL_memset( pchText, 0, sizeof( *pchText ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pchText) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cchMax;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[878]);

            NdrConformantVaryingArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pchText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2288],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcch = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_GetText_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)cchMax;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2302], (void *)pchText );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2306], (void *)pcch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_GetText_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    DWORD dwFlags;
    WCHAR * pchText;
    ULONG cchMax;
    ULONG _W0;
    ULONG * pcch;
};

static void __finally_ITfRange_GetText_Stub( struct __frame_ITfRange_GetText_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cchMax;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcch;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pchText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2302]);



}

void __RPC_STUB ITfRange_GetText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_GetText_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_GetText_Stub );
    __frame->pchText = 0;
    __frame->pcch = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[878]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchMax = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pchText = NdrAllocate(&__frame->_StubMsg, __frame->cchMax * 2);
        memset(__frame->pchText, 0, __frame->cchMax * 2);
        __frame->pcch = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetText(__frame->_This, __frame->ec, __frame->dwFlags, __frame->pchText, __frame->cchMax, __frame->pcch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cchMax;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcch;

        NdrConformantVaryingArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pchText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2288]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cchMax;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcch;

        NdrConformantVaryingArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pchText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2288]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcch;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_GetText_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_SetText_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_SetText_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    DWORD dwFlags,
    const WCHAR *pchText,
    LONG cch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_SetText_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cch;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pchText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2320]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cch;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pchText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2320]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cch;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[894]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_SetText_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_SetText_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    DWORD dwFlags;
    const WCHAR * pchText;
    LONG cch;
};

static void __finally_ITfRange_SetText_Stub( struct __frame_ITfRange_SetText_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cch;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pchText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2320]);


}

void __RPC_STUB ITfRange_SetText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_SetText_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_SetText_Stub );
    __frame->pchText = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[894]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pchText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2320],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cch = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetText(__frame->_This, __frame->ec, __frame->dwFlags, __frame->pchText, __frame->cch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_SetText_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_GetFormattedText_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_GetFormattedText_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    IDataObject **ppDataObject)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_GetFormattedText_Proxy );
    __frame->This = This;
    if (ppDataObject) MIDL_memset( ppDataObject, 0, sizeof( *ppDataObject ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppDataObject) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[906]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDataObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2342],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_GetFormattedText_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2342], (void *)ppDataObject );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_GetFormattedText_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    IDataObject *_W0;
    IDataObject ** ppDataObject;
};

static void __finally_ITfRange_GetFormattedText_Stub( struct __frame_ITfRange_GetFormattedText_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDataObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2342]);

}

void __RPC_STUB ITfRange_GetFormattedText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_GetFormattedText_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_GetFormattedText_Stub );
    __frame->ppDataObject = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[906]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        __frame->ppDataObject = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFormattedText(__frame->_This, __frame->ec, __frame->ppDataObject);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDataObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2342]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDataObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2342]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_GetFormattedText_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_GetEmbedded_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_GetEmbedded_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    REFGUID rguidService,
    REFIID riid,
    IUnknown **ppunk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_GetEmbedded_Proxy );
    __frame->This = This;
    if (ppunk) MIDL_memset( ppunk, 0, sizeof( *ppunk ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!rguidService) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppunk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguidService,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[914]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppunk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2360],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_GetEmbedded_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2360], (void *)ppunk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_GetEmbedded_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    REFGUID rguidService;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppunk;
};

static void __finally_ITfRange_GetEmbedded_Stub( struct __frame_ITfRange_GetEmbedded_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppunk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2360]);

}

void __RPC_STUB ITfRange_GetEmbedded_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_GetEmbedded_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_GetEmbedded_Stub );
    __frame->rguidService = 0;
    __frame->riid = 0;
    __frame->ppunk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[914]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguidService,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
            0);


        __frame->ppunk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetEmbedded(__frame->_This, __frame->ec, __frame->rguidService, __frame->riid, __frame->ppunk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppunk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2360]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppunk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2360]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_GetEmbedded_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_InsertEmbedded_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_InsertEmbedded_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    DWORD dwFlags,
    IDataObject *pDataObject)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_InsertEmbedded_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pDataObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2364]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pDataObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2364]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[930]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_InsertEmbedded_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_InsertEmbedded_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    DWORD dwFlags;
    IDataObject * pDataObject;
};

static void __finally_ITfRange_InsertEmbedded_Stub( struct __frame_ITfRange_InsertEmbedded_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pDataObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2364]);

}

void __RPC_STUB ITfRange_InsertEmbedded_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_InsertEmbedded_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_InsertEmbedded_Stub );
    __frame->pDataObject = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[930]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pDataObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2364],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->InsertEmbedded(__frame->_This, __frame->ec, __frame->dwFlags, __frame->pDataObject);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_InsertEmbedded_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftStart_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftStart_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    LONG cchReq,
    LONG *pcch,
    const TF_HALTCOND *pHalt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftStart_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pcch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pHalt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2420]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cchReq;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pHalt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2420]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[940]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcch = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftStart_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2382], (void *)pcch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftStart_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    LONG cchReq;
    LONG _W0;
    LONG * pcch;
    const TF_HALTCOND * pHalt;
};

static void __finally_ITfRange_ShiftStart_Stub( struct __frame_ITfRange_ShiftStart_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pHalt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2420]);

}

void __RPC_STUB ITfRange_ShiftStart_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftStart_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftStart_Stub );
    __frame->pcch = 0;
    __frame->pHalt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[940]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchReq = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pHalt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2420],
            0);


        __frame->pcch = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftStart(__frame->_This, __frame->ec, __frame->cchReq, __frame->pcch, __frame->pHalt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pcch;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftStart_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftEnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftEnd_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    LONG cchReq,
    LONG *pcch,
    const TF_HALTCOND *pHalt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftEnd_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pcch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pHalt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2444]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cchReq;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pHalt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2444]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[954]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcch = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftEnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2424], (void *)pcch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftEnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    LONG cchReq;
    LONG _W0;
    LONG * pcch;
    const TF_HALTCOND * pHalt;
};

static void __finally_ITfRange_ShiftEnd_Stub( struct __frame_ITfRange_ShiftEnd_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pHalt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2444]);

}

void __RPC_STUB ITfRange_ShiftEnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftEnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftEnd_Stub );
    __frame->pcch = 0;
    __frame->pHalt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[954]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchReq = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pHalt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2444],
            0);


        __frame->pcch = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftEnd(__frame->_This, __frame->ec, __frame->cchReq, __frame->pcch, __frame->pHalt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pcch;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftEnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftStartToRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftStartToRange_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pRange,
    TfAnchor aPos)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftStartToRange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2448]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2448]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[968]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftStartToRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftStartToRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    TfAnchor aPos;
};

static void __finally_ITfRange_ShiftStartToRange_Stub( struct __frame_ITfRange_ShiftStartToRange_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2448]);


}

void __RPC_STUB ITfRange_ShiftStartToRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftStartToRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftStartToRange_Stub );
    __frame->pRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[968]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2448],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftStartToRange(__frame->_This, __frame->ec, __frame->pRange, __frame->aPos);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftStartToRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftEndToRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftEndToRange_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pRange,
    TfAnchor aPos)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftEndToRange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2466]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2466]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[978]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftEndToRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftEndToRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    TfAnchor aPos;
};

static void __finally_ITfRange_ShiftEndToRange_Stub( struct __frame_ITfRange_ShiftEndToRange_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2466]);


}

void __RPC_STUB ITfRange_ShiftEndToRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftEndToRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftEndToRange_Stub );
    __frame->pRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[978]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2466],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftEndToRange(__frame->_This, __frame->ec, __frame->pRange, __frame->aPos);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftEndToRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftStartRegion_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftStartRegion_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    TfShiftDir dir,
    BOOL *pfNoRegion)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftStartRegion_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!pfNoRegion) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&dir,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[988]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfNoRegion = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftStartRegion_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2484], (void *)pfNoRegion );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftStartRegion_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    TfShiftDir dir;
    BOOL _W0;
    BOOL * pfNoRegion;
};

static void __finally_ITfRange_ShiftStartRegion_Stub( struct __frame_ITfRange_ShiftStartRegion_Stub *__frame )
{



}

void __RPC_STUB ITfRange_ShiftStartRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftStartRegion_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftStartRegion_Stub );
    __frame->pfNoRegion = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[988]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->dir,
            0x0d /* FC_ENUM16 */);


        __frame->pfNoRegion = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftStartRegion(__frame->_This, __frame->ec, __frame->dir, __frame->pfNoRegion);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfNoRegion;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftStartRegion_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_ShiftEndRegion_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_ShiftEndRegion_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    TfShiftDir dir,
    BOOL *pfNoRegion)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_ShiftEndRegion_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!pfNoRegion) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&dir,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[998]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfNoRegion = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_ShiftEndRegion_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2488], (void *)pfNoRegion );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_ShiftEndRegion_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    TfShiftDir dir;
    BOOL _W0;
    BOOL * pfNoRegion;
};

static void __finally_ITfRange_ShiftEndRegion_Stub( struct __frame_ITfRange_ShiftEndRegion_Stub *__frame )
{



}

void __RPC_STUB ITfRange_ShiftEndRegion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_ShiftEndRegion_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_ShiftEndRegion_Stub );
    __frame->pfNoRegion = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[998]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->dir,
            0x0d /* FC_ENUM16 */);


        __frame->pfNoRegion = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftEndRegion(__frame->_This, __frame->ec, __frame->dir, __frame->pfNoRegion);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfNoRegion;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_ShiftEndRegion_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_IsEmpty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_IsEmpty_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    BOOL *pfEmpty)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_IsEmpty_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!pfEmpty) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1008]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfEmpty = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_IsEmpty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2492], (void *)pfEmpty );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_IsEmpty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    BOOL _W0;
    BOOL * pfEmpty;
};

static void __finally_ITfRange_IsEmpty_Stub( struct __frame_ITfRange_IsEmpty_Stub *__frame )
{


}

void __RPC_STUB ITfRange_IsEmpty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_IsEmpty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_IsEmpty_Stub );
    __frame->pfEmpty = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1008]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        __frame->pfEmpty = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsEmpty(__frame->_This, __frame->ec, __frame->pfEmpty);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfEmpty;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_IsEmpty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_Collapse_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_Collapse_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    TfAnchor aPos)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_Collapse_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1016]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_Collapse_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_Collapse_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    TfAnchor aPos;
};

static void __finally_ITfRange_Collapse_Stub( struct __frame_ITfRange_Collapse_Stub *__frame )
{


}

void __RPC_STUB ITfRange_Collapse_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_Collapse_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_Collapse_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1016]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Collapse(__frame->_This, __frame->ec, __frame->aPos);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_Collapse_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_IsEqualStart_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_IsEqualStart_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pWith,
    TfAnchor aPos,
    BOOL *pfEqual)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_IsEqualStart_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        if (!pfEqual) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2496]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2496]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1022]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfEqual = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_IsEqualStart_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2514], (void *)pfEqual );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_IsEqualStart_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pWith;
    TfAnchor aPos;
    BOOL _W0;
    BOOL * pfEqual;
};

static void __finally_ITfRange_IsEqualStart_Stub( struct __frame_ITfRange_IsEqualStart_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pWith,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2496]);



}

void __RPC_STUB ITfRange_IsEqualStart_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_IsEqualStart_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_IsEqualStart_Stub );
    __frame->pWith = 0;
    __frame->pfEqual = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1022]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pWith,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2496],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        __frame->pfEqual = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsEqualStart(__frame->_This, __frame->ec, __frame->pWith, __frame->aPos, __frame->pfEqual);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfEqual;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_IsEqualStart_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_IsEqualEnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_IsEqualEnd_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pWith,
    TfAnchor aPos,
    BOOL *pfEqual)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_IsEqualEnd_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        if (!pfEqual) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2518]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2518]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1036]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfEqual = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_IsEqualEnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2536], (void *)pfEqual );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_IsEqualEnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pWith;
    TfAnchor aPos;
    BOOL _W0;
    BOOL * pfEqual;
};

static void __finally_ITfRange_IsEqualEnd_Stub( struct __frame_ITfRange_IsEqualEnd_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pWith,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2518]);



}

void __RPC_STUB ITfRange_IsEqualEnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_IsEqualEnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_IsEqualEnd_Stub );
    __frame->pWith = 0;
    __frame->pfEqual = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1036]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pWith,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2518],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        __frame->pfEqual = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsEqualEnd(__frame->_This, __frame->ec, __frame->pWith, __frame->aPos, __frame->pfEqual);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfEqual;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_IsEqualEnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_CompareStart_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_CompareStart_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pWith,
    TfAnchor aPos,
    LONG *plResult)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_CompareStart_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 18);
        if (!plResult) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2540]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2540]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1050]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *plResult = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_CompareStart_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2558], (void *)plResult );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_CompareStart_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pWith;
    TfAnchor aPos;
    LONG _W0;
    LONG * plResult;
};

static void __finally_ITfRange_CompareStart_Stub( struct __frame_ITfRange_CompareStart_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pWith,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2540]);



}

void __RPC_STUB ITfRange_CompareStart_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_CompareStart_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_CompareStart_Stub );
    __frame->pWith = 0;
    __frame->plResult = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1050]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pWith,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2540],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        __frame->plResult = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CompareStart(__frame->_This, __frame->ec, __frame->pWith, __frame->aPos, __frame->plResult);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->plResult;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_CompareStart_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_CompareEnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_CompareEnd_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ITfRange *pWith,
    TfAnchor aPos,
    LONG *plResult)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_CompareEnd_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 19);
        if (!plResult) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2562]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pWith,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2562]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1064]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *plResult = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_CompareEnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2580], (void *)plResult );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_CompareEnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pWith;
    TfAnchor aPos;
    LONG _W0;
    LONG * plResult;
};

static void __finally_ITfRange_CompareEnd_Stub( struct __frame_ITfRange_CompareEnd_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pWith,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2562]);



}

void __RPC_STUB ITfRange_CompareEnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_CompareEnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_CompareEnd_Stub );
    __frame->pWith = 0;
    __frame->plResult = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1064]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pWith,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2562],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        __frame->plResult = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CompareEnd(__frame->_This, __frame->ec, __frame->pWith, __frame->aPos, __frame->plResult);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->plResult;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_CompareEnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_AdjustForInsert_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_AdjustForInsert_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    ULONG cchInsert,
    BOOL *pfInsertOk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_AdjustForInsert_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 20);
        if (!pfInsertOk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cchInsert;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1078]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfInsertOk = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_AdjustForInsert_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2584], (void *)pfInsertOk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_AdjustForInsert_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ULONG cchInsert;
    BOOL _W0;
    BOOL * pfInsertOk;
};

static void __finally_ITfRange_AdjustForInsert_Stub( struct __frame_ITfRange_AdjustForInsert_Stub *__frame )
{



}

void __RPC_STUB ITfRange_AdjustForInsert_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_AdjustForInsert_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_AdjustForInsert_Stub );
    __frame->pfInsertOk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1078]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cchInsert = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pfInsertOk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdjustForInsert(__frame->_This, __frame->ec, __frame->cchInsert, __frame->pfInsertOk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfInsertOk;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_AdjustForInsert_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_GetGravity_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_GetGravity_Proxy(
    ITfRange* This,
    TfGravity *pgStart,
    TfGravity *pgEnd)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_GetGravity_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 21);
        if (!pgStart) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pgEnd) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1088]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pgStart,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2588],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pgEnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2592],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_GetGravity_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2588], (void *)pgStart );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2592], (void *)pgEnd );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_GetGravity_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfGravity _W0;
    TfGravity * pgStart;
    TfGravity _W1;
    TfGravity * pgEnd;
};

static void __finally_ITfRange_GetGravity_Stub( struct __frame_ITfRange_GetGravity_Stub *__frame )
{


}

void __RPC_STUB ITfRange_GetGravity_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_GetGravity_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_GetGravity_Stub );
    __frame->pgStart = 0;
    __frame->pgEnd = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1088]);


        __frame->pgStart = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pgEnd = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetGravity(__frame->_This, __frame->pgStart, __frame->pgEnd);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 20;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pgStart,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2588]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pgEnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2592]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_GetGravity_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_SetGravity_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_SetGravity_Proxy(
    ITfRange* This,
    TfEditCookie ec,
    TfGravity gStart,
    TfGravity gEnd)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_SetGravity_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 22);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&gStart,
                0x0d /* FC_ENUM16 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&gEnd,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1098]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_SetGravity_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_SetGravity_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    TfGravity gStart;
    TfGravity gEnd;
};

static void __finally_ITfRange_SetGravity_Stub( struct __frame_ITfRange_SetGravity_Stub *__frame )
{



}

void __RPC_STUB ITfRange_SetGravity_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_SetGravity_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_SetGravity_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1098]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->gStart,
            0x0d /* FC_ENUM16 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->gEnd,
            0x0d /* FC_ENUM16 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetGravity(__frame->_This, __frame->ec, __frame->gStart, __frame->gEnd);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_SetGravity_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_Clone_Proxy(
    ITfRange* This,
    ITfRange **ppClone)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_Clone_Proxy );
    __frame->This = This;
    if (ppClone) MIDL_memset( ppClone, 0, sizeof( *ppClone ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 23);
        if (!ppClone) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1106]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppClone,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2614], (void *)ppClone );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    ITfRange *_W0;
    ITfRange ** ppClone;
};

static void __finally_ITfRange_Clone_Stub( struct __frame_ITfRange_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppClone,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614]);

}

void __RPC_STUB ITfRange_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_Clone_Stub );
    __frame->ppClone = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1106]);


        __frame->ppClone = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppClone);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppClone,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppClone,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRange_GetContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRange_GetContext_Proxy(
    ITfRange* This,
    ITfContext **ppContext)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRange_GetContext_Proxy );
    __frame->This = This;
    if (ppContext) MIDL_memset( ppContext, 0, sizeof( *ppContext ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 24);
        if (!ppContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1112]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppContext,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2636],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRange_GetContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2636], (void *)ppContext );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRange_GetContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRange * _This;
    HRESULT _RetVal;
    ITfContext *_W0;
    ITfContext ** ppContext;
};

static void __finally_ITfRange_GetContext_Stub( struct __frame_ITfRange_GetContext_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppContext,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2636]);

}

void __RPC_STUB ITfRange_GetContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRange_GetContext_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRange_GetContext_Stub );
    __frame->ppContext = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1112]);


        __frame->ppContext = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetContext(__frame->_This, __frame->ppContext);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2636]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2636]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRange_GetContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfRange_FormatStringOffsetTable[] =
{
    878,  /* ITfRange::GetText */
    894,  /* ITfRange::SetText */
    906,  /* ITfRange::GetFormattedText */
    914,  /* ITfRange::GetEmbedded */
    930,  /* ITfRange::InsertEmbedded */
    940,  /* ITfRange::ShiftStart */
    954,  /* ITfRange::ShiftEnd */
    968,  /* ITfRange::ShiftStartToRange */
    978,  /* ITfRange::ShiftEndToRange */
    988,  /* ITfRange::ShiftStartRegion */
    998,  /* ITfRange::ShiftEndRegion */
    1008,  /* ITfRange::IsEmpty */
    1016,  /* ITfRange::Collapse */
    1022,  /* ITfRange::IsEqualStart */
    1036,  /* ITfRange::IsEqualEnd */
    1050,  /* ITfRange::CompareStart */
    1064,  /* ITfRange::CompareEnd */
    1078,  /* ITfRange::AdjustForInsert */
    1088,  /* ITfRange::GetGravity */
    1098,  /* ITfRange::SetGravity */
    1106,  /* ITfRange::Clone */
    1112,  /* ITfRange::GetContext */
};

static const CINTERFACE_PROXY_VTABLE(25) _ITfRangeProxyVtbl =
{
    {
        &IID_ITfRange,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfRange_GetText_Proxy,
        ITfRange_SetText_Proxy,
        ITfRange_GetFormattedText_Proxy,
        ITfRange_GetEmbedded_Proxy,
        ITfRange_InsertEmbedded_Proxy,
        ITfRange_ShiftStart_Proxy,
        ITfRange_ShiftEnd_Proxy,
        ITfRange_ShiftStartToRange_Proxy,
        ITfRange_ShiftEndToRange_Proxy,
        ITfRange_ShiftStartRegion_Proxy,
        ITfRange_ShiftEndRegion_Proxy,
        ITfRange_IsEmpty_Proxy,
        ITfRange_Collapse_Proxy,
        ITfRange_IsEqualStart_Proxy,
        ITfRange_IsEqualEnd_Proxy,
        ITfRange_CompareStart_Proxy,
        ITfRange_CompareEnd_Proxy,
        ITfRange_AdjustForInsert_Proxy,
        ITfRange_GetGravity_Proxy,
        ITfRange_SetGravity_Proxy,
        ITfRange_Clone_Proxy,
        ITfRange_GetContext_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfRange_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfRange_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfRange_table[] =
{
    ITfRange_GetText_Stub,
    ITfRange_SetText_Stub,
    ITfRange_GetFormattedText_Stub,
    ITfRange_GetEmbedded_Stub,
    ITfRange_InsertEmbedded_Stub,
    ITfRange_ShiftStart_Stub,
    ITfRange_ShiftEnd_Stub,
    ITfRange_ShiftStartToRange_Stub,
    ITfRange_ShiftEndToRange_Stub,
    ITfRange_ShiftStartRegion_Stub,
    ITfRange_ShiftEndRegion_Stub,
    ITfRange_IsEmpty_Stub,
    ITfRange_Collapse_Stub,
    ITfRange_IsEqualStart_Stub,
    ITfRange_IsEqualEnd_Stub,
    ITfRange_CompareStart_Stub,
    ITfRange_CompareEnd_Stub,
    ITfRange_AdjustForInsert_Stub,
    ITfRange_GetGravity_Stub,
    ITfRange_SetGravity_Stub,
    ITfRange_Clone_Stub,
    ITfRange_GetContext_Stub
};

static const CInterfaceStubVtbl _ITfRangeStubVtbl =
{
    {
        &IID_ITfRange,
        &ITfRange_ServerInfo,
        25,
        &ITfRange_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfRangeACP interface
 */
static void __finally_ITfRangeACP_GetExtent_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRangeACP_GetExtent_Proxy(
    ITfRangeACP* This,
    LONG *pacpAnchor,
    LONG *pcch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRangeACP_GetExtent_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 25);
        if (!pacpAnchor) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcch) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1118]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pacpAnchor = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcch = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRangeACP_GetExtent_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2640], (void *)pacpAnchor );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2644], (void *)pcch );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRangeACP_GetExtent_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRangeACP * _This;
    HRESULT _RetVal;
    LONG _W0;
    LONG * pacpAnchor;
    LONG _W1;
    LONG * pcch;
};

static void __finally_ITfRangeACP_GetExtent_Stub( struct __frame_ITfRangeACP_GetExtent_Stub *__frame )
{


}

void __RPC_STUB ITfRangeACP_GetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRangeACP_GetExtent_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRangeACP*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRangeACP_GetExtent_Stub );
    __frame->pacpAnchor = 0;
    __frame->pcch = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1118]);


        __frame->pacpAnchor = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pcch = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetExtent(__frame->_This, __frame->pacpAnchor, __frame->pcch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pacpAnchor;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pcch;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRangeACP_GetExtent_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfRangeACP_SetExtent_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfRangeACP_SetExtent_Proxy(
    ITfRangeACP* This,
    LONG acpAnchor,
    LONG cch)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfRangeACP_SetExtent_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 26);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = acpAnchor;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cch;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1128]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfRangeACP_SetExtent_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfRangeACP_SetExtent_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfRangeACP * _This;
    HRESULT _RetVal;
    LONG acpAnchor;
    LONG cch;
};

static void __finally_ITfRangeACP_SetExtent_Stub( struct __frame_ITfRangeACP_SetExtent_Stub *__frame )
{


}

void __RPC_STUB ITfRangeACP_SetExtent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfRangeACP_SetExtent_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfRangeACP*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfRangeACP_SetExtent_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1128]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->acpAnchor = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cch = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetExtent(__frame->_This, __frame->acpAnchor, __frame->cch);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfRangeACP_SetExtent_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfRangeACP_FormatStringOffsetTable[] =
{
    878,  /* ITfRange::GetText */
    894,  /* ITfRange::SetText */
    906,  /* ITfRange::GetFormattedText */
    914,  /* ITfRange::GetEmbedded */
    930,  /* ITfRange::InsertEmbedded */
    940,  /* ITfRange::ShiftStart */
    954,  /* ITfRange::ShiftEnd */
    968,  /* ITfRange::ShiftStartToRange */
    978,  /* ITfRange::ShiftEndToRange */
    988,  /* ITfRange::ShiftStartRegion */
    998,  /* ITfRange::ShiftEndRegion */
    1008,  /* ITfRange::IsEmpty */
    1016,  /* ITfRange::Collapse */
    1022,  /* ITfRange::IsEqualStart */
    1036,  /* ITfRange::IsEqualEnd */
    1050,  /* ITfRange::CompareStart */
    1064,  /* ITfRange::CompareEnd */
    1078,  /* ITfRange::AdjustForInsert */
    1088,  /* ITfRange::GetGravity */
    1098,  /* ITfRange::SetGravity */
    1106,  /* ITfRange::Clone */
    1112,  /* ITfRange::GetContext */
    1118,  /* ITfRangeACP::GetExtent */
    1128,  /* ITfRangeACP::SetExtent */
};

static const CINTERFACE_PROXY_VTABLE(27) _ITfRangeACPProxyVtbl =
{
    {
        &IID_ITfRangeACP,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfRange_GetText_Proxy,
        ITfRange_SetText_Proxy,
        ITfRange_GetFormattedText_Proxy,
        ITfRange_GetEmbedded_Proxy,
        ITfRange_InsertEmbedded_Proxy,
        ITfRange_ShiftStart_Proxy,
        ITfRange_ShiftEnd_Proxy,
        ITfRange_ShiftStartToRange_Proxy,
        ITfRange_ShiftEndToRange_Proxy,
        ITfRange_ShiftStartRegion_Proxy,
        ITfRange_ShiftEndRegion_Proxy,
        ITfRange_IsEmpty_Proxy,
        ITfRange_Collapse_Proxy,
        ITfRange_IsEqualStart_Proxy,
        ITfRange_IsEqualEnd_Proxy,
        ITfRange_CompareStart_Proxy,
        ITfRange_CompareEnd_Proxy,
        ITfRange_AdjustForInsert_Proxy,
        ITfRange_GetGravity_Proxy,
        ITfRange_SetGravity_Proxy,
        ITfRange_Clone_Proxy,
        ITfRange_GetContext_Proxy,
        ITfRangeACP_GetExtent_Proxy,
        ITfRangeACP_SetExtent_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfRangeACP_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfRangeACP_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfRangeACP_table[] =
{
    ITfRange_GetText_Stub,
    ITfRange_SetText_Stub,
    ITfRange_GetFormattedText_Stub,
    ITfRange_GetEmbedded_Stub,
    ITfRange_InsertEmbedded_Stub,
    ITfRange_ShiftStart_Stub,
    ITfRange_ShiftEnd_Stub,
    ITfRange_ShiftStartToRange_Stub,
    ITfRange_ShiftEndToRange_Stub,
    ITfRange_ShiftStartRegion_Stub,
    ITfRange_ShiftEndRegion_Stub,
    ITfRange_IsEmpty_Stub,
    ITfRange_Collapse_Stub,
    ITfRange_IsEqualStart_Stub,
    ITfRange_IsEqualEnd_Stub,
    ITfRange_CompareStart_Stub,
    ITfRange_CompareEnd_Stub,
    ITfRange_AdjustForInsert_Stub,
    ITfRange_GetGravity_Stub,
    ITfRange_SetGravity_Stub,
    ITfRange_Clone_Stub,
    ITfRange_GetContext_Stub,
    ITfRangeACP_GetExtent_Stub,
    ITfRangeACP_SetExtent_Stub
};

static const CInterfaceStubVtbl _ITfRangeACPStubVtbl =
{
    {
        &IID_ITfRangeACP,
        &ITfRangeACP_ServerInfo,
        27,
        &ITfRangeACP_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfInsertAtSelection interface
 */
static void __finally_ITfInsertAtSelection_InsertTextAtSelection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInsertAtSelection_InsertTextAtSelection_Proxy(
    ITfInsertAtSelection* This,
    TfEditCookie ec,
    DWORD dwFlags,
    const WCHAR *pchText,
    LONG cch,
    ITfRange **ppRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInsertAtSelection_InsertTextAtSelection_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pchText) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cch;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pchText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2648]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cch;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pchText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2648]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cch;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1134]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2680],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInsertAtSelection_InsertTextAtSelection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2680], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInsertAtSelection_InsertTextAtSelection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInsertAtSelection * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    DWORD dwFlags;
    const WCHAR * pchText;
    LONG cch;
    ITfRange *_W0;
    ITfRange ** ppRange;
};

static void __finally_ITfInsertAtSelection_InsertTextAtSelection_Stub( struct __frame_ITfInsertAtSelection_InsertTextAtSelection_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cch;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pchText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2648]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2680]);

}

void __RPC_STUB ITfInsertAtSelection_InsertTextAtSelection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInsertAtSelection_InsertTextAtSelection_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInsertAtSelection*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInsertAtSelection_InsertTextAtSelection_Stub );
    __frame->pchText = 0;
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1134]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pchText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2648],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cch = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->InsertTextAtSelection(__frame->_This, __frame->ec, __frame->dwFlags, __frame->pchText, __frame->cch, __frame->ppRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2680]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2680]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInsertAtSelection_InsertTextAtSelection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInsertAtSelection_InsertEmbeddedAtSelection_Proxy(
    ITfInsertAtSelection* This,
    TfEditCookie ec,
    DWORD dwFlags,
    IDataObject *pDataObject,
    ITfRange **ppRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pDataObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2684]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pDataObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2684]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1150]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2720],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2720], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInsertAtSelection * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    DWORD dwFlags;
    IDataObject * pDataObject;
    ITfRange *_W0;
    ITfRange ** ppRange;
};

static void __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub( struct __frame_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pDataObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2684]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2720]);

}

void __RPC_STUB ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInsertAtSelection*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub );
    __frame->pDataObject = 0;
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1150]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pDataObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2684],
            0);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->InsertEmbeddedAtSelection(__frame->_This, __frame->ec, __frame->dwFlags, __frame->pDataObject, __frame->ppRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2720]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2720]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfInsertAtSelection_FormatStringOffsetTable[] =
{
    1134,  /* ITfInsertAtSelection::InsertTextAtSelection */
    1150,  /* ITfInsertAtSelection::InsertEmbeddedAtSelection */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfInsertAtSelectionProxyVtbl =
{
    {
        &IID_ITfInsertAtSelection,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfInsertAtSelection_InsertTextAtSelection_Proxy,
        ITfInsertAtSelection_InsertEmbeddedAtSelection_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfInsertAtSelection_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfInsertAtSelection_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfInsertAtSelection_table[] =
{
    ITfInsertAtSelection_InsertTextAtSelection_Stub,
    ITfInsertAtSelection_InsertEmbeddedAtSelection_Stub
};

static const CInterfaceStubVtbl _ITfInsertAtSelectionStubVtbl =
{
    {
        &IID_ITfInsertAtSelection,
        &ITfInsertAtSelection_ServerInfo,
        5,
        &ITfInsertAtSelection_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfPropertyStore interface
 */
static void __finally_ITfPropertyStore_GetType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_GetType_Proxy(
    ITfPropertyStore* This,
    GUID *pguid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_GetType_Proxy );
    __frame->This = This;
    if (pguid) MIDL_memset( pguid, 0, sizeof( *pguid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1164]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_GetType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2724], (void *)pguid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_GetType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * pguid;
};

static void __finally_ITfPropertyStore_GetType_Stub( struct __frame_ITfPropertyStore_GetType_Stub *__frame )
{

}

void __RPC_STUB ITfPropertyStore_GetType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_GetType_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_GetType_Stub );
    __frame->pguid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1164]);


        __frame->pguid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetType(__frame->_This, __frame->pguid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_GetType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_GetDataType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_GetDataType_Proxy(
    ITfPropertyStore* This,
    DWORD *pdwReserved)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_GetDataType_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pdwReserved) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1170]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwReserved = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_GetDataType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2728], (void *)pdwReserved );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_GetDataType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * pdwReserved;
};

static void __finally_ITfPropertyStore_GetDataType_Stub( struct __frame_ITfPropertyStore_GetDataType_Stub *__frame )
{

}

void __RPC_STUB ITfPropertyStore_GetDataType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_GetDataType_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_GetDataType_Stub );
    __frame->pdwReserved = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1170]);


        __frame->pdwReserved = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDataType(__frame->_This, __frame->pdwReserved);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwReserved;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_GetDataType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_GetData_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_GetData_Proxy(
    ITfPropertyStore* This,
    VARIANT *pvarValue)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_GetData_Proxy );
    __frame->This = This;
    if (pvarValue) MIDL_memset( pvarValue, 0, sizeof( *pvarValue ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pvarValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1176]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3742],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_GetData_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3752], (void *)pvarValue );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_GetData_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    VARIANT _W0;
    VARIANT * pvarValue;
};

static void __finally_ITfPropertyStore_GetData_Stub( struct __frame_ITfPropertyStore_GetData_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarValue,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3752]);

}

void __RPC_STUB ITfPropertyStore_GetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_GetData_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_GetData_Stub );
    __frame->pvarValue = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1176]);


        __frame->pvarValue = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetData(__frame->_This, __frame->pvarValue);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3742]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3742]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_GetData_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_OnTextUpdated_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_OnTextUpdated_Proxy(
    ITfPropertyStore* This,
    DWORD dwFlags,
    ITfRange *pRangeNew,
    BOOL *pfAccept)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_OnTextUpdated_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pfAccept) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3756]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3756]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1182]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfAccept = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_OnTextUpdated_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3774], (void *)pfAccept );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_OnTextUpdated_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    DWORD dwFlags;
    ITfRange * pRangeNew;
    BOOL _W0;
    BOOL * pfAccept;
};

static void __finally_ITfPropertyStore_OnTextUpdated_Stub( struct __frame_ITfPropertyStore_OnTextUpdated_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRangeNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3756]);


}

void __RPC_STUB ITfPropertyStore_OnTextUpdated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_OnTextUpdated_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_OnTextUpdated_Stub );
    __frame->pRangeNew = 0;
    __frame->pfAccept = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1182]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRangeNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3756],
            0);


        __frame->pfAccept = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnTextUpdated(__frame->_This, __frame->dwFlags, __frame->pRangeNew, __frame->pfAccept);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfAccept;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_OnTextUpdated_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_Shrink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_Shrink_Proxy(
    ITfPropertyStore* This,
    ITfRange *pRangeNew,
    BOOL *pfFree)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_Shrink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pfFree) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3778]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3778]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1194]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pfFree = *(BOOL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_Shrink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3796], (void *)pfFree );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_Shrink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    ITfRange * pRangeNew;
    BOOL _W0;
    BOOL * pfFree;
};

static void __finally_ITfPropertyStore_Shrink_Stub( struct __frame_ITfPropertyStore_Shrink_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRangeNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3778]);


}

void __RPC_STUB ITfPropertyStore_Shrink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_Shrink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_Shrink_Stub );
    __frame->pRangeNew = 0;
    __frame->pfFree = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1194]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRangeNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3778],
            0);


        __frame->pfFree = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Shrink(__frame->_This, __frame->pRangeNew, __frame->pfFree);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->pfFree;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_Shrink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_Divide_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_Divide_Proxy(
    ITfPropertyStore* This,
    ITfRange *pRangeThis,
    ITfRange *pRangeNew,
    ITfPropertyStore **ppPropStore)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_Divide_Proxy );
    __frame->This = This;
    if (ppPropStore) MIDL_memset( ppPropStore, 0, sizeof( *ppPropStore ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!ppPropStore) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRangeThis,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3800]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3818]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRangeThis,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3800]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRangeNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3818]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1204]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppPropStore,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_Divide_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3854], (void *)ppPropStore );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_Divide_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    ITfRange * pRangeThis;
    ITfRange * pRangeNew;
    ITfPropertyStore *_W0;
    ITfPropertyStore ** ppPropStore;
};

static void __finally_ITfPropertyStore_Divide_Stub( struct __frame_ITfPropertyStore_Divide_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRangeThis,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3800]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRangeNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3818]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppPropStore,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854]);

}

void __RPC_STUB ITfPropertyStore_Divide_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_Divide_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_Divide_Stub );
    __frame->pRangeThis = 0;
    __frame->pRangeNew = 0;
    __frame->ppPropStore = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1204]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRangeThis,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3800],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRangeNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3818],
            0);


        __frame->ppPropStore = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Divide(__frame->_This, __frame->pRangeThis, __frame->pRangeNew, __frame->ppPropStore);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPropStore,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPropStore,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_Divide_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_Clone_Proxy(
    ITfPropertyStore* This,
    ITfPropertyStore **pPropStore)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_Clone_Proxy );
    __frame->This = This;
    if (pPropStore) MIDL_memset( pPropStore, 0, sizeof( *pPropStore ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pPropStore) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1218]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pPropStore,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3876],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3876], (void *)pPropStore );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    ITfPropertyStore *_W0;
    ITfPropertyStore ** pPropStore;
};

static void __finally_ITfPropertyStore_Clone_Stub( struct __frame_ITfPropertyStore_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPropStore,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3876]);

}

void __RPC_STUB ITfPropertyStore_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_Clone_Stub );
    __frame->pPropStore = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1218]);


        __frame->pPropStore = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->pPropStore);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pPropStore,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3876]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pPropStore,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3876]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_GetPropertyRangeCreator_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_GetPropertyRangeCreator_Proxy(
    ITfPropertyStore* This,
    CLSID *pclsid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_GetPropertyRangeCreator_Proxy );
    __frame->This = This;
    if (pclsid) MIDL_memset( pclsid, 0, sizeof( *pclsid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!pclsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1224]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pclsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_GetPropertyRangeCreator_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3880], (void *)pclsid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_GetPropertyRangeCreator_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    CLSID _W0;
    CLSID * pclsid;
};

static void __finally_ITfPropertyStore_GetPropertyRangeCreator_Stub( struct __frame_ITfPropertyStore_GetPropertyRangeCreator_Stub *__frame )
{

}

void __RPC_STUB ITfPropertyStore_GetPropertyRangeCreator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_GetPropertyRangeCreator_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_GetPropertyRangeCreator_Stub );
    __frame->pclsid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1224]);


        __frame->pclsid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetPropertyRangeCreator(__frame->_This, __frame->pclsid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pclsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_GetPropertyRangeCreator_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfPropertyStore_Serialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPropertyStore_Serialize_Proxy(
    ITfPropertyStore* This,
    IStream *pStream,
    ULONG *pcb)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPropertyStore_Serialize_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pcb) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3884]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3884]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1230]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcb = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPropertyStore_Serialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3902], (void *)pcb );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPropertyStore_Serialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPropertyStore * _This;
    HRESULT _RetVal;
    IStream * pStream;
    ULONG _W0;
    ULONG * pcb;
};

static void __finally_ITfPropertyStore_Serialize_Stub( struct __frame_ITfPropertyStore_Serialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pStream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3884]);


}

void __RPC_STUB ITfPropertyStore_Serialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPropertyStore_Serialize_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPropertyStore*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPropertyStore_Serialize_Stub );
    __frame->pStream = 0;
    __frame->pcb = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1230]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pStream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3884],
            0);


        __frame->pcb = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Serialize(__frame->_This, __frame->pStream, __frame->pcb);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcb;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPropertyStore_Serialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfPropertyStore_FormatStringOffsetTable[] =
{
    1164,  /* ITfPropertyStore::GetType */
    1170,  /* ITfPropertyStore::GetDataType */
    1176,  /* ITfPropertyStore::GetData */
    1182,  /* ITfPropertyStore::OnTextUpdated */
    1194,  /* ITfPropertyStore::Shrink */
    1204,  /* ITfPropertyStore::Divide */
    1218,  /* ITfPropertyStore::Clone */
    1224,  /* ITfPropertyStore::GetPropertyRangeCreator */
    1230,  /* ITfPropertyStore::Serialize */
};

static const CINTERFACE_PROXY_VTABLE(12) _ITfPropertyStoreProxyVtbl =
{
    {
        &IID_ITfPropertyStore,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfPropertyStore_GetType_Proxy,
        ITfPropertyStore_GetDataType_Proxy,
        ITfPropertyStore_GetData_Proxy,
        ITfPropertyStore_OnTextUpdated_Proxy,
        ITfPropertyStore_Shrink_Proxy,
        ITfPropertyStore_Divide_Proxy,
        ITfPropertyStore_Clone_Proxy,
        ITfPropertyStore_GetPropertyRangeCreator_Proxy,
        ITfPropertyStore_Serialize_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfPropertyStore_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfPropertyStore_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfPropertyStore_table[] =
{
    ITfPropertyStore_GetType_Stub,
    ITfPropertyStore_GetDataType_Stub,
    ITfPropertyStore_GetData_Stub,
    ITfPropertyStore_OnTextUpdated_Stub,
    ITfPropertyStore_Shrink_Stub,
    ITfPropertyStore_Divide_Stub,
    ITfPropertyStore_Clone_Stub,
    ITfPropertyStore_GetPropertyRangeCreator_Stub,
    ITfPropertyStore_Serialize_Stub
};

static const CInterfaceStubVtbl _ITfPropertyStoreStubVtbl =
{
    {
        &IID_ITfPropertyStore,
        &ITfPropertyStore_ServerInfo,
        12,
        &ITfPropertyStore_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumITfCompositionView interface
 */
static void __finally_IEnumITfCompositionView_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumITfCompositionView_Clone_Proxy(
    IEnumITfCompositionView* This,
    IEnumITfCompositionView **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumITfCompositionView_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1240]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3924],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumITfCompositionView_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3924], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumITfCompositionView_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumITfCompositionView * _This;
    HRESULT _RetVal;
    IEnumITfCompositionView *_W0;
    IEnumITfCompositionView ** ppEnum;
};

static void __finally_IEnumITfCompositionView_Clone_Stub( struct __frame_IEnumITfCompositionView_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3924]);

}

void __RPC_STUB IEnumITfCompositionView_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumITfCompositionView_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumITfCompositionView_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1240]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3924]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3924]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumITfCompositionView_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumITfCompositionView_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumITfCompositionView_Next_Proxy(
    IEnumITfCompositionView* This,
    ULONG ulCount,
    ITfCompositionView **rgCompositionView,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumITfCompositionView_Next_Proxy );
    __frame->This = This;
    if (rgCompositionView) MIDL_memset( rgCompositionView, 0, sizeof( *rgCompositionView ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rgCompositionView) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1246]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgCompositionView,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3946],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumITfCompositionView_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3964], (void *)rgCompositionView );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3968], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumITfCompositionView_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumITfCompositionView * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    ITfCompositionView ** rgCompositionView;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumITfCompositionView_Next_Stub( struct __frame_IEnumITfCompositionView_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgCompositionView,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3964]);


}

void __RPC_STUB IEnumITfCompositionView_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumITfCompositionView_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumITfCompositionView_Next_Stub );
    __frame->rgCompositionView = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1246]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgCompositionView = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 8);
        memset(__frame->rgCompositionView, 0, __frame->ulCount * 8);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->rgCompositionView, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgCompositionView,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3946]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgCompositionView,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3946]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumITfCompositionView_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumITfCompositionView_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumITfCompositionView_Reset_Proxy(
    IEnumITfCompositionView* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumITfCompositionView_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1258]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumITfCompositionView_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumITfCompositionView_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumITfCompositionView * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumITfCompositionView_Reset_Stub( struct __frame_IEnumITfCompositionView_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumITfCompositionView_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumITfCompositionView_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumITfCompositionView_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1258]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumITfCompositionView_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumITfCompositionView_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumITfCompositionView_Skip_Proxy(
    IEnumITfCompositionView* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumITfCompositionView_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1260]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumITfCompositionView_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumITfCompositionView_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumITfCompositionView * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumITfCompositionView_Skip_Stub( struct __frame_IEnumITfCompositionView_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumITfCompositionView_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumITfCompositionView_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumITfCompositionView*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumITfCompositionView_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1260]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumITfCompositionView_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumITfCompositionView_FormatStringOffsetTable[] =
{
    1240,  /* IEnumITfCompositionView::Clone */
    1246,  /* IEnumITfCompositionView::Next */
    1258,  /* IEnumITfCompositionView::Reset */
    1260,  /* IEnumITfCompositionView::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumITfCompositionViewProxyVtbl =
{
    {
        &IID_IEnumITfCompositionView,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumITfCompositionView_Clone_Proxy,
        IEnumITfCompositionView_Next_Proxy,
        IEnumITfCompositionView_Reset_Proxy,
        IEnumITfCompositionView_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumITfCompositionView_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumITfCompositionView_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumITfCompositionView_table[] =
{
    IEnumITfCompositionView_Clone_Stub,
    IEnumITfCompositionView_Next_Stub,
    IEnumITfCompositionView_Reset_Stub,
    IEnumITfCompositionView_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumITfCompositionViewStubVtbl =
{
    {
        &IID_IEnumITfCompositionView,
        &IEnumITfCompositionView_ServerInfo,
        7,
        &IEnumITfCompositionView_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfComposition interface
 */
static void __finally_ITfComposition_GetRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfComposition_GetRange_Proxy(
    ITfComposition* This,
    ITfRange **ppRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfComposition_GetRange_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1264]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3990],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfComposition_GetRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3990], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfComposition_GetRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfComposition * _This;
    HRESULT _RetVal;
    ITfRange *_W0;
    ITfRange ** ppRange;
};

static void __finally_ITfComposition_GetRange_Stub( struct __frame_ITfComposition_GetRange_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3990]);

}

void __RPC_STUB ITfComposition_GetRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfComposition_GetRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfComposition_GetRange_Stub );
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1264]);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRange(__frame->_This, __frame->ppRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3990]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3990]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfComposition_GetRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfComposition_ShiftStart_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfComposition_ShiftStart_Proxy(
    ITfComposition* This,
    TfEditCookie ecWrite,
    ITfRange *pNewStart)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfComposition_ShiftStart_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pNewStart,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3994]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pNewStart,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3994]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1270]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfComposition_ShiftStart_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfComposition_ShiftStart_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
    ITfRange * pNewStart;
};

static void __finally_ITfComposition_ShiftStart_Stub( struct __frame_ITfComposition_ShiftStart_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pNewStart,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3994]);

}

void __RPC_STUB ITfComposition_ShiftStart_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfComposition_ShiftStart_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfComposition_ShiftStart_Stub );
    __frame->pNewStart = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1270]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pNewStart,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3994],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftStart(__frame->_This, __frame->ecWrite, __frame->pNewStart);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfComposition_ShiftStart_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfComposition_ShiftEnd_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfComposition_ShiftEnd_Proxy(
    ITfComposition* This,
    TfEditCookie ecWrite,
    ITfRange *pNewEnd)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfComposition_ShiftEnd_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pNewEnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4012]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pNewEnd,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4012]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1278]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfComposition_ShiftEnd_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfComposition_ShiftEnd_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
    ITfRange * pNewEnd;
};

static void __finally_ITfComposition_ShiftEnd_Stub( struct __frame_ITfComposition_ShiftEnd_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pNewEnd,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4012]);

}

void __RPC_STUB ITfComposition_ShiftEnd_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfComposition_ShiftEnd_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfComposition_ShiftEnd_Stub );
    __frame->pNewEnd = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1278]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pNewEnd,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4012],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShiftEnd(__frame->_This, __frame->ecWrite, __frame->pNewEnd);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfComposition_ShiftEnd_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfComposition_EndComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfComposition_EndComposition_Proxy(
    ITfComposition* This,
    TfEditCookie ecWrite)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfComposition_EndComposition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1286]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfComposition_EndComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfComposition_EndComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
};

static void __finally_ITfComposition_EndComposition_Stub( struct __frame_ITfComposition_EndComposition_Stub *__frame )
{

}

void __RPC_STUB ITfComposition_EndComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfComposition_EndComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfComposition_EndComposition_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1286]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EndComposition(__frame->_This, __frame->ecWrite);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfComposition_EndComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfComposition_FormatStringOffsetTable[] =
{
    1264,  /* ITfComposition::GetRange */
    1270,  /* ITfComposition::ShiftStart */
    1278,  /* ITfComposition::ShiftEnd */
    1286,  /* ITfComposition::EndComposition */
};

static const CINTERFACE_PROXY_VTABLE(7) _ITfCompositionProxyVtbl =
{
    {
        &IID_ITfComposition,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfComposition_GetRange_Proxy,
        ITfComposition_ShiftStart_Proxy,
        ITfComposition_ShiftEnd_Proxy,
        ITfComposition_EndComposition_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfComposition_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfComposition_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfComposition_table[] =
{
    ITfComposition_GetRange_Stub,
    ITfComposition_ShiftStart_Stub,
    ITfComposition_ShiftEnd_Stub,
    ITfComposition_EndComposition_Stub
};

static const CInterfaceStubVtbl _ITfCompositionStubVtbl =
{
    {
        &IID_ITfComposition,
        &ITfComposition_ServerInfo,
        7,
        &ITfComposition_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfCompositionSink interface
 */
static void __finally_ITfCompositionSink_OnCompositionTerminated_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompositionSink_OnCompositionTerminated_Proxy(
    ITfCompositionSink* This,
    TfEditCookie ecWrite,
    ITfComposition *pComposition)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompositionSink_OnCompositionTerminated_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4030]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4030]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1290]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompositionSink_OnCompositionTerminated_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompositionSink_OnCompositionTerminated_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompositionSink * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
    ITfComposition * pComposition;
};

static void __finally_ITfCompositionSink_OnCompositionTerminated_Stub( struct __frame_ITfCompositionSink_OnCompositionTerminated_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4030]);

}

void __RPC_STUB ITfCompositionSink_OnCompositionTerminated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompositionSink_OnCompositionTerminated_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompositionSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompositionSink_OnCompositionTerminated_Stub );
    __frame->pComposition = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1290]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4030],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnCompositionTerminated(__frame->_This, __frame->ecWrite, __frame->pComposition);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompositionSink_OnCompositionTerminated_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfCompositionSink_FormatStringOffsetTable[] =
{
    1290,  /* ITfCompositionSink::OnCompositionTerminated */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfCompositionSinkProxyVtbl =
{
    {
        &IID_ITfCompositionSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfCompositionSink_OnCompositionTerminated_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfCompositionSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfCompositionSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfCompositionSink_table[] =
{
    ITfCompositionSink_OnCompositionTerminated_Stub
};

static const CInterfaceStubVtbl _ITfCompositionSinkStubVtbl =
{
    {
        &IID_ITfCompositionSink,
        &ITfCompositionSink_ServerInfo,
        4,
        &ITfCompositionSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContextComposition interface
 */
static void __finally_ITfContextComposition_StartComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextComposition_StartComposition_Proxy(
    ITfContextComposition* This,
    TfEditCookie ecWrite,
    ITfRange *pCompositionRange,
    ITfCompositionSink *pSink,
    ITfComposition **ppComposition)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextComposition_StartComposition_Proxy );
    __frame->This = This;
    if (ppComposition) MIDL_memset( ppComposition, 0, sizeof( *ppComposition ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppComposition) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pCompositionRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4048]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4066]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCompositionRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4048]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4066]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1298]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextComposition_StartComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4102], (void *)ppComposition );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextComposition_StartComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
    ITfRange * pCompositionRange;
    ITfCompositionSink * pSink;
    ITfComposition *_W0;
    ITfComposition ** ppComposition;
};

static void __finally_ITfContextComposition_StartComposition_Stub( struct __frame_ITfContextComposition_StartComposition_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pCompositionRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4048]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4066]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);

}

void __RPC_STUB ITfContextComposition_StartComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextComposition_StartComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextComposition_StartComposition_Stub );
    __frame->pCompositionRange = 0;
    __frame->pSink = 0;
    __frame->ppComposition = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1298]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCompositionRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4048],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4066],
            0);


        __frame->ppComposition = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->StartComposition(__frame->_This, __frame->ecWrite, __frame->pCompositionRange, __frame->pSink, __frame->ppComposition);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextComposition_StartComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextComposition_EnumCompositions_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextComposition_EnumCompositions_Proxy(
    ITfContextComposition* This,
    IEnumITfCompositionView **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextComposition_EnumCompositions_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1314]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextComposition_EnumCompositions_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4124], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextComposition_EnumCompositions_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextComposition * _This;
    HRESULT _RetVal;
    IEnumITfCompositionView *_W0;
    IEnumITfCompositionView ** ppEnum;
};

static void __finally_ITfContextComposition_EnumCompositions_Stub( struct __frame_ITfContextComposition_EnumCompositions_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124]);

}

void __RPC_STUB ITfContextComposition_EnumCompositions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextComposition_EnumCompositions_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextComposition_EnumCompositions_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1314]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumCompositions(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextComposition_EnumCompositions_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextComposition_FindComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextComposition_FindComposition_Proxy(
    ITfContextComposition* This,
    TfEditCookie ecRead,
    ITfRange *pTestRange,
    IEnumITfCompositionView **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextComposition_FindComposition_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pTestRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4128]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecRead;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pTestRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4128]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1320]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4164],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextComposition_FindComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4164], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextComposition_FindComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecRead;
    ITfRange * pTestRange;
    IEnumITfCompositionView *_W0;
    IEnumITfCompositionView ** ppEnum;
};

static void __finally_ITfContextComposition_FindComposition_Stub( struct __frame_ITfContextComposition_FindComposition_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pTestRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4128]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4164]);

}

void __RPC_STUB ITfContextComposition_FindComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextComposition_FindComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextComposition_FindComposition_Stub );
    __frame->pTestRange = 0;
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1320]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecRead = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pTestRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4128],
            0);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->FindComposition(__frame->_This, __frame->ecRead, __frame->pTestRange, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4164]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4164]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextComposition_FindComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextComposition_TakeOwnership_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextComposition_TakeOwnership_Proxy(
    ITfContextComposition* This,
    TfEditCookie ecWrite,
    ITfCompositionView *pComposition,
    ITfCompositionSink *pSink,
    ITfComposition **ppComposition)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextComposition_TakeOwnership_Proxy );
    __frame->This = This;
    if (ppComposition) MIDL_memset( ppComposition, 0, sizeof( *ppComposition ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppComposition) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4168]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4186]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ecWrite;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4168]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4186]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1332]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4222],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextComposition_TakeOwnership_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4222], (void *)ppComposition );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextComposition_TakeOwnership_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextComposition * _This;
    HRESULT _RetVal;
    TfEditCookie ecWrite;
    ITfCompositionView * pComposition;
    ITfCompositionSink * pSink;
    ITfComposition *_W0;
    ITfComposition ** ppComposition;
};

static void __finally_ITfContextComposition_TakeOwnership_Stub( struct __frame_ITfContextComposition_TakeOwnership_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4168]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4186]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4222]);

}

void __RPC_STUB ITfContextComposition_TakeOwnership_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextComposition_TakeOwnership_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextComposition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextComposition_TakeOwnership_Stub );
    __frame->pComposition = 0;
    __frame->pSink = 0;
    __frame->ppComposition = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1332]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ecWrite = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4168],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4186],
            0);


        __frame->ppComposition = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->TakeOwnership(__frame->_This, __frame->ecWrite, __frame->pComposition, __frame->pSink, __frame->ppComposition);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4222]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4222]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextComposition_TakeOwnership_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContextComposition_FormatStringOffsetTable[] =
{
    1298,  /* ITfContextComposition::StartComposition */
    1314,  /* ITfContextComposition::EnumCompositions */
    1320,  /* ITfContextComposition::FindComposition */
    1332,  /* ITfContextComposition::TakeOwnership */
};

static const CINTERFACE_PROXY_VTABLE(7) _ITfContextCompositionProxyVtbl =
{
    {
        &IID_ITfContextComposition,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContextComposition_StartComposition_Proxy,
        ITfContextComposition_EnumCompositions_Proxy,
        ITfContextComposition_FindComposition_Proxy,
        ITfContextComposition_TakeOwnership_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContextComposition_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContextComposition_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContextComposition_table[] =
{
    ITfContextComposition_StartComposition_Stub,
    ITfContextComposition_EnumCompositions_Stub,
    ITfContextComposition_FindComposition_Stub,
    ITfContextComposition_TakeOwnership_Stub
};

static const CInterfaceStubVtbl _ITfContextCompositionStubVtbl =
{
    {
        &IID_ITfContextComposition,
        &ITfContextComposition_ServerInfo,
        7,
        &ITfContextComposition_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContextOwnerCompositionServices interface
 */
static void __finally_ITfContextOwnerCompositionServices_TerminateComposition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerCompositionServices_TerminateComposition_Proxy(
    ITfContextOwnerCompositionServices* This,
    ITfCompositionView *pComposition)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerCompositionServices_TerminateComposition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4226]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pComposition,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4226]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1348]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerCompositionServices_TerminateComposition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerCompositionServices_TerminateComposition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerCompositionServices * _This;
    HRESULT _RetVal;
    ITfCompositionView * pComposition;
};

static void __finally_ITfContextOwnerCompositionServices_TerminateComposition_Stub( struct __frame_ITfContextOwnerCompositionServices_TerminateComposition_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pComposition,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4226]);

}

void __RPC_STUB ITfContextOwnerCompositionServices_TerminateComposition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerCompositionServices_TerminateComposition_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerCompositionServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerCompositionServices_TerminateComposition_Stub );
    __frame->pComposition = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1348]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pComposition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4226],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->TerminateComposition(__frame->_This, __frame->pComposition);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerCompositionServices_TerminateComposition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContextOwnerCompositionServices_FormatStringOffsetTable[] =
{
    1298,  /* ITfContextComposition::StartComposition */
    1314,  /* ITfContextComposition::EnumCompositions */
    1320,  /* ITfContextComposition::FindComposition */
    1332,  /* ITfContextComposition::TakeOwnership */
    1348,  /* ITfContextOwnerCompositionServices::TerminateComposition */
};

static const CINTERFACE_PROXY_VTABLE(8) _ITfContextOwnerCompositionServicesProxyVtbl =
{
    {
        &IID_ITfContextOwnerCompositionServices,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContextComposition_StartComposition_Proxy,
        ITfContextComposition_EnumCompositions_Proxy,
        ITfContextComposition_FindComposition_Proxy,
        ITfContextComposition_TakeOwnership_Proxy,
        ITfContextOwnerCompositionServices_TerminateComposition_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContextOwnerCompositionServices_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContextOwnerCompositionServices_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContextOwnerCompositionServices_table[] =
{
    ITfContextComposition_StartComposition_Stub,
    ITfContextComposition_EnumCompositions_Stub,
    ITfContextComposition_FindComposition_Stub,
    ITfContextComposition_TakeOwnership_Stub,
    ITfContextOwnerCompositionServices_TerminateComposition_Stub
};

static const CInterfaceStubVtbl _ITfContextOwnerCompositionServicesStubVtbl =
{
    {
        &IID_ITfContextOwnerCompositionServices,
        &ITfContextOwnerCompositionServices_ServerInfo,
        8,
        &ITfContextOwnerCompositionServices_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfPersistentPropertyLoaderACP interface
 */
static void __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfPersistentPropertyLoaderACP_LoadProperty_Proxy(
    ITfPersistentPropertyLoaderACP* This,
    const TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
    IStream **ppStream)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Proxy );
    __frame->This = This;
    if (ppStream) MIDL_memset( ppStream, 0, sizeof( *ppStream ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pHdr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppStream) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 52;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pHdr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4244]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1354]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4284],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4284], (void *)ppStream );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfPersistentPropertyLoaderACP_LoadProperty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfPersistentPropertyLoaderACP * _This;
    HRESULT _RetVal;
    const TF_PERSISTENT_PROPERTY_HEADER_ACP * pHdr;
    IStream *_W0;
    IStream ** ppStream;
};

static void __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Stub( struct __frame_ITfPersistentPropertyLoaderACP_LoadProperty_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppStream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4284]);

}

void __RPC_STUB ITfPersistentPropertyLoaderACP_LoadProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfPersistentPropertyLoaderACP_LoadProperty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfPersistentPropertyLoaderACP*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Stub );
    __frame->pHdr = 0;
    __frame->ppStream = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1354]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pHdr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4244],
            0);


        __frame->ppStream = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->LoadProperty(__frame->_This, __frame->pHdr, __frame->ppStream);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppStream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4284]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppStream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4284]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfPersistentPropertyLoaderACP_LoadProperty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfPersistentPropertyLoaderACP_FormatStringOffsetTable[] =
{
    1354,  /* ITfPersistentPropertyLoaderACP::LoadProperty */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfPersistentPropertyLoaderACPProxyVtbl =
{
    {
        &IID_ITfPersistentPropertyLoaderACP,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfPersistentPropertyLoaderACP_LoadProperty_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfPersistentPropertyLoaderACP_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfPersistentPropertyLoaderACP_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfPersistentPropertyLoaderACP_table[] =
{
    ITfPersistentPropertyLoaderACP_LoadProperty_Stub
};

static const CInterfaceStubVtbl _ITfPersistentPropertyLoaderACPStubVtbl =
{
    {
        &IID_ITfPersistentPropertyLoaderACP,
        &ITfPersistentPropertyLoaderACP_ServerInfo,
        4,
        &ITfPersistentPropertyLoaderACP_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfContextOwnerServices interface
 */
static void __finally_ITfContextOwnerServices_OnLayoutChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_OnLayoutChange_Proxy(
    ITfContextOwnerServices* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_OnLayoutChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1364]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_OnLayoutChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_OnLayoutChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
};

static void __finally_ITfContextOwnerServices_OnLayoutChange_Stub( struct __frame_ITfContextOwnerServices_OnLayoutChange_Stub *__frame )
{
}

void __RPC_STUB ITfContextOwnerServices_OnLayoutChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_OnLayoutChange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_OnLayoutChange_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1364]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnLayoutChange(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_OnLayoutChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_OnStatusChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_OnStatusChange_Proxy(
    ITfContextOwnerServices* This,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_OnStatusChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1366]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_OnStatusChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_OnStatusChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    DWORD dwFlags;
};

static void __finally_ITfContextOwnerServices_OnStatusChange_Stub( struct __frame_ITfContextOwnerServices_OnStatusChange_Stub *__frame )
{

}

void __RPC_STUB ITfContextOwnerServices_OnStatusChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_OnStatusChange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_OnStatusChange_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1366]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnStatusChange(__frame->_This, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_OnStatusChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_OnAttributeChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_OnAttributeChange_Proxy(
    ITfContextOwnerServices* This,
    REFGUID rguidAttribute)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_OnAttributeChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!rguidAttribute) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguidAttribute,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1370]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_OnAttributeChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_OnAttributeChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    REFGUID rguidAttribute;
};

static void __finally_ITfContextOwnerServices_OnAttributeChange_Stub( struct __frame_ITfContextOwnerServices_OnAttributeChange_Stub *__frame )
{

}

void __RPC_STUB ITfContextOwnerServices_OnAttributeChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_OnAttributeChange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_OnAttributeChange_Stub );
    __frame->rguidAttribute = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1370]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguidAttribute,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnAttributeChange(__frame->_This, __frame->rguidAttribute);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_OnAttributeChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_Serialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_Serialize_Proxy(
    ITfContextOwnerServices* This,
    ITfProperty *pProp,
    ITfRange *pRange,
    TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
    IStream *pStream)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_Serialize_Proxy );
    __frame->This = This;
    if (pHdr) MIDL_memset( pHdr, 0, sizeof( *pHdr ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pHdr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4292]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4310]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4332]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4292]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4310]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4332]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1376]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pHdr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_Serialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4328], (void *)pHdr );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_Serialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    ITfProperty * pProp;
    ITfRange * pRange;
    TF_PERSISTENT_PROPERTY_HEADER_ACP _W0;
    TF_PERSISTENT_PROPERTY_HEADER_ACP * pHdr;
    IStream * pStream;
};

static void __finally_ITfContextOwnerServices_Serialize_Stub( struct __frame_ITfContextOwnerServices_Serialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4292]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4310]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pStream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4332]);

}

void __RPC_STUB ITfContextOwnerServices_Serialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_Serialize_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_Serialize_Stub );
    __frame->pProp = 0;
    __frame->pRange = 0;
    __frame->pHdr = 0;
    __frame->pStream = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1376]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4292],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4310],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pStream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4332],
            0);


        __frame->pHdr = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Serialize(__frame->_This, __frame->pProp, __frame->pRange, __frame->pHdr, __frame->pStream);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 60;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pHdr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_Serialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_Unserialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_Unserialize_Proxy(
    ITfContextOwnerServices* This,
    ITfProperty *pProp,
    const TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
    IStream *pStream,
    ITfPersistentPropertyLoaderACP *pLoader)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_Unserialize_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pHdr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 52;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4350]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4390]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pLoader,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4408]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4350]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pHdr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4368]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pStream,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4390]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pLoader,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4408]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1394]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_Unserialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_Unserialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    ITfProperty * pProp;
    const TF_PERSISTENT_PROPERTY_HEADER_ACP * pHdr;
    IStream * pStream;
    ITfPersistentPropertyLoaderACP * pLoader;
};

static void __finally_ITfContextOwnerServices_Unserialize_Stub( struct __frame_ITfContextOwnerServices_Unserialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4350]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pStream,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4390]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pLoader,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4408]);

}

void __RPC_STUB ITfContextOwnerServices_Unserialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_Unserialize_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_Unserialize_Stub );
    __frame->pProp = 0;
    __frame->pHdr = 0;
    __frame->pStream = 0;
    __frame->pLoader = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1394]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4350],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pHdr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4368],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pStream,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4390],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pLoader,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4408],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Unserialize(__frame->_This, __frame->pProp, __frame->pHdr, __frame->pStream, __frame->pLoader);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_Unserialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_ForceLoadProperty_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_ForceLoadProperty_Proxy(
    ITfContextOwnerServices* This,
    ITfProperty *pProp)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_ForceLoadProperty_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pProp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1412]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_ForceLoadProperty_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_ForceLoadProperty_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    ITfProperty * pProp;
};

static void __finally_ITfContextOwnerServices_ForceLoadProperty_Stub( struct __frame_ITfContextOwnerServices_ForceLoadProperty_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pProp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426]);

}

void __RPC_STUB ITfContextOwnerServices_ForceLoadProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_ForceLoadProperty_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_ForceLoadProperty_Stub );
    __frame->pProp = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1412]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pProp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ForceLoadProperty(__frame->_This, __frame->pProp);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_ForceLoadProperty_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfContextOwnerServices_CreateRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfContextOwnerServices_CreateRange_Proxy(
    ITfContextOwnerServices* This,
    LONG acpStart,
    LONG acpEnd,
    ITfRangeACP **ppRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfContextOwnerServices_CreateRange_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = acpStart;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = acpEnd;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1418]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4462],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfContextOwnerServices_CreateRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4462], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfContextOwnerServices_CreateRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfContextOwnerServices * _This;
    HRESULT _RetVal;
    LONG acpStart;
    LONG acpEnd;
    ITfRangeACP *_W0;
    ITfRangeACP ** ppRange;
};

static void __finally_ITfContextOwnerServices_CreateRange_Stub( struct __frame_ITfContextOwnerServices_CreateRange_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4462]);

}

void __RPC_STUB ITfContextOwnerServices_CreateRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfContextOwnerServices_CreateRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfContextOwnerServices*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfContextOwnerServices_CreateRange_Stub );
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1418]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->acpStart = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->acpEnd = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateRange(__frame->_This, __frame->acpStart, __frame->acpEnd, __frame->ppRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4462]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4462]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfContextOwnerServices_CreateRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfContextOwnerServices_FormatStringOffsetTable[] =
{
    1364,  /* ITfContextOwnerServices::OnLayoutChange */
    1366,  /* ITfContextOwnerServices::OnStatusChange */
    1370,  /* ITfContextOwnerServices::OnAttributeChange */
    1376,  /* ITfContextOwnerServices::Serialize */
    1394,  /* ITfContextOwnerServices::Unserialize */
    1412,  /* ITfContextOwnerServices::ForceLoadProperty */
    1418,  /* ITfContextOwnerServices::CreateRange */
};

static const CINTERFACE_PROXY_VTABLE(10) _ITfContextOwnerServicesProxyVtbl =
{
    {
        &IID_ITfContextOwnerServices,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfContextOwnerServices_OnLayoutChange_Proxy,
        ITfContextOwnerServices_OnStatusChange_Proxy,
        ITfContextOwnerServices_OnAttributeChange_Proxy,
        ITfContextOwnerServices_Serialize_Proxy,
        ITfContextOwnerServices_Unserialize_Proxy,
        ITfContextOwnerServices_ForceLoadProperty_Proxy,
        ITfContextOwnerServices_CreateRange_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfContextOwnerServices_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfContextOwnerServices_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfContextOwnerServices_table[] =
{
    ITfContextOwnerServices_OnLayoutChange_Stub,
    ITfContextOwnerServices_OnStatusChange_Stub,
    ITfContextOwnerServices_OnAttributeChange_Stub,
    ITfContextOwnerServices_Serialize_Stub,
    ITfContextOwnerServices_Unserialize_Stub,
    ITfContextOwnerServices_ForceLoadProperty_Stub,
    ITfContextOwnerServices_CreateRange_Stub
};

static const CInterfaceStubVtbl _ITfContextOwnerServicesStubVtbl =
{
    {
        &IID_ITfContextOwnerServices,
        &ITfContextOwnerServices_ServerInfo,
        10,
        &ITfContextOwnerServices_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfReadOnlyProperty interface
 */
static void __finally_ITfReadOnlyProperty_GetType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfReadOnlyProperty_GetType_Proxy(
    ITfReadOnlyProperty* This,
    GUID *pguid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfReadOnlyProperty_GetType_Proxy );
    __frame->This = This;
    if (pguid) MIDL_memset( pguid, 0, sizeof( *pguid ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1428]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfReadOnlyProperty_GetType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4466], (void *)pguid );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfReadOnlyProperty_GetType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfReadOnlyProperty * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * pguid;
};

static void __finally_ITfReadOnlyProperty_GetType_Stub( struct __frame_ITfReadOnlyProperty_GetType_Stub *__frame )
{

}

void __RPC_STUB ITfReadOnlyProperty_GetType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfReadOnlyProperty_GetType_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfReadOnlyProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfReadOnlyProperty_GetType_Stub );
    __frame->pguid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1428]);


        __frame->pguid = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetType(__frame->_This, __frame->pguid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfReadOnlyProperty_GetType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfReadOnlyProperty_EnumRanges_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfReadOnlyProperty_EnumRanges_Proxy(
    ITfReadOnlyProperty* This,
    TfEditCookie ec,
    IEnumTfRanges **ppEnum,
    ITfRange *pTargetRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfReadOnlyProperty_EnumRanges_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pTargetRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4492]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pTargetRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4492]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1434]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4488],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfReadOnlyProperty_EnumRanges_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4488], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfReadOnlyProperty_EnumRanges_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfReadOnlyProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    IEnumTfRanges *_W0;
    IEnumTfRanges ** ppEnum;
    ITfRange * pTargetRange;
};

static void __finally_ITfReadOnlyProperty_EnumRanges_Stub( struct __frame_ITfReadOnlyProperty_EnumRanges_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4488]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pTargetRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4492]);

}

void __RPC_STUB ITfReadOnlyProperty_EnumRanges_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfReadOnlyProperty_EnumRanges_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfReadOnlyProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfReadOnlyProperty_EnumRanges_Stub );
    __frame->ppEnum = 0;
    __frame->pTargetRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1434]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pTargetRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4492],
            0);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumRanges(__frame->_This, __frame->ec, __frame->ppEnum, __frame->pTargetRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4488]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4488]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfReadOnlyProperty_EnumRanges_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfReadOnlyProperty_GetValue_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfReadOnlyProperty_GetValue_Proxy(
    ITfReadOnlyProperty* This,
    TfEditCookie ec,
    ITfRange *pRange,
    VARIANT *pvarValue)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfReadOnlyProperty_GetValue_Proxy );
    __frame->This = This;
    if (pvarValue) MIDL_memset( pvarValue, 0, sizeof( *pvarValue ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pvarValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4510]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4510]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1446]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3742],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfReadOnlyProperty_GetValue_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4528], (void *)pvarValue );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfReadOnlyProperty_GetValue_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfReadOnlyProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    VARIANT _W0;
    VARIANT * pvarValue;
};

static void __finally_ITfReadOnlyProperty_GetValue_Stub( struct __frame_ITfReadOnlyProperty_GetValue_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4510]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarValue,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4528]);

}

void __RPC_STUB ITfReadOnlyProperty_GetValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfReadOnlyProperty_GetValue_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfReadOnlyProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfReadOnlyProperty_GetValue_Stub );
    __frame->pRange = 0;
    __frame->pvarValue = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1446]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4510],
            0);


        __frame->pvarValue = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetValue(__frame->_This, __frame->ec, __frame->pRange, __frame->pvarValue);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3742]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3742]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfReadOnlyProperty_GetValue_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfReadOnlyProperty_GetContext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfReadOnlyProperty_GetContext_Proxy(
    ITfReadOnlyProperty* This,
    ITfContext **ppContext)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfReadOnlyProperty_GetContext_Proxy );
    __frame->This = This;
    if (ppContext) MIDL_memset( ppContext, 0, sizeof( *ppContext ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1458]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppContext,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4550],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfReadOnlyProperty_GetContext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4550], (void *)ppContext );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfReadOnlyProperty_GetContext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfReadOnlyProperty * _This;
    HRESULT _RetVal;
    ITfContext *_W0;
    ITfContext ** ppContext;
};

static void __finally_ITfReadOnlyProperty_GetContext_Stub( struct __frame_ITfReadOnlyProperty_GetContext_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppContext,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4550]);

}

void __RPC_STUB ITfReadOnlyProperty_GetContext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfReadOnlyProperty_GetContext_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfReadOnlyProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfReadOnlyProperty_GetContext_Stub );
    __frame->ppContext = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1458]);


        __frame->ppContext = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetContext(__frame->_This, __frame->ppContext);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4550]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4550]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfReadOnlyProperty_GetContext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfReadOnlyProperty_FormatStringOffsetTable[] =
{
    1428,  /* ITfReadOnlyProperty::GetType */
    1434,  /* ITfReadOnlyProperty::EnumRanges */
    1446,  /* ITfReadOnlyProperty::GetValue */
    1458,  /* ITfReadOnlyProperty::GetContext */
};

static const CINTERFACE_PROXY_VTABLE(7) _ITfReadOnlyPropertyProxyVtbl =
{
    {
        &IID_ITfReadOnlyProperty,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfReadOnlyProperty_GetType_Proxy,
        ITfReadOnlyProperty_EnumRanges_Proxy,
        ITfReadOnlyProperty_GetValue_Proxy,
        ITfReadOnlyProperty_GetContext_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfReadOnlyProperty_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfReadOnlyProperty_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfReadOnlyProperty_table[] =
{
    ITfReadOnlyProperty_GetType_Stub,
    ITfReadOnlyProperty_EnumRanges_Stub,
    ITfReadOnlyProperty_GetValue_Stub,
    ITfReadOnlyProperty_GetContext_Stub
};

static const CInterfaceStubVtbl _ITfReadOnlyPropertyStubVtbl =
{
    {
        &IID_ITfReadOnlyProperty,
        &ITfReadOnlyProperty_ServerInfo,
        7,
        &ITfReadOnlyProperty_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfProperty interface
 */
static void __finally_ITfProperty_FindRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfProperty_FindRange_Proxy(
    ITfProperty* This,
    TfEditCookie ec,
    ITfRange *pRange,
    ITfRange **ppRange,
    TfAnchor aPos)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfProperty_FindRange_Proxy );
    __frame->This = This;
    if (ppRange) MIDL_memset( ppRange, 0, sizeof( *ppRange ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppRange) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 14;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4554]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4554]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&aPos,
                0x0d /* FC_ENUM16 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1464]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4590],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfProperty_FindRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4590], (void *)ppRange );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfProperty_FindRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    ITfRange *_W0;
    ITfRange ** ppRange;
    TfAnchor aPos;
};

static void __finally_ITfProperty_FindRange_Stub( struct __frame_ITfProperty_FindRange_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4554]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4590]);


}

void __RPC_STUB ITfProperty_FindRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfProperty_FindRange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfProperty_FindRange_Stub );
    __frame->pRange = 0;
    __frame->ppRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1464]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4554],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->aPos,
            0x0d /* FC_ENUM16 */);


        __frame->ppRange = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->FindRange(__frame->_This, __frame->ec, __frame->pRange, __frame->ppRange, __frame->aPos);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4590]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4590]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfProperty_FindRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfProperty_SetValueStore_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfProperty_SetValueStore_Proxy(
    ITfProperty* This,
    TfEditCookie ec,
    ITfRange *pRange,
    ITfPropertyStore *pPropStore)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfProperty_SetValueStore_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4594]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pPropStore,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4612]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4594]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPropStore,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4612]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1478]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfProperty_SetValueStore_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfProperty_SetValueStore_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    ITfPropertyStore * pPropStore;
};

static void __finally_ITfProperty_SetValueStore_Stub( struct __frame_ITfProperty_SetValueStore_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4594]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPropStore,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4612]);

}

void __RPC_STUB ITfProperty_SetValueStore_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfProperty_SetValueStore_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfProperty_SetValueStore_Stub );
    __frame->pRange = 0;
    __frame->pPropStore = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1478]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4594],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPropStore,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4612],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetValueStore(__frame->_This, __frame->ec, __frame->pRange, __frame->pPropStore);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfProperty_SetValueStore_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfProperty_SetValue_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfProperty_SetValue_Proxy(
    ITfProperty* This,
    TfEditCookie ec,
    ITfRange *pRange,
    const VARIANT *pvarValue)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfProperty_SetValue_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pvarValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4630]);

            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4648]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4630]);

            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4648]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1490]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfProperty_SetValue_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfProperty_SetValue_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
    const VARIANT * pvarValue;
};

static void __finally_ITfProperty_SetValue_Stub( struct __frame_ITfProperty_SetValue_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4630]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarValue,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4658]);

}

void __RPC_STUB ITfProperty_SetValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfProperty_SetValue_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfProperty_SetValue_Stub );
    __frame->pRange = 0;
    __frame->pvarValue = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1490]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4630],
            0);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4648],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetValue(__frame->_This, __frame->ec, __frame->pRange, __frame->pvarValue);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfProperty_SetValue_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfProperty_Clear_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfProperty_Clear_Proxy(
    ITfProperty* This,
    TfEditCookie ec,
    ITfRange *pRange)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfProperty_Clear_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4662]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfEditCookie *)__frame->_StubMsg.Buffer = ec;
            __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRange,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4662]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1502]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfProperty_Clear_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfProperty_Clear_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfProperty * _This;
    HRESULT _RetVal;
    TfEditCookie ec;
    ITfRange * pRange;
};

static void __finally_ITfProperty_Clear_Stub( struct __frame_ITfProperty_Clear_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pRange,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4662]);

}

void __RPC_STUB ITfProperty_Clear_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfProperty_Clear_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfProperty*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfProperty_Clear_Stub );
    __frame->pRange = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1502]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfEditCookie) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ec = *(TfEditCookie *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfEditCookie);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRange,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4662],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clear(__frame->_This, __frame->ec, __frame->pRange);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfProperty_Clear_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfProperty_FormatStringOffsetTable[] =
{
    1428,  /* ITfReadOnlyProperty::GetType */
    1434,  /* ITfReadOnlyProperty::EnumRanges */
    1446,  /* ITfReadOnlyProperty::GetValue */
    1458,  /* ITfReadOnlyProperty::GetContext */
    1464,  /* ITfProperty::FindRange */
    1478,  /* ITfProperty::SetValueStore */
    1490,  /* ITfProperty::SetValue */
    1502,  /* ITfProperty::Clear */
};

static const CINTERFACE_PROXY_VTABLE(11) _ITfPropertyProxyVtbl =
{
    {
        &IID_ITfProperty,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfReadOnlyProperty_GetType_Proxy,
        ITfReadOnlyProperty_EnumRanges_Proxy,
        ITfReadOnlyProperty_GetValue_Proxy,
        ITfReadOnlyProperty_GetContext_Proxy,
        ITfProperty_FindRange_Proxy,
        ITfProperty_SetValueStore_Proxy,
        ITfProperty_SetValue_Proxy,
        ITfProperty_Clear_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfProperty_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfProperty_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfProperty_table[] =
{
    ITfReadOnlyProperty_GetType_Stub,
    ITfReadOnlyProperty_EnumRanges_Stub,
    ITfReadOnlyProperty_GetValue_Stub,
    ITfReadOnlyProperty_GetContext_Stub,
    ITfProperty_FindRange_Stub,
    ITfProperty_SetValueStore_Stub,
    ITfProperty_SetValue_Stub,
    ITfProperty_Clear_Stub
};

static const CInterfaceStubVtbl _ITfPropertyStubVtbl =
{
    {
        &IID_ITfProperty,
        &ITfProperty_ServerInfo,
        11,
        &ITfProperty_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfCompartment interface
 */
static void __finally_ITfCompartment_SetValue_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartment_SetValue_Proxy(
    ITfCompartment* This,
    TfClientId tid,
    const VARIANT *pvarValue)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartment_SetValue_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pvarValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrUserMarshalBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4680]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrUserMarshalMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4680]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1510]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartment_SetValue_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartment_SetValue_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartment * _This;
    HRESULT _RetVal;
    TfClientId tid;
    const VARIANT * pvarValue;
};

static void __finally_ITfCompartment_SetValue_Stub( struct __frame_ITfCompartment_SetValue_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarValue,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4690]);

}

void __RPC_STUB ITfCompartment_SetValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartment_SetValue_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartment*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartment_SetValue_Stub );
    __frame->pvarValue = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1510]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        NdrUserMarshalUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4680],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetValue(__frame->_This, __frame->tid, __frame->pvarValue);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartment_SetValue_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfCompartment_GetValue_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartment_GetValue_Proxy(
    ITfCompartment* This,
    VARIANT *pvarValue)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartment_GetValue_Proxy );
    __frame->This = This;
    if (pvarValue) MIDL_memset( pvarValue, 0, sizeof( *pvarValue ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pvarValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1518]);

            NdrUserMarshalUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pvarValue,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3742],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartment_GetValue_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4694], (void *)pvarValue );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartment_GetValue_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartment * _This;
    HRESULT _RetVal;
    VARIANT _W0;
    VARIANT * pvarValue;
};

static void __finally_ITfCompartment_GetValue_Stub( struct __frame_ITfCompartment_GetValue_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pvarValue,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4694]);

}

void __RPC_STUB ITfCompartment_GetValue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartment_GetValue_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartment*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartment_GetValue_Stub );
    __frame->pvarValue = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1518]);


        __frame->pvarValue = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetValue(__frame->_This, __frame->pvarValue);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrUserMarshalBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3742]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrUserMarshalMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pvarValue,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3742]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartment_GetValue_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfCompartment_FormatStringOffsetTable[] =
{
    1510,  /* ITfCompartment::SetValue */
    1518,  /* ITfCompartment::GetValue */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfCompartmentProxyVtbl =
{
    {
        &IID_ITfCompartment,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfCompartment_SetValue_Proxy,
        ITfCompartment_GetValue_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfCompartment_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfCompartment_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfCompartment_table[] =
{
    ITfCompartment_SetValue_Stub,
    ITfCompartment_GetValue_Stub
};

static const CInterfaceStubVtbl _ITfCompartmentStubVtbl =
{
    {
        &IID_ITfCompartment,
        &ITfCompartment_ServerInfo,
        5,
        &ITfCompartment_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfCompartmentMgr interface
 */
static void __finally_ITfCompartmentMgr_GetCompartment_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartmentMgr_GetCompartment_Proxy(
    ITfCompartmentMgr* This,
    REFGUID rguid,
    ITfCompartment **ppcomp)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartmentMgr_GetCompartment_Proxy );
    __frame->This = This;
    if (ppcomp) MIDL_memset( ppcomp, 0, sizeof( *ppcomp ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!rguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppcomp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1524]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppcomp,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4720],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartmentMgr_GetCompartment_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4720], (void *)ppcomp );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartmentMgr_GetCompartment_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartmentMgr * _This;
    HRESULT _RetVal;
    REFGUID rguid;
    ITfCompartment *_W0;
    ITfCompartment ** ppcomp;
};

static void __finally_ITfCompartmentMgr_GetCompartment_Stub( struct __frame_ITfCompartmentMgr_GetCompartment_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppcomp,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4720]);

}

void __RPC_STUB ITfCompartmentMgr_GetCompartment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartmentMgr_GetCompartment_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartmentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartmentMgr_GetCompartment_Stub );
    __frame->rguid = 0;
    __frame->ppcomp = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1524]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        __frame->ppcomp = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCompartment(__frame->_This, __frame->rguid, __frame->ppcomp);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppcomp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4720]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppcomp,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4720]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartmentMgr_GetCompartment_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfCompartmentMgr_ClearCompartment_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartmentMgr_ClearCompartment_Proxy(
    ITfCompartmentMgr* This,
    TfClientId tid,
    REFGUID rguid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartmentMgr_ClearCompartment_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1534]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartmentMgr_ClearCompartment_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartmentMgr_ClearCompartment_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartmentMgr * _This;
    HRESULT _RetVal;
    TfClientId tid;
    REFGUID rguid;
};

static void __finally_ITfCompartmentMgr_ClearCompartment_Stub( struct __frame_ITfCompartmentMgr_ClearCompartment_Stub *__frame )
{


}

void __RPC_STUB ITfCompartmentMgr_ClearCompartment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartmentMgr_ClearCompartment_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartmentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartmentMgr_ClearCompartment_Stub );
    __frame->rguid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1534]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ClearCompartment(__frame->_This, __frame->tid, __frame->rguid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartmentMgr_ClearCompartment_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfCompartmentMgr_EnumCompartments_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartmentMgr_EnumCompartments_Proxy(
    ITfCompartmentMgr* This,
    IEnumGUID **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartmentMgr_EnumCompartments_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1542]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4746],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartmentMgr_EnumCompartments_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4746], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartmentMgr_EnumCompartments_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartmentMgr * _This;
    HRESULT _RetVal;
    IEnumGUID *_W0;
    IEnumGUID ** ppEnum;
};

static void __finally_ITfCompartmentMgr_EnumCompartments_Stub( struct __frame_ITfCompartmentMgr_EnumCompartments_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4746]);

}

void __RPC_STUB ITfCompartmentMgr_EnumCompartments_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartmentMgr_EnumCompartments_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartmentMgr*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartmentMgr_EnumCompartments_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1542]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumCompartments(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4746]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4746]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartmentMgr_EnumCompartments_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfCompartmentMgr_FormatStringOffsetTable[] =
{
    1524,  /* ITfCompartmentMgr::GetCompartment */
    1534,  /* ITfCompartmentMgr::ClearCompartment */
    1542,  /* ITfCompartmentMgr::EnumCompartments */
};

static const CINTERFACE_PROXY_VTABLE(6) _ITfCompartmentMgrProxyVtbl =
{
    {
        &IID_ITfCompartmentMgr,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfCompartmentMgr_GetCompartment_Proxy,
        ITfCompartmentMgr_ClearCompartment_Proxy,
        ITfCompartmentMgr_EnumCompartments_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfCompartmentMgr_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfCompartmentMgr_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfCompartmentMgr_table[] =
{
    ITfCompartmentMgr_GetCompartment_Stub,
    ITfCompartmentMgr_ClearCompartment_Stub,
    ITfCompartmentMgr_EnumCompartments_Stub
};

static const CInterfaceStubVtbl _ITfCompartmentMgrStubVtbl =
{
    {
        &IID_ITfCompartmentMgr,
        &ITfCompartmentMgr_ServerInfo,
        6,
        &ITfCompartmentMgr_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfCompartmentEventSink interface
 */
static void __finally_ITfCompartmentEventSink_OnChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfCompartmentEventSink_OnChange_Proxy(
    ITfCompartmentEventSink* This,
    REFGUID rguid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfCompartmentEventSink_OnChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!rguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1548]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfCompartmentEventSink_OnChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfCompartmentEventSink_OnChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfCompartmentEventSink * _This;
    HRESULT _RetVal;
    REFGUID rguid;
};

static void __finally_ITfCompartmentEventSink_OnChange_Stub( struct __frame_ITfCompartmentEventSink_OnChange_Stub *__frame )
{

}

void __RPC_STUB ITfCompartmentEventSink_OnChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfCompartmentEventSink_OnChange_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfCompartmentEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfCompartmentEventSink_OnChange_Stub );
    __frame->rguid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1548]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnChange(__frame->_This, __frame->rguid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfCompartmentEventSink_OnChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfCompartmentEventSink_FormatStringOffsetTable[] =
{
    1548,  /* ITfCompartmentEventSink::OnChange */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfCompartmentEventSinkProxyVtbl =
{
    {
        &IID_ITfCompartmentEventSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfCompartmentEventSink_OnChange_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfCompartmentEventSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfCompartmentEventSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfCompartmentEventSink_table[] =
{
    ITfCompartmentEventSink_OnChange_Stub
};

static const CInterfaceStubVtbl _ITfCompartmentEventSinkStubVtbl =
{
    {
        &IID_ITfCompartmentEventSink,
        &ITfCompartmentEventSink_ServerInfo,
        4,
        &ITfCompartmentEventSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfContexts interface
 */
static void __finally_IEnumTfContexts_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContexts_Clone_Proxy(
    IEnumTfContexts* This,
    IEnumTfContexts **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContexts_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1554]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4772],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContexts_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4772], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContexts_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContexts * _This;
    HRESULT _RetVal;
    IEnumTfContexts *_W0;
    IEnumTfContexts ** ppEnum;
};

static void __finally_IEnumTfContexts_Clone_Stub( struct __frame_IEnumTfContexts_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4772]);

}

void __RPC_STUB IEnumTfContexts_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContexts_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContexts*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContexts_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1554]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4772]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4772]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContexts_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContexts_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContexts_Next_Proxy(
    IEnumTfContexts* This,
    ULONG ulCount,
    ITfContext **rgContext,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContexts_Next_Proxy );
    __frame->This = This;
    if (rgContext) MIDL_memset( rgContext, 0, sizeof( *rgContext ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rgContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1560]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgContext,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4794],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContexts_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4812], (void *)rgContext );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4816], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContexts_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContexts * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    ITfContext ** rgContext;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumTfContexts_Next_Stub( struct __frame_IEnumTfContexts_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgContext,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4812]);


}

void __RPC_STUB IEnumTfContexts_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContexts_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContexts*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContexts_Next_Stub );
    __frame->rgContext = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1560]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgContext = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 8);
        memset(__frame->rgContext, 0, __frame->ulCount * 8);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->rgContext, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4794]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgContext,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4794]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContexts_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContexts_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContexts_Reset_Proxy(
    IEnumTfContexts* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContexts_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1572]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContexts_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContexts_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContexts * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfContexts_Reset_Stub( struct __frame_IEnumTfContexts_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfContexts_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContexts_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContexts*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContexts_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1572]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContexts_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfContexts_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfContexts_Skip_Proxy(
    IEnumTfContexts* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfContexts_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1574]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfContexts_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfContexts_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfContexts * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfContexts_Skip_Stub( struct __frame_IEnumTfContexts_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfContexts_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfContexts_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfContexts*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfContexts_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1574]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfContexts_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfContexts_FormatStringOffsetTable[] =
{
    1554,  /* IEnumTfContexts::Clone */
    1560,  /* IEnumTfContexts::Next */
    1572,  /* IEnumTfContexts::Reset */
    1574,  /* IEnumTfContexts::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfContextsProxyVtbl =
{
    {
        &IID_IEnumTfContexts,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfContexts_Clone_Proxy,
        IEnumTfContexts_Next_Proxy,
        IEnumTfContexts_Reset_Proxy,
        IEnumTfContexts_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfContexts_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfContexts_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfContexts_table[] =
{
    IEnumTfContexts_Clone_Stub,
    IEnumTfContexts_Next_Stub,
    IEnumTfContexts_Reset_Stub,
    IEnumTfContexts_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfContextsStubVtbl =
{
    {
        &IID_IEnumTfContexts,
        &IEnumTfContexts_ServerInfo,
        7,
        &IEnumTfContexts_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumTfDocumentMgrs interface
 */
static void __finally_IEnumTfDocumentMgrs_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDocumentMgrs_Clone_Proxy(
    IEnumTfDocumentMgrs* This,
    IEnumTfDocumentMgrs **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDocumentMgrs_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1578]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4838],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDocumentMgrs_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4838], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDocumentMgrs_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDocumentMgrs * _This;
    HRESULT _RetVal;
    IEnumTfDocumentMgrs *_W0;
    IEnumTfDocumentMgrs ** ppEnum;
};

static void __finally_IEnumTfDocumentMgrs_Clone_Stub( struct __frame_IEnumTfDocumentMgrs_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4838]);

}

void __RPC_STUB IEnumTfDocumentMgrs_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDocumentMgrs_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDocumentMgrs*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDocumentMgrs_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1578]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4838]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4838]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDocumentMgrs_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDocumentMgrs_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDocumentMgrs_Next_Proxy(
    IEnumTfDocumentMgrs* This,
    ULONG ulCount,
    ITfDocumentMgr **rgDocumentMgr,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDocumentMgrs_Next_Proxy );
    __frame->This = This;
    if (rgDocumentMgr) MIDL_memset( rgDocumentMgr, 0, sizeof( *rgDocumentMgr ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rgDocumentMgr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1584]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgDocumentMgr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4860],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDocumentMgrs_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = __frame->_StubMsg.MaxCount;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4878], (void *)rgDocumentMgr );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4882], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDocumentMgrs_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDocumentMgrs * _This;
    HRESULT _RetVal;
    ULONG ulCount;
    ITfDocumentMgr ** rgDocumentMgr;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumTfDocumentMgrs_Next_Stub( struct __frame_IEnumTfDocumentMgrs_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgDocumentMgr,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4878]);


}

void __RPC_STUB IEnumTfDocumentMgrs_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDocumentMgrs_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDocumentMgrs*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDocumentMgrs_Next_Stub );
    __frame->rgDocumentMgr = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1584]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgDocumentMgr = NdrAllocate(&__frame->_StubMsg, __frame->ulCount * 8);
        memset(__frame->rgDocumentMgr, 0, __frame->ulCount * 8);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->ulCount, __frame->rgDocumentMgr, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgDocumentMgr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4860]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->ulCount;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->pcFetched;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgDocumentMgr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4860]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDocumentMgrs_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDocumentMgrs_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDocumentMgrs_Reset_Proxy(
    IEnumTfDocumentMgrs* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDocumentMgrs_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1596]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDocumentMgrs_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDocumentMgrs_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDocumentMgrs * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumTfDocumentMgrs_Reset_Stub( struct __frame_IEnumTfDocumentMgrs_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumTfDocumentMgrs_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDocumentMgrs_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDocumentMgrs*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDocumentMgrs_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1596]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDocumentMgrs_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumTfDocumentMgrs_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumTfDocumentMgrs_Skip_Proxy(
    IEnumTfDocumentMgrs* This,
    ULONG ulCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumTfDocumentMgrs_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulCount;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1598]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumTfDocumentMgrs_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumTfDocumentMgrs_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumTfDocumentMgrs * _This;
    HRESULT _RetVal;
    ULONG ulCount;
};

static void __finally_IEnumTfDocumentMgrs_Skip_Stub( struct __frame_IEnumTfDocumentMgrs_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumTfDocumentMgrs_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumTfDocumentMgrs_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumTfDocumentMgrs*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumTfDocumentMgrs_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1598]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulCount = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->ulCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumTfDocumentMgrs_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumTfDocumentMgrs_FormatStringOffsetTable[] =
{
    1578,  /* IEnumTfDocumentMgrs::Clone */
    1584,  /* IEnumTfDocumentMgrs::Next */
    1596,  /* IEnumTfDocumentMgrs::Reset */
    1598,  /* IEnumTfDocumentMgrs::Skip */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumTfDocumentMgrsProxyVtbl =
{
    {
        &IID_IEnumTfDocumentMgrs,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumTfDocumentMgrs_Clone_Proxy,
        IEnumTfDocumentMgrs_Next_Proxy,
        IEnumTfDocumentMgrs_Reset_Proxy,
        IEnumTfDocumentMgrs_Skip_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumTfDocumentMgrs_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumTfDocumentMgrs_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumTfDocumentMgrs_table[] =
{
    IEnumTfDocumentMgrs_Clone_Stub,
    IEnumTfDocumentMgrs_Next_Stub,
    IEnumTfDocumentMgrs_Reset_Stub,
    IEnumTfDocumentMgrs_Skip_Stub
};

static const CInterfaceStubVtbl _IEnumTfDocumentMgrsStubVtbl =
{
    {
        &IID_IEnumTfDocumentMgrs,
        &IEnumTfDocumentMgrs_ServerInfo,
        7,
        &IEnumTfDocumentMgrs_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfSourceSingle interface
 */
static void __finally_ITfSourceSingle_AdviseSingleSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfSourceSingle_AdviseSingleSink_Proxy(
    ITfSourceSingle* This,
    TfClientId tid,
    REFIID riid,
    IUnknown *punk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfSourceSingle_AdviseSingleSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4890]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)punk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4890]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1602]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfSourceSingle_AdviseSingleSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfSourceSingle_AdviseSingleSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfSourceSingle * _This;
    HRESULT _RetVal;
    TfClientId tid;
    REFIID riid;
    IUnknown * punk;
};

static void __finally_ITfSourceSingle_AdviseSingleSink_Stub( struct __frame_ITfSourceSingle_AdviseSingleSink_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->punk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4890]);

}

void __RPC_STUB ITfSourceSingle_AdviseSingleSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfSourceSingle_AdviseSingleSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfSourceSingle*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfSourceSingle_AdviseSingleSink_Stub );
    __frame->riid = 0;
    __frame->punk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1602]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->punk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4890],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdviseSingleSink(__frame->_This, __frame->tid, __frame->riid, __frame->punk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfSourceSingle_AdviseSingleSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfSourceSingle_UnadviseSingleSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfSourceSingle_UnadviseSingleSink_Proxy(
    ITfSourceSingle* This,
    TfClientId tid,
    REFIID riid)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfSourceSingle_UnadviseSingleSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(TfClientId *)__frame->_StubMsg.Buffer = tid;
            __frame->_StubMsg.Buffer += sizeof(TfClientId);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1614]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfSourceSingle_UnadviseSingleSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfSourceSingle_UnadviseSingleSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfSourceSingle * _This;
    HRESULT _RetVal;
    TfClientId tid;
    REFIID riid;
};

static void __finally_ITfSourceSingle_UnadviseSingleSink_Stub( struct __frame_ITfSourceSingle_UnadviseSingleSink_Stub *__frame )
{


}

void __RPC_STUB ITfSourceSingle_UnadviseSingleSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfSourceSingle_UnadviseSingleSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfSourceSingle*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfSourceSingle_UnadviseSingleSink_Stub );
    __frame->riid = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1614]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(TfClientId) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tid = *(TfClientId *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(TfClientId);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnadviseSingleSink(__frame->_This, __frame->tid, __frame->riid);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfSourceSingle_UnadviseSingleSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfSourceSingle_FormatStringOffsetTable[] =
{
    1602,  /* ITfSourceSingle::AdviseSingleSink */
    1614,  /* ITfSourceSingle::UnadviseSingleSink */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfSourceSingleProxyVtbl =
{
    {
        &IID_ITfSourceSingle,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfSourceSingle_AdviseSingleSink_Proxy,
        ITfSourceSingle_UnadviseSingleSink_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfSourceSingle_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfSourceSingle_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfSourceSingle_table[] =
{
    ITfSourceSingle_AdviseSingleSink_Stub,
    ITfSourceSingle_UnadviseSingleSink_Stub
};

static const CInterfaceStubVtbl _ITfSourceSingleStubVtbl =
{
    {
        &IID_ITfSourceSingle,
        &ITfSourceSingle_ServerInfo,
        5,
        &ITfSourceSingle_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfInputProcessorProfileActivationSink interface
 */
static void __finally_ITfInputProcessorProfileActivationSink_OnActivated_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfInputProcessorProfileActivationSink_OnActivated_Proxy(
    ITfInputProcessorProfileActivationSink* This,
    DWORD dwProfileType,
    LANGID langid,
    REFCLSID clsid,
    REFGUID catid,
    REFGUID guidProfile,
    HKL hkl,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfInputProcessorProfileActivationSink_OnActivated_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!clsid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!catid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!guidProfile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 98;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwProfileType;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(LANGID *)__frame->_StubMsg.Buffer = langid;
            __frame->_StubMsg.Buffer += sizeof(LANGID);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)catid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)guidProfile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hkl,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1622]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfInputProcessorProfileActivationSink_OnActivated_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfInputProcessorProfileActivationSink_OnActivated_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfInputProcessorProfileActivationSink * _This;
    HRESULT _RetVal;
    DWORD dwProfileType;
    LANGID langid;
    REFCLSID clsid;
    REFGUID catid;
    REFGUID guidProfile;
    HKL hkl;
    DWORD dwFlags;
};

static void __finally_ITfInputProcessorProfileActivationSink_OnActivated_Stub( struct __frame_ITfInputProcessorProfileActivationSink_OnActivated_Stub *__frame )
{







}

void __RPC_STUB ITfInputProcessorProfileActivationSink_OnActivated_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfInputProcessorProfileActivationSink_OnActivated_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfInputProcessorProfileActivationSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfInputProcessorProfileActivationSink_OnActivated_Stub );
    __frame->clsid = 0;
    __frame->catid = 0;
    __frame->guidProfile = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1622]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwProfileType = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->langid = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[336],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->catid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->guidProfile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hkl,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->OnActivated(__frame->_This, __frame->dwProfileType, __frame->langid, __frame->clsid, __frame->catid, __frame->guidProfile, __frame->hkl, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfInputProcessorProfileActivationSink_OnActivated_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfInputProcessorProfileActivationSink_FormatStringOffsetTable[] =
{
    1622,  /* ITfInputProcessorProfileActivationSink::OnActivated */
};

static const CINTERFACE_PROXY_VTABLE(4) _ITfInputProcessorProfileActivationSinkProxyVtbl =
{
    {
        &IID_ITfInputProcessorProfileActivationSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfInputProcessorProfileActivationSink_OnActivated_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfInputProcessorProfileActivationSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfInputProcessorProfileActivationSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfInputProcessorProfileActivationSink_table[] =
{
    ITfInputProcessorProfileActivationSink_OnActivated_Stub
};

static const CInterfaceStubVtbl _ITfInputProcessorProfileActivationSinkStubVtbl =
{
    {
        &IID_ITfInputProcessorProfileActivationSink,
        &ITfInputProcessorProfileActivationSink_ServerInfo,
        4,
        &ITfInputProcessorProfileActivationSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfMouseTracker interface
 */
static void __finally_ITfMouseTracker_AdviseMouseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfMouseTracker_AdviseMouseSink_Proxy(
    ITfMouseTracker* This,
    ITfRange *range,
    ITfMouseSink *pSink,
    DWORD *pdwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfMouseTracker_AdviseMouseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pdwCookie) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4912]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4930]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4912]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4930]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1644]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfMouseTracker_AdviseMouseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4948], (void *)pdwCookie );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfMouseTracker_AdviseMouseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfMouseTracker * _This;
    HRESULT _RetVal;
    ITfRange * range;
    ITfMouseSink * pSink;
    DWORD _W0;
    DWORD * pdwCookie;
};

static void __finally_ITfMouseTracker_AdviseMouseSink_Stub( struct __frame_ITfMouseTracker_AdviseMouseSink_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4912]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4930]);


}

void __RPC_STUB ITfMouseTracker_AdviseMouseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfMouseTracker_AdviseMouseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfMouseTracker*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfMouseTracker_AdviseMouseSink_Stub );
    __frame->range = 0;
    __frame->pSink = 0;
    __frame->pdwCookie = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1644]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4912],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4930],
            0);


        __frame->pdwCookie = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdviseMouseSink(__frame->_This, __frame->range, __frame->pSink, __frame->pdwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwCookie;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfMouseTracker_AdviseMouseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfMouseTracker_UnadviseMouseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfMouseTracker_UnadviseMouseSink_Proxy(
    ITfMouseTracker* This,
    DWORD dwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfMouseTracker_UnadviseMouseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwCookie;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1658]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfMouseTracker_UnadviseMouseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfMouseTracker_UnadviseMouseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfMouseTracker * _This;
    HRESULT _RetVal;
    DWORD dwCookie;
};

static void __finally_ITfMouseTracker_UnadviseMouseSink_Stub( struct __frame_ITfMouseTracker_UnadviseMouseSink_Stub *__frame )
{

}

void __RPC_STUB ITfMouseTracker_UnadviseMouseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfMouseTracker_UnadviseMouseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfMouseTracker*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfMouseTracker_UnadviseMouseSink_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1658]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnadviseMouseSink(__frame->_This, __frame->dwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfMouseTracker_UnadviseMouseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfMouseTracker_FormatStringOffsetTable[] =
{
    1644,  /* ITfMouseTracker::AdviseMouseSink */
    1658,  /* ITfMouseTracker::UnadviseMouseSink */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfMouseTrackerProxyVtbl =
{
    {
        &IID_ITfMouseTracker,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfMouseTracker_AdviseMouseSink_Proxy,
        ITfMouseTracker_UnadviseMouseSink_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfMouseTracker_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfMouseTracker_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfMouseTracker_table[] =
{
    ITfMouseTracker_AdviseMouseSink_Stub,
    ITfMouseTracker_UnadviseMouseSink_Stub
};

static const CInterfaceStubVtbl _ITfMouseTrackerStubVtbl =
{
    {
        &IID_ITfMouseTracker,
        &ITfMouseTracker_ServerInfo,
        5,
        &ITfMouseTracker_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ITfMouseTrackerACP interface
 */
static void __finally_ITfMouseTrackerACP_AdviseMouseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfMouseTrackerACP_AdviseMouseSink_Proxy(
    ITfMouseTrackerACP* This,
    ITfRangeACP *range,
    ITfMouseSink *pSink,
    DWORD *pdwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfMouseTrackerACP_AdviseMouseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pdwCookie) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4970]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)range,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4970]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1662]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfMouseTrackerACP_AdviseMouseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4988], (void *)pdwCookie );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfMouseTrackerACP_AdviseMouseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfMouseTrackerACP * _This;
    HRESULT _RetVal;
    ITfRangeACP * range;
    ITfMouseSink * pSink;
    DWORD _W0;
    DWORD * pdwCookie;
};

static void __finally_ITfMouseTrackerACP_AdviseMouseSink_Stub( struct __frame_ITfMouseTrackerACP_AdviseMouseSink_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->range,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4970]);


}

void __RPC_STUB ITfMouseTrackerACP_AdviseMouseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfMouseTrackerACP_AdviseMouseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfMouseTrackerACP*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfMouseTrackerACP_AdviseMouseSink_Stub );
    __frame->range = 0;
    __frame->pSink = 0;
    __frame->pdwCookie = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1662]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->range,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4970],
            0);


        __frame->pdwCookie = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdviseMouseSink(__frame->_This, __frame->range, __frame->pSink, __frame->pdwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwCookie;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfMouseTrackerACP_AdviseMouseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ITfMouseTrackerACP_UnadviseMouseSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ITfMouseTrackerACP_UnadviseMouseSink_Proxy(
    ITfMouseTrackerACP* This,
    DWORD dwCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ITfMouseTrackerACP_UnadviseMouseSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwCookie;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1676]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ITfMouseTrackerACP_UnadviseMouseSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ITfMouseTrackerACP_UnadviseMouseSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ITfMouseTrackerACP * _This;
    HRESULT _RetVal;
    DWORD dwCookie;
};

static void __finally_ITfMouseTrackerACP_UnadviseMouseSink_Stub( struct __frame_ITfMouseTrackerACP_UnadviseMouseSink_Stub *__frame )
{

}

void __RPC_STUB ITfMouseTrackerACP_UnadviseMouseSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ITfMouseTrackerACP_UnadviseMouseSink_Stub __f, * const __frame = &__f;

    __frame->_This = (ITfMouseTrackerACP*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ITfMouseTrackerACP_UnadviseMouseSink_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1676]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwCookie = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnadviseMouseSink(__frame->_This, __frame->dwCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITfMouseTrackerACP_UnadviseMouseSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ITfMouseTrackerACP_FormatStringOffsetTable[] =
{
    1662,  /* ITfMouseTrackerACP::AdviseMouseSink */
    1676,  /* ITfMouseTrackerACP::UnadviseMouseSink */
};

static const CINTERFACE_PROXY_VTABLE(5) _ITfMouseTrackerACPProxyVtbl =
{
    {
        &IID_ITfMouseTrackerACP,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ITfMouseTrackerACP_AdviseMouseSink_Proxy,
        ITfMouseTrackerACP_UnadviseMouseSink_Proxy,
    }
};

static const MIDL_SERVER_INFO ITfMouseTrackerACP_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ITfMouseTrackerACP_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ITfMouseTrackerACP_table[] =
{
    ITfMouseTrackerACP_AdviseMouseSink_Stub,
    ITfMouseTrackerACP_UnadviseMouseSink_Stub
};

static const CInterfaceStubVtbl _ITfMouseTrackerACPStubVtbl =
{
    {
        &IID_ITfMouseTrackerACP,
        &ITfMouseTrackerACP_ServerInfo,
        5,
        &ITfMouseTrackerACP_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

static const USER_MARSHAL_ROUTINE_QUADRUPLE UserMarshalRoutines[] =
{
    {
        (USER_MARSHAL_SIZING_ROUTINE)BSTR_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)BSTR_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)BSTR_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)BSTR_UserFree
    },
    {
        (USER_MARSHAL_SIZING_ROUTINE)HWND_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)HWND_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)HWND_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)HWND_UserFree
    },
    {
        (USER_MARSHAL_SIZING_ROUTINE)VARIANT_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)VARIANT_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)VARIANT_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)VARIANT_UserFree
    }
};

static const MIDL_STUB_DESC Object_StubDesc =
{
    0,
    NdrOleAllocate,
    NdrOleFree,
    {0}, 0, 0, 0, 0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    UserMarshalRoutines,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

#if !defined(__RPC_WIN64__)
#error Currently only Wine and WIN32 are supported.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter guid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14),	/* type offset = 20 */
/* 4 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter desc) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3a),	/* type offset = 58 */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3e),	/* type offset = 62 */
/* 16 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x54),	/* type offset = 84 */
/* 20 (parameter func) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5e),	/* type offset = 94 */
/* 24 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 26 (parameter ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x74),	/* type offset = 116 */
/* 30 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 32 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter prov) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8a),	/* type offset = 138 */
/* 38 (parameter fetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa0),	/* type offset = 160 */
/* 42 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 44 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 48 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 50 (parameter ptid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa4),	/* type offset = 164 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 58 (parameter ppdim) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xba),	/* type offset = 186 */
/* 62 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 64 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd0),	/* type offset = 208 */
/* 68 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 70 (parameter ppdimFocus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe6),	/* type offset = 230 */
/* 74 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter pdimFocus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xea),	/* type offset = 234 */
/* 80 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 82 (parameter hwnd) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x114),	/* type offset = 276 */
/* 86 (parameter pdimNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x11e),	/* type offset = 286 */
/* 90 (parameter ppdimPrev) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x142),	/* type offset = 322 */
/* 94 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 96 (parameter pfThreadFocus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x146),	/* type offset = 326 */
/* 100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 102 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15c),	/* type offset = 348 */
/* 106 (parameter ppFuncProv) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x172),	/* type offset = 370 */
/* 110 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 112 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x188),	/* type offset = 392 */
/* 116 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 118 (parameter ppCompMgr) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x19e),	/* type offset = 414 */
/* 122 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 124 (parameter id) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a2),	/* type offset = 418 */
/* 128 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 132 (parameter flags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a6),	/* type offset = 422 */
/* 136 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 138 (parameter pclsid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1aa),	/* type offset = 426 */
/* 142 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 144 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1c0),	/* type offset = 448 */
/* 148 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 150 (parameter tidOwner) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 152 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 154 (parameter punk) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1c4),	/* type offset = 452 */
/* 158 (parameter ppic) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1e8),	/* type offset = 488 */
/* 162 (parameter pecTextStore) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1ec),	/* type offset = 492 */
/* 166 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 168 (parameter pic) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f0),	/* type offset = 496 */
/* 172 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 174 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 176 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 178 (parameter ppic) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x214),	/* type offset = 532 */
/* 182 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 184 (parameter ppic) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x22a),	/* type offset = 554 */
/* 188 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 190 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x240),	/* type offset = 576 */
/* 194 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 196 (parameter cookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 198 (parameter pt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x24c),	/* type offset = 588 */
/* 202 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 204 (parameter range) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x262),	/* type offset = 610 */
/* 208 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 210 (parameter cookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 212 (parameter range) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x266),	/* type offset = 614 */
/* 216 (parameter rect) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x282),	/* type offset = 642 */
/* 220 (parameter clipped) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x286),	/* type offset = 646 */
/* 224 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 226 (parameter rect) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x28a),	/* type offset = 650 */
/* 230 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 232 (parameter hwnd) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x298),	/* type offset = 664 */
/* 236 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 238 (parameter ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2ae),	/* type offset = 686 */
/* 242 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 244 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 246 (parameter views) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2c4),	/* type offset = 708 */
/* 250 (parameter fetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2da),	/* type offset = 730 */
/* 254 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 256 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 258 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 262 (parameter ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2f0),	/* type offset = 752 */
/* 266 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 268 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 270 (parameter props) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x306),	/* type offset = 774 */
/* 274 (parameter fetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x31c),	/* type offset = 796 */
/* 278 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 280 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 282 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 284 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 286 (parameter cookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 288 (parameter range) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x320),	/* type offset = 800 */
/* 292 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 294 (parameter prop) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x332),	/* type offset = 818 */
/* 298 (parameter range) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x344),	/* type offset = 836 */
/* 302 (parameter header) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x368),	/* type offset = 872 */
/* 306 (parameter stream) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x36c),	/* type offset = 876 */
/* 310 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 312 (parameter prop) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x37e),	/* type offset = 894 */
/* 316 (parameter header) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3a2),	/* type offset = 930 */
/* 320 (parameter stream) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3a6),	/* type offset = 934 */
/* 324 (parameter loader) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3b8),	/* type offset = 952 */
/* 328 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 330 (parameter prop) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3ca),	/* type offset = 970 */
/* 334 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 336 (parameter start) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 338 (parameter end) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 340 (parameter range) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3ee),	/* type offset = 1006 */
/* 344 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 346 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 348 (parameter pes) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3f2),	/* type offset = 1010 */
/* 352 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 354 (parameter phrSession) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x404),	/* type offset = 1028 */
/* 358 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 360 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 362 (parameter pfWriteSession) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x408),	/* type offset = 1032 */
/* 366 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 368 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 370 (parameter ulIndex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 372 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 374 (parameter pSelection) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x43c),	/* type offset = 1084 */
/* 378 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x452),	/* type offset = 1106 */
/* 382 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 384 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 386 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 388 (parameter pSelection) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x468),	/* type offset = 1128 */
/* 392 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 394 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 396 (parameter ppStart) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x490),	/* type offset = 1168 */
/* 400 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 402 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 404 (parameter ppEnd) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4a6),	/* type offset = 1190 */
/* 408 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 410 (parameter ppView) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4bc),	/* type offset = 1212 */
/* 414 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 416 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4d2),	/* type offset = 1234 */
/* 420 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 422 (parameter pdcs) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4de),	/* type offset = 1246 */
/* 426 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 428 (parameter guidProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4e2),	/* type offset = 1250 */
/* 432 (parameter ppProp) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4f8),	/* type offset = 1272 */
/* 436 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 438 (parameter guidProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4fc),	/* type offset = 1276 */
/* 442 (parameter ppProp) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x512),	/* type offset = 1298 */
/* 446 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 448 (parameter prgProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x528),	/* type offset = 1320 */
/* 452 (parameter cProp) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 454 (parameter prgAppProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x550),	/* type offset = 1360 */
/* 458 (parameter cAppProp) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 460 (parameter ppProperty) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x578),	/* type offset = 1400 */
/* 464 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 466 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x58e),	/* type offset = 1422 */
/* 470 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 472 (parameter ppDm) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5a4),	/* type offset = 1444 */
/* 476 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 478 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 480 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5a8),	/* type offset = 1448 */
/* 484 (parameter ppBackup) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5cc),	/* type offset = 1484 */
/* 488 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 490 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5d0),	/* type offset = 1488 */
/* 494 (parameter punk) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5d4),	/* type offset = 1492 */
/* 498 (parameter pdwCookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5da),	/* type offset = 1498 */
/* 502 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 504 (parameter dwCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 506 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 508 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5f0),	/* type offset = 1520 */
/* 512 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 514 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 516 (parameter pProfile) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x612),	/* type offset = 1554 */
/* 520 (parameter pcFetch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x628),	/* type offset = 1576 */
/* 524 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 526 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 528 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 530 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 532 (parameter dwProfileType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 534 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 536 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x62c),	/* type offset = 1580 */
/* 540 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x630),	/* type offset = 1584 */
/* 544 (parameter hkl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 546 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 548 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 550 (parameter dwProfileType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 552 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 554 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x634),	/* type offset = 1588 */
/* 558 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x638),	/* type offset = 1592 */
/* 562 (parameter hkl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 564 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 566 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 568 (parameter dwProfileType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 570 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 572 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x63c),	/* type offset = 1596 */
/* 576 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x640),	/* type offset = 1600 */
/* 580 (parameter hkl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 582 (parameter pProfile) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x644),	/* type offset = 1604 */
/* 586 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 588 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 590 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x65a),	/* type offset = 1626 */
/* 594 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 596 (parameter rclsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x65e),	/* type offset = 1630 */
/* 600 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 602 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 604 (parameter rclsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x662),	/* type offset = 1634 */
/* 608 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 610 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x666),	/* type offset = 1638 */
/* 614 (parameter pchDesc) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x66a),	/* type offset = 1642 */
/* 618 (parameter cchDesc) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 620 (parameter pchIconFile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x678),	/* type offset = 1656 */
/* 624 (parameter cchFile) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 626 (parameter uIconIndex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 628 (parameter hklsubstitute) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 630 (parameter dwPreferredLayout) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 632 (parameter bEnabledByDefault) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 634 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 636 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 638 (parameter rclsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x686),	/* type offset = 1670 */
/* 642 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 644 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x68a),	/* type offset = 1674 */
/* 648 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 650 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 652 (parameter catid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x68e),	/* type offset = 1678 */
/* 656 (parameter pProfile) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x692),	/* type offset = 1682 */
/* 660 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 662 (parameter pguid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x696),	/* type offset = 1686 */
/* 666 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 668 (parameter pbstrDesc) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x69a),	/* type offset = 1690 */
/* 672 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 674 (parameter pda) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6de),	/* type offset = 1758 */
/* 678 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 680 (parameter pda) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6fa),	/* type offset = 1786 */
/* 684 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 686 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 688 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x710),	/* type offset = 1808 */
/* 692 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 694 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 696 (parameter rgInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x726),	/* type offset = 1830 */
/* 700 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x73c),	/* type offset = 1852 */
/* 704 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 706 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 708 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 710 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 712 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x752),	/* type offset = 1874 */
/* 716 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 718 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 720 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x768),	/* type offset = 1896 */
/* 724 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x77e),	/* type offset = 1918 */
/* 728 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 730 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 732 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 734 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 736 (parameter changed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x782),	/* type offset = 1922 */
/* 740 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 742 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 744 (parameter props) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x798),	/* type offset = 1944 */
/* 748 (parameter count) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 750 (parameter ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7c0),	/* type offset = 1984 */
/* 754 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 756 (parameter pic) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7c4),	/* type offset = 1988 */
/* 760 (parameter ecReadOnly) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 762 (parameter pEditRecord) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7d6),	/* type offset = 2006 */
/* 766 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 768 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7e8),	/* type offset = 2024 */
/* 772 (parameter pfOk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7fa),	/* type offset = 2042 */
/* 776 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 778 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7fe),	/* type offset = 2046 */
/* 782 (parameter pRangeNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x810),	/* type offset = 2064 */
/* 786 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 788 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x822),	/* type offset = 2082 */
/* 792 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 794 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x834),	/* type offset = 2100 */
/* 798 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x838),	/* type offset = 2104 */
/* 802 (parameter fActivated) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 804 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 806 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x84e),	/* type offset = 2126 */
/* 810 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 812 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 814 (parameter pProfile) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x866),	/* type offset = 2150 */
/* 818 (parameter pcFetch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x87c),	/* type offset = 2172 */
/* 822 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 824 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 826 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 828 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 830 (parameter pdim) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x880),	/* type offset = 2176 */
/* 834 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 836 (parameter pdim) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x892),	/* type offset = 2194 */
/* 840 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 842 (parameter pdimFocus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8a4),	/* type offset = 2212 */
/* 846 (parameter pdimPrevFocus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8b6),	/* type offset = 2230 */
/* 850 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 852 (parameter pic) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8c8),	/* type offset = 2248 */
/* 856 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 858 (parameter pic) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8da),	/* type offset = 2266 */
/* 862 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 864 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 866 (parameter pfAccept) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8ec),	/* type offset = 2284 */
/* 870 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 872 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 874 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 876 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 878 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 880 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 882 (parameter pchText) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8f0),	/* type offset = 2288 */
/* 886 (parameter cchMax) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 888 (parameter pcch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x902),	/* type offset = 2306 */
/* 892 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 894 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 896 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 898 (parameter pchText) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x910),	/* type offset = 2320 */
/* 902 (parameter cch) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 904 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 906 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 908 (parameter ppDataObject) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x926),	/* type offset = 2342 */
/* 912 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 914 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 916 (parameter rguidService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x92a),	/* type offset = 2346 */
/* 920 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x92e),	/* type offset = 2350 */
/* 924 (parameter ppunk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x938),	/* type offset = 2360 */
/* 928 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 930 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 932 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 934 (parameter pDataObject) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x93c),	/* type offset = 2364 */
/* 938 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 940 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 942 (parameter cchReq) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 944 (parameter pcch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x94e),	/* type offset = 2382 */
/* 948 (parameter pHalt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x974),	/* type offset = 2420 */
/* 952 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 954 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 956 (parameter cchReq) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 958 (parameter pcch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x978),	/* type offset = 2424 */
/* 962 (parameter pHalt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x98c),	/* type offset = 2444 */
/* 966 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 968 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 970 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x990),	/* type offset = 2448 */
/* 974 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 976 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 978 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 980 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9a2),	/* type offset = 2466 */
/* 984 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 986 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 988 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 990 (parameter dir) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 992 (parameter pfNoRegion) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9b4),	/* type offset = 2484 */
/* 996 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 998 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1000 (parameter dir) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1002 (parameter pfNoRegion) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9b8),	/* type offset = 2488 */
/* 1006 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1008 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1010 (parameter pfEmpty) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9bc),	/* type offset = 2492 */
/* 1014 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1016 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1018 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1020 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1022 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1024 (parameter pWith) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9c0),	/* type offset = 2496 */
/* 1028 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1030 (parameter pfEqual) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9d2),	/* type offset = 2514 */
/* 1034 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1036 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1038 (parameter pWith) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9d6),	/* type offset = 2518 */
/* 1042 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1044 (parameter pfEqual) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9e8),	/* type offset = 2536 */
/* 1048 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1050 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1052 (parameter pWith) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9ec),	/* type offset = 2540 */
/* 1056 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1058 (parameter plResult) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9fe),	/* type offset = 2558 */
/* 1062 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1064 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1066 (parameter pWith) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa02),	/* type offset = 2562 */
/* 1070 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1072 (parameter plResult) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa14),	/* type offset = 2580 */
/* 1076 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1078 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1080 (parameter cchInsert) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1082 (parameter pfInsertOk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa18),	/* type offset = 2584 */
/* 1086 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1088 (parameter pgStart) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa1c),	/* type offset = 2588 */
/* 1092 (parameter pgEnd) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa20),	/* type offset = 2592 */
/* 1096 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1098 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1100 (parameter gStart) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1102 (parameter gEnd) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1104 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1106 (parameter ppClone) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa36),	/* type offset = 2614 */
/* 1110 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1112 (parameter ppContext) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa4c),	/* type offset = 2636 */
/* 1116 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1118 (parameter pacpAnchor) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa50),	/* type offset = 2640 */
/* 1122 (parameter pcch) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa54),	/* type offset = 2644 */
/* 1126 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1128 (parameter acpAnchor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1130 (parameter cch) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1132 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1134 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1136 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1138 (parameter pchText) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa58),	/* type offset = 2648 */
/* 1142 (parameter cch) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1144 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa78),	/* type offset = 2680 */
/* 1148 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1150 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1152 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1154 (parameter pDataObject) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa7c),	/* type offset = 2684 */
/* 1158 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xaa0),	/* type offset = 2720 */
/* 1162 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1164 (parameter pguid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xaa4),	/* type offset = 2724 */
/* 1168 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1170 (parameter pdwReserved) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xaa8),	/* type offset = 2728 */
/* 1174 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1176 (parameter pvarValue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xea8),	/* type offset = 3752 */
/* 1180 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1182 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1184 (parameter pRangeNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xeac),	/* type offset = 3756 */
/* 1188 (parameter pfAccept) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xebe),	/* type offset = 3774 */
/* 1192 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1194 (parameter pRangeNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xec2),	/* type offset = 3778 */
/* 1198 (parameter pfFree) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xed4),	/* type offset = 3796 */
/* 1202 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1204 (parameter pRangeThis) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xed8),	/* type offset = 3800 */
/* 1208 (parameter pRangeNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xeea),	/* type offset = 3818 */
/* 1212 (parameter ppPropStore) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf0e),	/* type offset = 3854 */
/* 1216 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1218 (parameter pPropStore) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf24),	/* type offset = 3876 */
/* 1222 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1224 (parameter pclsid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf28),	/* type offset = 3880 */
/* 1228 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1230 (parameter pStream) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf2c),	/* type offset = 3884 */
/* 1234 (parameter pcb) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf3e),	/* type offset = 3902 */
/* 1238 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1240 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf54),	/* type offset = 3924 */
/* 1244 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1246 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1248 (parameter rgCompositionView) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf6a),	/* type offset = 3946 */
/* 1252 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf80),	/* type offset = 3968 */
/* 1256 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1258 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1260 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1262 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1264 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf96),	/* type offset = 3990 */
/* 1268 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1270 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1272 (parameter pNewStart) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf9a),	/* type offset = 3994 */
/* 1276 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1278 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1280 (parameter pNewEnd) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfac),	/* type offset = 4012 */
/* 1284 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1286 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1288 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1290 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1292 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfbe),	/* type offset = 4030 */
/* 1296 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1298 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1300 (parameter pCompositionRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfd0),	/* type offset = 4048 */
/* 1304 (parameter pSink) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfe2),	/* type offset = 4066 */
/* 1308 (parameter ppComposition) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1006),	/* type offset = 4102 */
/* 1312 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1314 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x101c),	/* type offset = 4124 */
/* 1318 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1320 (parameter ecRead) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1322 (parameter pTestRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1020),	/* type offset = 4128 */
/* 1326 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1044),	/* type offset = 4164 */
/* 1330 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1332 (parameter ecWrite) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1334 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1048),	/* type offset = 4168 */
/* 1338 (parameter pSink) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x105a),	/* type offset = 4186 */
/* 1342 (parameter ppComposition) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x107e),	/* type offset = 4222 */
/* 1346 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1348 (parameter pComposition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1082),	/* type offset = 4226 */
/* 1352 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1354 (parameter pHdr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10a6),	/* type offset = 4262 */
/* 1358 (parameter ppStream) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10bc),	/* type offset = 4284 */
/* 1362 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1364 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1366 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1368 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1370 (parameter rguidAttribute) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10c0),	/* type offset = 4288 */
/* 1374 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1376 (parameter pProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10c4),	/* type offset = 4292 */
/* 1380 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10d6),	/* type offset = 4310 */
/* 1384 (parameter pHdr) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10e8),	/* type offset = 4328 */
/* 1388 (parameter pStream) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10ec),	/* type offset = 4332 */
/* 1392 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1394 (parameter pProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10fe),	/* type offset = 4350 */
/* 1398 (parameter pHdr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1122),	/* type offset = 4386 */
/* 1402 (parameter pStream) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1126),	/* type offset = 4390 */
/* 1406 (parameter pLoader) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1138),	/* type offset = 4408 */
/* 1410 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1412 (parameter pProp) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x114a),	/* type offset = 4426 */
/* 1416 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1418 (parameter acpStart) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1420 (parameter acpEnd) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1422 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x116e),	/* type offset = 4462 */
/* 1426 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1428 (parameter pguid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1172),	/* type offset = 4466 */
/* 1432 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1434 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1436 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1188),	/* type offset = 4488 */
/* 1440 (parameter pTargetRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x118c),	/* type offset = 4492 */
/* 1444 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1446 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1448 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x119e),	/* type offset = 4510 */
/* 1452 (parameter pvarValue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11b0),	/* type offset = 4528 */
/* 1456 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1458 (parameter ppContext) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11c6),	/* type offset = 4550 */
/* 1462 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1464 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1466 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x11ca),	/* type offset = 4554 */
/* 1470 (parameter ppRange) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11ee),	/* type offset = 4590 */
/* 1474 (parameter aPos) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1476 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1478 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1480 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x11f2),	/* type offset = 4594 */
/* 1484 (parameter pPropStore) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1204),	/* type offset = 4612 */
/* 1488 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1490 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1492 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1216),	/* type offset = 4630 */
/* 1496 (parameter pvarValue) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1232),	/* type offset = 4658 */
/* 1500 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1502 (parameter ec) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1504 (parameter pRange) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1236),	/* type offset = 4662 */
/* 1508 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1510 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1512 (parameter pvarValue) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1252),	/* type offset = 4690 */
/* 1516 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1518 (parameter pvarValue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1256),	/* type offset = 4694 */
/* 1522 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1524 (parameter rguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x125a),	/* type offset = 4698 */
/* 1528 (parameter ppcomp) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1270),	/* type offset = 4720 */
/* 1532 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1534 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1536 (parameter rguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1274),	/* type offset = 4724 */
/* 1540 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1542 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x128a),	/* type offset = 4746 */
/* 1546 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1548 (parameter rguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x128e),	/* type offset = 4750 */
/* 1552 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1554 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12a4),	/* type offset = 4772 */
/* 1558 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1560 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1562 (parameter rgContext) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12ba),	/* type offset = 4794 */
/* 1566 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12d0),	/* type offset = 4816 */
/* 1570 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1572 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1574 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1576 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1578 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12e6),	/* type offset = 4838 */
/* 1582 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1584 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1586 (parameter rgDocumentMgr) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12fc),	/* type offset = 4860 */
/* 1590 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1312),	/* type offset = 4882 */
/* 1594 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1596 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1598 (parameter ulCount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1600 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1602 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1604 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1316),	/* type offset = 4886 */
/* 1608 (parameter punk) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x131a),	/* type offset = 4890 */
/* 1612 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1614 (parameter tid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1616 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1320),	/* type offset = 4896 */
/* 1620 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1622 (parameter dwProfileType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1624 (parameter langid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 1626 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1324),	/* type offset = 4900 */
/* 1630 (parameter catid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1328),	/* type offset = 4904 */
/* 1634 (parameter guidProfile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x132c),	/* type offset = 4908 */
/* 1638 (parameter hkl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 1640 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1642 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1644 (parameter range) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1330),	/* type offset = 4912 */
/* 1648 (parameter pSink) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1342),	/* type offset = 4930 */
/* 1652 (parameter pdwCookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1354),	/* type offset = 4948 */
/* 1656 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1658 (parameter dwCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1660 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1662 (parameter range) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1358),	/* type offset = 4952 */
/* 1666 (parameter pSink) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x136a),	/* type offset = 4970 */
/* 1670 (parameter pdwCookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x137c),	/* type offset = 4988 */
/* 1674 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1676 (parameter dwCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1678 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 8 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2) */
        0x5b,	/* FC_END */
/* 20 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff2),	/* Offset= -14 (8) */
/* 24 (unsigned short[]) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x9,	/* Corr desc: field clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 34 (FLAGGED_WORD_BLOB) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xfff2),	/* Offset= -14 (24) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 44 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (34) */
/* 48 (BSTR) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (44) */
/* 58 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff4),	/* Offset= -12 (48) */
/* 62 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffc8),	/* Offset= -56 (8) */
/* 66 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 72 (IID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (66) */
        0x5b,	/* FC_END */
/* 84 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (72) */
/* 88 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
/* 94 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (88) */
/* 98 (IEnumTfFunctionProviders *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe4b24db0),
        NdrFcShort(0x0990),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 116 (IEnumTfFunctionProviders **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (98) */
/* 120 (ITfFunctionProvider *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x101d6610),
        NdrFcShort(0x0990),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 138 (ITfFunctionProvider **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter count, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x29,	/* Corr desc: parameter fetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (120) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 156 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (138) */
/* 160 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 164 (TfClientId *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 168 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 186 (ITfDocumentMgr **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (168) */
/* 190 (IEnumTfDocumentMgrs *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e808),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 208 (IEnumTfDocumentMgrs **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (190) */
/* 212 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 230 (ITfDocumentMgr **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (212) */
/* 234 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 252 (RemotableHandle) */
        0x2a,	/* FC_ENCAPSULATED_UNION */
        0x48,	/* Switch type= FC_LONG */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x2),	/* 2 */
        NdrFcLong(0x48746457),	/* 1215587415 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x52746457),	/* 1383359575 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcShort(0xffff),
/* 272 (wireHWND) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (252) */
/* 276 (HWND) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x1),	/* Function offset= 1 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (272) */
/* 286 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 304 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 322 (ITfDocumentMgr **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (304) */
/* 326 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 330 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 336 (CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (330) */
        0x5b,	/* FC_END */
/* 348 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (336) */
/* 352 (ITfFunctionProvider *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x101d6610),
        NdrFcShort(0x0990),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 370 (ITfFunctionProvider **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (352) */
/* 374 (IEnumTfFunctionProviders *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe4b24db0),
        NdrFcShort(0x0990),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 392 (IEnumTfFunctionProviders **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (374) */
/* 396 (ITfCompartmentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x7dcf57ac),
        NdrFcShort(0x18ad),
        NdrFcShort(0x438b),
        0x82,
        0x4d,
        0x97,
        0x9b,
        0xff,
        0xb7,
        0x4b,
        0x7c,

/* 414 (ITfCompartmentMgr **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (396) */
/* 418 (TfClientId *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 422 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 426 (CLSID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffa4),	/* Offset= -92 (336) */
/* 430 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 448 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (430) */
/* 452 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 470 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 488 (ITfContext **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (470) */
/* 492 (TfEditCookie *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 496 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 514 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 532 (ITfContext **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (514) */
/* 536 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 554 (ITfContext **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (536) */
/* 558 (IEnumTfContexts *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x8f1a7ea6),
        NdrFcShort(0x1654),
        NdrFcShort(0x4502),
        0xa8,
        0x6e,
        0xb2,
        0x90,
        0x23,
        0x44,
        0xd5,
        0x07,

/* 576 (IEnumTfContexts **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (558) */
/* 580 (const POINT) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 588 (const POINT *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff6),	/* Offset= -10 (580) */
/* 592 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 610 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (592) */
/* 614 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 632 (RECT) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 642 (RECT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff4),	/* Offset= -12 (632) */
/* 646 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 650 (RECT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (632) */
/* 654 (HWND) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x1),	/* Function offset= 1 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfe7a),	/* Offset= -390 (272) */
/* 664 (HWND *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff4),	/* Offset= -12 (654) */
/* 668 (IEnumTfContextViews *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xf0c0f8dd),
        NdrFcShort(0xcf38),
        NdrFcShort(0x44e1),
        0xbb,
        0x0f,
        0x68,
        0xcf,
        0x0d,
        0x55,
        0x1c,
        0x78,

/* 686 (IEnumTfContextViews **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (668) */
/* 690 (ITfContextView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x2433bf8e),
        NdrFcShort(0x0f9b),
        NdrFcShort(0x435c),
        0xba,
        0x2c,
        0x18,
        0x06,
        0x11,
        0x97,
        0x8c,
        0x30,

/* 708 (ITfContextView **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter count, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x29,	/* Corr desc: parameter fetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (690) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 726 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (708) */
/* 730 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 734 (IEnumTfProperties *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x19188cb0),
        NdrFcShort(0xaca9),
        NdrFcShort(0x11d2),
        0xaf,
        0xc5,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 752 (IEnumTfProperties **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (734) */
/* 756 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 774 (ITfProperty **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter count, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x29,	/* Corr desc: parameter fetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (756) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 792 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (774) */
/* 796 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 800 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 818 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 836 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 854 (TF_PERSISTENT_PROPERTY_HEADER_ACP) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfcac),	/* Offset= -852 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfdec),	/* Offset= -532 (336) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 872 (TF_PERSISTENT_PROPERTY_HEADER_ACP *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (854) */
/* 876 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 894 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 912 (const TF_PERSISTENT_PROPERTY_HEADER_ACP) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfc72),	/* Offset= -910 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfdb2),	/* Offset= -590 (336) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 930 (const TF_PERSISTENT_PROPERTY_HEADER_ACP *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (912) */
/* 934 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 952 (ITfPersistentPropertyLoaderACP *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x4ef89150),
        NdrFcShort(0x0807),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 970 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 988 (ITfRangeACP *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x057a6296),
        NdrFcShort(0x029b),
        NdrFcShort(0x4154),
        0xb7,
        0x9a,
        0x0d,
        0x46,
        0x1d,
        0x4e,
        0xa9,
        0x4c,

/* 1006 (ITfRangeACP **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (988) */
/* 1010 (ITfEditSession *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e803),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1028 (HRESULT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1032 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1036 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1054 (TF_SELECTIONSTYLE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1060) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1066 (TF_SELECTION) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1072) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (1036) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (1054) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1084 (TF_SELECTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x28),	/* offset = 40 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1066) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1102 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1084) */
/* 1106 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1110 (const TF_SELECTION) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1116) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffac),	/* Offset= -84 (1036) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffba),	/* Offset= -70 (1054) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1128 (const TF_SELECTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1110) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1146 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1128) */
/* 1150 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1168 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1150) */
/* 1172 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1190 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1172) */
/* 1194 (ITfContextView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x2433bf8e),
        NdrFcShort(0x0f9b),
        NdrFcShort(0x435c),
        0xba,
        0x2c,
        0x18,
        0x06,
        0x11,
        0x97,
        0x8c,
        0x30,

/* 1212 (ITfContextView **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1194) */
/* 1216 (IEnumTfContextViews *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xf0c0f8dd),
        NdrFcShort(0xcf38),
        NdrFcShort(0x44e1),
        0xbb,
        0x0f,
        0x68,
        0xcf,
        0x0d,
        0x55,
        0x1c,
        0x78,

/* 1234 (IEnumTfContextViews **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1216) */
/* 1238 (TF_STATUS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1246 (TF_STATUS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff6),	/* Offset= -10 (1238) */
/* 1250 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb24),	/* Offset= -1244 (8) */
/* 1254 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 1272 (ITfProperty **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1254) */
/* 1276 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb0a),	/* Offset= -1270 (8) */
/* 1280 (ITfReadOnlyProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x17d49a3d),
        NdrFcShort(0xf8b8),
        NdrFcShort(0x4b2f),
        0xb2,
        0x54,
        0x52,
        0x31,
        0x9d,
        0xd6,
        0x4c,
        0x53,

/* 1298 (ITfReadOnlyProperty **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1280) */
/* 1302 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1308 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1302) */
        0x5b,	/* FC_END */
/* 1320 (const GUID **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cProp, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe6),	/* Offset= -26 (1308) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1338 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1320) */
/* 1342 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1348 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1342) */
        0x5b,	/* FC_END */
/* 1360 (const GUID **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cAppProp, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe6),	/* Offset= -26 (1348) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1378 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1360) */
/* 1382 (ITfReadOnlyProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x17d49a3d),
        NdrFcShort(0xf8b8),
        NdrFcShort(0x4b2f),
        0xb2,
        0x54,
        0x52,
        0x31,
        0x9d,
        0xd6,
        0x4c,
        0x53,

/* 1400 (ITfReadOnlyProperty **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1382) */
/* 1404 (IEnumTfProperties *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x19188cb0),
        NdrFcShort(0xaca9),
        NdrFcShort(0x11d2),
        0xaf,
        0xc5,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 1422 (IEnumTfProperties **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1404) */
/* 1426 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1444 (ITfDocumentMgr **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1426) */
/* 1448 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1466 (ITfRangeBackup *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x463a506d),
        NdrFcShort(0x6992),
        NdrFcShort(0x49d2),
        0x9b,
        0x88,
        0x93,
        0xd5,
        0x5e,
        0x70,
        0xbb,
        0x16,

/* 1484 (ITfRangeBackup **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1466) */
/* 1488 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfa76),	/* Offset= -1418 (72) */
/* 1492 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 1498 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1502 (IEnumTfInputProcessorProfiles *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x71c6e74d),
        NdrFcShort(0x0f28),
        NdrFcShort(0x11d8),
        0xa8,
        0x2a,
        0x00,
        0x06,
        0x5b,
        0x84,
        0x43,
        0x5c,

/* 1520 (IEnumTfInputProcessorProfiles **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1502) */
/* 1524 (TF_INPUTPROCESSORPROFILE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1530) */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x38,	/* FC_ALIGNM4 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfb4f),	/* Offset= -1201 (336) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfa03),	/* Offset= -1533 (8) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf9ff),	/* Offset= -1537 (8) */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 1554 (TF_INPUTPROCESSORPROFILE *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x29,	/* Corr desc: parameter pcFetch, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd4),	/* Offset= -44 (1524) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1572 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1554) */
/* 1576 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1580 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb22),	/* Offset= -1246 (336) */
/* 1584 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9d6),	/* Offset= -1578 (8) */
/* 1588 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb1a),	/* Offset= -1254 (336) */
/* 1592 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9ce),	/* Offset= -1586 (8) */
/* 1596 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb12),	/* Offset= -1262 (336) */
/* 1600 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9c6),	/* Offset= -1594 (8) */
/* 1604 (TF_INPUTPROCESSORPROFILE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffae),	/* Offset= -82 (1524) */
/* 1608 (IEnumTfInputProcessorProfiles *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x71c6e74d),
        NdrFcShort(0x0f28),
        NdrFcShort(0x11d8),
        0xa8,
        0x2a,
        0x00,
        0x06,
        0x5b,
        0x84,
        0x43,
        0x5c,

/* 1626 (IEnumTfInputProcessorProfiles **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1608) */
/* 1630 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfaf0),	/* Offset= -1296 (336) */
/* 1634 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfaec),	/* Offset= -1300 (336) */
/* 1638 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9a0),	/* Offset= -1632 (8) */
/* 1642 (const WCHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x29,	/* Corr desc: parameter cchDesc, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 1652 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1642) */
/* 1656 (const WCHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x29,	/* Corr desc: parameter cchFile, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x38),	/* offset = 56 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 1666 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1656) */
/* 1670 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfac8),	/* Offset= -1336 (336) */
/* 1674 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf97c),	/* Offset= -1668 (8) */
/* 1678 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf978),	/* Offset= -1672 (8) */
/* 1682 (TF_INPUTPROCESSORPROFILE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff60),	/* Offset= -160 (1524) */
/* 1686 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf970),	/* Offset= -1680 (8) */
/* 1690 (BSTR *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf994),	/* Offset= -1644 (48) */
/* 1694 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x2),	/* 2 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcShort(0xffff),
/* 1712 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x6,	/* Corr desc: field type, FC_SHORT */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffe8),	/* Offset= -24 (1694) */
/* 1720 (TF_DA_COLOR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1726) */
        0x0d,	/* FC_ENUM16 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (1712) */
        0x5b,	/* FC_END */
/* 1734 (TF_DISPLAYATTRIBUTE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1740) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1720) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe4),	/* Offset= -28 (1720) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1720) */
        0x0d,	/* FC_ENUM16 */
        0x5b,	/* FC_END */
/* 1758 (TF_DISPLAYATTRIBUTE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffe6),	/* Offset= -26 (1734) */
/* 1762 (const TF_DISPLAYATTRIBUTE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1768) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcc),	/* Offset= -52 (1720) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffc8),	/* Offset= -56 (1720) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffc2),	/* Offset= -62 (1720) */
        0x0d,	/* FC_ENUM16 */
        0x5b,	/* FC_END */
/* 1786 (const TF_DISPLAYATTRIBUTE *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe6),	/* Offset= -26 (1762) */
/* 1790 (IEnumTfDisplayAttributeInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x7cef04d7),
        NdrFcShort(0xcb75),
        NdrFcShort(0x4e80),
        0xa7,
        0xab,
        0x5f,
        0x5b,
        0xc7,
        0xd3,
        0x32,
        0xde,

/* 1808 (IEnumTfDisplayAttributeInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1790) */
/* 1812 (ITfDisplayAttributeInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x70528852),
        NdrFcShort(0x2f26),
        NdrFcShort(0x4aea),
        0x8c,
        0x96,
        0x21,
        0x51,
        0x50,
        0x57,
        0x89,
        0x32,

/* 1830 (ITfDisplayAttributeInfo **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1812) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1848 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1830) */
/* 1852 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1856 (IEnumTfRanges *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xf99d3f40),
        NdrFcShort(0x8e32),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 1874 (IEnumTfRanges **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1856) */
/* 1878 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 1896 (ITfRange **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1878) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1914 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1896) */
/* 1918 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1922 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1926 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1932 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1926) */
        0x5b,	/* FC_END */
/* 1944 (const GUID **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter count, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe6),	/* Offset= -26 (1932) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1962 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1944) */
/* 1966 (IEnumTfRanges *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xf99d3f40),
        NdrFcShort(0x8e32),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 1984 (IEnumTfRanges **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1966) */
/* 1988 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2006 (ITfEditRecord *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x42d4d099),
        NdrFcShort(0x7c1a),
        NdrFcShort(0x4a89),
        0xb8,
        0x36,
        0x6c,
        0x6f,
        0x22,
        0x16,
        0x0d,
        0xf0,

/* 2024 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 2042 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2046 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 2064 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2082 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 2100 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf91a),	/* Offset= -1766 (336) */
/* 2104 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf7ce),	/* Offset= -2098 (8) */
/* 2108 (IEnumTfLanguageProfiles *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x3d61bf11),
        NdrFcShort(0xac5f),
        NdrFcShort(0x42c8),
        0xa4,
        0xcb,
        0x93,
        0x1b,
        0xcc,
        0x28,
        0xc7,
        0x44,

/* 2126 (IEnumTfLanguageProfiles **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2108) */
/* 2130 (TF_LANGUAGEPROFILE) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x38),	/* 56 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf8f8),	/* Offset= -1800 (336) */
        0x06,	/* FC_SHORT */
        0x38,	/* FC_ALIGNM4 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf7aa),	/* Offset= -2134 (8) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf7a5),	/* Offset= -2139 (8) */
        0x5b,	/* FC_END */
/* 2150 (TF_LANGUAGEPROFILE *) */
        0x1c,	/* FC_CVARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x38),	/* 56 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x29,	/* Corr desc: parameter pcFetch, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (2130) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2168 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (2150) */
/* 2172 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2176 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2194 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2212 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2230 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2248 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2266 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2284 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2288 (WCHAR *) */
        0x1c,	/* FC_CVARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x29,	/* Corr desc: parameter cchMax, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x29,	/* Corr desc: parameter pcch, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x28),	/* offset = 40 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 2302 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff0),	/* Offset= -16 (2288) */
/* 2306 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2310 (const WCHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x28,	/* Corr desc: parameter cch, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 2320 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (2310) */
/* 2324 (IDataObject *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000010e),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2342 (IDataObject **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2324) */
/* 2346 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf6dc),	/* Offset= -2340 (8) */
/* 2350 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf718),	/* Offset= -2280 (72) */
/* 2354 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
/* 2360 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (2354) */
/* 2364 (IDataObject *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000010e),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2382 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2386 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2404 (const TF_HALTCOND) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (2410) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe4),	/* Offset= -28 (2386) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2420 (const TF_HALTCOND *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (2404) */
/* 2424 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2428 (const TF_HALTCOND) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (2434) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcc),	/* Offset= -52 (2386) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2444 (const TF_HALTCOND *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (2428) */
/* 2448 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2466 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2484 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2488 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2492 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2496 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2514 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2518 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2536 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2540 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2558 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2562 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2580 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2584 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2588 (TfGravity *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0d,	/* FC_ENUM16 */
        0x5c,	/* FC_PAD */
/* 2592 (TfGravity *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0d,	/* FC_ENUM16 */
        0x5c,	/* FC_PAD */
/* 2596 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2614 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2596) */
/* 2618 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2636 (ITfContext **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2618) */
/* 2640 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2644 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2648 (const WCHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x28,	/* Corr desc: parameter cch, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 2658 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (2648) */
/* 2662 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2680 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2662) */
/* 2684 (IDataObject *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000010e),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2702 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 2720 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2702) */
/* 2724 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf562),	/* Offset= -2718 (8) */
/* 2728 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2732 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf574),	/* Offset= -2700 (34) */
/* 2736 (CY) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 2742 (DECIMAL) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x08,	/* FC_LONG */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 2752 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2770 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2788 (wireBSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf530),	/* Offset= -2768 (34) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2806 (SAFEARR_BSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2818) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2818 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2788) */
/* 2822 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2840 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (2822) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2858 (SAFEARR_UNKNOWN) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2870) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2870 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2840) */
/* 2874 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2892 (IDispatch **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (2874) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2910 (SAFEARR_DISPATCH) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2922) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2922 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2892) */
/* 2926 (wireVARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x30a),	/* Offset= 778 (3718) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2944 (SAFEARR_VARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2956) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2956 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2926) */
/* 2960 (IRecordInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000002f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2978 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2988 (struct _wireBRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (3004) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (2960) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 3004 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2978) */
/* 3008 (wireBRECORD *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (2988) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3026 (SAFEARR_BRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (3038) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 3038 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (3008) */
/* 3042 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3060 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (3042) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3078 (SAFEARR_HAVEIID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (3094) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf435),	/* Offset= -3019 (72) */
        0x5b,	/* FC_END */
/* 3094 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffdc),	/* Offset= -36 (3060) */
/* 3098 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3108 (BYTE_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (3120) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 3120 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (3098) */
/* 3124 (unsigned short *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 3134 (WORD_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (3146) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 3146 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (3124) */
/* 3150 (ULONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3160 (DWORD_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (3172) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 3172 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (3150) */
/* 3176 (hyper *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 3186 (HYPER_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (3198) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 3198 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (3176) */
/* 3202 (SAFEARRAYUNION) */
        0x2a,	/* FC_ENCAPSULATED_UNION */
        0x89,	/* Switch type= FC_ULONG */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0xa),	/* 10 */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xfe6a),	/* Offset= -406 (2806) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfe98),	/* Offset= -360 (2858) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfec6),	/* Offset= -314 (2910) */
        NdrFcLong(0xc),	/* 12 */
        NdrFcShort(0xfee2),	/* Offset= -286 (2944) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xff2e),	/* Offset= -210 (3026) */
        NdrFcLong(0x800d),	/* 32781 */
        NdrFcShort(0xff5c),	/* Offset= -164 (3078) */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0xff74),	/* Offset= -140 (3108) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xff88),	/* Offset= -120 (3134) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xff9c),	/* Offset= -100 (3160) */
        NdrFcLong(0x14),	/* 20 */
        NdrFcShort(0xffb0),	/* Offset= -80 (3186) */
        NdrFcShort(0xffff),
/* 3270 (SAFEARRAYBOUND) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3278 (SAFEARRAYBOUND[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x7,	/* Corr desc: field cDims, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xffc8),	/* offset = -56 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffee),	/* Offset= -18 (3270) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3292 (struct _wireSAFEARRAY) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x38),	/* 56 */
        NdrFcShort(0xffee),	/* Offset= -18 (3278) */
        NdrFcShort(0x0),	/* Offset= 0 (3298) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff97),	/* Offset= -105 (3202) */
        0x5b,	/* FC_END */
/* 3310 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (3292) */
/* 3314 (signed char *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 3318 (USHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x07,	/* FC_USHORT */
        0x5c,	/* FC_PAD */
/* 3322 (ULONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 3326 (INT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3330 (UINT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 3334 (BYTE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 3338 (SHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 3342 (LONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3346 (FLOAT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0a,	/* FC_FLOAT */
        0x5c,	/* FC_PAD */
/* 3350 (DOUBLE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 3354 (VARIANT_BOOL *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 3358 (SCODE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3362 (DATE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 3366 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf2fa),	/* Offset= -3334 (34) */
/* 3370 (wireBSTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3366) */
/* 3374 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x156),	/* Offset= 342 (3718) */
/* 3378 (wireVARIANT *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3374) */
/* 3382 (CY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd78),	/* Offset= -648 (2736) */
/* 3386 (DECIMAL *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd7a),	/* Offset= -646 (2742) */
/* 3390 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3408 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3390) */
/* 3412 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3430 (IDispatch **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3412) */
/* 3434 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff70),	/* Offset= -144 (3292) */
/* 3438 (wireSAFEARRAY *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3434) */
/* 3442 (wireBRECORD) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfe38),	/* Offset= -456 (2988) */
/* 3446 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x2b),	/* 43 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x12),	/* 18 */
        NdrFcShort(0x8007),	/* Simple arm type: FC_USHORT */
        NdrFcLong(0x13),	/* 19 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x16),	/* 22 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x17),	/* 23 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x11),	/* 17 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x800a),	/* Simple arm type: FC_FLOAT */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0xb),	/* 11 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0xa),	/* 10 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xff4e),	/* Offset= -178 (3366) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xfcd2),	/* Offset= -814 (2736) */
        NdrFcLong(0xe),	/* 14 */
        NdrFcShort(0xfcd2),	/* Offset= -814 (2742) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfcd6),	/* Offset= -810 (2752) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfce2),	/* Offset= -798 (2770) */
        NdrFcLong(0x2000),	/* 8192 */
        NdrFcShort(0xff74),	/* Offset= -140 (3434) */
        NdrFcLong(0x4010),	/* 16400 */
        NdrFcShort(0xfef6),	/* Offset= -266 (3314) */
        NdrFcLong(0x4012),	/* 16402 */
        NdrFcShort(0xfef4),	/* Offset= -268 (3318) */
        NdrFcLong(0x4013),	/* 16403 */
        NdrFcShort(0xfef2),	/* Offset= -270 (3322) */
        NdrFcLong(0x4016),	/* 16406 */
        NdrFcShort(0xfef0),	/* Offset= -272 (3326) */
        NdrFcLong(0x4017),	/* 16407 */
        NdrFcShort(0xfeee),	/* Offset= -274 (3330) */
        NdrFcLong(0x4011),	/* 16401 */
        NdrFcShort(0xfeec),	/* Offset= -276 (3334) */
        NdrFcLong(0x4002),	/* 16386 */
        NdrFcShort(0xfeea),	/* Offset= -278 (3338) */
        NdrFcLong(0x4003),	/* 16387 */
        NdrFcShort(0xfee8),	/* Offset= -280 (3342) */
        NdrFcLong(0x4004),	/* 16388 */
        NdrFcShort(0xfee6),	/* Offset= -282 (3346) */
        NdrFcLong(0x4005),	/* 16389 */
        NdrFcShort(0xfee4),	/* Offset= -284 (3350) */
        NdrFcLong(0x400b),	/* 16395 */
        NdrFcShort(0xfee2),	/* Offset= -286 (3354) */
        NdrFcLong(0x400a),	/* 16394 */
        NdrFcShort(0xfee0),	/* Offset= -288 (3358) */
        NdrFcLong(0x4007),	/* 16391 */
        NdrFcShort(0xfede),	/* Offset= -290 (3362) */
        NdrFcLong(0x4008),	/* 16392 */
        NdrFcShort(0xfee0),	/* Offset= -288 (3370) */
        NdrFcLong(0x400c),	/* 16396 */
        NdrFcShort(0xfee2),	/* Offset= -286 (3378) */
        NdrFcLong(0x4006),	/* 16390 */
        NdrFcShort(0xfee0),	/* Offset= -288 (3382) */
        NdrFcLong(0x400e),	/* 16398 */
        NdrFcShort(0xfede),	/* Offset= -290 (3386) */
        NdrFcLong(0x400d),	/* 16397 */
        NdrFcShort(0xfeee),	/* Offset= -274 (3408) */
        NdrFcLong(0x4009),	/* 16393 */
        NdrFcShort(0xfefe),	/* Offset= -258 (3430) */
        NdrFcLong(0x6000),	/* 24576 */
        NdrFcShort(0xff00),	/* Offset= -256 (3438) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xfefe),	/* Offset= -258 (3442) */
        NdrFcLong(0x4024),	/* 16420 */
        NdrFcShort(0xfef8),	/* Offset= -264 (3442) */
        NdrFcShort(0xffff),
/* 3710 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x7,	/* Corr desc: field vt, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xfef2),	/* Offset= -270 (3446) */
/* 3718 (struct _wireVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (3724) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (3710) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3738 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (3718) */
/* 3742 (VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x2),	/* Function offset= 2 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (3738) */
/* 3752 (VARIANT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff4),	/* Offset= -12 (3742) */
/* 3756 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 3774 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3778 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 3796 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3800 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 3818 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 3836 (ITfPropertyStore *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x6834b120),
        NdrFcShort(0x88cb),
        NdrFcShort(0x11d2),
        0xbf,
        0x45,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 3854 (ITfPropertyStore **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3836) */
/* 3858 (ITfPropertyStore *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x6834b120),
        NdrFcShort(0x88cb),
        NdrFcShort(0x11d2),
        0xbf,
        0x45,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 3876 (ITfPropertyStore **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3858) */
/* 3880 (CLSID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf226),	/* Offset= -3546 (336) */
/* 3884 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3902 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 3906 (IEnumITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x5efd22ba),
        NdrFcShort(0x7838),
        NdrFcShort(0x46cb),
        0x88,
        0xe2,
        0xca,
        0xdb,
        0x14,
        0x12,
        0x4f,
        0x8f,

/* 3924 (IEnumITfCompositionView **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3906) */
/* 3928 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 3946 (ITfCompositionView **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (3928) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3964 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (3946) */
/* 3968 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 3972 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 3990 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3972) */
/* 3994 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4012 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4030 (ITfComposition *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x20168d64),
        NdrFcShort(0x5a8f),
        NdrFcShort(0x4a5a),
        0xb7,
        0xbd,
        0xcf,
        0xa2,
        0x9f,
        0x4d,
        0x0f,
        0xd9,

/* 4048 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4066 (ITfCompositionSink *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa781718c),
        NdrFcShort(0x579a),
        NdrFcShort(0x4b15),
        0xa2,
        0x80,
        0x32,
        0xb8,
        0x57,
        0x7a,
        0xcc,
        0x5e,

/* 4084 (ITfComposition *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x20168d64),
        NdrFcShort(0x5a8f),
        NdrFcShort(0x4a5a),
        0xb7,
        0xbd,
        0xcf,
        0xa2,
        0x9f,
        0x4d,
        0x0f,
        0xd9,

/* 4102 (ITfComposition **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4084) */
/* 4106 (IEnumITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x5efd22ba),
        NdrFcShort(0x7838),
        NdrFcShort(0x46cb),
        0x88,
        0xe2,
        0xca,
        0xdb,
        0x14,
        0x12,
        0x4f,
        0x8f,

/* 4124 (IEnumITfCompositionView **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4106) */
/* 4128 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4146 (IEnumITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x5efd22ba),
        NdrFcShort(0x7838),
        NdrFcShort(0x46cb),
        0x88,
        0xe2,
        0xca,
        0xdb,
        0x14,
        0x12,
        0x4f,
        0x8f,

/* 4164 (IEnumITfCompositionView **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4146) */
/* 4168 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 4186 (ITfCompositionSink *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa781718c),
        NdrFcShort(0x579a),
        NdrFcShort(0x4b15),
        0xa2,
        0x80,
        0x32,
        0xb8,
        0x57,
        0x7a,
        0xcc,
        0x5e,

/* 4204 (ITfComposition *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x20168d64),
        NdrFcShort(0x5a8f),
        NdrFcShort(0x4a5a),
        0xb7,
        0xbd,
        0xcf,
        0xa2,
        0x9f,
        0x4d,
        0x0f,
        0xd9,

/* 4222 (ITfComposition **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4204) */
/* 4226 (ITfCompositionView *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xd7540241),
        NdrFcShort(0xf9a1),
        NdrFcShort(0x4364),
        0xbe,
        0xfc,
        0xdb,
        0xcd,
        0x2c,
        0x43,
        0x95,
        0xb7,

/* 4244 (const TF_PERSISTENT_PROPERTY_HEADER_ACP) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xef6e),	/* Offset= -4242 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf0ae),	/* Offset= -3922 (336) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4262 (const TF_PERSISTENT_PROPERTY_HEADER_ACP *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4244) */
/* 4266 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4284 (IStream **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4266) */
/* 4288 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xef46),	/* Offset= -4282 (8) */
/* 4292 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4310 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4328 (TF_PERSISTENT_PROPERTY_HEADER_ACP *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf26c),	/* Offset= -3476 (854) */
/* 4332 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4350 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4368 (const TF_PERSISTENT_PROPERTY_HEADER_ACP) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xeef2),	/* Offset= -4366 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf032),	/* Offset= -4046 (336) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4386 (const TF_PERSISTENT_PROPERTY_HEADER_ACP *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4368) */
/* 4390 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4408 (ITfPersistentPropertyLoaderACP *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x4ef89150),
        NdrFcShort(0x0807),
        NdrFcShort(0x11d3),
        0x8d,
        0xf0,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4426 (ITfProperty *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xe2449660),
        NdrFcShort(0x9542),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4444 (ITfRangeACP *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x057a6296),
        NdrFcShort(0x029b),
        NdrFcShort(0x4154),
        0xb7,
        0x9a,
        0x0d,
        0x46,
        0x1d,
        0x4e,
        0xa9,
        0x4c,

/* 4462 (ITfRangeACP **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4444) */
/* 4466 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xee94),	/* Offset= -4460 (8) */
/* 4470 (IEnumTfRanges *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xf99d3f40),
        NdrFcShort(0x8e32),
        NdrFcShort(0x11d2),
        0xbf,
        0x46,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4488 (IEnumTfRanges **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4470) */
/* 4492 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4510 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4528 (VARIANT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfcec),	/* Offset= -788 (3742) */
/* 4532 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4550 (ITfContext **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4532) */
/* 4554 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4572 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4590 (ITfRange **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4572) */
/* 4594 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4612 (ITfPropertyStore *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x6834b120),
        NdrFcShort(0x88cb),
        NdrFcShort(0x11d2),
        0xbf,
        0x45,
        0x00,
        0x10,
        0x5a,
        0x27,
        0x99,
        0xb5,

/* 4630 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4648 (const VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x2),	/* Function offset= 2 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfc6a),	/* Offset= -918 (3738) */
/* 4658 (const VARIANT *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4648) */
/* 4662 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4680 (const VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x2),	/* Function offset= 2 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfc4a),	/* Offset= -950 (3738) */
/* 4690 (const VARIANT *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4680) */
/* 4694 (VARIANT *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfc46),	/* Offset= -954 (3742) */
/* 4698 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xedac),	/* Offset= -4692 (8) */
/* 4702 (ITfCompartment *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xbb08f7a9),
        NdrFcShort(0x607a),
        NdrFcShort(0x4384),
        0x86,
        0x23,
        0x05,
        0x68,
        0x92,
        0xb6,
        0x43,
        0x71,

/* 4720 (ITfCompartment **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4702) */
/* 4724 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xed92),	/* Offset= -4718 (8) */
/* 4728 (IEnumGUID *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0002e000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4746 (IEnumGUID **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4728) */
/* 4750 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xed78),	/* Offset= -4744 (8) */
/* 4754 (IEnumTfContexts *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x8f1a7ea6),
        NdrFcShort(0x1654),
        NdrFcShort(0x4502),
        0xa8,
        0x6e,
        0xb2,
        0x90,
        0x23,
        0x44,
        0xd5,
        0x07,

/* 4772 (IEnumTfContexts **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4754) */
/* 4776 (ITfContext *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7fd),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4794 (ITfContext **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (4776) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4812 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4794) */
/* 4816 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4820 (IEnumTfDocumentMgrs *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e808),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4838 (IEnumTfDocumentMgrs **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4820) */
/* 4842 (ITfDocumentMgr *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7f4),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4860 (ITfDocumentMgr **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter ulCount, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x29,	/* Corr desc: parameter pcFetched, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (4842) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4878 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4860) */
/* 4882 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4886 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xed30),	/* Offset= -4816 (72) */
/* 4890 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
/* 4896 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xed26),	/* Offset= -4826 (72) */
/* 4900 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xee2a),	/* Offset= -4566 (336) */
/* 4904 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xecde),	/* Offset= -4898 (8) */
/* 4908 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xecda),	/* Offset= -4902 (8) */
/* 4912 (ITfRange *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xaa80e7ff),
        NdrFcShort(0x2021),
        NdrFcShort(0x11d2),
        0x93,
        0xe0,
        0x00,
        0x60,
        0xb0,
        0x67,
        0xb8,
        0x6e,

/* 4930 (ITfMouseSink *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa1adaaa2),
        NdrFcShort(0x3a24),
        NdrFcShort(0x449d),
        0xac,
        0x96,
        0x51,
        0x83,
        0xe7,
        0xf5,
        0xc2,
        0x17,

/* 4948 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4952 (ITfRangeACP *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x057a6296),
        NdrFcShort(0x029b),
        NdrFcShort(0x4154),
        0xb7,
        0x9a,
        0x0d,
        0x46,
        0x1d,
        0x4e,
        0xa9,
        0x4c,

/* 4970 (ITfMouseSink *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa1adaaa2),
        NdrFcShort(0x3a24),
        NdrFcShort(0x449d),
        0xac,
        0x96,
        0x51,
        0x83,
        0xe7,
        0xf5,
        0xc2,
        0x17,

/* 4988 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
        0x0
    }
};

static const CInterfaceProxyVtbl* const _msctfp_ProxyVtblList[] =
{
    (const CInterfaceProxyVtbl*)&_ITfThreadMgrProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITextStoreACPServicesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfEditSessionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfDocumentMgrsProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfTextEditSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfThreadMgrEventSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextOwnerCompositionServicesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfFunctionProviderProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfLanguageProfilesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfLanguageProfileNotifySinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfPropertyStoreProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextOwnerServicesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfSourceProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfReadOnlyPropertyProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfRangesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextOwnerCompositionSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompositionViewProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfInputProcessorProfileMgrProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfInputProcessorProfilesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfInputProcessorProfileActivationSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfPersistentPropertyLoaderACPProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfDisplayAttributeInfoProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompartmentEventSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfPropertyProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompositionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfRangeBackupProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfActiveLanguageProfileNotifySinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompositionSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextViewProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfRangeACPProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfEditRecordProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfSourceSingleProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfContextsProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompartmentProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfCompartmentMgrProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextCompositionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfFunctionProvidersProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfPropertiesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfInsertAtSelectionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumITfCompositionViewProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfMouseTrackerProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfDisplayAttributeInfoProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumTfContextViewsProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfMouseTrackerACPProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfThreadMgrExProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfDocumentMgrProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfContextProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ITfRangeProxyVtbl,
    0
};

static const CInterfaceStubVtbl* const _msctfp_StubVtblList[] =
{
    &_ITfThreadMgrStubVtbl,
    &_ITextStoreACPServicesStubVtbl,
    &_ITfEditSessionStubVtbl,
    &_IEnumTfDocumentMgrsStubVtbl,
    &_ITfTextEditSinkStubVtbl,
    &_ITfThreadMgrEventSinkStubVtbl,
    &_ITfContextOwnerCompositionServicesStubVtbl,
    &_ITfFunctionProviderStubVtbl,
    &_IEnumTfLanguageProfilesStubVtbl,
    &_ITfLanguageProfileNotifySinkStubVtbl,
    &_ITfPropertyStoreStubVtbl,
    &_ITfContextOwnerServicesStubVtbl,
    &_ITfSourceStubVtbl,
    &_ITfReadOnlyPropertyStubVtbl,
    &_IEnumTfRangesStubVtbl,
    &_ITfContextOwnerCompositionSinkStubVtbl,
    &_ITfCompositionViewStubVtbl,
    &_ITfInputProcessorProfileMgrStubVtbl,
    &_IEnumTfInputProcessorProfilesStubVtbl,
    &_ITfInputProcessorProfileActivationSinkStubVtbl,
    &_ITfPersistentPropertyLoaderACPStubVtbl,
    &_ITfDisplayAttributeInfoStubVtbl,
    &_ITfCompartmentEventSinkStubVtbl,
    &_ITfPropertyStubVtbl,
    &_ITfCompositionStubVtbl,
    &_ITfRangeBackupStubVtbl,
    &_ITfActiveLanguageProfileNotifySinkStubVtbl,
    &_ITfCompositionSinkStubVtbl,
    &_ITfContextViewStubVtbl,
    &_ITfRangeACPStubVtbl,
    &_ITfEditRecordStubVtbl,
    &_ITfSourceSingleStubVtbl,
    &_IEnumTfContextsStubVtbl,
    &_ITfCompartmentStubVtbl,
    &_ITfCompartmentMgrStubVtbl,
    &_ITfContextCompositionStubVtbl,
    &_IEnumTfFunctionProvidersStubVtbl,
    &_IEnumTfPropertiesStubVtbl,
    &_ITfInsertAtSelectionStubVtbl,
    &_IEnumITfCompositionViewStubVtbl,
    &_ITfMouseTrackerStubVtbl,
    &_IEnumTfDisplayAttributeInfoStubVtbl,
    &_IEnumTfContextViewsStubVtbl,
    &_ITfMouseTrackerACPStubVtbl,
    &_ITfThreadMgrExStubVtbl,
    &_ITfDocumentMgrStubVtbl,
    &_ITfContextStubVtbl,
    &_ITfRangeStubVtbl,
    0
};

static PCInterfaceName const _msctfp_InterfaceNamesList[] =
{
    "ITfThreadMgr",
    "ITextStoreACPServices",
    "ITfEditSession",
    "IEnumTfDocumentMgrs",
    "ITfTextEditSink",
    "ITfThreadMgrEventSink",
    "ITfContextOwnerCompositionServices",
    "ITfFunctionProvider",
    "IEnumTfLanguageProfiles",
    "ITfLanguageProfileNotifySink",
    "ITfPropertyStore",
    "ITfContextOwnerServices",
    "ITfSource",
    "ITfReadOnlyProperty",
    "IEnumTfRanges",
    "ITfContextOwnerCompositionSink",
    "ITfCompositionView",
    "ITfInputProcessorProfileMgr",
    "IEnumTfInputProcessorProfiles",
    "ITfInputProcessorProfileActivationSink",
    "ITfPersistentPropertyLoaderACP",
    "ITfDisplayAttributeInfo",
    "ITfCompartmentEventSink",
    "ITfProperty",
    "ITfComposition",
    "ITfRangeBackup",
    "ITfActiveLanguageProfileNotifySink",
    "ITfCompositionSink",
    "ITfContextView",
    "ITfRangeACP",
    "ITfEditRecord",
    "ITfSourceSingle",
    "IEnumTfContexts",
    "ITfCompartment",
    "ITfCompartmentMgr",
    "ITfContextComposition",
    "IEnumTfFunctionProviders",
    "IEnumTfProperties",
    "ITfInsertAtSelection",
    "IEnumITfCompositionView",
    "ITfMouseTracker",
    "IEnumTfDisplayAttributeInfo",
    "IEnumTfContextViews",
    "ITfMouseTrackerACP",
    "ITfThreadMgrEx",
    "ITfDocumentMgr",
    "ITfContext",
    "ITfRange",
    0
};

static int __stdcall _msctfp_IID_Lookup(const IID* pIID, int* pIndex)
{
    int low = 0, high = 47;

    while (low <= high)
    {
        int pos = (low + high) / 2;
        int res = IID_GENERIC_CHECK_IID(_msctfp, pIID, pos);
        if (!res) { *pIndex = pos; return 1; }
        if (res > 0) low = pos + 1;
        else high = pos - 1;
    }
    return 0;
}

const ExtendedProxyFileInfo msctfp_ProxyFileInfo DECLSPEC_HIDDEN =
{
    (const PCInterfaceProxyVtblList*)_msctfp_ProxyVtblList,
    (const PCInterfaceStubVtblList*)_msctfp_StubVtblList,
    _msctfp_InterfaceNamesList,
    0,
    _msctfp_IID_Lookup,
    48,
    1,
    0,
    0,
    0,
    0
};

#endif /* _WIN64 */
