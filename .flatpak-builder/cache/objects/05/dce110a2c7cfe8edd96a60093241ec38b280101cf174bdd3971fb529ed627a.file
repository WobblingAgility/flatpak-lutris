/*** Autogenerated by WIDL 3.8 from schrpc.idl - Do not edit ***/
#include <string.h>

#include "schrpc.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif

#ifndef _WIN64

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __server_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static int __server_filter( struct __server_frame *__frame )
{
    return (__frame->code == STATUS_ACCESS_VIOLATION) ||
           (__frame->code == STATUS_DATATYPE_MISALIGNMENT) ||
           (__frame->code == RPC_X_BAD_STUB_DATA) ||
           (__frame->code == RPC_S_INVALID_BOUND);
}

#define TYPE_FORMAT_STRING_SIZE 569
#define PROC_FORMAT_STRING_SIZE 321

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

/*****************************************************************************
 * ITaskSchedulerService interface
 */

static RPC_DISPATCH_TABLE ITaskSchedulerService_v1_0_DispatchTable;
static const MIDL_SERVER_INFO ITaskSchedulerService_ServerInfo;

static const RPC_SERVER_INTERFACE ITaskSchedulerService___RpcServerInterface =
{
    sizeof(RPC_SERVER_INTERFACE),
    {{0x86d35949,0x83c9,0x4044,{0xb4,0x24,0xdb,0x36,0x32,0x31,0xfd,0x0c}},{1,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    &ITaskSchedulerService_v1_0_DispatchTable,
    0,
    0,
    0,
    &ITaskSchedulerService_ServerInfo,
    0,
};
RPC_IF_HANDLE ITaskSchedulerService_v1_0_s_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& ITaskSchedulerService___RpcServerInterface;

static const MIDL_STUB_DESC ITaskSchedulerService_StubDesc;

struct __frame_ITaskSchedulerService_SchRpcHighestVersion
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * version;
};

static void __finally_ITaskSchedulerService_SchRpcHighestVersion( struct __frame_ITaskSchedulerService_SchRpcHighestVersion *__frame )
{


}

void __RPC_STUB ITaskSchedulerService_SchRpcHighestVersion( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcHighestVersion __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcHighestVersion );
    __frame->version = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->version = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = SchRpcHighestVersion(
            __frame->version);
        __frame->_StubMsg.BufferLength = 16;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->version;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcHighestVersion( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcRegisterTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    const WCHAR * xml;
    DWORD flags;
    const WCHAR * sddl;
    DWORD task_logon_type;
    DWORD n_creds;
    const TASK_USER_CRED * creds;
    WCHAR *_W0;
    WCHAR ** actual_path;
    TASK_XML_ERROR_INFO *_W1;
    TASK_XML_ERROR_INFO ** xml_error_info;
};

static void __finally_ITaskSchedulerService_SchRpcRegisterTask( struct __frame_ITaskSchedulerService_SchRpcRegisterTask *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->xml,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[10]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->sddl,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->n_creds;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->creds,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[98]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->actual_path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[102]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->xml_error_info,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcRegisterTask( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcRegisterTask __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcRegisterTask );
    __frame->path = 0;
    __frame->xml = 0;
    __frame->sddl = 0;
    __frame->creds = 0;
    __frame->actual_path = 0;
    __frame->xml_error_info = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[6]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6],
                0);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->xml,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[12],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->sddl,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->task_logon_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_creds = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->creds,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[98],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->actual_path = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->xml_error_info = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcRegisterTask(
            __frame->path,
            __frame->xml,
            __frame->flags,
            __frame->sddl,
            __frame->task_logon_type,
            __frame->n_creds,
            __frame->creds,
            __frame->actual_path,
            __frame->xml_error_info);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->actual_path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[102]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->xml_error_info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->actual_path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[102]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->xml_error_info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcRegisterTask( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcRetrieveTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    const WCHAR * languages;
    ULONG * n_languages;
    WCHAR *_W0;
    WCHAR ** xml;
};

static void __finally_ITaskSchedulerService_SchRpcRetrieveTask( struct __frame_ITaskSchedulerService_SchRpcRetrieveTask *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[158]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->languages,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[162]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->xml,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcRetrieveTask( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcRetrieveTask __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcRetrieveTask );
    __frame->path = 0;
    __frame->languages = 0;
    __frame->n_languages = 0;
    __frame->xml = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[38]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[160],
                0);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->languages,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[164],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_languages = (ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->xml = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = SchRpcRetrieveTask(
            __frame->path,
            __frame->languages,
            __frame->n_languages,
            __frame->xml);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->xml,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->xml,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcRetrieveTask( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcCreateFolder
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    const WCHAR * sddl;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcCreateFolder( struct __frame_ITaskSchedulerService_SchRpcCreateFolder *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[178]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->sddl,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[182]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcCreateFolder( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcCreateFolder __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcCreateFolder );
    __frame->path = 0;
    __frame->sddl = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[56]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[180],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->sddl,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[182],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcCreateFolder(
            __frame->path,
            __frame->sddl,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcCreateFolder( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcSetSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    const WCHAR * sddl;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcSetSecurity( struct __frame_ITaskSchedulerService_SchRpcSetSecurity *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[186]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->sddl,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[190]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcSetSecurity( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcSetSecurity __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcSetSecurity );
    __frame->path = 0;
    __frame->sddl = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[68]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[188],
                0);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->sddl,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcSetSecurity(
            __frame->path,
            __frame->sddl,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcSetSecurity( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcGetSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
    WCHAR *_W0;
    WCHAR ** sddl;
};

static void __finally_ITaskSchedulerService_SchRpcGetSecurity( struct __frame_ITaskSchedulerService_SchRpcGetSecurity *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[194]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->sddl,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcGetSecurity( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcGetSecurity __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcGetSecurity );
    __frame->path = 0;
    __frame->sddl = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[80]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[196],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->sddl = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = SchRpcGetSecurity(
            __frame->path,
            __frame->flags,
            __frame->sddl);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcGetSecurity( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcEnumFolders
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
    DWORD * start_index;
    DWORD n_requested;
    DWORD _W0;
    DWORD * n_names;
    TASK_NAMES _W1;
    TASK_NAMES * names;
};

static void __finally_ITaskSchedulerService_SchRpcEnumFolders( struct __frame_ITaskSchedulerService_SchRpcEnumFolders *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[206]);





    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->names,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[218]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcEnumFolders( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcEnumFolders __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcEnumFolders );
    __frame->path = 0;
    __frame->start_index = 0;
    __frame->n_names = 0;
    __frame->names = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[92]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_index = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_requested = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->n_names = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->names = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcEnumFolders(
            __frame->path,
            __frame->flags,
            __frame->start_index,
            __frame->n_requested,
            __frame->n_names,
            __frame->names);
        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[218]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->start_index;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->n_names;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[218]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcEnumFolders( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcEnumTasks
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
    DWORD * start_index;
    DWORD n_requested;
    DWORD _W0;
    DWORD * n_names;
    TASK_NAMES _W1;
    TASK_NAMES * names;
};

static void __finally_ITaskSchedulerService_SchRpcEnumTasks( struct __frame_ITaskSchedulerService_SchRpcEnumTasks *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[258]);





    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->names,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[270]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcEnumTasks( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcEnumTasks __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcEnumTasks );
    __frame->path = 0;
    __frame->start_index = 0;
    __frame->n_names = 0;
    __frame->names = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[114]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[260],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_index = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_requested = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->n_names = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->names = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcEnumTasks(
            __frame->path,
            __frame->flags,
            __frame->start_index,
            __frame->n_requested,
            __frame->n_names,
            __frame->names);
        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[270]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->start_index;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->n_names;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[270]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcEnumTasks( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcEnumInstances
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
    DWORD _W0;
    DWORD * n_guids;
    GUID *_W1;
    GUID ** guids;
};

static void __finally_ITaskSchedulerService_SchRpcEnumInstances( struct __frame_ITaskSchedulerService_SchRpcEnumInstances *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[310]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_guids;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->guids,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcEnumInstances( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcEnumInstances __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcEnumInstances );
    __frame->path = 0;
    __frame->n_guids = 0;
    __frame->guids = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[136]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[310],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->n_guids = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->guids = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcEnumInstances(
            __frame->path,
            __frame->flags,
            __frame->n_guids,
            __frame->guids);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_guids;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->guids,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->n_guids;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_guids;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->guids,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcEnumInstances( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcGetInstanceInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    GUID guid;
    void *_p_guid;
    WCHAR *_W0;
    WCHAR ** path;
    DWORD _W1;
    DWORD * task_state;
    WCHAR *_W2;
    WCHAR ** action;
    WCHAR *_W3;
    WCHAR ** info;
    DWORD _W4;
    DWORD * n_instances;
    GUID *_W5;
    GUID ** instances;
    DWORD _W6;
    DWORD * pid;
};

static void __finally_ITaskSchedulerService_SchRpcGetInstanceInfo( struct __frame_ITaskSchedulerService_SchRpcGetInstanceInfo *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[358]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->action,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->info,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[378]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_instances;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->instances,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[408]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcGetInstanceInfo( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcGetInstanceInfo __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcGetInstanceInfo );
    MIDL_memset(&__frame->guid, 0, sizeof(__frame->guid));
    __frame->_p_guid = &__frame->guid;
    __frame->path = 0;
    __frame->task_state = 0;
    __frame->action = 0;
    __frame->info = 0;
    __frame->n_instances = 0;
    __frame->instances = 0;
    __frame->pid = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[152]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->_p_guid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[324],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->path = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->task_state = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->action = &__frame->_W2;
        __frame->_W2 = 0;
        __frame->info = &__frame->_W3;
        __frame->_W3 = 0;
        __frame->n_instances = &__frame->_W4;
        __frame->_W4 = 0;
        __frame->instances = &__frame->_W5;
        __frame->_W5 = 0;
        __frame->pid = &__frame->_W6;
        __frame->_W6 = 0;

        __frame->_RetVal = SchRpcGetInstanceInfo(
            __frame->guid,
            __frame->path,
            __frame->task_state,
            __frame->action,
            __frame->info,
            __frame->n_instances,
            __frame->instances,
            __frame->pid);
        __frame->_StubMsg.BufferLength = 32;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[358]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->action,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[378]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_instances;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->instances,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[408]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[358]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->task_state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->action,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[370]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[378]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->n_instances;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_instances;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->instances,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[408]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pid;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcGetInstanceInfo( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcStopInstance
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    GUID guid;
    void *_p_guid;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcStopInstance( struct __frame_ITaskSchedulerService_SchRpcStopInstance *__frame )
{



}

void __RPC_STUB ITaskSchedulerService_SchRpcStopInstance( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcStopInstance __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcStopInstance );
    MIDL_memset(&__frame->guid, 0, sizeof(__frame->guid));
    __frame->_p_guid = &__frame->guid;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[186]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->_p_guid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[324],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcStopInstance(
            __frame->guid,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcStopInstance( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcStop
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcStop( struct __frame_ITaskSchedulerService_SchRpcStop *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[416]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcStop( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcStop __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcStop );
    __frame->path = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[194]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[416],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcStop(
            __frame->path,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcStop( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcRun
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD n_args;
    const WCHAR ** args;
    DWORD flags;
    DWORD session_id;
    const WCHAR * user;
    GUID _W0;
    GUID * guid;
};

static void __finally_ITaskSchedulerService_SchRpcRun( struct __frame_ITaskSchedulerService_SchRpcRun *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[420]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->n_args;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->args,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[456]);



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->user,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[460]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcRun( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcRun __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcRun );
    __frame->path = 0;
    __frame->args = 0;
    __frame->user = 0;
    __frame->guid = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[202]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[422],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_args = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->args,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[456],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->session_id = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->user,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[460],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->guid = &__frame->_W0;

        __frame->_RetVal = SchRpcRun(
            __frame->path,
            __frame->n_args,
            __frame->args,
            __frame->flags,
            __frame->session_id,
            __frame->user,
            __frame->guid);
        __frame->_StubMsg.BufferLength = 28;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[324]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcRun( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcDelete
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcDelete( struct __frame_ITaskSchedulerService_SchRpcDelete *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[468]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcDelete( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcDelete __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcDelete );
    __frame->path = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[226]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[470],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcDelete(
            __frame->path,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcDelete( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcRename
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    const WCHAR * name;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcRename( struct __frame_ITaskSchedulerService_SchRpcRename *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[472]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[476]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcRename( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcRename __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcRename );
    __frame->path = 0;
    __frame->name = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[234]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[474],
                0);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[478],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcRename(
            __frame->path,
            __frame->name,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcRename( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcScheduledRuntimes
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    SYSTEMTIME * start;
    SYSTEMTIME * end;
    DWORD flags;
    DWORD n_requested;
    DWORD _W0;
    DWORD * n_runtimes;
    SYSTEMTIME *_W1;
    SYSTEMTIME ** runtimes;
};

static void __finally_ITaskSchedulerService_SchRpcScheduledRuntimes( struct __frame_ITaskSchedulerService_SchRpcScheduledRuntimes *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[480]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->start,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[498]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->end,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[502]);




    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_runtimes;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->runtimes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[528]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcScheduledRuntimes( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcScheduledRuntimes __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcScheduledRuntimes );
    __frame->path = 0;
    __frame->start = 0;
    __frame->end = 0;
    __frame->n_runtimes = 0;
    __frame->runtimes = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[246]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[482],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->start,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[498],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->end,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[502],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_requested = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->n_runtimes = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->runtimes = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcScheduledRuntimes(
            __frame->path,
            __frame->start,
            __frame->end,
            __frame->flags,
            __frame->n_requested,
            __frame->n_runtimes,
            __frame->runtimes);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_runtimes;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->runtimes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[528]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->n_runtimes;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_runtimes;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->runtimes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[528]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcScheduledRuntimes( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcGetLastRunInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    SYSTEMTIME _W0;
    SYSTEMTIME * last_runtime;
    DWORD _W1;
    DWORD * last_return_code;
};

static void __finally_ITaskSchedulerService_SchRpcGetLastRunInfo( struct __frame_ITaskSchedulerService_SchRpcGetLastRunInfo *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532]);




}

void __RPC_STUB ITaskSchedulerService_SchRpcGetLastRunInfo( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcGetLastRunInfo __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcGetLastRunInfo );
    __frame->path = 0;
    __frame->last_runtime = 0;
    __frame->last_return_code = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[272]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[534],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->last_runtime = &__frame->_W0;
        __frame->last_return_code = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcGetLastRunInfo(
            __frame->path,
            __frame->last_runtime,
            __frame->last_return_code);
        __frame->_StubMsg.BufferLength = 34;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->last_runtime,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[484]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->last_return_code;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcGetLastRunInfo( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcGetTaskInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
    DWORD _W0;
    DWORD * enabled;
    DWORD _W1;
    DWORD * task_state;
};

static void __finally_ITaskSchedulerService_SchRpcGetTaskInfo( struct __frame_ITaskSchedulerService_SchRpcGetTaskInfo *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[544]);





}

void __RPC_STUB ITaskSchedulerService_SchRpcGetTaskInfo( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcGetTaskInfo __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcGetTaskInfo );
    __frame->path = 0;
    __frame->enabled = 0;
    __frame->task_state = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[286]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[546],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->enabled = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->task_state = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcGetTaskInfo(
            __frame->path,
            __frame->flags,
            __frame->enabled,
            __frame->task_state);
        __frame->_StubMsg.BufferLength = 24;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->enabled;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->task_state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcGetTaskInfo( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD _W0;
    DWORD * runs;
};

static void __finally_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns( struct __frame_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[556]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcGetNumberOfMissedRuns( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns );
    __frame->path = 0;
    __frame->runs = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[302]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[558],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->runs = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = SchRpcGetNumberOfMissedRuns(
            __frame->path,
            __frame->runs);
        __frame->_StubMsg.BufferLength = 16;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->runs;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcEnableTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD enabled;
};

static void __finally_ITaskSchedulerService_SchRpcEnableTask( struct __frame_ITaskSchedulerService_SchRpcEnableTask *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[564]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcEnableTask( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcEnableTask __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcEnableTask );
    __frame->path = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[312]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[566],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->enabled = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcEnableTask(
            __frame->path,
            __frame->enabled);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcEnableTask( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

#if !defined(__RPC_WIN32__)
#error  Invalid build platform for this stub.
#endif

static const unsigned short ITaskSchedulerService_FormatStringOffsetTable[] =
{
    0,  /* SchRpcHighestVersion */
    6,  /* SchRpcRegisterTask */
    38,  /* SchRpcRetrieveTask */
    56,  /* SchRpcCreateFolder */
    68,  /* SchRpcSetSecurity */
    80,  /* SchRpcGetSecurity */
    92,  /* SchRpcEnumFolders */
    114,  /* SchRpcEnumTasks */
    136,  /* SchRpcEnumInstances */
    152,  /* SchRpcGetInstanceInfo */
    186,  /* SchRpcStopInstance */
    194,  /* SchRpcStop */
    202,  /* SchRpcRun */
    226,  /* SchRpcDelete */
    234,  /* SchRpcRename */
    246,  /* SchRpcScheduledRuntimes */
    272,  /* SchRpcGetLastRunInfo */
    286,  /* SchRpcGetTaskInfo */
    302,  /* SchRpcGetNumberOfMissedRuns */
    312,  /* SchRpcEnableTask */
};

static const MIDL_STUB_DESC ITaskSchedulerService_StubDesc =
{
    (void *)& ITaskSchedulerService___RpcServerInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        0,
    },
    0,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

static RPC_DISPATCH_FUNCTION ITaskSchedulerService_table[] =
{
    ITaskSchedulerService_SchRpcHighestVersion,
    ITaskSchedulerService_SchRpcRegisterTask,
    ITaskSchedulerService_SchRpcRetrieveTask,
    ITaskSchedulerService_SchRpcCreateFolder,
    ITaskSchedulerService_SchRpcSetSecurity,
    ITaskSchedulerService_SchRpcGetSecurity,
    ITaskSchedulerService_SchRpcEnumFolders,
    ITaskSchedulerService_SchRpcEnumTasks,
    ITaskSchedulerService_SchRpcEnumInstances,
    ITaskSchedulerService_SchRpcGetInstanceInfo,
    ITaskSchedulerService_SchRpcStopInstance,
    ITaskSchedulerService_SchRpcStop,
    ITaskSchedulerService_SchRpcRun,
    ITaskSchedulerService_SchRpcDelete,
    ITaskSchedulerService_SchRpcRename,
    ITaskSchedulerService_SchRpcScheduledRuntimes,
    ITaskSchedulerService_SchRpcGetLastRunInfo,
    ITaskSchedulerService_SchRpcGetTaskInfo,
    ITaskSchedulerService_SchRpcGetNumberOfMissedRuns,
    ITaskSchedulerService_SchRpcEnableTask,
    0
};
static RPC_DISPATCH_TABLE ITaskSchedulerService_v1_0_DispatchTable =
{
    20,
    ITaskSchedulerService_table
};

static const SERVER_ROUTINE ITaskSchedulerService_ServerRoutineTable[] =
{
    (SERVER_ROUTINE)SchRpcHighestVersion,
    (SERVER_ROUTINE)SchRpcRegisterTask,
    (SERVER_ROUTINE)SchRpcRetrieveTask,
    (SERVER_ROUTINE)SchRpcCreateFolder,
    (SERVER_ROUTINE)SchRpcSetSecurity,
    (SERVER_ROUTINE)SchRpcGetSecurity,
    (SERVER_ROUTINE)SchRpcEnumFolders,
    (SERVER_ROUTINE)SchRpcEnumTasks,
    (SERVER_ROUTINE)SchRpcEnumInstances,
    (SERVER_ROUTINE)SchRpcGetInstanceInfo,
    (SERVER_ROUTINE)SchRpcStopInstance,
    (SERVER_ROUTINE)SchRpcStop,
    (SERVER_ROUTINE)SchRpcRun,
    (SERVER_ROUTINE)SchRpcDelete,
    (SERVER_ROUTINE)SchRpcRename,
    (SERVER_ROUTINE)SchRpcScheduledRuntimes,
    (SERVER_ROUTINE)SchRpcGetLastRunInfo,
    (SERVER_ROUTINE)SchRpcGetTaskInfo,
    (SERVER_ROUTINE)SchRpcGetNumberOfMissedRuns,
    (SERVER_ROUTINE)SchRpcEnableTask,
};

static const MIDL_SERVER_INFO ITaskSchedulerService_ServerInfo =
{
    &ITaskSchedulerService_StubDesc,
    ITaskSchedulerService_ServerRoutineTable,
    __MIDL_ProcFormatString.Format,
    ITaskSchedulerService_FormatStringOffsetTable,
    0,
    0,
    0,
    0
};

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter version) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 4 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6),	/* type offset = 6 */
/* 10 (parameter xml) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa),	/* type offset = 10 */
/* 14 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 16 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe),	/* type offset = 14 */
/* 20 (parameter task_logon_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 22 (parameter n_creds) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter creds) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x62),	/* type offset = 98 */
/* 28 (parameter actual_path) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6a),	/* type offset = 106 */
/* 32 (parameter xml_error_info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9a),	/* type offset = 154 */
/* 36 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 38 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9e),	/* type offset = 158 */
/* 42 (parameter languages) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa2),	/* type offset = 162 */
/* 46 (parameter n_languages) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa6),	/* type offset = 166 */
/* 50 (parameter xml) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xae),	/* type offset = 174 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb2),	/* type offset = 178 */
/* 60 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 64 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 66 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 68 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xba),	/* type offset = 186 */
/* 72 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbe),	/* type offset = 190 */
/* 76 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 78 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 80 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc2),	/* type offset = 194 */
/* 84 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter sddl) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xca),	/* type offset = 202 */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xce),	/* type offset = 206 */
/* 96 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 98 (parameter start_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xd2),	/* type offset = 210 */
/* 102 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 104 (parameter n_names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd6),	/* type offset = 214 */
/* 108 (parameter names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe2),	/* type offset = 226 */
/* 112 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 114 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x102),	/* type offset = 258 */
/* 118 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 120 (parameter start_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x106),	/* type offset = 262 */
/* 124 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 126 (parameter n_names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10a),	/* type offset = 266 */
/* 130 (parameter names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x116),	/* type offset = 278 */
/* 134 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 136 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x136),	/* type offset = 310 */
/* 140 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 142 (parameter n_guids) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13a),	/* type offset = 314 */
/* 146 (parameter guids) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x162),	/* type offset = 354 */
/* 150 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 152 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x144),	/* type offset = 324 */
/* 156 (parameter path) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16a),	/* type offset = 362 */
/* 160 (parameter task_state) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16e),	/* type offset = 366 */
/* 164 (parameter action) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x176),	/* type offset = 374 */
/* 168 (parameter info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x17e),	/* type offset = 382 */
/* 172 (parameter n_instances) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x182),	/* type offset = 386 */
/* 176 (parameter instances) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x198),	/* type offset = 408 */
/* 180 (parameter pid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x19c),	/* type offset = 412 */
/* 184 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 186 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x144),	/* type offset = 324 */
/* 190 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 192 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1a0),	/* type offset = 416 */
/* 198 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 200 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 202 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1a4),	/* type offset = 420 */
/* 206 (parameter n_args) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 208 (parameter args) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1c8),	/* type offset = 456 */
/* 212 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 214 (parameter session_id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 216 (parameter user) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1cc),	/* type offset = 460 */
/* 220 (parameter guid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d0),	/* type offset = 464 */
/* 224 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 226 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1d4),	/* type offset = 468 */
/* 230 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 232 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 234 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1d8),	/* type offset = 472 */
/* 238 (parameter name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1dc),	/* type offset = 476 */
/* 242 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 244 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 246 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e0),	/* type offset = 480 */
/* 250 (parameter start) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f2),	/* type offset = 498 */
/* 254 (parameter end) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f6),	/* type offset = 502 */
/* 258 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 262 (parameter n_runtimes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1fa),	/* type offset = 506 */
/* 266 (parameter runtimes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x210),	/* type offset = 528 */
/* 270 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 272 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x214),	/* type offset = 532 */
/* 276 (parameter last_runtime) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x218),	/* type offset = 536 */
/* 280 (parameter last_return_code) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x21c),	/* type offset = 540 */
/* 284 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 286 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x220),	/* type offset = 544 */
/* 290 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 292 (parameter enabled) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x224),	/* type offset = 548 */
/* 296 (parameter task_state) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x228),	/* type offset = 552 */
/* 300 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 302 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22c),	/* type offset = 556 */
/* 306 (parameter runs) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x230),	/* type offset = 560 */
/* 310 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 312 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x234),	/* type offset = 564 */
/* 316 (parameter enabled) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 318 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 6 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  8 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 10 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 12 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 14 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 16 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 18 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 20 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 22 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 24 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 26 (const TASK_USER_CRED) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 38 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 40 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 48 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 50 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 58 (const TASK_USER_CRED *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        0x29,	/* Corr desc: parameter n_creds, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0xc),	/* Increment = 12 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x2),	/* Number of pointers = 2 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 80 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 82 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 88 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 90 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffbb),	/* Offset= -69 (26) */
        0x5b,	/* FC_END */
/* 98 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (58) */
/* 102 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (106) */
/* 106 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 108 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 110 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 112 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 114 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 116 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 118 (TASK_XML_ERROR_INFO) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x8),	/* Memory offset = 8 */
        NdrFcShort(0x8),	/* Buffer offset = 8 */
/* 130 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 132 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0xc),	/* Memory offset = 12 */
        NdrFcShort(0xc),	/* Buffer offset = 12 */
/* 140 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 142 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 150 (TASK_XML_ERROR_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (118) */
/* 154 (TASK_XML_ERROR_INFO **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (150) */
/* 158 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 160 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 162 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 164 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 166 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 170 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (174) */
/* 174 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 176 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 178 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 180 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 182 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 184 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 186 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 188 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 190 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 192 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 194 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 196 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 198 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (202) */
/* 202 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 204 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 206 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 208 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 210 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 214 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 218 (TASK_NAMES *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (222) */
/* 222 (TASK_NAMES) */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0x2),
/* 226 (TASK_NAMES) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter n_names, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x10),	/* offset = 16 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 248 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 250 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 258 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 260 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 262 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 266 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 270 (TASK_NAMES *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (274) */
/* 274 (TASK_NAMES) */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0x2),
/* 278 (TASK_NAMES) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter n_names, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x10),	/* offset = 16 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 300 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 302 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 310 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 312 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 314 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 318 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 324 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (318) */
        0x5b,	/* FC_END */
/* 336 (GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_guids, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x8),	/* offset = 8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (324) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 350 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (336) */
/* 354 (GUID **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (350) */
/* 358 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (362) */
/* 362 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 364 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 366 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 370 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (374) */
/* 374 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 376 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 378 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (382) */
/* 382 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 384 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 386 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 390 (GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_instances, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x20),	/* offset = 32 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffb4),	/* Offset= -76 (324) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 404 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (390) */
/* 408 (GUID **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (404) */
/* 412 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 416 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 418 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 420 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 422 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 424 (const WCHAR **) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter n_args, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 456 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (424) */
/* 460 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 462 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 464 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff72),	/* Offset= -142 (324) */
/* 468 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 470 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 472 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 474 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 476 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 478 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 480 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 482 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 484 (SYSTEMTIME) */
        0x15,	/* FC_STRUCT */
        0x1,	/* 1 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 498 (SYSTEMTIME *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (484) */
/* 502 (SYSTEMTIME *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (484) */
/* 506 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 510 (SYSTEMTIME *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_runtimes, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x14),	/* offset = 20 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (484) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 524 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (510) */
/* 528 (SYSTEMTIME **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (524) */
/* 532 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 534 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 536 (SYSTEMTIME *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffca),	/* Offset= -54 (484) */
/* 540 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 544 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 546 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 548 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 552 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 556 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 558 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 560 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 564 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 566 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x0
    }
};


#else /* _WIN64 */

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __server_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static int __server_filter( struct __server_frame *__frame )
{
    return (__frame->code == STATUS_ACCESS_VIOLATION) ||
           (__frame->code == STATUS_DATATYPE_MISALIGNMENT) ||
           (__frame->code == RPC_X_BAD_STUB_DATA) ||
           (__frame->code == RPC_S_INVALID_BOUND);
}

#define TYPE_FORMAT_STRING_SIZE 485
#define PROC_FORMAT_STRING_SIZE 321

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

/*****************************************************************************
 * ITaskSchedulerService interface
 */

static RPC_DISPATCH_TABLE ITaskSchedulerService_v1_0_DispatchTable;
static const MIDL_SERVER_INFO ITaskSchedulerService_ServerInfo;

static const RPC_SERVER_INTERFACE ITaskSchedulerService___RpcServerInterface =
{
    sizeof(RPC_SERVER_INTERFACE),
    {{0x86d35949,0x83c9,0x4044,{0xb4,0x24,0xdb,0x36,0x32,0x31,0xfd,0x0c}},{1,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    &ITaskSchedulerService_v1_0_DispatchTable,
    0,
    0,
    0,
    &ITaskSchedulerService_ServerInfo,
    0,
};
RPC_IF_HANDLE ITaskSchedulerService_v1_0_s_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& ITaskSchedulerService___RpcServerInterface;

static const MIDL_STUB_DESC ITaskSchedulerService_StubDesc;

struct __frame_ITaskSchedulerService_SchRpcHighestVersion
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * version;
};

static void __finally_ITaskSchedulerService_SchRpcHighestVersion( struct __frame_ITaskSchedulerService_SchRpcHighestVersion *__frame )
{


}

void __RPC_STUB ITaskSchedulerService_SchRpcHighestVersion( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcHighestVersion __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcHighestVersion );
    __frame->version = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->version = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = SchRpcHighestVersion(
            __frame->version);
        __frame->_StubMsg.BufferLength = 16;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->version;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcHighestVersion( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcRegisterTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    const WCHAR * xml;
    DWORD flags;
    const WCHAR * sddl;
    DWORD task_logon_type;
    DWORD n_creds;
    const TASK_USER_CRED * creds;
    WCHAR *_W0;
    WCHAR ** actual_path;
    TASK_XML_ERROR_INFO *_W1;
    TASK_XML_ERROR_INFO ** xml_error_info;
};

static void __finally_ITaskSchedulerService_SchRpcRegisterTask( struct __frame_ITaskSchedulerService_SchRpcRegisterTask *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->xml,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[10]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->sddl,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->n_creds;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->creds,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[66]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->actual_path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->xml_error_info,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[112]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcRegisterTask( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcRegisterTask __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcRegisterTask );
    __frame->path = 0;
    __frame->xml = 0;
    __frame->sddl = 0;
    __frame->creds = 0;
    __frame->actual_path = 0;
    __frame->xml_error_info = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[6]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6],
                0);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->xml,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[12],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->sddl,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->task_logon_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_creds = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->creds,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[66],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->actual_path = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->xml_error_info = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcRegisterTask(
            __frame->path,
            __frame->xml,
            __frame->flags,
            __frame->sddl,
            __frame->task_logon_type,
            __frame->n_creds,
            __frame->creds,
            __frame->actual_path,
            __frame->xml_error_info);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->actual_path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->xml_error_info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[112]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->actual_path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->xml_error_info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[112]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcRegisterTask( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcRetrieveTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    const WCHAR * languages;
    ULONG * n_languages;
    WCHAR *_W0;
    WCHAR ** xml;
};

static void __finally_ITaskSchedulerService_SchRpcRetrieveTask( struct __frame_ITaskSchedulerService_SchRpcRetrieveTask *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[116]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->languages,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[120]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->xml,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[128]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcRetrieveTask( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcRetrieveTask __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcRetrieveTask );
    __frame->path = 0;
    __frame->languages = 0;
    __frame->n_languages = 0;
    __frame->xml = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[38]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[118],
                0);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->languages,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_languages = (ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->xml = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = SchRpcRetrieveTask(
            __frame->path,
            __frame->languages,
            __frame->n_languages,
            __frame->xml);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->xml,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[128]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->xml,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[128]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcRetrieveTask( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcCreateFolder
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    const WCHAR * sddl;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcCreateFolder( struct __frame_ITaskSchedulerService_SchRpcCreateFolder *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[136]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->sddl,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcCreateFolder( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcCreateFolder __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcCreateFolder );
    __frame->path = 0;
    __frame->sddl = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[56]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->sddl,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcCreateFolder(
            __frame->path,
            __frame->sddl,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcCreateFolder( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcSetSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    const WCHAR * sddl;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcSetSecurity( struct __frame_ITaskSchedulerService_SchRpcSetSecurity *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[144]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->sddl,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[148]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcSetSecurity( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcSetSecurity __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcSetSecurity );
    __frame->path = 0;
    __frame->sddl = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[68]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[146],
                0);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->sddl,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[150],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcSetSecurity(
            __frame->path,
            __frame->sddl,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcSetSecurity( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcGetSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
    WCHAR *_W0;
    WCHAR ** sddl;
};

static void __finally_ITaskSchedulerService_SchRpcGetSecurity( struct __frame_ITaskSchedulerService_SchRpcGetSecurity *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->sddl,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[156]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcGetSecurity( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcGetSecurity __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcGetSecurity );
    __frame->path = 0;
    __frame->sddl = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[80]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->sddl = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = SchRpcGetSecurity(
            __frame->path,
            __frame->flags,
            __frame->sddl);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[156]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->sddl,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[156]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcGetSecurity( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcEnumFolders
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
    DWORD * start_index;
    DWORD n_requested;
    DWORD _W0;
    DWORD * n_names;
    TASK_NAMES _W1;
    TASK_NAMES * names;
};

static void __finally_ITaskSchedulerService_SchRpcEnumFolders( struct __frame_ITaskSchedulerService_SchRpcEnumFolders *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[164]);





    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->names,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcEnumFolders( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcEnumFolders __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcEnumFolders );
    __frame->path = 0;
    __frame->start_index = 0;
    __frame->n_names = 0;
    __frame->names = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[92]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[166],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_index = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_requested = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->n_names = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->names = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcEnumFolders(
            __frame->path,
            __frame->flags,
            __frame->start_index,
            __frame->n_requested,
            __frame->n_names,
            __frame->names);
        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->start_index;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->n_names;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcEnumFolders( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcEnumTasks
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
    DWORD * start_index;
    DWORD n_requested;
    DWORD _W0;
    DWORD * n_names;
    TASK_NAMES _W1;
    TASK_NAMES * names;
};

static void __finally_ITaskSchedulerService_SchRpcEnumTasks( struct __frame_ITaskSchedulerService_SchRpcEnumTasks *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[202]);





    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->names,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[214]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcEnumTasks( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcEnumTasks __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcEnumTasks );
    __frame->path = 0;
    __frame->start_index = 0;
    __frame->n_names = 0;
    __frame->names = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[114]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[204],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_index = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_requested = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->n_names = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->names = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcEnumTasks(
            __frame->path,
            __frame->flags,
            __frame->start_index,
            __frame->n_requested,
            __frame->n_names,
            __frame->names);
        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[214]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->start_index;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->n_names;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_names;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->names,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[214]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcEnumTasks( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcEnumInstances
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
    DWORD _W0;
    DWORD * n_guids;
    GUID *_W1;
    GUID ** guids;
};

static void __finally_ITaskSchedulerService_SchRpcEnumInstances( struct __frame_ITaskSchedulerService_SchRpcEnumInstances *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[240]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_guids;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->guids,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[284]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcEnumInstances( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcEnumInstances __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcEnumInstances );
    __frame->path = 0;
    __frame->n_guids = 0;
    __frame->guids = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[136]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[240],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->n_guids = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->guids = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcEnumInstances(
            __frame->path,
            __frame->flags,
            __frame->n_guids,
            __frame->guids);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_guids;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->guids,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[284]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->n_guids;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_guids;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->guids,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[284]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcEnumInstances( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcGetInstanceInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    GUID guid;
    void *_p_guid;
    WCHAR *_W0;
    WCHAR ** path;
    DWORD _W1;
    DWORD * task_state;
    WCHAR *_W2;
    WCHAR ** action;
    WCHAR *_W3;
    WCHAR ** info;
    DWORD _W4;
    DWORD * n_instances;
    GUID *_W5;
    GUID ** instances;
    DWORD _W6;
    DWORD * pid;
};

static void __finally_ITaskSchedulerService_SchRpcGetInstanceInfo( struct __frame_ITaskSchedulerService_SchRpcGetInstanceInfo *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[288]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->action,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->info,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[308]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_instances;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->instances,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[338]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcGetInstanceInfo( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcGetInstanceInfo __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcGetInstanceInfo );
    MIDL_memset(&__frame->guid, 0, sizeof(__frame->guid));
    __frame->_p_guid = &__frame->guid;
    __frame->path = 0;
    __frame->task_state = 0;
    __frame->action = 0;
    __frame->info = 0;
    __frame->n_instances = 0;
    __frame->instances = 0;
    __frame->pid = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[152]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->_p_guid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->path = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->task_state = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->action = &__frame->_W2;
        __frame->_W2 = 0;
        __frame->info = &__frame->_W3;
        __frame->_W3 = 0;
        __frame->n_instances = &__frame->_W4;
        __frame->_W4 = 0;
        __frame->instances = &__frame->_W5;
        __frame->_W5 = 0;
        __frame->pid = &__frame->_W6;
        __frame->_W6 = 0;

        __frame->_RetVal = SchRpcGetInstanceInfo(
            __frame->guid,
            __frame->path,
            __frame->task_state,
            __frame->action,
            __frame->info,
            __frame->n_instances,
            __frame->instances,
            __frame->pid);
        __frame->_StubMsg.BufferLength = 32;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[288]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->action,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[308]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_instances;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->instances,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[338]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->path,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[288]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->task_state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->action,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[308]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->n_instances;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_instances;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->instances,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[338]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pid;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcGetInstanceInfo( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcStopInstance
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    GUID guid;
    void *_p_guid;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcStopInstance( struct __frame_ITaskSchedulerService_SchRpcStopInstance *__frame )
{



}

void __RPC_STUB ITaskSchedulerService_SchRpcStopInstance( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcStopInstance __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcStopInstance );
    MIDL_memset(&__frame->guid, 0, sizeof(__frame->guid));
    __frame->_p_guid = &__frame->guid;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[186]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->_p_guid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcStopInstance(
            __frame->guid,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcStopInstance( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcStop
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcStop( struct __frame_ITaskSchedulerService_SchRpcStop *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[346]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcStop( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcStop __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcStop );
    __frame->path = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[194]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[346],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcStop(
            __frame->path,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcStop( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcRun
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD n_args;
    const WCHAR ** args;
    DWORD flags;
    DWORD session_id;
    const WCHAR * user;
    GUID _W0;
    GUID * guid;
};

static void __finally_ITaskSchedulerService_SchRpcRun( struct __frame_ITaskSchedulerService_SchRpcRun *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[350]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->n_args;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->args,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[372]);



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->user,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[376]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcRun( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcRun __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcRun );
    __frame->path = 0;
    __frame->args = 0;
    __frame->user = 0;
    __frame->guid = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[202]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[352],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_args = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->args,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[372],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->session_id = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->user,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[376],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->guid = &__frame->_W0;

        __frame->_RetVal = SchRpcRun(
            __frame->path,
            __frame->n_args,
            __frame->args,
            __frame->flags,
            __frame->session_id,
            __frame->user,
            __frame->guid);
        __frame->_StubMsg.BufferLength = 28;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcRun( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcDelete
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcDelete( struct __frame_ITaskSchedulerService_SchRpcDelete *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[384]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcDelete( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcDelete __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcDelete );
    __frame->path = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[226]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[386],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcDelete(
            __frame->path,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcDelete( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcRename
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    const WCHAR * name;
    DWORD flags;
};

static void __finally_ITaskSchedulerService_SchRpcRename( struct __frame_ITaskSchedulerService_SchRpcRename *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[388]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[392]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcRename( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcRename __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcRename );
    __frame->path = 0;
    __frame->name = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[234]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[390],
                0);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[394],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcRename(
            __frame->path,
            __frame->name,
            __frame->flags);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcRename( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcScheduledRuntimes
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    SYSTEMTIME * start;
    SYSTEMTIME * end;
    DWORD flags;
    DWORD n_requested;
    DWORD _W0;
    DWORD * n_runtimes;
    SYSTEMTIME *_W1;
    SYSTEMTIME ** runtimes;
};

static void __finally_ITaskSchedulerService_SchRpcScheduledRuntimes( struct __frame_ITaskSchedulerService_SchRpcScheduledRuntimes *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[396]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->start,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->end,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[418]);




    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_runtimes;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->runtimes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[444]);


}

void __RPC_STUB ITaskSchedulerService_SchRpcScheduledRuntimes( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcScheduledRuntimes __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcScheduledRuntimes );
    __frame->path = 0;
    __frame->start = 0;
    __frame->end = 0;
    __frame->n_runtimes = 0;
    __frame->runtimes = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[246]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[398],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->start,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[414],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->end,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[418],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->n_requested = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->n_runtimes = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->runtimes = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcScheduledRuntimes(
            __frame->path,
            __frame->start,
            __frame->end,
            __frame->flags,
            __frame->n_requested,
            __frame->n_runtimes,
            __frame->runtimes);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_runtimes;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->runtimes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[444]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->n_runtimes;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->n_runtimes;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->runtimes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[444]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcScheduledRuntimes( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcGetLastRunInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    SYSTEMTIME _W0;
    SYSTEMTIME * last_runtime;
    DWORD _W1;
    DWORD * last_return_code;
};

static void __finally_ITaskSchedulerService_SchRpcGetLastRunInfo( struct __frame_ITaskSchedulerService_SchRpcGetLastRunInfo *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[448]);




}

void __RPC_STUB ITaskSchedulerService_SchRpcGetLastRunInfo( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcGetLastRunInfo __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcGetLastRunInfo );
    __frame->path = 0;
    __frame->last_runtime = 0;
    __frame->last_return_code = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[272]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[450],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->last_runtime = &__frame->_W0;
        __frame->last_return_code = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcGetLastRunInfo(
            __frame->path,
            __frame->last_runtime,
            __frame->last_return_code);
        __frame->_StubMsg.BufferLength = 34;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->last_runtime,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[400]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->last_return_code;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcGetLastRunInfo( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcGetTaskInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD flags;
    DWORD _W0;
    DWORD * enabled;
    DWORD _W1;
    DWORD * task_state;
};

static void __finally_ITaskSchedulerService_SchRpcGetTaskInfo( struct __frame_ITaskSchedulerService_SchRpcGetTaskInfo *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[460]);





}

void __RPC_STUB ITaskSchedulerService_SchRpcGetTaskInfo( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcGetTaskInfo __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcGetTaskInfo );
    __frame->path = 0;
    __frame->enabled = 0;
    __frame->task_state = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[286]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[462],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->enabled = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->task_state = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = SchRpcGetTaskInfo(
            __frame->path,
            __frame->flags,
            __frame->enabled,
            __frame->task_state);
        __frame->_StubMsg.BufferLength = 24;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->enabled;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->task_state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcGetTaskInfo( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD _W0;
    DWORD * runs;
};

static void __finally_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns( struct __frame_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[472]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcGetNumberOfMissedRuns( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns );
    __frame->path = 0;
    __frame->runs = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[302]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[474],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->runs = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = SchRpcGetNumberOfMissedRuns(
            __frame->path,
            __frame->runs);
        __frame->_StubMsg.BufferLength = 16;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->runs;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcGetNumberOfMissedRuns( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_ITaskSchedulerService_SchRpcEnableTask
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    HRESULT _RetVal;
    const WCHAR * path;
    DWORD enabled;
};

static void __finally_ITaskSchedulerService_SchRpcEnableTask( struct __frame_ITaskSchedulerService_SchRpcEnableTask *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->path,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[480]);



}

void __RPC_STUB ITaskSchedulerService_SchRpcEnableTask( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_ITaskSchedulerService_SchRpcEnableTask __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &ITaskSchedulerService_StubDesc);

    RpcExceptionInit( __server_filter, __finally_ITaskSchedulerService_SchRpcEnableTask );
    __frame->path = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[312]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->path,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[482],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->enabled = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = SchRpcEnableTask(
            __frame->path,
            __frame->enabled);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ITaskSchedulerService_SchRpcEnableTask( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

#if !defined(__RPC_WIN64__)
#error  Invalid build platform for this stub.
#endif

static const unsigned short ITaskSchedulerService_FormatStringOffsetTable[] =
{
    0,  /* SchRpcHighestVersion */
    6,  /* SchRpcRegisterTask */
    38,  /* SchRpcRetrieveTask */
    56,  /* SchRpcCreateFolder */
    68,  /* SchRpcSetSecurity */
    80,  /* SchRpcGetSecurity */
    92,  /* SchRpcEnumFolders */
    114,  /* SchRpcEnumTasks */
    136,  /* SchRpcEnumInstances */
    152,  /* SchRpcGetInstanceInfo */
    186,  /* SchRpcStopInstance */
    194,  /* SchRpcStop */
    202,  /* SchRpcRun */
    226,  /* SchRpcDelete */
    234,  /* SchRpcRename */
    246,  /* SchRpcScheduledRuntimes */
    272,  /* SchRpcGetLastRunInfo */
    286,  /* SchRpcGetTaskInfo */
    302,  /* SchRpcGetNumberOfMissedRuns */
    312,  /* SchRpcEnableTask */
};

static const MIDL_STUB_DESC ITaskSchedulerService_StubDesc =
{
    (void *)& ITaskSchedulerService___RpcServerInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        0,
    },
    0,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

static RPC_DISPATCH_FUNCTION ITaskSchedulerService_table[] =
{
    ITaskSchedulerService_SchRpcHighestVersion,
    ITaskSchedulerService_SchRpcRegisterTask,
    ITaskSchedulerService_SchRpcRetrieveTask,
    ITaskSchedulerService_SchRpcCreateFolder,
    ITaskSchedulerService_SchRpcSetSecurity,
    ITaskSchedulerService_SchRpcGetSecurity,
    ITaskSchedulerService_SchRpcEnumFolders,
    ITaskSchedulerService_SchRpcEnumTasks,
    ITaskSchedulerService_SchRpcEnumInstances,
    ITaskSchedulerService_SchRpcGetInstanceInfo,
    ITaskSchedulerService_SchRpcStopInstance,
    ITaskSchedulerService_SchRpcStop,
    ITaskSchedulerService_SchRpcRun,
    ITaskSchedulerService_SchRpcDelete,
    ITaskSchedulerService_SchRpcRename,
    ITaskSchedulerService_SchRpcScheduledRuntimes,
    ITaskSchedulerService_SchRpcGetLastRunInfo,
    ITaskSchedulerService_SchRpcGetTaskInfo,
    ITaskSchedulerService_SchRpcGetNumberOfMissedRuns,
    ITaskSchedulerService_SchRpcEnableTask,
    0
};
static RPC_DISPATCH_TABLE ITaskSchedulerService_v1_0_DispatchTable =
{
    20,
    ITaskSchedulerService_table
};

static const SERVER_ROUTINE ITaskSchedulerService_ServerRoutineTable[] =
{
    (SERVER_ROUTINE)SchRpcHighestVersion,
    (SERVER_ROUTINE)SchRpcRegisterTask,
    (SERVER_ROUTINE)SchRpcRetrieveTask,
    (SERVER_ROUTINE)SchRpcCreateFolder,
    (SERVER_ROUTINE)SchRpcSetSecurity,
    (SERVER_ROUTINE)SchRpcGetSecurity,
    (SERVER_ROUTINE)SchRpcEnumFolders,
    (SERVER_ROUTINE)SchRpcEnumTasks,
    (SERVER_ROUTINE)SchRpcEnumInstances,
    (SERVER_ROUTINE)SchRpcGetInstanceInfo,
    (SERVER_ROUTINE)SchRpcStopInstance,
    (SERVER_ROUTINE)SchRpcStop,
    (SERVER_ROUTINE)SchRpcRun,
    (SERVER_ROUTINE)SchRpcDelete,
    (SERVER_ROUTINE)SchRpcRename,
    (SERVER_ROUTINE)SchRpcScheduledRuntimes,
    (SERVER_ROUTINE)SchRpcGetLastRunInfo,
    (SERVER_ROUTINE)SchRpcGetTaskInfo,
    (SERVER_ROUTINE)SchRpcGetNumberOfMissedRuns,
    (SERVER_ROUTINE)SchRpcEnableTask,
};

static const MIDL_SERVER_INFO ITaskSchedulerService_ServerInfo =
{
    &ITaskSchedulerService_StubDesc,
    ITaskSchedulerService_ServerRoutineTable,
    __MIDL_ProcFormatString.Format,
    ITaskSchedulerService_FormatStringOffsetTable,
    0,
    0,
    0,
    0
};

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter version) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 4 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6),	/* type offset = 6 */
/* 10 (parameter xml) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa),	/* type offset = 10 */
/* 14 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 16 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe),	/* type offset = 14 */
/* 20 (parameter task_logon_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 22 (parameter n_creds) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter creds) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x42),	/* type offset = 66 */
/* 28 (parameter actual_path) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4a),	/* type offset = 74 */
/* 32 (parameter xml_error_info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x70),	/* type offset = 112 */
/* 36 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 38 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x74),	/* type offset = 116 */
/* 42 (parameter languages) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x78),	/* type offset = 120 */
/* 46 (parameter n_languages) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7c),	/* type offset = 124 */
/* 50 (parameter xml) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x84),	/* type offset = 132 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x88),	/* type offset = 136 */
/* 60 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8c),	/* type offset = 140 */
/* 64 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 66 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 68 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x90),	/* type offset = 144 */
/* 72 (parameter sddl) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x94),	/* type offset = 148 */
/* 76 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 78 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 80 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x98),	/* type offset = 152 */
/* 84 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter sddl) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa0),	/* type offset = 160 */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa4),	/* type offset = 164 */
/* 96 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 98 (parameter start_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xa8),	/* type offset = 168 */
/* 102 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 104 (parameter n_names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xac),	/* type offset = 172 */
/* 108 (parameter names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb8),	/* type offset = 184 */
/* 112 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 114 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xca),	/* type offset = 202 */
/* 118 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 120 (parameter start_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xce),	/* type offset = 206 */
/* 124 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 126 (parameter n_names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd2),	/* type offset = 210 */
/* 130 (parameter names) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xde),	/* type offset = 222 */
/* 134 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 136 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf0),	/* type offset = 240 */
/* 140 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 142 (parameter n_guids) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf4),	/* type offset = 244 */
/* 146 (parameter guids) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11c),	/* type offset = 284 */
/* 150 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 152 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfe),	/* type offset = 254 */
/* 156 (parameter path) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x124),	/* type offset = 292 */
/* 160 (parameter task_state) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x128),	/* type offset = 296 */
/* 164 (parameter action) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x130),	/* type offset = 304 */
/* 168 (parameter info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x138),	/* type offset = 312 */
/* 172 (parameter n_instances) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13c),	/* type offset = 316 */
/* 176 (parameter instances) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x152),	/* type offset = 338 */
/* 180 (parameter pid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x156),	/* type offset = 342 */
/* 184 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 186 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfe),	/* type offset = 254 */
/* 190 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 192 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15a),	/* type offset = 346 */
/* 198 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 200 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 202 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15e),	/* type offset = 350 */
/* 206 (parameter n_args) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 208 (parameter args) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x174),	/* type offset = 372 */
/* 212 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 214 (parameter session_id) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 216 (parameter user) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x178),	/* type offset = 376 */
/* 220 (parameter guid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x17c),	/* type offset = 380 */
/* 224 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 226 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x180),	/* type offset = 384 */
/* 230 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 232 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 234 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x184),	/* type offset = 388 */
/* 238 (parameter name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x188),	/* type offset = 392 */
/* 242 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 244 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 246 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x18c),	/* type offset = 396 */
/* 250 (parameter start) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x19e),	/* type offset = 414 */
/* 254 (parameter end) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1a2),	/* type offset = 418 */
/* 258 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter n_requested) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 262 (parameter n_runtimes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a6),	/* type offset = 422 */
/* 266 (parameter runtimes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1bc),	/* type offset = 444 */
/* 270 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 272 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1c0),	/* type offset = 448 */
/* 276 (parameter last_runtime) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1c4),	/* type offset = 452 */
/* 280 (parameter last_return_code) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1c8),	/* type offset = 456 */
/* 284 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 286 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1cc),	/* type offset = 460 */
/* 290 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 292 (parameter enabled) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d0),	/* type offset = 464 */
/* 296 (parameter task_state) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d4),	/* type offset = 468 */
/* 300 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 302 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1d8),	/* type offset = 472 */
/* 306 (parameter runs) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1dc),	/* type offset = 476 */
/* 310 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 312 (parameter path) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e0),	/* type offset = 480 */
/* 316 (parameter enabled) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 318 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 6 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  8 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 10 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 12 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 14 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 16 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 18 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 20 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 22 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 24 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 26 (const TASK_USER_CRED) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (40) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 40 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 42 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 44 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 46 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 48 (const TASK_USER_CRED *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter n_creds, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (26) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 66 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (48) */
/* 70 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (74) */
/* 74 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 76 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 78 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 80 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 82 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 84 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 86 (TASK_XML_ERROR_INFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (100) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 100 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 102 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 104 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 106 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 108 (TASK_XML_ERROR_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (86) */
/* 112 (TASK_XML_ERROR_INFO **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (108) */
/* 116 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 118 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 120 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 122 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 124 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 128 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (132) */
/* 132 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 134 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 136 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 138 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 140 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 142 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 144 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 146 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 148 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 150 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 152 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 154 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 156 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (160) */
/* 160 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 162 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 164 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 166 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 168 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 172 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 176 (TASK_NAMES *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (180) */
/* 180 (TASK_NAMES) */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0x2),
/* 184 (TASK_NAMES) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter n_names, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x20),	/* offset = 32 */
        NdrFcLong(0xffffffff),	/* -1 */
/* 196 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 198 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 202 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 204 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 206 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 210 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 214 (TASK_NAMES *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (218) */
/* 218 (TASK_NAMES) */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0x2),
/* 222 (TASK_NAMES) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter n_names, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x20),	/* offset = 32 */
        NdrFcLong(0xffffffff),	/* -1 */
/* 234 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 236 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 240 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 242 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 244 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 248 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 254 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (248) */
        0x5b,	/* FC_END */
/* 266 (GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_guids, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x10),	/* offset = 16 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (254) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 280 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (266) */
/* 284 (GUID **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (280) */
/* 288 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (292) */
/* 292 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 294 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 296 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 300 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (304) */
/* 304 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 306 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 308 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (312) */
/* 312 (WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 314 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 316 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 320 (GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_instances, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x28),	/* offset = 40 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffb4),	/* Offset= -76 (254) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 334 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (320) */
/* 338 (GUID **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (334) */
/* 342 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 346 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 348 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 350 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 352 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 354 (const WCHAR **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter n_args, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 372 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (354) */
/* 376 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 378 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 380 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff80),	/* Offset= -128 (254) */
/* 384 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 386 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 388 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 390 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 392 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 394 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 396 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 398 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 400 (SYSTEMTIME) */
        0x15,	/* FC_STRUCT */
        0x1,	/* 1 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 414 (SYSTEMTIME *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (400) */
/* 418 (SYSTEMTIME *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (400) */
/* 422 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 426 (SYSTEMTIME *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter n_runtimes, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x28),	/* offset = 40 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (400) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 440 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (426) */
/* 444 (SYSTEMTIME **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (440) */
/* 448 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 450 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 452 (SYSTEMTIME *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffca),	/* Offset= -54 (400) */
/* 456 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 460 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 462 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 464 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 468 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 472 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 474 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 476 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 480 (const WCHAR *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 482 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x0
    }
};


#endif /* _WIN64 */
