/*** Autogenerated by WIDL 3.8 from quartz_strmif.idl - Do not edit ***/

#define __midl_proxy
#include "objbase.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif


#ifndef _WIN64

#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 440
#endif

#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error This code needs a newer version of rpcproxy.h
#endif /* __RPCPROXY_H_VERSION__ */

#include "quartz_strmif.h"

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __proxy_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    void             *This;
};

static int __proxy_filter( struct __proxy_frame *__frame )
{
    return (__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE);
}

#define TYPE_FORMAT_STRING_SIZE 3963
#define PROC_FORMAT_STRING_SIZE 1523

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const MIDL_STUB_DESC Object_StubDesc;

/*****************************************************************************
 * ICreateDevEnum interface
 */
static void __finally_ICreateDevEnum_CreateClassEnumerator_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICreateDevEnum_CreateClassEnumerator_Proxy(
    ICreateDevEnum* This,
    REFCLSID clsidDeviceClass,
    IEnumMoniker **ppEnumMoniker,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICreateDevEnum_CreateClassEnumerator_Proxy );
    __frame->This = This;
    if (ppEnumMoniker) MIDL_memset( ppEnumMoniker, 0, sizeof( *ppEnumMoniker ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!clsidDeviceClass) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppEnumMoniker) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsidDeviceClass,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnumMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[42],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICreateDevEnum_CreateClassEnumerator_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[42], (void *)ppEnumMoniker );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICreateDevEnum_CreateClassEnumerator_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICreateDevEnum * _This;
    HRESULT _RetVal;
    REFCLSID clsidDeviceClass;
    IEnumMoniker *_W0;
    IEnumMoniker ** ppEnumMoniker;
    DWORD dwFlags;
};

static void __finally_ICreateDevEnum_CreateClassEnumerator_Stub( struct __frame_ICreateDevEnum_CreateClassEnumerator_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnumMoniker,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[42]);


}

void __RPC_STUB ICreateDevEnum_CreateClassEnumerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICreateDevEnum_CreateClassEnumerator_Stub __f, * const __frame = &__f;

    __frame->_This = (ICreateDevEnum*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICreateDevEnum_CreateClassEnumerator_Stub );
    __frame->clsidDeviceClass = 0;
    __frame->ppEnumMoniker = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsidDeviceClass,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->ppEnumMoniker = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateClassEnumerator(__frame->_This, __frame->clsidDeviceClass, __frame->ppEnumMoniker, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnumMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[42]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnumMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[42]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICreateDevEnum_CreateClassEnumerator_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICreateDevEnum_FormatStringOffsetTable[] =
{
    0,  /* ICreateDevEnum::CreateClassEnumerator */
};

static const CINTERFACE_PROXY_VTABLE(4) _ICreateDevEnumProxyVtbl =
{
    {
        &IID_ICreateDevEnum,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICreateDevEnum_CreateClassEnumerator_Proxy,
    }
};

static const MIDL_SERVER_INFO ICreateDevEnum_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICreateDevEnum_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICreateDevEnum_table[] =
{
    ICreateDevEnum_CreateClassEnumerator_Stub
};

static const CInterfaceStubVtbl _ICreateDevEnumStubVtbl =
{
    {
        &IID_ICreateDevEnum,
        &ICreateDevEnum_ServerInfo,
        4,
        &ICreateDevEnum_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IPin interface
 */
static void __finally_IPin_Connect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_Connect_Proxy(
    IPin* This,
    IPin *pReceivePin,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_Connect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pReceivePin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pReceivePin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46]);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_Connect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_Connect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    IPin * pReceivePin;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IPin_Connect_Stub( struct __frame_IPin_Connect_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pReceivePin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[144]);

}

void __RPC_STUB IPin_Connect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_Connect_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_Connect_Stub );
    __frame->pReceivePin = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pReceivePin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46],
            0);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Connect(__frame->_This, __frame->pReceivePin, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_Connect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_ReceiveConnection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_ReceiveConnection_Proxy(
    IPin* This,
    IPin *pConnector,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_ReceiveConnection_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pConnector,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[148]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pConnector,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[148]);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[22]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_ReceiveConnection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_ReceiveConnection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    IPin * pConnector;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IPin_ReceiveConnection_Stub( struct __frame_IPin_ReceiveConnection_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pConnector,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[148]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[210]);

}

void __RPC_STUB IPin_ReceiveConnection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_ReceiveConnection_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_ReceiveConnection_Stub );
    __frame->pConnector = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[22]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pConnector,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[148],
            0);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReceiveConnection(__frame->_This, __frame->pConnector, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_ReceiveConnection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_Disconnect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_Disconnect_Proxy(
    IPin* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_Disconnect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[32]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_Disconnect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_Disconnect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
};

static void __finally_IPin_Disconnect_Stub( struct __frame_IPin_Disconnect_Stub *__frame )
{
}

void __RPC_STUB IPin_Disconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_Disconnect_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_Disconnect_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[32]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Disconnect(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_Disconnect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_ConnectedTo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_ConnectedTo_Proxy(
    IPin* This,
    IPin **pPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_ConnectedTo_Proxy );
    __frame->This = This;
    if (pPin) MIDL_memset( pPin, 0, sizeof( *pPin ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[34]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_ConnectedTo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[232], (void *)pPin );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_ConnectedTo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    IPin *_W0;
    IPin ** pPin;
};

static void __finally_IPin_ConnectedTo_Stub( struct __frame_IPin_ConnectedTo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);

}

void __RPC_STUB IPin_ConnectedTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_ConnectedTo_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_ConnectedTo_Stub );
    __frame->pPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[34]);


        __frame->pPin = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ConnectedTo(__frame->_This, __frame->pPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_ConnectedTo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_ConnectionMediaType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_ConnectionMediaType_Proxy(
    IPin* This,
    AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_ConnectionMediaType_Proxy );
    __frame->This = This;
    if (pmt) MIDL_memset( pmt, 0, sizeof( *pmt ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[40]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_ConnectionMediaType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[280], (void *)pmt );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_ConnectionMediaType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    AM_MEDIA_TYPE _W0;
    AM_MEDIA_TYPE * pmt;
};

static void __finally_IPin_ConnectionMediaType_Stub( struct __frame_IPin_ConnectionMediaType_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[280]);

}

void __RPC_STUB IPin_ConnectionMediaType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_ConnectionMediaType_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_ConnectionMediaType_Stub );
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[40]);


        __frame->pmt = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ConnectionMediaType(__frame->_This, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_ConnectionMediaType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_QueryPinInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_QueryPinInfo_Proxy(
    IPin* This,
    PIN_INFO *pInfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_QueryPinInfo_Proxy );
    __frame->This = This;
    if (pInfo) MIDL_memset( pInfo, 0, sizeof( *pInfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[308],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_QueryPinInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[326], (void *)pInfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_QueryPinInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    PIN_INFO _W0;
    PIN_INFO * pInfo;
};

static void __finally_IPin_QueryPinInfo_Stub( struct __frame_IPin_QueryPinInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[326]);

}

void __RPC_STUB IPin_QueryPinInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_QueryPinInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_QueryPinInfo_Stub );
    __frame->pInfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);


        __frame->pInfo = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryPinInfo(__frame->_This, __frame->pInfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[308]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[308]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_QueryPinInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_QueryDirection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_QueryDirection_Proxy(
    IPin* This,
    PIN_DIRECTION *pPinDir)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_QueryDirection_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pPinDir) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[52]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pPinDir,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[330],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_QueryDirection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[330], (void *)pPinDir );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_QueryDirection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    PIN_DIRECTION _W0;
    PIN_DIRECTION * pPinDir;
};

static void __finally_IPin_QueryDirection_Stub( struct __frame_IPin_QueryDirection_Stub *__frame )
{

}

void __RPC_STUB IPin_QueryDirection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_QueryDirection_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_QueryDirection_Stub );
    __frame->pPinDir = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[52]);


        __frame->pPinDir = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryDirection(__frame->_This, __frame->pPinDir);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 14;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pPinDir,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[330]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_QueryDirection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_QueryId_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_QueryId_Proxy(
    IPin* This,
    LPWSTR *Id)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_QueryId_Proxy );
    __frame->This = This;
    if (Id) MIDL_memset( Id, 0, sizeof( *Id ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!Id) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&Id,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[334],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_QueryId_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[338], (void *)Id );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_QueryId_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    LPWSTR _W0;
    LPWSTR * Id;
};

static void __finally_IPin_QueryId_Stub( struct __frame_IPin_QueryId_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Id,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[334]);

}

void __RPC_STUB IPin_QueryId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_QueryId_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_QueryId_Stub );
    __frame->Id = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);


        __frame->Id = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryId(__frame->_This, __frame->Id);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->Id,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[334]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->Id,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[334]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_QueryId_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_QueryAccept_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_QueryAccept_Proxy(
    IPin* This,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_QueryAccept_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[352]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[352]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[64]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_QueryAccept_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_QueryAccept_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IPin_QueryAccept_Stub( struct __frame_IPin_QueryAccept_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[386]);

}

void __RPC_STUB IPin_QueryAccept_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_QueryAccept_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_QueryAccept_Stub );
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[64]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[352],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryAccept(__frame->_This, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_QueryAccept_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_EnumMediaTypes_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_EnumMediaTypes_Proxy(
    IPin* This,
    IEnumMediaTypes **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_EnumMediaTypes_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[70]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[408],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_EnumMediaTypes_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[408], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_EnumMediaTypes_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    IEnumMediaTypes *_W0;
    IEnumMediaTypes ** ppEnum;
};

static void __finally_IPin_EnumMediaTypes_Stub( struct __frame_IPin_EnumMediaTypes_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[408]);

}

void __RPC_STUB IPin_EnumMediaTypes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_EnumMediaTypes_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_EnumMediaTypes_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[70]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumMediaTypes(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[408]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[408]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_EnumMediaTypes_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_QueryInternalConnections_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_QueryInternalConnections_Proxy(
    IPin* This,
    IPin **apPin,
    ULONG *nPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_QueryInternalConnections_Proxy );
    __frame->This = This;
    if (apPin) MIDL_memset( apPin, 0, sizeof( *apPin ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!apPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!nPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *nPin;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&apPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[430],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *nPin = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_QueryInternalConnections_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[430], (void *)apPin );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[434], (void *)nPin );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_QueryInternalConnections_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    IPin *_W0;
    IPin ** apPin;
    ULONG * nPin;
};

static void __finally_IPin_QueryInternalConnections_Stub( struct __frame_IPin_QueryInternalConnections_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->apPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[430]);


}

void __RPC_STUB IPin_QueryInternalConnections_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_QueryInternalConnections_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_QueryInternalConnections_Stub );
    __frame->apPin = 0;
    __frame->nPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->nPin = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->apPin = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryInternalConnections(__frame->_This, __frame->apPin, __frame->nPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->apPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[430]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->apPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[430]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->nPin;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_QueryInternalConnections_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_EndOfStream_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_EndOfStream_Proxy(
    IPin* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_EndOfStream_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[86]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_EndOfStream_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_EndOfStream_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
};

static void __finally_IPin_EndOfStream_Stub( struct __frame_IPin_EndOfStream_Stub *__frame )
{
}

void __RPC_STUB IPin_EndOfStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_EndOfStream_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_EndOfStream_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[86]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EndOfStream(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_EndOfStream_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_BeginFlush_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_BeginFlush_Proxy(
    IPin* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_BeginFlush_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[88]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_BeginFlush_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_BeginFlush_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
};

static void __finally_IPin_BeginFlush_Stub( struct __frame_IPin_BeginFlush_Stub *__frame )
{
}

void __RPC_STUB IPin_BeginFlush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_BeginFlush_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_BeginFlush_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[88]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->BeginFlush(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_BeginFlush_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_EndFlush_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_EndFlush_Proxy(
    IPin* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_EndFlush_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[90]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_EndFlush_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_EndFlush_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
};

static void __finally_IPin_EndFlush_Stub( struct __frame_IPin_EndFlush_Stub *__frame )
{
}

void __RPC_STUB IPin_EndFlush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_EndFlush_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_EndFlush_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[90]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EndFlush(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_EndFlush_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_NewSegment_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_NewSegment_Proxy(
    IPin* This,
    REFERENCE_TIME tStart,
    REFERENCE_TIME tStop,
    double dRate)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_NewSegment_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = tStart;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = tStop;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(double *)__frame->_StubMsg.Buffer = dRate;
            __frame->_StubMsg.Buffer += sizeof(double);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[92]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_NewSegment_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_NewSegment_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    REFERENCE_TIME tStart;
    REFERENCE_TIME tStop;
    double dRate;
};

static void __finally_IPin_NewSegment_Stub( struct __frame_IPin_NewSegment_Stub *__frame )
{



}

void __RPC_STUB IPin_NewSegment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_NewSegment_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_NewSegment_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[92]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tStart = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tStop = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(double) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dRate = *(double *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(double);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->NewSegment(__frame->_This, __frame->tStart, __frame->tStop, __frame->dRate);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_NewSegment_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IPin_FormatStringOffsetTable[] =
{
    12,  /* IPin::Connect */
    22,  /* IPin::ReceiveConnection */
    32,  /* IPin::Disconnect */
    34,  /* IPin::ConnectedTo */
    40,  /* IPin::ConnectionMediaType */
    46,  /* IPin::QueryPinInfo */
    52,  /* IPin::QueryDirection */
    58,  /* IPin::QueryId */
    64,  /* IPin::QueryAccept */
    70,  /* IPin::EnumMediaTypes */
    76,  /* IPin::QueryInternalConnections */
    86,  /* IPin::EndOfStream */
    88,  /* IPin::BeginFlush */
    90,  /* IPin::EndFlush */
    92,  /* IPin::NewSegment */
};

static const CINTERFACE_PROXY_VTABLE(18) _IPinProxyVtbl =
{
    {
        &IID_IPin,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IPin_Connect_Proxy,
        IPin_ReceiveConnection_Proxy,
        IPin_Disconnect_Proxy,
        IPin_ConnectedTo_Proxy,
        IPin_ConnectionMediaType_Proxy,
        IPin_QueryPinInfo_Proxy,
        IPin_QueryDirection_Proxy,
        IPin_QueryId_Proxy,
        IPin_QueryAccept_Proxy,
        IPin_EnumMediaTypes_Proxy,
        IPin_QueryInternalConnections_Proxy,
        IPin_EndOfStream_Proxy,
        IPin_BeginFlush_Proxy,
        IPin_EndFlush_Proxy,
        IPin_NewSegment_Proxy,
    }
};

static const MIDL_SERVER_INFO IPin_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IPin_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IPin_table[] =
{
    IPin_Connect_Stub,
    IPin_ReceiveConnection_Stub,
    IPin_Disconnect_Stub,
    IPin_ConnectedTo_Stub,
    IPin_ConnectionMediaType_Stub,
    IPin_QueryPinInfo_Stub,
    IPin_QueryDirection_Stub,
    IPin_QueryId_Stub,
    IPin_QueryAccept_Stub,
    IPin_EnumMediaTypes_Stub,
    IPin_QueryInternalConnections_Stub,
    IPin_EndOfStream_Stub,
    IPin_BeginFlush_Stub,
    IPin_EndFlush_Stub,
    IPin_NewSegment_Stub
};

static const CInterfaceStubVtbl _IPinStubVtbl =
{
    {
        &IID_IPin,
        &IPin_ServerInfo,
        18,
        &IPin_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumPins interface
 */
static void __finally_IEnumPins_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumPins_Next_Proxy(
    IEnumPins* This,
    ULONG cPins,
    IPin **ppPins,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumPins_Next_Proxy );
    __frame->This = This;
    if (ppPins) MIDL_memset( ppPins, 0, sizeof( *ppPins ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppPins) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPins;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[100]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppPins,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[456],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumPins_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)cPins;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[474], (void *)ppPins );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[478], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumPins_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumPins * _This;
    HRESULT _RetVal;
    ULONG cPins;
    IPin ** ppPins;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumPins_Next_Stub( struct __frame_IEnumPins_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPins;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppPins,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[474]);


}

void __RPC_STUB IEnumPins_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumPins_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumPins*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumPins_Next_Stub );
    __frame->ppPins = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[100]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPins = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppPins = NdrAllocate(&__frame->_StubMsg, __frame->cPins * 4);
        memset(__frame->ppPins, 0, __frame->cPins * 4);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->cPins, __frame->ppPins, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPins;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPins,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[456]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPins;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPins,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[456]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumPins_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumPins_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumPins_Skip_Proxy(
    IEnumPins* This,
    ULONG cPins)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumPins_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPins;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[112]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumPins_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumPins_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumPins * _This;
    HRESULT _RetVal;
    ULONG cPins;
};

static void __finally_IEnumPins_Skip_Stub( struct __frame_IEnumPins_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumPins_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumPins_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumPins*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumPins_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[112]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPins = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->cPins);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumPins_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumPins_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumPins_Reset_Proxy(
    IEnumPins* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumPins_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[116]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumPins_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumPins_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumPins * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumPins_Reset_Stub( struct __frame_IEnumPins_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumPins_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumPins_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumPins*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumPins_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[116]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumPins_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumPins_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumPins_Clone_Proxy(
    IEnumPins* This,
    IEnumPins **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumPins_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[500],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumPins_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[500], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumPins_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumPins * _This;
    HRESULT _RetVal;
    IEnumPins *_W0;
    IEnumPins ** ppEnum;
};

static void __finally_IEnumPins_Clone_Stub( struct __frame_IEnumPins_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[500]);

}

void __RPC_STUB IEnumPins_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumPins_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumPins*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumPins_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[500]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[500]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumPins_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumPins_FormatStringOffsetTable[] =
{
    100,  /* IEnumPins::Next */
    112,  /* IEnumPins::Skip */
    116,  /* IEnumPins::Reset */
    118,  /* IEnumPins::Clone */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumPinsProxyVtbl =
{
    {
        &IID_IEnumPins,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumPins_Next_Proxy,
        IEnumPins_Skip_Proxy,
        IEnumPins_Reset_Proxy,
        IEnumPins_Clone_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumPins_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumPins_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumPins_table[] =
{
    IEnumPins_Next_Stub,
    IEnumPins_Skip_Stub,
    IEnumPins_Reset_Stub,
    IEnumPins_Clone_Stub
};

static const CInterfaceStubVtbl _IEnumPinsStubVtbl =
{
    {
        &IID_IEnumPins,
        &IEnumPins_ServerInfo,
        7,
        &IEnumPins_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumMediaTypes interface
 */
static void __finally_IEnumMediaTypes_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumMediaTypes_Next_Proxy(
    IEnumMediaTypes* This,
    ULONG cMediaTypes,
    AM_MEDIA_TYPE **ppMediaTypes,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumMediaTypes_Next_Proxy );
    __frame->This = This;
    if (ppMediaTypes) MIDL_memset( ppMediaTypes, 0, sizeof( *ppMediaTypes ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppMediaTypes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cMediaTypes;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[124]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppMediaTypes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[504],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumMediaTypes_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)cMediaTypes;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[536], (void *)ppMediaTypes );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[540], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumMediaTypes_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumMediaTypes * _This;
    HRESULT _RetVal;
    ULONG cMediaTypes;
    AM_MEDIA_TYPE ** ppMediaTypes;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumMediaTypes_Next_Stub( struct __frame_IEnumMediaTypes_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cMediaTypes;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppMediaTypes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[536]);


}

void __RPC_STUB IEnumMediaTypes_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumMediaTypes_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumMediaTypes*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumMediaTypes_Next_Stub );
    __frame->ppMediaTypes = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[124]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cMediaTypes = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppMediaTypes = NdrAllocate(&__frame->_StubMsg, __frame->cMediaTypes * 4);
        memset(__frame->ppMediaTypes, 0, __frame->cMediaTypes * 4);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->cMediaTypes, __frame->ppMediaTypes, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cMediaTypes;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppMediaTypes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[504]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cMediaTypes;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppMediaTypes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[504]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumMediaTypes_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumMediaTypes_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumMediaTypes_Skip_Proxy(
    IEnumMediaTypes* This,
    ULONG cMediaTypes)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumMediaTypes_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cMediaTypes;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[136]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumMediaTypes_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumMediaTypes_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumMediaTypes * _This;
    HRESULT _RetVal;
    ULONG cMediaTypes;
};

static void __finally_IEnumMediaTypes_Skip_Stub( struct __frame_IEnumMediaTypes_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumMediaTypes_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumMediaTypes_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumMediaTypes*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumMediaTypes_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[136]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cMediaTypes = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->cMediaTypes);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumMediaTypes_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumMediaTypes_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumMediaTypes_Reset_Proxy(
    IEnumMediaTypes* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumMediaTypes_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[140]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumMediaTypes_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumMediaTypes_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumMediaTypes * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumMediaTypes_Reset_Stub( struct __frame_IEnumMediaTypes_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumMediaTypes_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumMediaTypes_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumMediaTypes*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumMediaTypes_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[140]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumMediaTypes_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumMediaTypes_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumMediaTypes_Clone_Proxy(
    IEnumMediaTypes* This,
    IEnumMediaTypes **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumMediaTypes_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[142]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[562],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumMediaTypes_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[562], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumMediaTypes_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumMediaTypes * _This;
    HRESULT _RetVal;
    IEnumMediaTypes *_W0;
    IEnumMediaTypes ** ppEnum;
};

static void __finally_IEnumMediaTypes_Clone_Stub( struct __frame_IEnumMediaTypes_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[562]);

}

void __RPC_STUB IEnumMediaTypes_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumMediaTypes_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumMediaTypes*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumMediaTypes_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[142]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[562]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[562]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumMediaTypes_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumMediaTypes_FormatStringOffsetTable[] =
{
    124,  /* IEnumMediaTypes::Next */
    136,  /* IEnumMediaTypes::Skip */
    140,  /* IEnumMediaTypes::Reset */
    142,  /* IEnumMediaTypes::Clone */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumMediaTypesProxyVtbl =
{
    {
        &IID_IEnumMediaTypes,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumMediaTypes_Next_Proxy,
        IEnumMediaTypes_Skip_Proxy,
        IEnumMediaTypes_Reset_Proxy,
        IEnumMediaTypes_Clone_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumMediaTypes_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumMediaTypes_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumMediaTypes_table[] =
{
    IEnumMediaTypes_Next_Stub,
    IEnumMediaTypes_Skip_Stub,
    IEnumMediaTypes_Reset_Stub,
    IEnumMediaTypes_Clone_Stub
};

static const CInterfaceStubVtbl _IEnumMediaTypesStubVtbl =
{
    {
        &IID_IEnumMediaTypes,
        &IEnumMediaTypes_ServerInfo,
        7,
        &IEnumMediaTypes_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFilterGraph interface
 */
static void __finally_IFilterGraph_AddFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_AddFilter_Proxy(
    IFilterGraph* This,
    IBaseFilter *pFilter,
    LPCWSTR pName)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_AddFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[566]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[586]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[566]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[586]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[148]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_AddFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_AddFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IBaseFilter * pFilter;
    LPCWSTR pName;
};

static void __finally_IFilterGraph_AddFilter_Stub( struct __frame_IFilterGraph_AddFilter_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[566]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[584]);

}

void __RPC_STUB IFilterGraph_AddFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_AddFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_AddFilter_Stub );
    __frame->pFilter = 0;
    __frame->pName = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[148]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[566],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[586],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AddFilter(__frame->_This, __frame->pFilter, __frame->pName);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_AddFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_RemoveFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_RemoveFilter_Proxy(
    IFilterGraph* This,
    IBaseFilter *pFilter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_RemoveFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[588]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[588]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[158]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_RemoveFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_RemoveFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IBaseFilter * pFilter;
};

static void __finally_IFilterGraph_RemoveFilter_Stub( struct __frame_IFilterGraph_RemoveFilter_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[588]);

}

void __RPC_STUB IFilterGraph_RemoveFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_RemoveFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_RemoveFilter_Stub );
    __frame->pFilter = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[158]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[588],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RemoveFilter(__frame->_This, __frame->pFilter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_RemoveFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_EnumFilters_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_EnumFilters_Proxy(
    IFilterGraph* This,
    IEnumFilters **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_EnumFilters_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[164]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[624],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_EnumFilters_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[624], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_EnumFilters_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IEnumFilters *_W0;
    IEnumFilters ** ppEnum;
};

static void __finally_IFilterGraph_EnumFilters_Stub( struct __frame_IFilterGraph_EnumFilters_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[624]);

}

void __RPC_STUB IFilterGraph_EnumFilters_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_EnumFilters_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_EnumFilters_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[164]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumFilters(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[624]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[624]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_EnumFilters_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_FindFilterByName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_FindFilterByName_Proxy(
    IFilterGraph* This,
    LPCWSTR pName,
    IBaseFilter **ppFilter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_FindFilterByName_Proxy );
    __frame->This = This;
    if (ppFilter) MIDL_memset( ppFilter, 0, sizeof( *ppFilter ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[630]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[630]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[170]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[650],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_FindFilterByName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[650], (void *)ppFilter );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_FindFilterByName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    LPCWSTR pName;
    IBaseFilter *_W0;
    IBaseFilter ** ppFilter;
};

static void __finally_IFilterGraph_FindFilterByName_Stub( struct __frame_IFilterGraph_FindFilterByName_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[628]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[650]);

}

void __RPC_STUB IFilterGraph_FindFilterByName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_FindFilterByName_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_FindFilterByName_Stub );
    __frame->pName = 0;
    __frame->ppFilter = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[170]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[630],
            0);


        __frame->ppFilter = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->FindFilterByName(__frame->_This, __frame->pName, __frame->ppFilter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[650]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[650]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_FindFilterByName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_ConnectDirect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_ConnectDirect_Proxy(
    IFilterGraph* This,
    IPin *ppinOut,
    IPin *ppinIn,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_ConnectDirect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppinIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[672]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[734]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppinIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[672]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[734]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[180]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_ConnectDirect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_ConnectDirect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IPin * ppinOut;
    IPin * ppinIn;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IFilterGraph_ConnectDirect_Stub( struct __frame_IFilterGraph_ConnectDirect_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppinOut,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppinIn,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[672]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[734]);

}

void __RPC_STUB IFilterGraph_ConnectDirect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_ConnectDirect_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_ConnectDirect_Stub );
    __frame->ppinOut = 0;
    __frame->ppinIn = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[180]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppinOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppinIn,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[672],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[734],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ConnectDirect(__frame->_This, __frame->ppinOut, __frame->ppinIn, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_ConnectDirect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_Reconnect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_Reconnect_Proxy(
    IFilterGraph* This,
    IPin *ppin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_Reconnect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[738]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[738]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[194]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_Reconnect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_Reconnect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IPin * ppin;
};

static void __finally_IFilterGraph_Reconnect_Stub( struct __frame_IFilterGraph_Reconnect_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[738]);

}

void __RPC_STUB IFilterGraph_Reconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_Reconnect_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_Reconnect_Stub );
    __frame->ppin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[194]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[738],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reconnect(__frame->_This, __frame->ppin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_Reconnect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_Disconnect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_Disconnect_Proxy(
    IFilterGraph* This,
    IPin *ppin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_Disconnect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[756]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[756]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[200]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_Disconnect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_Disconnect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IPin * ppin;
};

static void __finally_IFilterGraph_Disconnect_Stub( struct __frame_IFilterGraph_Disconnect_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[756]);

}

void __RPC_STUB IFilterGraph_Disconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_Disconnect_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_Disconnect_Stub );
    __frame->ppin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[200]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[756],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Disconnect(__frame->_This, __frame->ppin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_Disconnect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_SetDefaultSyncSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_SetDefaultSyncSource_Proxy(
    IFilterGraph* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_SetDefaultSyncSource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[206]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_SetDefaultSyncSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_SetDefaultSyncSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
};

static void __finally_IFilterGraph_SetDefaultSyncSource_Stub( struct __frame_IFilterGraph_SetDefaultSyncSource_Stub *__frame )
{
}

void __RPC_STUB IFilterGraph_SetDefaultSyncSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_SetDefaultSyncSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_SetDefaultSyncSource_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[206]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetDefaultSyncSource(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_SetDefaultSyncSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFilterGraph_FormatStringOffsetTable[] =
{
    148,  /* IFilterGraph::AddFilter */
    158,  /* IFilterGraph::RemoveFilter */
    164,  /* IFilterGraph::EnumFilters */
    170,  /* IFilterGraph::FindFilterByName */
    180,  /* IFilterGraph::ConnectDirect */
    194,  /* IFilterGraph::Reconnect */
    200,  /* IFilterGraph::Disconnect */
    206,  /* IFilterGraph::SetDefaultSyncSource */
};

static const CINTERFACE_PROXY_VTABLE(11) _IFilterGraphProxyVtbl =
{
    {
        &IID_IFilterGraph,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterGraph_AddFilter_Proxy,
        IFilterGraph_RemoveFilter_Proxy,
        IFilterGraph_EnumFilters_Proxy,
        IFilterGraph_FindFilterByName_Proxy,
        IFilterGraph_ConnectDirect_Proxy,
        IFilterGraph_Reconnect_Proxy,
        IFilterGraph_Disconnect_Proxy,
        IFilterGraph_SetDefaultSyncSource_Proxy,
    }
};

static const MIDL_SERVER_INFO IFilterGraph_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFilterGraph_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFilterGraph_table[] =
{
    IFilterGraph_AddFilter_Stub,
    IFilterGraph_RemoveFilter_Stub,
    IFilterGraph_EnumFilters_Stub,
    IFilterGraph_FindFilterByName_Stub,
    IFilterGraph_ConnectDirect_Stub,
    IFilterGraph_Reconnect_Stub,
    IFilterGraph_Disconnect_Stub,
    IFilterGraph_SetDefaultSyncSource_Stub
};

static const CInterfaceStubVtbl _IFilterGraphStubVtbl =
{
    {
        &IID_IFilterGraph,
        &IFilterGraph_ServerInfo,
        11,
        &IFilterGraph_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumFilters interface
 */
static void __finally_IEnumFilters_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumFilters_Next_Proxy(
    IEnumFilters* This,
    ULONG cFilters,
    IBaseFilter **ppFilter,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumFilters_Next_Proxy );
    __frame->This = This;
    if (ppFilter) MIDL_memset( ppFilter, 0, sizeof( *ppFilter ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cFilters;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[208]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[792],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumFilters_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[792], (void *)ppFilter );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[796], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumFilters_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumFilters * _This;
    HRESULT _RetVal;
    ULONG cFilters;
    IBaseFilter *_W0;
    IBaseFilter ** ppFilter;
    ULONG _W1;
    ULONG * pcFetched;
};

static void __finally_IEnumFilters_Next_Stub( struct __frame_IEnumFilters_Next_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[792]);


}

void __RPC_STUB IEnumFilters_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumFilters_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumFilters_Next_Stub );
    __frame->ppFilter = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[208]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cFilters = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppFilter = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pcFetched = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->cFilters, __frame->ppFilter, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[792]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[792]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumFilters_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumFilters_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumFilters_Skip_Proxy(
    IEnumFilters* This,
    ULONG cFilters)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumFilters_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cFilters;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[220]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumFilters_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumFilters_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumFilters * _This;
    HRESULT _RetVal;
    ULONG cFilters;
};

static void __finally_IEnumFilters_Skip_Stub( struct __frame_IEnumFilters_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumFilters_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumFilters_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumFilters_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[220]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cFilters = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->cFilters);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumFilters_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumFilters_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumFilters_Reset_Proxy(
    IEnumFilters* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumFilters_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[224]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumFilters_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumFilters_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumFilters * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumFilters_Reset_Stub( struct __frame_IEnumFilters_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumFilters_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumFilters_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumFilters_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[224]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumFilters_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumFilters_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumFilters_Clone_Proxy(
    IEnumFilters* This,
    IEnumFilters **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumFilters_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[226]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumFilters_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[818], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumFilters_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumFilters * _This;
    HRESULT _RetVal;
    IEnumFilters *_W0;
    IEnumFilters ** ppEnum;
};

static void __finally_IEnumFilters_Clone_Stub( struct __frame_IEnumFilters_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818]);

}

void __RPC_STUB IEnumFilters_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumFilters_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumFilters_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[226]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[818]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumFilters_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumFilters_FormatStringOffsetTable[] =
{
    208,  /* IEnumFilters::Next */
    220,  /* IEnumFilters::Skip */
    224,  /* IEnumFilters::Reset */
    226,  /* IEnumFilters::Clone */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumFiltersProxyVtbl =
{
    {
        &IID_IEnumFilters,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumFilters_Next_Proxy,
        IEnumFilters_Skip_Proxy,
        IEnumFilters_Reset_Proxy,
        IEnumFilters_Clone_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumFilters_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumFilters_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumFilters_table[] =
{
    IEnumFilters_Next_Stub,
    IEnumFilters_Skip_Stub,
    IEnumFilters_Reset_Stub,
    IEnumFilters_Clone_Stub
};

static const CInterfaceStubVtbl _IEnumFiltersStubVtbl =
{
    {
        &IID_IEnumFilters,
        &IEnumFilters_ServerInfo,
        7,
        &IEnumFilters_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMediaFilter interface
 */
static void __finally_IMediaFilter_Stop_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_Stop_Proxy(
    IMediaFilter* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_Stop_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[232]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_Stop_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_Stop_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
};

static void __finally_IMediaFilter_Stop_Stub( struct __frame_IMediaFilter_Stop_Stub *__frame )
{
}

void __RPC_STUB IMediaFilter_Stop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_Stop_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_Stop_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[232]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Stop(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_Stop_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaFilter_Pause_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_Pause_Proxy(
    IMediaFilter* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_Pause_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[234]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_Pause_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_Pause_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
};

static void __finally_IMediaFilter_Pause_Stub( struct __frame_IMediaFilter_Pause_Stub *__frame )
{
}

void __RPC_STUB IMediaFilter_Pause_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_Pause_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_Pause_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[234]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Pause(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_Pause_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaFilter_Run_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_Run_Proxy(
    IMediaFilter* This,
    REFERENCE_TIME tStart)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_Run_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = tStart;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[236]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_Run_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_Run_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
    REFERENCE_TIME tStart;
};

static void __finally_IMediaFilter_Run_Stub( struct __frame_IMediaFilter_Run_Stub *__frame )
{

}

void __RPC_STUB IMediaFilter_Run_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_Run_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_Run_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[236]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tStart = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Run(__frame->_This, __frame->tStart);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_Run_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaFilter_GetState_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_GetState_Proxy(
    IMediaFilter* This,
    DWORD dwMilliSecsTimeout,
    FILTER_STATE *State)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_GetState_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!State) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwMilliSecsTimeout;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[240]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&State,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[822],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_GetState_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[822], (void *)State );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_GetState_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
    DWORD dwMilliSecsTimeout;
    FILTER_STATE _W0;
    FILTER_STATE * State;
};

static void __finally_IMediaFilter_GetState_Stub( struct __frame_IMediaFilter_GetState_Stub *__frame )
{


}

void __RPC_STUB IMediaFilter_GetState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_GetState_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_GetState_Stub );
    __frame->State = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[240]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwMilliSecsTimeout = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->State = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetState(__frame->_This, __frame->dwMilliSecsTimeout, __frame->State);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 14;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->State,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[822]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_GetState_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaFilter_SetSyncSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_SetSyncSource_Proxy(
    IMediaFilter* This,
    IReferenceClock *pClock)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_SetSyncSource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pClock,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[826]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pClock,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[826]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[248]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_SetSyncSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_SetSyncSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
    IReferenceClock * pClock;
};

static void __finally_IMediaFilter_SetSyncSource_Stub( struct __frame_IMediaFilter_SetSyncSource_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pClock,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[826]);

}

void __RPC_STUB IMediaFilter_SetSyncSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_SetSyncSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_SetSyncSource_Stub );
    __frame->pClock = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[248]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pClock,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[826],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetSyncSource(__frame->_This, __frame->pClock);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_SetSyncSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaFilter_GetSyncSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_GetSyncSource_Proxy(
    IMediaFilter* This,
    IReferenceClock **pClock)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_GetSyncSource_Proxy );
    __frame->This = This;
    if (pClock) MIDL_memset( pClock, 0, sizeof( *pClock ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pClock) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[254]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pClock,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[862],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_GetSyncSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[862], (void *)pClock );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_GetSyncSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
    IReferenceClock *_W0;
    IReferenceClock ** pClock;
};

static void __finally_IMediaFilter_GetSyncSource_Stub( struct __frame_IMediaFilter_GetSyncSource_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pClock,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[862]);

}

void __RPC_STUB IMediaFilter_GetSyncSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_GetSyncSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_GetSyncSource_Stub );
    __frame->pClock = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[254]);


        __frame->pClock = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSyncSource(__frame->_This, __frame->pClock);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pClock,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[862]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pClock,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[862]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_GetSyncSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMediaFilter_FormatStringOffsetTable[] =
{
    (unsigned short)-1,  /* IPersist::GetClassID */
    232,  /* IMediaFilter::Stop */
    234,  /* IMediaFilter::Pause */
    236,  /* IMediaFilter::Run */
    240,  /* IMediaFilter::GetState */
    248,  /* IMediaFilter::SetSyncSource */
    254,  /* IMediaFilter::GetSyncSource */
};

static CINTERFACE_PROXY_VTABLE(10) _IMediaFilterProxyVtbl =
{
    {
        &IID_IMediaFilter,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        0,  /* IPersist::GetClassID */
        IMediaFilter_Stop_Proxy,
        IMediaFilter_Pause_Proxy,
        IMediaFilter_Run_Proxy,
        IMediaFilter_GetState_Proxy,
        IMediaFilter_SetSyncSource_Proxy,
        IMediaFilter_GetSyncSource_Proxy,
    }
};

static const MIDL_SERVER_INFO IMediaFilter_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMediaFilter_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMediaFilter_table[] =
{
    STUB_FORWARDING_FUNCTION,
    IMediaFilter_Stop_Stub,
    IMediaFilter_Pause_Stub,
    IMediaFilter_Run_Stub,
    IMediaFilter_GetState_Stub,
    IMediaFilter_SetSyncSource_Stub,
    IMediaFilter_GetSyncSource_Stub
};

static CInterfaceStubVtbl _IMediaFilterStubVtbl =
{
    {
        &IID_IMediaFilter,
        &IMediaFilter_ServerInfo,
        10,
        &IMediaFilter_table[-3]
    },
    {
        CStdStubBuffer_DELEGATING_METHODS
    }
};

/*****************************************************************************
 * IBaseFilter interface
 */
static void __finally_IBaseFilter_EnumPins_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBaseFilter_EnumPins_Proxy(
    IBaseFilter* This,
    IEnumPins **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBaseFilter_EnumPins_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[260]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[884],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBaseFilter_EnumPins_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[884], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBaseFilter_EnumPins_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBaseFilter * _This;
    HRESULT _RetVal;
    IEnumPins *_W0;
    IEnumPins ** ppEnum;
};

static void __finally_IBaseFilter_EnumPins_Stub( struct __frame_IBaseFilter_EnumPins_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[884]);

}

void __RPC_STUB IBaseFilter_EnumPins_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBaseFilter_EnumPins_Stub __f, * const __frame = &__f;

    __frame->_This = (IBaseFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBaseFilter_EnumPins_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[260]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumPins(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[884]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[884]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBaseFilter_EnumPins_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IBaseFilter_FindPin_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBaseFilter_FindPin_Proxy(
    IBaseFilter* This,
    LPCWSTR Id,
    IPin **ppPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBaseFilter_FindPin_Proxy );
    __frame->This = This;
    if (ppPin) MIDL_memset( ppPin, 0, sizeof( *ppPin ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!Id) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Id,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[890]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Id,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[890]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[266]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[910],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBaseFilter_FindPin_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[910], (void *)ppPin );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBaseFilter_FindPin_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBaseFilter * _This;
    HRESULT _RetVal;
    LPCWSTR Id;
    IPin *_W0;
    IPin ** ppPin;
};

static void __finally_IBaseFilter_FindPin_Stub( struct __frame_IBaseFilter_FindPin_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Id,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[888]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[910]);

}

void __RPC_STUB IBaseFilter_FindPin_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBaseFilter_FindPin_Stub __f, * const __frame = &__f;

    __frame->_This = (IBaseFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBaseFilter_FindPin_Stub );
    __frame->Id = 0;
    __frame->ppPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[266]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Id,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[890],
            0);


        __frame->ppPin = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->FindPin(__frame->_This, __frame->Id, __frame->ppPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[910]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[910]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBaseFilter_FindPin_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IBaseFilter_QueryFilterInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBaseFilter_QueryFilterInfo_Proxy(
    IBaseFilter* This,
    FILTER_INFO *pInfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBaseFilter_QueryFilterInfo_Proxy );
    __frame->This = This;
    if (pInfo) MIDL_memset( pInfo, 0, sizeof( *pInfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!pInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[276]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[938],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBaseFilter_QueryFilterInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[956], (void *)pInfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBaseFilter_QueryFilterInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBaseFilter * _This;
    HRESULT _RetVal;
    FILTER_INFO _W0;
    FILTER_INFO * pInfo;
};

static void __finally_IBaseFilter_QueryFilterInfo_Stub( struct __frame_IBaseFilter_QueryFilterInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[956]);

}

void __RPC_STUB IBaseFilter_QueryFilterInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBaseFilter_QueryFilterInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IBaseFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBaseFilter_QueryFilterInfo_Stub );
    __frame->pInfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[276]);


        __frame->pInfo = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryFilterInfo(__frame->_This, __frame->pInfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[938]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[938]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBaseFilter_QueryFilterInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IBaseFilter_JoinFilterGraph_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBaseFilter_JoinFilterGraph_Proxy(
    IBaseFilter* This,
    IFilterGraph *pGraph,
    LPCWSTR pName)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBaseFilter_JoinFilterGraph_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!pName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pGraph,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[960]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[980]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pGraph,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[960]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[980]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBaseFilter_JoinFilterGraph_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBaseFilter_JoinFilterGraph_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBaseFilter * _This;
    HRESULT _RetVal;
    IFilterGraph * pGraph;
    LPCWSTR pName;
};

static void __finally_IBaseFilter_JoinFilterGraph_Stub( struct __frame_IBaseFilter_JoinFilterGraph_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pGraph,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[960]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[978]);

}

void __RPC_STUB IBaseFilter_JoinFilterGraph_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBaseFilter_JoinFilterGraph_Stub __f, * const __frame = &__f;

    __frame->_This = (IBaseFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBaseFilter_JoinFilterGraph_Stub );
    __frame->pGraph = 0;
    __frame->pName = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pGraph,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[960],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[980],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->JoinFilterGraph(__frame->_This, __frame->pGraph, __frame->pName);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBaseFilter_JoinFilterGraph_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IBaseFilter_QueryVendorInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBaseFilter_QueryVendorInfo_Proxy(
    IBaseFilter* This,
    LPWSTR *pVendorInfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBaseFilter_QueryVendorInfo_Proxy );
    __frame->This = This;
    if (pVendorInfo) MIDL_memset( pVendorInfo, 0, sizeof( *pVendorInfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!pVendorInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[292]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pVendorInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[982],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBaseFilter_QueryVendorInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[986], (void *)pVendorInfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBaseFilter_QueryVendorInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBaseFilter * _This;
    HRESULT _RetVal;
    LPWSTR _W0;
    LPWSTR * pVendorInfo;
};

static void __finally_IBaseFilter_QueryVendorInfo_Stub( struct __frame_IBaseFilter_QueryVendorInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pVendorInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[982]);

}

void __RPC_STUB IBaseFilter_QueryVendorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBaseFilter_QueryVendorInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IBaseFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBaseFilter_QueryVendorInfo_Stub );
    __frame->pVendorInfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[292]);


        __frame->pVendorInfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryVendorInfo(__frame->_This, __frame->pVendorInfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pVendorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[982]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pVendorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[982]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBaseFilter_QueryVendorInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IBaseFilter_FormatStringOffsetTable[] =
{
    (unsigned short)-1,  /* IPersist::GetClassID */
    232,  /* IMediaFilter::Stop */
    234,  /* IMediaFilter::Pause */
    236,  /* IMediaFilter::Run */
    240,  /* IMediaFilter::GetState */
    248,  /* IMediaFilter::SetSyncSource */
    254,  /* IMediaFilter::GetSyncSource */
    260,  /* IBaseFilter::EnumPins */
    266,  /* IBaseFilter::FindPin */
    276,  /* IBaseFilter::QueryFilterInfo */
    282,  /* IBaseFilter::JoinFilterGraph */
    292,  /* IBaseFilter::QueryVendorInfo */
};

static CINTERFACE_PROXY_VTABLE(15) _IBaseFilterProxyVtbl =
{
    {
        &IID_IBaseFilter,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        0,  /* IPersist::GetClassID */
        IMediaFilter_Stop_Proxy,
        IMediaFilter_Pause_Proxy,
        IMediaFilter_Run_Proxy,
        IMediaFilter_GetState_Proxy,
        IMediaFilter_SetSyncSource_Proxy,
        IMediaFilter_GetSyncSource_Proxy,
        IBaseFilter_EnumPins_Proxy,
        IBaseFilter_FindPin_Proxy,
        IBaseFilter_QueryFilterInfo_Proxy,
        IBaseFilter_JoinFilterGraph_Proxy,
        IBaseFilter_QueryVendorInfo_Proxy,
    }
};

static const MIDL_SERVER_INFO IBaseFilter_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IBaseFilter_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IBaseFilter_table[] =
{
    STUB_FORWARDING_FUNCTION,
    IMediaFilter_Stop_Stub,
    IMediaFilter_Pause_Stub,
    IMediaFilter_Run_Stub,
    IMediaFilter_GetState_Stub,
    IMediaFilter_SetSyncSource_Stub,
    IMediaFilter_GetSyncSource_Stub,
    IBaseFilter_EnumPins_Stub,
    IBaseFilter_FindPin_Stub,
    IBaseFilter_QueryFilterInfo_Stub,
    IBaseFilter_JoinFilterGraph_Stub,
    IBaseFilter_QueryVendorInfo_Stub
};

static CInterfaceStubVtbl _IBaseFilterStubVtbl =
{
    {
        &IID_IBaseFilter,
        &IBaseFilter_ServerInfo,
        15,
        &IBaseFilter_table[-3]
    },
    {
        CStdStubBuffer_DELEGATING_METHODS
    }
};

/*****************************************************************************
 * IReferenceClock interface
 */
static void __finally_IReferenceClock_GetTime_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IReferenceClock_GetTime_Proxy(
    IReferenceClock* This,
    REFERENCE_TIME *pTime)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IReferenceClock_GetTime_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pTime) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[298]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pTime = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IReferenceClock_GetTime_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[990], (void *)pTime );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IReferenceClock_GetTime_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IReferenceClock * _This;
    HRESULT _RetVal;
    REFERENCE_TIME _W0;
    REFERENCE_TIME * pTime;
};

static void __finally_IReferenceClock_GetTime_Stub( struct __frame_IReferenceClock_GetTime_Stub *__frame )
{

}

void __RPC_STUB IReferenceClock_GetTime_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IReferenceClock_GetTime_Stub __f, * const __frame = &__f;

    __frame->_This = (IReferenceClock*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IReferenceClock_GetTime_Stub );
    __frame->pTime = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[298]);


        __frame->pTime = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetTime(__frame->_This, __frame->pTime);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *__frame->pTime;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IReferenceClock_GetTime_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IReferenceClock_AdviseTime_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IReferenceClock_AdviseTime_Proxy(
    IReferenceClock* This,
    REFERENCE_TIME baseTime,
    REFERENCE_TIME streamTime,
    HEVENT hEvent,
    DWORD_PTR *pdwAdviseCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IReferenceClock_AdviseTime_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pdwAdviseCookie) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = baseTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = streamTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HEVENT *)__frame->_StubMsg.Buffer = hEvent;
            __frame->_StubMsg.Buffer += sizeof(HEVENT);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[304]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwAdviseCookie = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IReferenceClock_AdviseTime_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[994], (void *)pdwAdviseCookie );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IReferenceClock_AdviseTime_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IReferenceClock * _This;
    HRESULT _RetVal;
    REFERENCE_TIME baseTime;
    REFERENCE_TIME streamTime;
    HEVENT hEvent;
    DWORD_PTR _W0;
    DWORD_PTR * pdwAdviseCookie;
};

static void __finally_IReferenceClock_AdviseTime_Stub( struct __frame_IReferenceClock_AdviseTime_Stub *__frame )
{




}

void __RPC_STUB IReferenceClock_AdviseTime_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IReferenceClock_AdviseTime_Stub __f, * const __frame = &__f;

    __frame->_This = (IReferenceClock*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IReferenceClock_AdviseTime_Stub );
    __frame->pdwAdviseCookie = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[304]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->baseTime = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->streamTime = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HEVENT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hEvent = *(HEVENT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HEVENT);


        __frame->pdwAdviseCookie = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdviseTime(__frame->_This, __frame->baseTime, __frame->streamTime, __frame->hEvent, __frame->pdwAdviseCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD_PTR *)__frame->_StubMsg.Buffer = *__frame->pdwAdviseCookie;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IReferenceClock_AdviseTime_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IReferenceClock_AdvisePeriodic_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IReferenceClock_AdvisePeriodic_Proxy(
    IReferenceClock* This,
    REFERENCE_TIME startTime,
    REFERENCE_TIME periodTime,
    HSEMAPHORE hSemaphore,
    DWORD_PTR *pdwAdviseCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IReferenceClock_AdvisePeriodic_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pdwAdviseCookie) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = startTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = periodTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HSEMAPHORE *)__frame->_StubMsg.Buffer = hSemaphore;
            __frame->_StubMsg.Buffer += sizeof(HSEMAPHORE);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[316]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwAdviseCookie = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IReferenceClock_AdvisePeriodic_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[998], (void *)pdwAdviseCookie );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IReferenceClock_AdvisePeriodic_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IReferenceClock * _This;
    HRESULT _RetVal;
    REFERENCE_TIME startTime;
    REFERENCE_TIME periodTime;
    HSEMAPHORE hSemaphore;
    DWORD_PTR _W0;
    DWORD_PTR * pdwAdviseCookie;
};

static void __finally_IReferenceClock_AdvisePeriodic_Stub( struct __frame_IReferenceClock_AdvisePeriodic_Stub *__frame )
{




}

void __RPC_STUB IReferenceClock_AdvisePeriodic_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IReferenceClock_AdvisePeriodic_Stub __f, * const __frame = &__f;

    __frame->_This = (IReferenceClock*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IReferenceClock_AdvisePeriodic_Stub );
    __frame->pdwAdviseCookie = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[316]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->startTime = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->periodTime = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HSEMAPHORE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hSemaphore = *(HSEMAPHORE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HSEMAPHORE);


        __frame->pdwAdviseCookie = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdvisePeriodic(__frame->_This, __frame->startTime, __frame->periodTime, __frame->hSemaphore, __frame->pdwAdviseCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD_PTR *)__frame->_StubMsg.Buffer = *__frame->pdwAdviseCookie;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IReferenceClock_AdvisePeriodic_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IReferenceClock_Unadvise_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IReferenceClock_Unadvise_Proxy(
    IReferenceClock* This,
    DWORD_PTR dwAdviseCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IReferenceClock_Unadvise_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD_PTR *)__frame->_StubMsg.Buffer = dwAdviseCookie;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[328]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IReferenceClock_Unadvise_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IReferenceClock_Unadvise_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IReferenceClock * _This;
    HRESULT _RetVal;
    DWORD_PTR dwAdviseCookie;
};

static void __finally_IReferenceClock_Unadvise_Stub( struct __frame_IReferenceClock_Unadvise_Stub *__frame )
{

}

void __RPC_STUB IReferenceClock_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IReferenceClock_Unadvise_Stub __f, * const __frame = &__f;

    __frame->_This = (IReferenceClock*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IReferenceClock_Unadvise_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[328]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwAdviseCookie = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Unadvise(__frame->_This, __frame->dwAdviseCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IReferenceClock_Unadvise_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IReferenceClock_FormatStringOffsetTable[] =
{
    298,  /* IReferenceClock::GetTime */
    304,  /* IReferenceClock::AdviseTime */
    316,  /* IReferenceClock::AdvisePeriodic */
    328,  /* IReferenceClock::Unadvise */
};

static const CINTERFACE_PROXY_VTABLE(7) _IReferenceClockProxyVtbl =
{
    {
        &IID_IReferenceClock,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IReferenceClock_GetTime_Proxy,
        IReferenceClock_AdviseTime_Proxy,
        IReferenceClock_AdvisePeriodic_Proxy,
        IReferenceClock_Unadvise_Proxy,
    }
};

static const MIDL_SERVER_INFO IReferenceClock_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IReferenceClock_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IReferenceClock_table[] =
{
    IReferenceClock_GetTime_Stub,
    IReferenceClock_AdviseTime_Stub,
    IReferenceClock_AdvisePeriodic_Stub,
    IReferenceClock_Unadvise_Stub
};

static const CInterfaceStubVtbl _IReferenceClockStubVtbl =
{
    {
        &IID_IReferenceClock,
        &IReferenceClock_ServerInfo,
        7,
        &IReferenceClock_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMemAllocator interface
 */
static void __finally_IMemAllocator_SetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_SetProperties_Proxy(
    IMemAllocator* This,
    ALLOCATOR_PROPERTIES *pRequest,
    ALLOCATOR_PROPERTIES *pActual)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_SetProperties_Proxy );
    __frame->This = This;
    if (pActual) MIDL_memset( pActual, 0, sizeof( *pActual ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pRequest) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pActual) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRequest,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1002]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[332]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pActual,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1002],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_SetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1016], (void *)pActual );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_SetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
    ALLOCATOR_PROPERTIES * pRequest;
    ALLOCATOR_PROPERTIES _W0;
    ALLOCATOR_PROPERTIES * pActual;
};

static void __finally_IMemAllocator_SetProperties_Stub( struct __frame_IMemAllocator_SetProperties_Stub *__frame )
{


}

void __RPC_STUB IMemAllocator_SetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_SetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_SetProperties_Stub );
    __frame->pRequest = 0;
    __frame->pActual = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[332]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRequest,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1002],
            0);


        __frame->pActual = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetProperties(__frame->_This, __frame->pRequest, __frame->pActual);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pActual,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1002]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_SetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocator_GetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_GetProperties_Proxy(
    IMemAllocator* This,
    ALLOCATOR_PROPERTIES *pProps)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_GetProperties_Proxy );
    __frame->This = This;
    if (pProps) MIDL_memset( pProps, 0, sizeof( *pProps ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pProps) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[342]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProps,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1002],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_GetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1020], (void *)pProps );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_GetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
    ALLOCATOR_PROPERTIES _W0;
    ALLOCATOR_PROPERTIES * pProps;
};

static void __finally_IMemAllocator_GetProperties_Stub( struct __frame_IMemAllocator_GetProperties_Stub *__frame )
{

}

void __RPC_STUB IMemAllocator_GetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_GetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_GetProperties_Stub );
    __frame->pProps = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[342]);


        __frame->pProps = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetProperties(__frame->_This, __frame->pProps);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProps,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1002]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_GetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocator_Commit_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_Commit_Proxy(
    IMemAllocator* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_Commit_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[348]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_Commit_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_Commit_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
};

static void __finally_IMemAllocator_Commit_Stub( struct __frame_IMemAllocator_Commit_Stub *__frame )
{
}

void __RPC_STUB IMemAllocator_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_Commit_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_Commit_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[348]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Commit(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_Commit_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocator_Decommit_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_Decommit_Proxy(
    IMemAllocator* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_Decommit_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[350]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_Decommit_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_Decommit_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
};

static void __finally_IMemAllocator_Decommit_Stub( struct __frame_IMemAllocator_Decommit_Stub *__frame )
{
}

void __RPC_STUB IMemAllocator_Decommit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_Decommit_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_Decommit_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[350]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Decommit(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_Decommit_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocator_GetBuffer_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_GetBuffer_Proxy(
    IMemAllocator* This,
    IMediaSample **ppBuffer,
    REFERENCE_TIME *pStartTime,
    REFERENCE_TIME *pEndTime,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_GetBuffer_Proxy );
    __frame->This = This;
    if (ppBuffer) MIDL_memset( ppBuffer, 0, sizeof( *ppBuffer ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppBuffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pStartTime) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pEndTime) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pStartTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pEndTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[352]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1042],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_GetBuffer_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1042], (void *)ppBuffer );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_GetBuffer_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
    IMediaSample *_W0;
    IMediaSample ** ppBuffer;
    REFERENCE_TIME * pStartTime;
    REFERENCE_TIME * pEndTime;
    DWORD dwFlags;
};

static void __finally_IMemAllocator_GetBuffer_Stub( struct __frame_IMemAllocator_GetBuffer_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1042]);




}

void __RPC_STUB IMemAllocator_GetBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_GetBuffer_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_GetBuffer_Stub );
    __frame->ppBuffer = 0;
    __frame->pStartTime = 0;
    __frame->pEndTime = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[352]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pStartTime = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pEndTime = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->ppBuffer = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetBuffer(__frame->_This, __frame->ppBuffer, __frame->pStartTime, __frame->pEndTime, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1042]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1042]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_GetBuffer_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocator_ReleaseBuffer_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_ReleaseBuffer_Proxy(
    IMemAllocator* This,
    IMediaSample *pBuffer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_ReleaseBuffer_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1054]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1054]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_ReleaseBuffer_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_ReleaseBuffer_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
    IMediaSample * pBuffer;
};

static void __finally_IMemAllocator_ReleaseBuffer_Stub( struct __frame_IMemAllocator_ReleaseBuffer_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1054]);

}

void __RPC_STUB IMemAllocator_ReleaseBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_ReleaseBuffer_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_ReleaseBuffer_Stub );
    __frame->pBuffer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1054],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseBuffer(__frame->_This, __frame->pBuffer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_ReleaseBuffer_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMemAllocator_FormatStringOffsetTable[] =
{
    332,  /* IMemAllocator::SetProperties */
    342,  /* IMemAllocator::GetProperties */
    348,  /* IMemAllocator::Commit */
    350,  /* IMemAllocator::Decommit */
    352,  /* IMemAllocator::GetBuffer */
    368,  /* IMemAllocator::ReleaseBuffer */
};

static const CINTERFACE_PROXY_VTABLE(9) _IMemAllocatorProxyVtbl =
{
    {
        &IID_IMemAllocator,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMemAllocator_SetProperties_Proxy,
        IMemAllocator_GetProperties_Proxy,
        IMemAllocator_Commit_Proxy,
        IMemAllocator_Decommit_Proxy,
        IMemAllocator_GetBuffer_Proxy,
        IMemAllocator_ReleaseBuffer_Proxy,
    }
};

static const MIDL_SERVER_INFO IMemAllocator_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMemAllocator_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMemAllocator_table[] =
{
    IMemAllocator_SetProperties_Stub,
    IMemAllocator_GetProperties_Stub,
    IMemAllocator_Commit_Stub,
    IMemAllocator_Decommit_Stub,
    IMemAllocator_GetBuffer_Stub,
    IMemAllocator_ReleaseBuffer_Stub
};

static const CInterfaceStubVtbl _IMemAllocatorStubVtbl =
{
    {
        &IID_IMemAllocator,
        &IMemAllocator_ServerInfo,
        9,
        &IMemAllocator_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMemAllocatorCallbackTemp interface
 */
static void __finally_IMemAllocatorCallbackTemp_SetNotify_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocatorCallbackTemp_SetNotify_Proxy(
    IMemAllocatorCallbackTemp* This,
    IMemAllocatorNotifyCallbackTemp *pNotify)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocatorCallbackTemp_SetNotify_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pNotify,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1072]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pNotify,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1072]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[374]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocatorCallbackTemp_SetNotify_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocatorCallbackTemp_SetNotify_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocatorCallbackTemp * _This;
    HRESULT _RetVal;
    IMemAllocatorNotifyCallbackTemp * pNotify;
};

static void __finally_IMemAllocatorCallbackTemp_SetNotify_Stub( struct __frame_IMemAllocatorCallbackTemp_SetNotify_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pNotify,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1072]);

}

void __RPC_STUB IMemAllocatorCallbackTemp_SetNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocatorCallbackTemp_SetNotify_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocatorCallbackTemp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocatorCallbackTemp_SetNotify_Stub );
    __frame->pNotify = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[374]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pNotify,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1072],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetNotify(__frame->_This, __frame->pNotify);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocatorCallbackTemp_SetNotify_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocatorCallbackTemp_GetFreeCount_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocatorCallbackTemp_GetFreeCount_Proxy(
    IMemAllocatorCallbackTemp* This,
    LONG *plBuffersFree)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocatorCallbackTemp_GetFreeCount_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!plBuffersFree) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[380]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *plBuffersFree = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocatorCallbackTemp_GetFreeCount_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1090], (void *)plBuffersFree );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocatorCallbackTemp_GetFreeCount_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocatorCallbackTemp * _This;
    HRESULT _RetVal;
    LONG _W0;
    LONG * plBuffersFree;
};

static void __finally_IMemAllocatorCallbackTemp_GetFreeCount_Stub( struct __frame_IMemAllocatorCallbackTemp_GetFreeCount_Stub *__frame )
{

}

void __RPC_STUB IMemAllocatorCallbackTemp_GetFreeCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocatorCallbackTemp_GetFreeCount_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocatorCallbackTemp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocatorCallbackTemp_GetFreeCount_Stub );
    __frame->plBuffersFree = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[380]);


        __frame->plBuffersFree = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFreeCount(__frame->_This, __frame->plBuffersFree);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->plBuffersFree;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocatorCallbackTemp_GetFreeCount_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMemAllocatorCallbackTemp_FormatStringOffsetTable[] =
{
    332,  /* IMemAllocator::SetProperties */
    342,  /* IMemAllocator::GetProperties */
    348,  /* IMemAllocator::Commit */
    350,  /* IMemAllocator::Decommit */
    352,  /* IMemAllocator::GetBuffer */
    368,  /* IMemAllocator::ReleaseBuffer */
    374,  /* IMemAllocatorCallbackTemp::SetNotify */
    380,  /* IMemAllocatorCallbackTemp::GetFreeCount */
};

static const CINTERFACE_PROXY_VTABLE(11) _IMemAllocatorCallbackTempProxyVtbl =
{
    {
        &IID_IMemAllocatorCallbackTemp,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMemAllocator_SetProperties_Proxy,
        IMemAllocator_GetProperties_Proxy,
        IMemAllocator_Commit_Proxy,
        IMemAllocator_Decommit_Proxy,
        IMemAllocator_GetBuffer_Proxy,
        IMemAllocator_ReleaseBuffer_Proxy,
        IMemAllocatorCallbackTemp_SetNotify_Proxy,
        IMemAllocatorCallbackTemp_GetFreeCount_Proxy,
    }
};

static const MIDL_SERVER_INFO IMemAllocatorCallbackTemp_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMemAllocatorCallbackTemp_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMemAllocatorCallbackTemp_table[] =
{
    IMemAllocator_SetProperties_Stub,
    IMemAllocator_GetProperties_Stub,
    IMemAllocator_Commit_Stub,
    IMemAllocator_Decommit_Stub,
    IMemAllocator_GetBuffer_Stub,
    IMemAllocator_ReleaseBuffer_Stub,
    IMemAllocatorCallbackTemp_SetNotify_Stub,
    IMemAllocatorCallbackTemp_GetFreeCount_Stub
};

static const CInterfaceStubVtbl _IMemAllocatorCallbackTempStubVtbl =
{
    {
        &IID_IMemAllocatorCallbackTemp,
        &IMemAllocatorCallbackTemp_ServerInfo,
        11,
        &IMemAllocatorCallbackTemp_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMemAllocatorNotifyCallbackTemp interface
 */
static void __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocatorNotifyCallbackTemp_NotifyRelease_Proxy(
    IMemAllocatorNotifyCallbackTemp* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[386]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocatorNotifyCallbackTemp * _This;
    HRESULT _RetVal;
};

static void __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub( struct __frame_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub *__frame )
{
}

void __RPC_STUB IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocatorNotifyCallbackTemp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[386]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->NotifyRelease(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMemAllocatorNotifyCallbackTemp_FormatStringOffsetTable[] =
{
    386,  /* IMemAllocatorNotifyCallbackTemp::NotifyRelease */
};

static const CINTERFACE_PROXY_VTABLE(4) _IMemAllocatorNotifyCallbackTempProxyVtbl =
{
    {
        &IID_IMemAllocatorNotifyCallbackTemp,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMemAllocatorNotifyCallbackTemp_NotifyRelease_Proxy,
    }
};

static const MIDL_SERVER_INFO IMemAllocatorNotifyCallbackTemp_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMemAllocatorNotifyCallbackTemp_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMemAllocatorNotifyCallbackTemp_table[] =
{
    IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub
};

static const CInterfaceStubVtbl _IMemAllocatorNotifyCallbackTempStubVtbl =
{
    {
        &IID_IMemAllocatorNotifyCallbackTemp,
        &IMemAllocatorNotifyCallbackTemp_ServerInfo,
        4,
        &IMemAllocatorNotifyCallbackTemp_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMemInputPin interface
 */
static void __finally_IMemInputPin_GetAllocator_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_GetAllocator_Proxy(
    IMemInputPin* This,
    IMemAllocator **ppAllocator)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_GetAllocator_Proxy );
    __frame->This = This;
    if (ppAllocator) MIDL_memset( ppAllocator, 0, sizeof( *ppAllocator ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppAllocator) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[388]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppAllocator,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1112],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_GetAllocator_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1112], (void *)ppAllocator );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_GetAllocator_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
    IMemAllocator *_W0;
    IMemAllocator ** ppAllocator;
};

static void __finally_IMemInputPin_GetAllocator_Stub( struct __frame_IMemInputPin_GetAllocator_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppAllocator,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1112]);

}

void __RPC_STUB IMemInputPin_GetAllocator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_GetAllocator_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_GetAllocator_Stub );
    __frame->ppAllocator = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[388]);


        __frame->ppAllocator = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetAllocator(__frame->_This, __frame->ppAllocator);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppAllocator,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1112]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppAllocator,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1112]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_GetAllocator_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemInputPin_NotifyAllocator_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_NotifyAllocator_Proxy(
    IMemInputPin* This,
    IMemAllocator *pAllocator,
    BOOL bReadOnly)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_NotifyAllocator_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pAllocator,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1116]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pAllocator,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1116]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bReadOnly;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[394]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_NotifyAllocator_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_NotifyAllocator_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
    IMemAllocator * pAllocator;
    BOOL bReadOnly;
};

static void __finally_IMemInputPin_NotifyAllocator_Stub( struct __frame_IMemInputPin_NotifyAllocator_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pAllocator,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1116]);


}

void __RPC_STUB IMemInputPin_NotifyAllocator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_NotifyAllocator_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_NotifyAllocator_Stub );
    __frame->pAllocator = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[394]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pAllocator,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1116],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bReadOnly = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->NotifyAllocator(__frame->_This, __frame->pAllocator, __frame->bReadOnly);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_NotifyAllocator_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemInputPin_GetAllocatorRequirements_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_GetAllocatorRequirements_Proxy(
    IMemInputPin* This,
    ALLOCATOR_PROPERTIES *pProps)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_GetAllocatorRequirements_Proxy );
    __frame->This = This;
    if (pProps) MIDL_memset( pProps, 0, sizeof( *pProps ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pProps) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[402]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProps,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1002],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_GetAllocatorRequirements_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1134], (void *)pProps );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_GetAllocatorRequirements_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
    ALLOCATOR_PROPERTIES _W0;
    ALLOCATOR_PROPERTIES * pProps;
};

static void __finally_IMemInputPin_GetAllocatorRequirements_Stub( struct __frame_IMemInputPin_GetAllocatorRequirements_Stub *__frame )
{

}

void __RPC_STUB IMemInputPin_GetAllocatorRequirements_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_GetAllocatorRequirements_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_GetAllocatorRequirements_Stub );
    __frame->pProps = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[402]);


        __frame->pProps = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetAllocatorRequirements(__frame->_This, __frame->pProps);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProps,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1002]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_GetAllocatorRequirements_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemInputPin_Receive_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_Receive_Proxy(
    IMemInputPin* This,
    IMediaSample *pSample)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_Receive_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1138]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1138]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[408]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_Receive_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_Receive_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
    IMediaSample * pSample;
};

static void __finally_IMemInputPin_Receive_Stub( struct __frame_IMemInputPin_Receive_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSample,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1138]);

}

void __RPC_STUB IMemInputPin_Receive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_Receive_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_Receive_Stub );
    __frame->pSample = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[408]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSample,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1138],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Receive(__frame->_This, __frame->pSample);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_Receive_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemInputPin_ReceiveMultiple_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_ReceiveMultiple_Proxy(
    IMemInputPin* This,
    IMediaSample **pSamples,
    LONG nSamples,
    LONG *nSamplesProcessed)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_ReceiveMultiple_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pSamples) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!nSamplesProcessed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)nSamples;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSamples,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1174]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            __frame->_StubMsg.MaxCount = (ULONG_PTR)nSamples;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSamples,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1174]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = nSamples;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[414]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *nSamplesProcessed = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_ReceiveMultiple_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1196], (void *)nSamplesProcessed );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_ReceiveMultiple_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
    IMediaSample ** pSamples;
    LONG nSamples;
    LONG _W0;
    LONG * nSamplesProcessed;
};

static void __finally_IMemInputPin_ReceiveMultiple_Stub( struct __frame_IMemInputPin_ReceiveMultiple_Stub *__frame )
{
    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->nSamples;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSamples,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1192]);



}

void __RPC_STUB IMemInputPin_ReceiveMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_ReceiveMultiple_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_ReceiveMultiple_Stub );
    __frame->pSamples = 0;
    __frame->nSamplesProcessed = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[414]);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSamples,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1174],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->nSamples = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->nSamplesProcessed = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReceiveMultiple(__frame->_This, __frame->pSamples, __frame->nSamples, __frame->nSamplesProcessed);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->nSamplesProcessed;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_ReceiveMultiple_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemInputPin_ReceiveCanBlock_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_ReceiveCanBlock_Proxy(
    IMemInputPin* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_ReceiveCanBlock_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[426]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_ReceiveCanBlock_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_ReceiveCanBlock_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
};

static void __finally_IMemInputPin_ReceiveCanBlock_Stub( struct __frame_IMemInputPin_ReceiveCanBlock_Stub *__frame )
{
}

void __RPC_STUB IMemInputPin_ReceiveCanBlock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_ReceiveCanBlock_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_ReceiveCanBlock_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[426]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReceiveCanBlock(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_ReceiveCanBlock_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMemInputPin_FormatStringOffsetTable[] =
{
    388,  /* IMemInputPin::GetAllocator */
    394,  /* IMemInputPin::NotifyAllocator */
    402,  /* IMemInputPin::GetAllocatorRequirements */
    408,  /* IMemInputPin::Receive */
    414,  /* IMemInputPin::ReceiveMultiple */
    426,  /* IMemInputPin::ReceiveCanBlock */
};

static const CINTERFACE_PROXY_VTABLE(9) _IMemInputPinProxyVtbl =
{
    {
        &IID_IMemInputPin,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMemInputPin_GetAllocator_Proxy,
        IMemInputPin_NotifyAllocator_Proxy,
        IMemInputPin_GetAllocatorRequirements_Proxy,
        IMemInputPin_Receive_Proxy,
        IMemInputPin_ReceiveMultiple_Proxy,
        IMemInputPin_ReceiveCanBlock_Proxy,
    }
};

static const MIDL_SERVER_INFO IMemInputPin_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMemInputPin_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMemInputPin_table[] =
{
    IMemInputPin_GetAllocator_Stub,
    IMemInputPin_NotifyAllocator_Stub,
    IMemInputPin_GetAllocatorRequirements_Stub,
    IMemInputPin_Receive_Stub,
    IMemInputPin_ReceiveMultiple_Stub,
    IMemInputPin_ReceiveCanBlock_Stub
};

static const CInterfaceStubVtbl _IMemInputPinStubVtbl =
{
    {
        &IID_IMemInputPin,
        &IMemInputPin_ServerInfo,
        9,
        &IMemInputPin_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAMovieSetup interface
 */
static void __finally_IAMovieSetup_Register_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMovieSetup_Register_Proxy(
    IAMovieSetup* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMovieSetup_Register_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMovieSetup_Register_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMovieSetup_Register_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMovieSetup * _This;
    HRESULT _RetVal;
};

static void __finally_IAMovieSetup_Register_Stub( struct __frame_IAMovieSetup_Register_Stub *__frame )
{
}

void __RPC_STUB IAMovieSetup_Register_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMovieSetup_Register_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMovieSetup*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMovieSetup_Register_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Register(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMovieSetup_Register_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMovieSetup_Unregister_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMovieSetup_Unregister_Proxy(
    IAMovieSetup* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMovieSetup_Unregister_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[430]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMovieSetup_Unregister_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMovieSetup_Unregister_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMovieSetup * _This;
    HRESULT _RetVal;
};

static void __finally_IAMovieSetup_Unregister_Stub( struct __frame_IAMovieSetup_Unregister_Stub *__frame )
{
}

void __RPC_STUB IAMovieSetup_Unregister_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMovieSetup_Unregister_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMovieSetup*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMovieSetup_Unregister_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[430]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Unregister(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMovieSetup_Unregister_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAMovieSetup_FormatStringOffsetTable[] =
{
    428,  /* IAMovieSetup::Register */
    430,  /* IAMovieSetup::Unregister */
};

static const CINTERFACE_PROXY_VTABLE(5) _IAMovieSetupProxyVtbl =
{
    {
        &IID_IAMovieSetup,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAMovieSetup_Register_Proxy,
        IAMovieSetup_Unregister_Proxy,
    }
};

static const MIDL_SERVER_INFO IAMovieSetup_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAMovieSetup_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAMovieSetup_table[] =
{
    IAMovieSetup_Register_Stub,
    IAMovieSetup_Unregister_Stub
};

static const CInterfaceStubVtbl _IAMovieSetupStubVtbl =
{
    {
        &IID_IAMovieSetup,
        &IAMovieSetup_ServerInfo,
        5,
        &IAMovieSetup_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMediaSeeking interface
 */
static void __finally_IMediaSeeking_GetCapabilities_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetCapabilities_Proxy(
    IMediaSeeking* This,
    DWORD *pCapabilities)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetCapabilities_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pCapabilities) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[432]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCapabilities = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetCapabilities_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1200], (void *)pCapabilities );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetCapabilities_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * pCapabilities;
};

static void __finally_IMediaSeeking_GetCapabilities_Stub( struct __frame_IMediaSeeking_GetCapabilities_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetCapabilities_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetCapabilities_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetCapabilities_Stub );
    __frame->pCapabilities = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[432]);


        __frame->pCapabilities = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCapabilities(__frame->_This, __frame->pCapabilities);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pCapabilities;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetCapabilities_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_CheckCapabilities_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_CheckCapabilities_Proxy(
    IMediaSeeking* This,
    DWORD *pCapabilities)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_CheckCapabilities_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pCapabilities) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = *pCapabilities;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[438]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCapabilities = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_CheckCapabilities_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1204], (void *)pCapabilities );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_CheckCapabilities_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    DWORD * pCapabilities;
};

static void __finally_IMediaSeeking_CheckCapabilities_Stub( struct __frame_IMediaSeeking_CheckCapabilities_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_CheckCapabilities_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_CheckCapabilities_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_CheckCapabilities_Stub );
    __frame->pCapabilities = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[438]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pCapabilities = (DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CheckCapabilities(__frame->_This, __frame->pCapabilities);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pCapabilities;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_CheckCapabilities_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_IsFormatSupported_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_IsFormatSupported_Proxy(
    IMediaSeeking* This,
    const GUID *pFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_IsFormatSupported_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[444]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_IsFormatSupported_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_IsFormatSupported_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    const GUID * pFormat;
};

static void __finally_IMediaSeeking_IsFormatSupported_Stub( struct __frame_IMediaSeeking_IsFormatSupported_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_IsFormatSupported_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_IsFormatSupported_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_IsFormatSupported_Stub );
    __frame->pFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[444]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1214],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsFormatSupported(__frame->_This, __frame->pFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_IsFormatSupported_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_QueryPreferredFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_QueryPreferredFormat_Proxy(
    IMediaSeeking* This,
    GUID *pFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_QueryPreferredFormat_Proxy );
    __frame->This = This;
    if (pFormat) MIDL_memset( pFormat, 0, sizeof( *pFormat ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[450]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_QueryPreferredFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1230], (void *)pFormat );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_QueryPreferredFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * pFormat;
};

static void __finally_IMediaSeeking_QueryPreferredFormat_Stub( struct __frame_IMediaSeeking_QueryPreferredFormat_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_QueryPreferredFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_QueryPreferredFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_QueryPreferredFormat_Stub );
    __frame->pFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[450]);


        __frame->pFormat = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryPreferredFormat(__frame->_This, __frame->pFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_QueryPreferredFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetTimeFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetTimeFormat_Proxy(
    IMediaSeeking* This,
    GUID *pFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetTimeFormat_Proxy );
    __frame->This = This;
    if (pFormat) MIDL_memset( pFormat, 0, sizeof( *pFormat ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[456]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetTimeFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1234], (void *)pFormat );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetTimeFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * pFormat;
};

static void __finally_IMediaSeeking_GetTimeFormat_Stub( struct __frame_IMediaSeeking_GetTimeFormat_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetTimeFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetTimeFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetTimeFormat_Stub );
    __frame->pFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[456]);


        __frame->pFormat = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetTimeFormat(__frame->_This, __frame->pFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetTimeFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_IsUsingTimeFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_IsUsingTimeFormat_Proxy(
    IMediaSeeking* This,
    const GUID *pFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_IsUsingTimeFormat_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1244]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[462]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_IsUsingTimeFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_IsUsingTimeFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    const GUID * pFormat;
};

static void __finally_IMediaSeeking_IsUsingTimeFormat_Stub( struct __frame_IMediaSeeking_IsUsingTimeFormat_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_IsUsingTimeFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_IsUsingTimeFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_IsUsingTimeFormat_Stub );
    __frame->pFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[462]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1244],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsUsingTimeFormat(__frame->_This, __frame->pFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_IsUsingTimeFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_SetTimeFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_SetTimeFormat_Proxy(
    IMediaSeeking* This,
    const GUID *pFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_SetTimeFormat_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1266]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[468]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_SetTimeFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_SetTimeFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    const GUID * pFormat;
};

static void __finally_IMediaSeeking_SetTimeFormat_Stub( struct __frame_IMediaSeeking_SetTimeFormat_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_SetTimeFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_SetTimeFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_SetTimeFormat_Stub );
    __frame->pFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[468]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1266],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetTimeFormat(__frame->_This, __frame->pFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_SetTimeFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetDuration_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetDuration_Proxy(
    IMediaSeeking* This,
    LONGLONG *pDuration)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetDuration_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!pDuration) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[474]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pDuration = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetDuration_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1282], (void *)pDuration );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetDuration_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pDuration;
};

static void __finally_IMediaSeeking_GetDuration_Stub( struct __frame_IMediaSeeking_GetDuration_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetDuration_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetDuration_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetDuration_Stub );
    __frame->pDuration = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[474]);


        __frame->pDuration = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDuration(__frame->_This, __frame->pDuration);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pDuration;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetDuration_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetStopPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetStopPosition_Proxy(
    IMediaSeeking* This,
    LONGLONG *pStop)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetStopPosition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pStop) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[480]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pStop = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetStopPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1286], (void *)pStop );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetStopPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pStop;
};

static void __finally_IMediaSeeking_GetStopPosition_Stub( struct __frame_IMediaSeeking_GetStopPosition_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetStopPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetStopPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetStopPosition_Stub );
    __frame->pStop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[480]);


        __frame->pStop = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetStopPosition(__frame->_This, __frame->pStop);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pStop;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetStopPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetCurrentPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetCurrentPosition_Proxy(
    IMediaSeeking* This,
    LONGLONG *pCurrent)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetCurrentPosition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!pCurrent) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[486]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCurrent = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetCurrentPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1290], (void *)pCurrent );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetCurrentPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pCurrent;
};

static void __finally_IMediaSeeking_GetCurrentPosition_Stub( struct __frame_IMediaSeeking_GetCurrentPosition_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetCurrentPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetCurrentPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetCurrentPosition_Stub );
    __frame->pCurrent = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[486]);


        __frame->pCurrent = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCurrentPosition(__frame->_This, __frame->pCurrent);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pCurrent;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetCurrentPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_ConvertTimeFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_ConvertTimeFormat_Proxy(
    IMediaSeeking* This,
    LONGLONG *pTarget,
    const GUID *pTargetFormat,
    LONGLONG Source,
    const GUID *pSourceFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_ConvertTimeFormat_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!pTarget) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pTargetFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pSourceFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 56;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pTargetFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1304]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(LONGLONG *)__frame->_StubMsg.Buffer = Source;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSourceFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1326]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[492]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pTarget = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_ConvertTimeFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1294], (void *)pTarget );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_ConvertTimeFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pTarget;
    const GUID * pTargetFormat;
    LONGLONG Source;
    const GUID * pSourceFormat;
};

static void __finally_IMediaSeeking_ConvertTimeFormat_Stub( struct __frame_IMediaSeeking_ConvertTimeFormat_Stub *__frame )
{




}

void __RPC_STUB IMediaSeeking_ConvertTimeFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_ConvertTimeFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_ConvertTimeFormat_Stub );
    __frame->pTarget = 0;
    __frame->pTargetFormat = 0;
    __frame->pSourceFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[492]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pTargetFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1304],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->Source = *(LONGLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSourceFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1326],
            0);


        __frame->pTarget = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ConvertTimeFormat(__frame->_This, __frame->pTarget, __frame->pTargetFormat, __frame->Source, __frame->pSourceFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pTarget;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_ConvertTimeFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_SetPositions_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_SetPositions_Proxy(
    IMediaSeeking* This,
    LONGLONG *pCurrent,
    DWORD dwCurrentFlags,
    LONGLONG *pStop,
    DWORD dwStopFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_SetPositions_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!pCurrent) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pStop) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(LONGLONG *)__frame->_StubMsg.Buffer = *pCurrent;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwCurrentFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(LONGLONG *)__frame->_StubMsg.Buffer = *pStop;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwStopFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[508]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCurrent = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pStop = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_SetPositions_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1342], (void *)pCurrent );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1346], (void *)pStop );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_SetPositions_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG * pCurrent;
    DWORD dwCurrentFlags;
    LONGLONG * pStop;
    DWORD dwStopFlags;
};

static void __finally_IMediaSeeking_SetPositions_Stub( struct __frame_IMediaSeeking_SetPositions_Stub *__frame )
{




}

void __RPC_STUB IMediaSeeking_SetPositions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_SetPositions_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_SetPositions_Stub );
    __frame->pCurrent = 0;
    __frame->pStop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[508]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pCurrent = (LONGLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwCurrentFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pStop = (LONGLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwStopFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetPositions(__frame->_This, __frame->pCurrent, __frame->dwCurrentFlags, __frame->pStop, __frame->dwStopFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 40;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pCurrent;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pStop;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_SetPositions_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetPositions_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetPositions_Proxy(
    IMediaSeeking* This,
    LONGLONG *pCurrent,
    LONGLONG *pStop)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetPositions_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        if (!pCurrent) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pStop) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[522]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCurrent = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pStop = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetPositions_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1350], (void *)pCurrent );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1354], (void *)pStop );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetPositions_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pCurrent;
    LONGLONG _W1;
    LONGLONG * pStop;
};

static void __finally_IMediaSeeking_GetPositions_Stub( struct __frame_IMediaSeeking_GetPositions_Stub *__frame )
{


}

void __RPC_STUB IMediaSeeking_GetPositions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetPositions_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetPositions_Stub );
    __frame->pCurrent = 0;
    __frame->pStop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[522]);


        __frame->pCurrent = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pStop = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetPositions(__frame->_This, __frame->pCurrent, __frame->pStop);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 40;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pCurrent;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pStop;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetPositions_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetAvailable_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetAvailable_Proxy(
    IMediaSeeking* This,
    LONGLONG *pEarliest,
    LONGLONG *pLatest)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetAvailable_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        if (!pEarliest) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pLatest) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[532]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pEarliest = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pLatest = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetAvailable_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1358], (void *)pEarliest );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1362], (void *)pLatest );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetAvailable_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pEarliest;
    LONGLONG _W1;
    LONGLONG * pLatest;
};

static void __finally_IMediaSeeking_GetAvailable_Stub( struct __frame_IMediaSeeking_GetAvailable_Stub *__frame )
{


}

void __RPC_STUB IMediaSeeking_GetAvailable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetAvailable_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetAvailable_Stub );
    __frame->pEarliest = 0;
    __frame->pLatest = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[532]);


        __frame->pEarliest = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pLatest = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetAvailable(__frame->_This, __frame->pEarliest, __frame->pLatest);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 40;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pEarliest;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pLatest;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetAvailable_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_SetRate_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_SetRate_Proxy(
    IMediaSeeking* This,
    double dRate)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_SetRate_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(double *)__frame->_StubMsg.Buffer = dRate;
            __frame->_StubMsg.Buffer += sizeof(double);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[542]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_SetRate_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_SetRate_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    double dRate;
};

static void __finally_IMediaSeeking_SetRate_Stub( struct __frame_IMediaSeeking_SetRate_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_SetRate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_SetRate_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_SetRate_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[542]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(double) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dRate = *(double *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(double);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetRate(__frame->_This, __frame->dRate);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_SetRate_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetRate_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetRate_Proxy(
    IMediaSeeking* This,
    double *pdRate)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetRate_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 18);
        if (!pdRate) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[546]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(double) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdRate = *(double *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(double);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetRate_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1366], (void *)pdRate );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetRate_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    double _W0;
    double * pdRate;
};

static void __finally_IMediaSeeking_GetRate_Stub( struct __frame_IMediaSeeking_GetRate_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetRate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetRate_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetRate_Stub );
    __frame->pdRate = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[546]);


        __frame->pdRate = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRate(__frame->_This, __frame->pdRate);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(double *)__frame->_StubMsg.Buffer = *__frame->pdRate;
        __frame->_StubMsg.Buffer += sizeof(double);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetRate_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetPreroll_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetPreroll_Proxy(
    IMediaSeeking* This,
    LONGLONG *pllPreroll)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetPreroll_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 19);
        if (!pllPreroll) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[552]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pllPreroll = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetPreroll_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1370], (void *)pllPreroll );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetPreroll_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pllPreroll;
};

static void __finally_IMediaSeeking_GetPreroll_Stub( struct __frame_IMediaSeeking_GetPreroll_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetPreroll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetPreroll_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetPreroll_Stub );
    __frame->pllPreroll = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[552]);


        __frame->pllPreroll = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetPreroll(__frame->_This, __frame->pllPreroll);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pllPreroll;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetPreroll_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMediaSeeking_FormatStringOffsetTable[] =
{
    432,  /* IMediaSeeking::GetCapabilities */
    438,  /* IMediaSeeking::CheckCapabilities */
    444,  /* IMediaSeeking::IsFormatSupported */
    450,  /* IMediaSeeking::QueryPreferredFormat */
    456,  /* IMediaSeeking::GetTimeFormat */
    462,  /* IMediaSeeking::IsUsingTimeFormat */
    468,  /* IMediaSeeking::SetTimeFormat */
    474,  /* IMediaSeeking::GetDuration */
    480,  /* IMediaSeeking::GetStopPosition */
    486,  /* IMediaSeeking::GetCurrentPosition */
    492,  /* IMediaSeeking::ConvertTimeFormat */
    508,  /* IMediaSeeking::SetPositions */
    522,  /* IMediaSeeking::GetPositions */
    532,  /* IMediaSeeking::GetAvailable */
    542,  /* IMediaSeeking::SetRate */
    546,  /* IMediaSeeking::GetRate */
    552,  /* IMediaSeeking::GetPreroll */
};

static const CINTERFACE_PROXY_VTABLE(20) _IMediaSeekingProxyVtbl =
{
    {
        &IID_IMediaSeeking,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMediaSeeking_GetCapabilities_Proxy,
        IMediaSeeking_CheckCapabilities_Proxy,
        IMediaSeeking_IsFormatSupported_Proxy,
        IMediaSeeking_QueryPreferredFormat_Proxy,
        IMediaSeeking_GetTimeFormat_Proxy,
        IMediaSeeking_IsUsingTimeFormat_Proxy,
        IMediaSeeking_SetTimeFormat_Proxy,
        IMediaSeeking_GetDuration_Proxy,
        IMediaSeeking_GetStopPosition_Proxy,
        IMediaSeeking_GetCurrentPosition_Proxy,
        IMediaSeeking_ConvertTimeFormat_Proxy,
        IMediaSeeking_SetPositions_Proxy,
        IMediaSeeking_GetPositions_Proxy,
        IMediaSeeking_GetAvailable_Proxy,
        IMediaSeeking_SetRate_Proxy,
        IMediaSeeking_GetRate_Proxy,
        IMediaSeeking_GetPreroll_Proxy,
    }
};

static const MIDL_SERVER_INFO IMediaSeeking_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMediaSeeking_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMediaSeeking_table[] =
{
    IMediaSeeking_GetCapabilities_Stub,
    IMediaSeeking_CheckCapabilities_Stub,
    IMediaSeeking_IsFormatSupported_Stub,
    IMediaSeeking_QueryPreferredFormat_Stub,
    IMediaSeeking_GetTimeFormat_Stub,
    IMediaSeeking_IsUsingTimeFormat_Stub,
    IMediaSeeking_SetTimeFormat_Stub,
    IMediaSeeking_GetDuration_Stub,
    IMediaSeeking_GetStopPosition_Stub,
    IMediaSeeking_GetCurrentPosition_Stub,
    IMediaSeeking_ConvertTimeFormat_Stub,
    IMediaSeeking_SetPositions_Stub,
    IMediaSeeking_GetPositions_Stub,
    IMediaSeeking_GetAvailable_Stub,
    IMediaSeeking_SetRate_Stub,
    IMediaSeeking_GetRate_Stub,
    IMediaSeeking_GetPreroll_Stub
};

static const CInterfaceStubVtbl _IMediaSeekingStubVtbl =
{
    {
        &IID_IMediaSeeking,
        &IMediaSeeking_ServerInfo,
        20,
        &IMediaSeeking_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAMStreamSelect interface
 */
static void __finally_IAMStreamSelect_Count_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamSelect_Count_Proxy(
    IAMStreamSelect* This,
    DWORD *streams)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamSelect_Count_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!streams) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[558]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *streams = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamSelect_Count_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1374], (void *)streams );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamSelect_Count_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamSelect * _This;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * streams;
};

static void __finally_IAMStreamSelect_Count_Stub( struct __frame_IAMStreamSelect_Count_Stub *__frame )
{

}

void __RPC_STUB IAMStreamSelect_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamSelect_Count_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamSelect*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamSelect_Count_Stub );
    __frame->streams = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[558]);


        __frame->streams = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Count(__frame->_This, __frame->streams);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->streams;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamSelect_Count_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMStreamSelect_Info_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamSelect_Info_Proxy(
    IAMStreamSelect* This,
    LONG index,
    AM_MEDIA_TYPE **media_type,
    DWORD *flags,
    LCID *lcid,
    DWORD *group,
    WCHAR **name,
    IUnknown **object,
    IUnknown **unknown)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamSelect_Info_Proxy );
    __frame->This = This;
    if (media_type) MIDL_memset( media_type, 0, sizeof( *media_type ));
    if (name) MIDL_memset( name, 0, sizeof( *name ));
    if (object) MIDL_memset( object, 0, sizeof( *object ));
    if (unknown) MIDL_memset( unknown, 0, sizeof( *unknown ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!media_type) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!flags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!lcid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!group) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!object) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!unknown) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = index;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[564]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&media_type,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1382],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LCID) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *lcid = *(LCID *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LCID);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *group = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1402],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&object,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1424],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&unknown,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1446],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamSelect_Info_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1382], (void *)media_type );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1386], (void *)flags );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1390], (void *)lcid );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1394], (void *)group );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1402], (void *)name );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1424], (void *)object );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1446], (void *)unknown );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamSelect_Info_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamSelect * _This;
    HRESULT _RetVal;
    LONG index;
    AM_MEDIA_TYPE *_W0;
    AM_MEDIA_TYPE ** media_type;
    DWORD _W1;
    DWORD * flags;
    LCID _W2;
    LCID * lcid;
    DWORD _W3;
    DWORD * group;
    WCHAR *_W4;
    WCHAR ** name;
    IUnknown *_W5;
    IUnknown ** object;
    IUnknown *_W6;
    IUnknown ** unknown;
};

static void __finally_IAMStreamSelect_Info_Stub( struct __frame_IAMStreamSelect_Info_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->media_type,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1382]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1402]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1424]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->unknown,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1446]);

}

void __RPC_STUB IAMStreamSelect_Info_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamSelect_Info_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamSelect*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamSelect_Info_Stub );
    __frame->media_type = 0;
    __frame->flags = 0;
    __frame->lcid = 0;
    __frame->group = 0;
    __frame->name = 0;
    __frame->object = 0;
    __frame->unknown = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[564]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->index = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->media_type = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->flags = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->lcid = &__frame->_W2;
        __frame->_W2 = 0;
        __frame->group = &__frame->_W3;
        __frame->_W3 = 0;
        __frame->name = &__frame->_W4;
        __frame->_W4 = 0;
        __frame->object = &__frame->_W5;
        __frame->_W5 = 0;
        __frame->unknown = &__frame->_W6;
        __frame->_W6 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Info(__frame->_This, __frame->index, __frame->media_type, __frame->flags, __frame->lcid, __frame->group, __frame->name, __frame->object, __frame->unknown);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 46;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->media_type,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1382]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->object,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1424]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->unknown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1446]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->media_type,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1382]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LCID *)__frame->_StubMsg.Buffer = *__frame->lcid;
        __frame->_StubMsg.Buffer += sizeof(LCID);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->group;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1402]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->object,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1424]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->unknown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1446]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamSelect_Info_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMStreamSelect_Enable_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamSelect_Enable_Proxy(
    IAMStreamSelect* This,
    LONG index,
    DWORD flags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamSelect_Enable_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = index;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = flags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[596]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamSelect_Enable_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamSelect_Enable_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamSelect * _This;
    HRESULT _RetVal;
    LONG index;
    DWORD flags;
};

static void __finally_IAMStreamSelect_Enable_Stub( struct __frame_IAMStreamSelect_Enable_Stub *__frame )
{


}

void __RPC_STUB IAMStreamSelect_Enable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamSelect_Enable_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamSelect*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamSelect_Enable_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[596]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->index = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Enable(__frame->_This, __frame->index, __frame->flags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamSelect_Enable_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAMStreamSelect_FormatStringOffsetTable[] =
{
    558,  /* IAMStreamSelect::Count */
    564,  /* IAMStreamSelect::Info */
    596,  /* IAMStreamSelect::Enable */
};

static const CINTERFACE_PROXY_VTABLE(6) _IAMStreamSelectProxyVtbl =
{
    {
        &IID_IAMStreamSelect,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAMStreamSelect_Count_Proxy,
        IAMStreamSelect_Info_Proxy,
        IAMStreamSelect_Enable_Proxy,
    }
};

static const MIDL_SERVER_INFO IAMStreamSelect_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAMStreamSelect_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAMStreamSelect_table[] =
{
    IAMStreamSelect_Count_Stub,
    IAMStreamSelect_Info_Stub,
    IAMStreamSelect_Enable_Stub
};

static const CInterfaceStubVtbl _IAMStreamSelectStubVtbl =
{
    {
        &IID_IAMStreamSelect,
        &IAMStreamSelect_ServerInfo,
        6,
        &IAMStreamSelect_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumRegFilters interface
 */
static void __finally_IEnumRegFilters_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumRegFilters_Next_Proxy(
    IEnumRegFilters* This,
    ULONG cFilters,
    REGFILTER **apRegFilter,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumRegFilters_Next_Proxy );
    __frame->This = This;
    if (apRegFilter) MIDL_memset( apRegFilter, 0, sizeof( *apRegFilter ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!apRegFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cFilters;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[602]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&apRegFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1482],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumRegFilters_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1482], (void *)apRegFilter );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1486], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumRegFilters_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumRegFilters * _This;
    HRESULT _RetVal;
    ULONG cFilters;
    REGFILTER *_W0;
    REGFILTER ** apRegFilter;
    ULONG _W1;
    ULONG * pcFetched;
};

static void __finally_IEnumRegFilters_Next_Stub( struct __frame_IEnumRegFilters_Next_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->apRegFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1482]);


}

void __RPC_STUB IEnumRegFilters_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumRegFilters_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumRegFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumRegFilters_Next_Stub );
    __frame->apRegFilter = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[602]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cFilters = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->apRegFilter = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pcFetched = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->cFilters, __frame->apRegFilter, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->apRegFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1482]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->apRegFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1482]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumRegFilters_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumRegFilters_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumRegFilters_Skip_Proxy(
    IEnumRegFilters* This,
    ULONG cFilters)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumRegFilters_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cFilters;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[614]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumRegFilters_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumRegFilters_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumRegFilters * _This;
    HRESULT _RetVal;
    ULONG cFilters;
};

static void __finally_IEnumRegFilters_Skip_Stub( struct __frame_IEnumRegFilters_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumRegFilters_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumRegFilters_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumRegFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumRegFilters_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[614]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cFilters = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->cFilters);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumRegFilters_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumRegFilters_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumRegFilters_Reset_Proxy(
    IEnumRegFilters* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumRegFilters_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[618]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumRegFilters_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumRegFilters_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumRegFilters * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumRegFilters_Reset_Stub( struct __frame_IEnumRegFilters_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumRegFilters_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumRegFilters_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumRegFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumRegFilters_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[618]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumRegFilters_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumRegFilters_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumRegFilters_Clone_Proxy(
    IEnumRegFilters* This,
    IEnumRegFilters **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumRegFilters_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[620]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1508],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumRegFilters_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1508], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumRegFilters_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumRegFilters * _This;
    HRESULT _RetVal;
    IEnumRegFilters *_W0;
    IEnumRegFilters ** ppEnum;
};

static void __finally_IEnumRegFilters_Clone_Stub( struct __frame_IEnumRegFilters_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1508]);

}

void __RPC_STUB IEnumRegFilters_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumRegFilters_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumRegFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumRegFilters_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[620]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1508]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1508]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumRegFilters_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumRegFilters_FormatStringOffsetTable[] =
{
    602,  /* IEnumRegFilters::Next */
    614,  /* IEnumRegFilters::Skip */
    618,  /* IEnumRegFilters::Reset */
    620,  /* IEnumRegFilters::Clone */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumRegFiltersProxyVtbl =
{
    {
        &IID_IEnumRegFilters,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumRegFilters_Next_Proxy,
        IEnumRegFilters_Skip_Proxy,
        IEnumRegFilters_Reset_Proxy,
        IEnumRegFilters_Clone_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumRegFilters_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumRegFilters_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumRegFilters_table[] =
{
    IEnumRegFilters_Next_Stub,
    IEnumRegFilters_Skip_Stub,
    IEnumRegFilters_Reset_Stub,
    IEnumRegFilters_Clone_Stub
};

static const CInterfaceStubVtbl _IEnumRegFiltersStubVtbl =
{
    {
        &IID_IEnumRegFilters,
        &IEnumRegFilters_ServerInfo,
        7,
        &IEnumRegFilters_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFilterMapper interface
 */
static void __finally_IFilterMapper_RegisterFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_RegisterFilter_Proxy(
    IFilterMapper* This,
    CLSID clsid,
    LPCWSTR Name,
    DWORD dwMerit)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_RegisterFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!Name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1514]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1514]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwMerit;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[626]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_RegisterFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_RegisterFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID clsid;
    void *_p_clsid;
    LPCWSTR Name;
    DWORD dwMerit;
};

static void __finally_IFilterMapper_RegisterFilter_Stub( struct __frame_IFilterMapper_RegisterFilter_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1512]);


}

void __RPC_STUB IFilterMapper_RegisterFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_RegisterFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_RegisterFilter_Stub );
    MIDL_memset(&__frame->clsid, 0, sizeof(__frame->clsid));
    __frame->_p_clsid = &__frame->clsid;
    __frame->Name = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[626]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1514],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwMerit = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterFilter(__frame->_This, __frame->clsid, __frame->Name, __frame->dwMerit);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_RegisterFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_RegisterFilterInstance_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_RegisterFilterInstance_Proxy(
    IFilterMapper* This,
    CLSID clsid,
    LPCWSTR Name,
    CLSID *MRId)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_RegisterFilterInstance_Proxy );
    __frame->This = This;
    if (MRId) MIDL_memset( MRId, 0, sizeof( *MRId ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!Name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!MRId) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[638]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&MRId,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_RegisterFilterInstance_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1520], (void *)MRId );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_RegisterFilterInstance_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID clsid;
    void *_p_clsid;
    LPCWSTR Name;
    CLSID _W0;
    CLSID * MRId;
};

static void __finally_IFilterMapper_RegisterFilterInstance_Stub( struct __frame_IFilterMapper_RegisterFilterInstance_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1516]);


}

void __RPC_STUB IFilterMapper_RegisterFilterInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_RegisterFilterInstance_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_RegisterFilterInstance_Stub );
    MIDL_memset(&__frame->clsid, 0, sizeof(__frame->clsid));
    __frame->_p_clsid = &__frame->clsid;
    __frame->Name = 0;
    __frame->MRId = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[638]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518],
            0);


        __frame->MRId = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterFilterInstance(__frame->_This, __frame->clsid, __frame->Name, __frame->MRId);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->MRId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_RegisterFilterInstance_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_RegisterPin_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_RegisterPin_Proxy(
    IFilterMapper* This,
    CLSID Filter,
    LPCWSTR Name,
    BOOL bRendered,
    BOOL bOutput,
    BOOL bZero,
    BOOL bMany,
    CLSID ConnectsToFilter,
    LPCWSTR ConnectsToPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_RegisterPin_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!Name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ConnectsToPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 72;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1526]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ConnectsToPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1530]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&Filter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1526]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bRendered;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bOutput;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bZero;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bMany;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&ConnectsToFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ConnectsToPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1530]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[652]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_RegisterPin_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_RegisterPin_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID Filter;
    void *_p_Filter;
    LPCWSTR Name;
    BOOL bRendered;
    BOOL bOutput;
    BOOL bZero;
    BOOL bMany;
    CLSID ConnectsToFilter;
    void *_p_ConnectsToFilter;
    LPCWSTR ConnectsToPin;
};

static void __finally_IFilterMapper_RegisterPin_Stub( struct __frame_IFilterMapper_RegisterPin_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1524]);






    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ConnectsToPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1528]);

}

void __RPC_STUB IFilterMapper_RegisterPin_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_RegisterPin_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_RegisterPin_Stub );
    MIDL_memset(&__frame->Filter, 0, sizeof(__frame->Filter));
    __frame->_p_Filter = &__frame->Filter;
    __frame->Name = 0;
    MIDL_memset(&__frame->ConnectsToFilter, 0, sizeof(__frame->ConnectsToFilter));
    __frame->_p_ConnectsToFilter = &__frame->ConnectsToFilter;
    __frame->ConnectsToPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[652]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_Filter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1526],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bRendered = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bOutput = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bZero = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bMany = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_ConnectsToFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ConnectsToPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1530],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterPin(__frame->_This, __frame->Filter, __frame->Name, __frame->bRendered, __frame->bOutput, __frame->bZero, __frame->bMany, __frame->ConnectsToFilter, __frame->ConnectsToPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_RegisterPin_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_RegisterPinType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_RegisterPinType_Proxy(
    IFilterMapper* This,
    CLSID clsFilter,
    LPCWSTR strName,
    CLSID clsMajorType,
    CLSID clsSubType)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_RegisterPinType_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!strName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 60;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)strName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1534]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)strName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1534]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsMajorType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsSubType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[678]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_RegisterPinType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_RegisterPinType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID clsFilter;
    void *_p_clsFilter;
    LPCWSTR strName;
    CLSID clsMajorType;
    void *_p_clsMajorType;
    CLSID clsSubType;
    void *_p_clsSubType;
};

static void __finally_IFilterMapper_RegisterPinType_Stub( struct __frame_IFilterMapper_RegisterPinType_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->strName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532]);



}

void __RPC_STUB IFilterMapper_RegisterPinType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_RegisterPinType_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_RegisterPinType_Stub );
    MIDL_memset(&__frame->clsFilter, 0, sizeof(__frame->clsFilter));
    __frame->_p_clsFilter = &__frame->clsFilter;
    __frame->strName = 0;
    MIDL_memset(&__frame->clsMajorType, 0, sizeof(__frame->clsMajorType));
    __frame->_p_clsMajorType = &__frame->clsMajorType;
    MIDL_memset(&__frame->clsSubType, 0, sizeof(__frame->clsSubType));
    __frame->_p_clsSubType = &__frame->clsSubType;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[678]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->strName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1534],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsMajorType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsSubType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterPinType(__frame->_This, __frame->clsFilter, __frame->strName, __frame->clsMajorType, __frame->clsSubType);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_RegisterPinType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_UnregisterFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_UnregisterFilter_Proxy(
    IFilterMapper* This,
    CLSID Filter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_UnregisterFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&Filter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[696]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_UnregisterFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_UnregisterFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID Filter;
    void *_p_Filter;
};

static void __finally_IFilterMapper_UnregisterFilter_Stub( struct __frame_IFilterMapper_UnregisterFilter_Stub *__frame )
{

}

void __RPC_STUB IFilterMapper_UnregisterFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_UnregisterFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_UnregisterFilter_Stub );
    MIDL_memset(&__frame->Filter, 0, sizeof(__frame->Filter));
    __frame->_p_Filter = &__frame->Filter;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[696]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_Filter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnregisterFilter(__frame->_This, __frame->Filter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_UnregisterFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_UnregisterFilterInstance_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_UnregisterFilterInstance_Proxy(
    IFilterMapper* This,
    CLSID MRId)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_UnregisterFilterInstance_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&MRId,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[702]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_UnregisterFilterInstance_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_UnregisterFilterInstance_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID MRId;
    void *_p_MRId;
};

static void __finally_IFilterMapper_UnregisterFilterInstance_Stub( struct __frame_IFilterMapper_UnregisterFilterInstance_Stub *__frame )
{

}

void __RPC_STUB IFilterMapper_UnregisterFilterInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_UnregisterFilterInstance_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_UnregisterFilterInstance_Stub );
    MIDL_memset(&__frame->MRId, 0, sizeof(__frame->MRId));
    __frame->_p_MRId = &__frame->MRId;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[702]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_MRId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnregisterFilterInstance(__frame->_This, __frame->MRId);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_UnregisterFilterInstance_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_UnregisterPin_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_UnregisterPin_Proxy(
    IFilterMapper* This,
    CLSID Filter,
    LPCWSTR Name)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_UnregisterPin_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!Name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1538]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&Filter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1538]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[708]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_UnregisterPin_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_UnregisterPin_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID Filter;
    void *_p_Filter;
    LPCWSTR Name;
};

static void __finally_IFilterMapper_UnregisterPin_Stub( struct __frame_IFilterMapper_UnregisterPin_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1536]);

}

void __RPC_STUB IFilterMapper_UnregisterPin_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_UnregisterPin_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_UnregisterPin_Stub );
    MIDL_memset(&__frame->Filter, 0, sizeof(__frame->Filter));
    __frame->_p_Filter = &__frame->Filter;
    __frame->Name = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[708]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_Filter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1538],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnregisterPin(__frame->_This, __frame->Filter, __frame->Name);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_UnregisterPin_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_EnumMatchingFilters_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_EnumMatchingFilters_Proxy(
    IFilterMapper* This,
    IEnumRegFilters **ppEnum,
    DWORD dwMerit,
    BOOL bInputNeeded,
    CLSID clsInMaj,
    CLSID clsInSub,
    BOOL bRender,
    BOOL bOutputNeeded,
    CLSID clsOutMaj,
    CLSID clsOutSub)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_EnumMatchingFilters_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 112;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwMerit;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bInputNeeded;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsInMaj,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsInSub,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bRender;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bOutputNeeded;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsOutMaj,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsOutSub,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1558],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_EnumMatchingFilters_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1558], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_EnumMatchingFilters_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    IEnumRegFilters *_W0;
    IEnumRegFilters ** ppEnum;
    DWORD dwMerit;
    BOOL bInputNeeded;
    CLSID clsInMaj;
    void *_p_clsInMaj;
    CLSID clsInSub;
    void *_p_clsInSub;
    BOOL bRender;
    BOOL bOutputNeeded;
    CLSID clsOutMaj;
    void *_p_clsOutMaj;
    CLSID clsOutSub;
    void *_p_clsOutSub;
};

static void __finally_IFilterMapper_EnumMatchingFilters_Stub( struct __frame_IFilterMapper_EnumMatchingFilters_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1558]);









}

void __RPC_STUB IFilterMapper_EnumMatchingFilters_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_EnumMatchingFilters_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_EnumMatchingFilters_Stub );
    __frame->ppEnum = 0;
    MIDL_memset(&__frame->clsInMaj, 0, sizeof(__frame->clsInMaj));
    __frame->_p_clsInMaj = &__frame->clsInMaj;
    MIDL_memset(&__frame->clsInSub, 0, sizeof(__frame->clsInSub));
    __frame->_p_clsInSub = &__frame->clsInSub;
    MIDL_memset(&__frame->clsOutMaj, 0, sizeof(__frame->clsOutMaj));
    __frame->_p_clsOutMaj = &__frame->clsOutMaj;
    MIDL_memset(&__frame->clsOutSub, 0, sizeof(__frame->clsOutSub));
    __frame->_p_clsOutSub = &__frame->clsOutSub;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwMerit = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bInputNeeded = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsInMaj,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsInSub,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bRender = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bOutputNeeded = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsOutMaj,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsOutSub,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumMatchingFilters(__frame->_This, __frame->ppEnum, __frame->dwMerit, __frame->bInputNeeded, __frame->clsInMaj, __frame->clsInSub, __frame->bRender, __frame->bOutputNeeded, __frame->clsOutMaj, __frame->clsOutSub);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1558]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1558]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_EnumMatchingFilters_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFilterMapper_FormatStringOffsetTable[] =
{
    626,  /* IFilterMapper::RegisterFilter */
    638,  /* IFilterMapper::RegisterFilterInstance */
    652,  /* IFilterMapper::RegisterPin */
    678,  /* IFilterMapper::RegisterPinType */
    696,  /* IFilterMapper::UnregisterFilter */
    702,  /* IFilterMapper::UnregisterFilterInstance */
    708,  /* IFilterMapper::UnregisterPin */
    718,  /* IFilterMapper::EnumMatchingFilters */
};

static const CINTERFACE_PROXY_VTABLE(11) _IFilterMapperProxyVtbl =
{
    {
        &IID_IFilterMapper,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterMapper_RegisterFilter_Proxy,
        IFilterMapper_RegisterFilterInstance_Proxy,
        IFilterMapper_RegisterPin_Proxy,
        IFilterMapper_RegisterPinType_Proxy,
        IFilterMapper_UnregisterFilter_Proxy,
        IFilterMapper_UnregisterFilterInstance_Proxy,
        IFilterMapper_UnregisterPin_Proxy,
        IFilterMapper_EnumMatchingFilters_Proxy,
    }
};

static const MIDL_SERVER_INFO IFilterMapper_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFilterMapper_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFilterMapper_table[] =
{
    IFilterMapper_RegisterFilter_Stub,
    IFilterMapper_RegisterFilterInstance_Stub,
    IFilterMapper_RegisterPin_Stub,
    IFilterMapper_RegisterPinType_Stub,
    IFilterMapper_UnregisterFilter_Stub,
    IFilterMapper_UnregisterFilterInstance_Stub,
    IFilterMapper_UnregisterPin_Stub,
    IFilterMapper_EnumMatchingFilters_Stub
};

static const CInterfaceStubVtbl _IFilterMapperStubVtbl =
{
    {
        &IID_IFilterMapper,
        &IFilterMapper_ServerInfo,
        11,
        &IFilterMapper_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFilterMapper2 interface
 */
static void __finally_IFilterMapper2_CreateCategory_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper2_CreateCategory_Proxy(
    IFilterMapper2* This,
    REFCLSID clsidCategory,
    DWORD dwCategoryMerit,
    LPCWSTR Description)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper2_CreateCategory_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!clsidCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!Description) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Description,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1568]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsidCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwCategoryMerit;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Description,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1568]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[748]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper2_CreateCategory_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper2_CreateCategory_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper2 * _This;
    HRESULT _RetVal;
    REFCLSID clsidCategory;
    DWORD dwCategoryMerit;
    LPCWSTR Description;
};

static void __finally_IFilterMapper2_CreateCategory_Stub( struct __frame_IFilterMapper2_CreateCategory_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Description,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1566]);

}

void __RPC_STUB IFilterMapper2_CreateCategory_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper2_CreateCategory_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper2_CreateCategory_Stub );
    __frame->clsidCategory = 0;
    __frame->Description = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[748]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsidCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwCategoryMerit = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Description,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1568],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateCategory(__frame->_This, __frame->clsidCategory, __frame->dwCategoryMerit, __frame->Description);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper2_CreateCategory_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper2_UnregisterFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper2_UnregisterFilter_Proxy(
    IFilterMapper2* This,
    const CLSID *pclsidCategory,
    LPCOLESTR szInstance,
    REFCLSID Filter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper2_UnregisterFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pclsidCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!szInstance) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!Filter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)szInstance,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1594]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pclsidCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1576]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)szInstance,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1594]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Filter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[760]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper2_UnregisterFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper2_UnregisterFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper2 * _This;
    HRESULT _RetVal;
    const CLSID * pclsidCategory;
    LPCOLESTR szInstance;
    REFCLSID Filter;
};

static void __finally_IFilterMapper2_UnregisterFilter_Stub( struct __frame_IFilterMapper2_UnregisterFilter_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->szInstance,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1592]);


}

void __RPC_STUB IFilterMapper2_UnregisterFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper2_UnregisterFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper2_UnregisterFilter_Stub );
    __frame->pclsidCategory = 0;
    __frame->szInstance = 0;
    __frame->Filter = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[760]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pclsidCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1576],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->szInstance,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1594],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Filter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnregisterFilter(__frame->_This, __frame->pclsidCategory, __frame->szInstance, __frame->Filter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper2_UnregisterFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper2_RegisterFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper2_RegisterFilter_Proxy(
    IFilterMapper2* This,
    REFCLSID clsidFilter,
    LPCWSTR Name,
    IMoniker **ppMoniker,
    const CLSID *pclsidCategory,
    LPCOLESTR szInstance,
    const REGFILTER2 *prf2)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper2_RegisterFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!clsidFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!Name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppMoniker) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pclsidCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!szInstance) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prf2) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1606]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)szInstance,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1654]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prf2,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2132]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsidFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1606]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pclsidCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1636]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)szInstance,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1654]);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prf2,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2132]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[774]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper2_RegisterFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1626], (void *)ppMoniker );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper2_RegisterFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper2 * _This;
    HRESULT _RetVal;
    REFCLSID clsidFilter;
    LPCWSTR Name;
    IMoniker ** ppMoniker;
    const CLSID * pclsidCategory;
    LPCOLESTR szInstance;
    const REGFILTER2 * prf2;
};

static void __finally_IFilterMapper2_RegisterFilter_Stub( struct __frame_IFilterMapper2_RegisterFilter_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1604]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppMoniker,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->szInstance,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1652]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prf2,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2148]);

}

void __RPC_STUB IFilterMapper2_RegisterFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper2_RegisterFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper2_RegisterFilter_Stub );
    __frame->clsidFilter = 0;
    __frame->Name = 0;
    __frame->ppMoniker = 0;
    __frame->pclsidCategory = 0;
    __frame->szInstance = 0;
    __frame->prf2 = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[774]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsidFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1606],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pclsidCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1636],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->szInstance,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1654],
            0);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prf2,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2132],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterFilter(__frame->_This, __frame->clsidFilter, __frame->Name, __frame->ppMoniker, __frame->pclsidCategory, __frame->szInstance, __frame->prf2);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1626]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper2_RegisterFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper2_EnumMatchingFilters_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper2_EnumMatchingFilters_Proxy(
    IFilterMapper2* This,
    IEnumMoniker **ppEnum,
    DWORD dwFlags,
    BOOL bExactMatch,
    DWORD dwMerit,
    BOOL bInputNeeded,
    DWORD cInputTypes,
    const GUID *pInputTypes,
    const REGPINMEDIUM *pMedIn,
    const CLSID *pPinCategoryIn,
    BOOL bRender,
    BOOL bOutputNeeded,
    DWORD cOutputTypes,
    const GUID *pOutputTypes,
    const REGPINMEDIUM *pMedOut,
    const CLSID *pPinCategoryOut)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper2_EnumMatchingFilters_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pInputTypes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pMedIn) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pPinCategoryIn) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pOutputTypes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pMedOut) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pPinCategoryOut) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 160;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(cInputTypes * 2);

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pInputTypes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2192]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(cOutputTypes * 2);

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pOutputTypes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bExactMatch;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwMerit;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bInputNeeded;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = cInputTypes;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(cInputTypes * 2);

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pInputTypes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2192]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pMedIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2210]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPinCategoryIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2232]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bRender;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bOutputNeeded;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = cOutputTypes;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(cOutputTypes * 2);

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pOutputTypes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pMedOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2284]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPinCategoryOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2306]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[800]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2170],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper2_EnumMatchingFilters_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2170], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper2_EnumMatchingFilters_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper2 * _This;
    HRESULT _RetVal;
    IEnumMoniker *_W0;
    IEnumMoniker ** ppEnum;
    DWORD dwFlags;
    BOOL bExactMatch;
    DWORD dwMerit;
    BOOL bInputNeeded;
    DWORD cInputTypes;
    const GUID * pInputTypes;
    const REGPINMEDIUM * pMedIn;
    const CLSID * pPinCategoryIn;
    BOOL bRender;
    BOOL bOutputNeeded;
    DWORD cOutputTypes;
    const GUID * pOutputTypes;
    const REGPINMEDIUM * pMedOut;
    const CLSID * pPinCategoryOut;
};

static void __finally_IFilterMapper2_EnumMatchingFilters_Stub( struct __frame_IFilterMapper2_EnumMatchingFilters_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2170]);






    __frame->_StubMsg.MaxCount = (ULONG_PTR)(__frame->cInputTypes * 2);

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pInputTypes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2192]);






    __frame->_StubMsg.MaxCount = (ULONG_PTR)(__frame->cOutputTypes * 2);

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pOutputTypes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266]);



}

void __RPC_STUB IFilterMapper2_EnumMatchingFilters_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper2_EnumMatchingFilters_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper2_EnumMatchingFilters_Stub );
    __frame->ppEnum = 0;
    __frame->pInputTypes = 0;
    __frame->pMedIn = 0;
    __frame->pPinCategoryIn = 0;
    __frame->pOutputTypes = 0;
    __frame->pMedOut = 0;
    __frame->pPinCategoryOut = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[800]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bExactMatch = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwMerit = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bInputNeeded = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cInputTypes = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pInputTypes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2192],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pMedIn,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2210],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPinCategoryIn,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2232],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bRender = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bOutputNeeded = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cOutputTypes = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pOutputTypes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2266],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pMedOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2284],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPinCategoryOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2306],
            0);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumMatchingFilters(__frame->_This, __frame->ppEnum, __frame->dwFlags, __frame->bExactMatch, __frame->dwMerit, __frame->bInputNeeded, __frame->cInputTypes, __frame->pInputTypes, __frame->pMedIn, __frame->pPinCategoryIn, __frame->bRender, __frame->bOutputNeeded, __frame->cOutputTypes, __frame->pOutputTypes, __frame->pMedOut, __frame->pPinCategoryOut);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2170]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2170]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper2_EnumMatchingFilters_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFilterMapper2_FormatStringOffsetTable[] =
{
    748,  /* IFilterMapper2::CreateCategory */
    760,  /* IFilterMapper2::UnregisterFilter */
    774,  /* IFilterMapper2::RegisterFilter */
    800,  /* IFilterMapper2::EnumMatchingFilters */
};

static const CINTERFACE_PROXY_VTABLE(7) _IFilterMapper2ProxyVtbl =
{
    {
        &IID_IFilterMapper2,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterMapper2_CreateCategory_Proxy,
        IFilterMapper2_UnregisterFilter_Proxy,
        IFilterMapper2_RegisterFilter_Proxy,
        IFilterMapper2_EnumMatchingFilters_Proxy,
    }
};

static const MIDL_SERVER_INFO IFilterMapper2_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFilterMapper2_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFilterMapper2_table[] =
{
    IFilterMapper2_CreateCategory_Stub,
    IFilterMapper2_UnregisterFilter_Stub,
    IFilterMapper2_RegisterFilter_Stub,
    IFilterMapper2_EnumMatchingFilters_Stub
};

static const CInterfaceStubVtbl _IFilterMapper2StubVtbl =
{
    {
        &IID_IFilterMapper2,
        &IFilterMapper2_ServerInfo,
        7,
        &IFilterMapper2_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFilterMapper3 interface
 */
static void __finally_IFilterMapper3_GetICreateDevEnum_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper3_GetICreateDevEnum_Proxy(
    IFilterMapper3* This,
    ICreateDevEnum **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper3_GetICreateDevEnum_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[846]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2340],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper3_GetICreateDevEnum_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2340], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper3_GetICreateDevEnum_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper3 * _This;
    HRESULT _RetVal;
    ICreateDevEnum *_W0;
    ICreateDevEnum ** ppEnum;
};

static void __finally_IFilterMapper3_GetICreateDevEnum_Stub( struct __frame_IFilterMapper3_GetICreateDevEnum_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2340]);

}

void __RPC_STUB IFilterMapper3_GetICreateDevEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper3_GetICreateDevEnum_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper3*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper3_GetICreateDevEnum_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[846]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetICreateDevEnum(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2340]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2340]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper3_GetICreateDevEnum_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFilterMapper3_FormatStringOffsetTable[] =
{
    748,  /* IFilterMapper2::CreateCategory */
    760,  /* IFilterMapper2::UnregisterFilter */
    774,  /* IFilterMapper2::RegisterFilter */
    800,  /* IFilterMapper2::EnumMatchingFilters */
    846,  /* IFilterMapper3::GetICreateDevEnum */
};

static const CINTERFACE_PROXY_VTABLE(8) _IFilterMapper3ProxyVtbl =
{
    {
        &IID_IFilterMapper3,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterMapper2_CreateCategory_Proxy,
        IFilterMapper2_UnregisterFilter_Proxy,
        IFilterMapper2_RegisterFilter_Proxy,
        IFilterMapper2_EnumMatchingFilters_Proxy,
        IFilterMapper3_GetICreateDevEnum_Proxy,
    }
};

static const MIDL_SERVER_INFO IFilterMapper3_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFilterMapper3_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFilterMapper3_table[] =
{
    IFilterMapper2_CreateCategory_Stub,
    IFilterMapper2_UnregisterFilter_Stub,
    IFilterMapper2_RegisterFilter_Stub,
    IFilterMapper2_EnumMatchingFilters_Stub,
    IFilterMapper3_GetICreateDevEnum_Stub
};

static const CInterfaceStubVtbl _IFilterMapper3StubVtbl =
{
    {
        &IID_IFilterMapper3,
        &IFilterMapper3_ServerInfo,
        8,
        &IFilterMapper3_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IQualityControl interface
 */
static void __finally_IQualityControl_Notify_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IQualityControl_Notify_Proxy(
    IQualityControl* This,
    IBaseFilter *pSelf,
    Quality q)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IQualityControl_Notify_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSelf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2344]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)&q,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2362]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSelf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2344]);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&q,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2362]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[852]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IQualityControl_Notify_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IQualityControl_Notify_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IQualityControl * _This;
    HRESULT _RetVal;
    IBaseFilter * pSelf;
    Quality q;
    void *_p_q;
};

static void __finally_IQualityControl_Notify_Stub( struct __frame_IQualityControl_Notify_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSelf,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2344]);

    NdrComplexStructFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->q,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2362]);

}

void __RPC_STUB IQualityControl_Notify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IQualityControl_Notify_Stub __f, * const __frame = &__f;

    __frame->_This = (IQualityControl*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IQualityControl_Notify_Stub );
    __frame->pSelf = 0;
    MIDL_memset(&__frame->q, 0, sizeof(__frame->q));
    __frame->_p_q = &__frame->q;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[852]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSelf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2344],
            0);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_q,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2362],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Notify(__frame->_This, __frame->pSelf, __frame->q);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IQualityControl_Notify_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IQualityControl_SetSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IQualityControl_SetSink_Proxy(
    IQualityControl* This,
    IQualityControl *piqc)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IQualityControl_SetSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)piqc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2376]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)piqc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2376]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[862]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IQualityControl_SetSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IQualityControl_SetSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IQualityControl * _This;
    HRESULT _RetVal;
    IQualityControl * piqc;
};

static void __finally_IQualityControl_SetSink_Stub( struct __frame_IQualityControl_SetSink_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->piqc,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2376]);

}

void __RPC_STUB IQualityControl_SetSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IQualityControl_SetSink_Stub __f, * const __frame = &__f;

    __frame->_This = (IQualityControl*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IQualityControl_SetSink_Stub );
    __frame->piqc = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[862]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->piqc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2376],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetSink(__frame->_This, __frame->piqc);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IQualityControl_SetSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IQualityControl_FormatStringOffsetTable[] =
{
    852,  /* IQualityControl::Notify */
    862,  /* IQualityControl::SetSink */
};

static const CINTERFACE_PROXY_VTABLE(5) _IQualityControlProxyVtbl =
{
    {
        &IID_IQualityControl,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IQualityControl_Notify_Proxy,
        IQualityControl_SetSink_Proxy,
    }
};

static const MIDL_SERVER_INFO IQualityControl_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IQualityControl_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IQualityControl_table[] =
{
    IQualityControl_Notify_Stub,
    IQualityControl_SetSink_Stub
};

static const CInterfaceStubVtbl _IQualityControlStubVtbl =
{
    {
        &IID_IQualityControl,
        &IQualityControl_ServerInfo,
        5,
        &IQualityControl_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMediaEventSink interface
 */
static void __finally_IMediaEventSink_Notify_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaEventSink_Notify_Proxy(
    IMediaEventSink* This,
    LONG EventCode,
    LONG_PTR EventParam1,
    LONG_PTR EventParam2)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaEventSink_Notify_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = EventCode;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG_PTR *)__frame->_StubMsg.Buffer = EventParam1;
            __frame->_StubMsg.Buffer += sizeof(LONG_PTR);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG_PTR *)__frame->_StubMsg.Buffer = EventParam2;
            __frame->_StubMsg.Buffer += sizeof(LONG_PTR);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[868]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaEventSink_Notify_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaEventSink_Notify_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaEventSink * _This;
    HRESULT _RetVal;
    LONG EventCode;
    LONG_PTR EventParam1;
    LONG_PTR EventParam2;
};

static void __finally_IMediaEventSink_Notify_Stub( struct __frame_IMediaEventSink_Notify_Stub *__frame )
{



}

void __RPC_STUB IMediaEventSink_Notify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaEventSink_Notify_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaEventSink_Notify_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[868]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->EventCode = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG_PTR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->EventParam1 = *(LONG_PTR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG_PTR);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG_PTR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->EventParam2 = *(LONG_PTR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG_PTR);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Notify(__frame->_This, __frame->EventCode, __frame->EventParam1, __frame->EventParam2);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaEventSink_Notify_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMediaEventSink_FormatStringOffsetTable[] =
{
    868,  /* IMediaEventSink::Notify */
};

static const CINTERFACE_PROXY_VTABLE(4) _IMediaEventSinkProxyVtbl =
{
    {
        &IID_IMediaEventSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMediaEventSink_Notify_Proxy,
    }
};

static const MIDL_SERVER_INFO IMediaEventSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMediaEventSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMediaEventSink_table[] =
{
    IMediaEventSink_Notify_Stub
};

static const CInterfaceStubVtbl _IMediaEventSinkStubVtbl =
{
    {
        &IID_IMediaEventSink,
        &IMediaEventSink_ServerInfo,
        4,
        &IMediaEventSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFileSourceFilter interface
 */
static void __finally_IFileSourceFilter_Load_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSourceFilter_Load_Proxy(
    IFileSourceFilter* This,
    LPCOLESTR pszFileName,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSourceFilter_Load_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pszFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2396]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2442]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2396]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2442]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[876]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSourceFilter_Load_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSourceFilter_Load_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSourceFilter * _This;
    HRESULT _RetVal;
    LPCOLESTR pszFileName;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IFileSourceFilter_Load_Stub( struct __frame_IFileSourceFilter_Load_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pszFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2394]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2442]);

}

void __RPC_STUB IFileSourceFilter_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSourceFilter_Load_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSourceFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSourceFilter_Load_Stub );
    __frame->pszFileName = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[876]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2396],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2442],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Load(__frame->_This, __frame->pszFileName, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSourceFilter_Load_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFileSourceFilter_GetCurFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSourceFilter_GetCurFile_Proxy(
    IFileSourceFilter* This,
    LPOLESTR *ppszFileName,
    AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSourceFilter_GetCurFile_Proxy );
    __frame->This = This;
    if (ppszFileName) MIDL_memset( ppszFileName, 0, sizeof( *ppszFileName ));
    if (pmt) MIDL_memset( pmt, 0, sizeof( *pmt ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppszFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[886]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2446],
                0);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSourceFilter_GetCurFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2450], (void *)ppszFileName );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2454], (void *)pmt );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSourceFilter_GetCurFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSourceFilter * _This;
    HRESULT _RetVal;
    LPOLESTR _W0;
    LPOLESTR * ppszFileName;
    AM_MEDIA_TYPE _W1;
    AM_MEDIA_TYPE * pmt;
};

static void __finally_IFileSourceFilter_GetCurFile_Stub( struct __frame_IFileSourceFilter_GetCurFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppszFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2446]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2454]);

}

void __RPC_STUB IFileSourceFilter_GetCurFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSourceFilter_GetCurFile_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSourceFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSourceFilter_GetCurFile_Stub );
    __frame->ppszFileName = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[886]);


        __frame->ppszFileName = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pmt = &__frame->_W1;
        memset(&__frame->_W1, 0, sizeof(__frame->_W1));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCurFile(__frame->_This, __frame->ppszFileName, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2446]);

        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2446]);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSourceFilter_GetCurFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFileSourceFilter_FormatStringOffsetTable[] =
{
    876,  /* IFileSourceFilter::Load */
    886,  /* IFileSourceFilter::GetCurFile */
};

static const CINTERFACE_PROXY_VTABLE(5) _IFileSourceFilterProxyVtbl =
{
    {
        &IID_IFileSourceFilter,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFileSourceFilter_Load_Proxy,
        IFileSourceFilter_GetCurFile_Proxy,
    }
};

static const MIDL_SERVER_INFO IFileSourceFilter_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFileSourceFilter_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFileSourceFilter_table[] =
{
    IFileSourceFilter_Load_Stub,
    IFileSourceFilter_GetCurFile_Stub
};

static const CInterfaceStubVtbl _IFileSourceFilterStubVtbl =
{
    {
        &IID_IFileSourceFilter,
        &IFileSourceFilter_ServerInfo,
        5,
        &IFileSourceFilter_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFileSinkFilter interface
 */
static void __finally_IFileSinkFilter_SetFileName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSinkFilter_SetFileName_Proxy(
    IFileSinkFilter* This,
    LPCOLESTR pszFileName,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSinkFilter_SetFileName_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pszFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2460]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2506]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2460]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2506]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[896]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSinkFilter_SetFileName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSinkFilter_SetFileName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSinkFilter * _This;
    HRESULT _RetVal;
    LPCOLESTR pszFileName;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IFileSinkFilter_SetFileName_Stub( struct __frame_IFileSinkFilter_SetFileName_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pszFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2458]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2506]);

}

void __RPC_STUB IFileSinkFilter_SetFileName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSinkFilter_SetFileName_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSinkFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSinkFilter_SetFileName_Stub );
    __frame->pszFileName = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[896]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2460],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2506],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFileName(__frame->_This, __frame->pszFileName, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSinkFilter_SetFileName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFileSinkFilter_GetCurFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSinkFilter_GetCurFile_Proxy(
    IFileSinkFilter* This,
    LPOLESTR *ppszFileName,
    AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSinkFilter_GetCurFile_Proxy );
    __frame->This = This;
    if (ppszFileName) MIDL_memset( ppszFileName, 0, sizeof( *ppszFileName ));
    if (pmt) MIDL_memset( pmt, 0, sizeof( *pmt ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppszFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[906]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2510],
                0);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSinkFilter_GetCurFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2514], (void *)ppszFileName );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2518], (void *)pmt );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSinkFilter_GetCurFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSinkFilter * _This;
    HRESULT _RetVal;
    LPOLESTR _W0;
    LPOLESTR * ppszFileName;
    AM_MEDIA_TYPE _W1;
    AM_MEDIA_TYPE * pmt;
};

static void __finally_IFileSinkFilter_GetCurFile_Stub( struct __frame_IFileSinkFilter_GetCurFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppszFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2510]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2518]);

}

void __RPC_STUB IFileSinkFilter_GetCurFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSinkFilter_GetCurFile_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSinkFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSinkFilter_GetCurFile_Stub );
    __frame->ppszFileName = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[906]);


        __frame->ppszFileName = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pmt = &__frame->_W1;
        memset(&__frame->_W1, 0, sizeof(__frame->_W1));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCurFile(__frame->_This, __frame->ppszFileName, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2510]);

        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2510]);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSinkFilter_GetCurFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFileSinkFilter_FormatStringOffsetTable[] =
{
    896,  /* IFileSinkFilter::SetFileName */
    906,  /* IFileSinkFilter::GetCurFile */
};

static const CINTERFACE_PROXY_VTABLE(5) _IFileSinkFilterProxyVtbl =
{
    {
        &IID_IFileSinkFilter,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFileSinkFilter_SetFileName_Proxy,
        IFileSinkFilter_GetCurFile_Proxy,
    }
};

static const MIDL_SERVER_INFO IFileSinkFilter_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFileSinkFilter_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFileSinkFilter_table[] =
{
    IFileSinkFilter_SetFileName_Stub,
    IFileSinkFilter_GetCurFile_Stub
};

static const CInterfaceStubVtbl _IFileSinkFilterStubVtbl =
{
    {
        &IID_IFileSinkFilter,
        &IFileSinkFilter_ServerInfo,
        5,
        &IFileSinkFilter_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFileSinkFilter2 interface
 */
static void __finally_IFileSinkFilter2_SetMode_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSinkFilter2_SetMode_Proxy(
    IFileSinkFilter2* This,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSinkFilter2_SetMode_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[916]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSinkFilter2_SetMode_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSinkFilter2_SetMode_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSinkFilter2 * _This;
    HRESULT _RetVal;
    DWORD dwFlags;
};

static void __finally_IFileSinkFilter2_SetMode_Stub( struct __frame_IFileSinkFilter2_SetMode_Stub *__frame )
{

}

void __RPC_STUB IFileSinkFilter2_SetMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSinkFilter2_SetMode_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSinkFilter2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSinkFilter2_SetMode_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[916]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetMode(__frame->_This, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSinkFilter2_SetMode_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFileSinkFilter2_GetMode_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSinkFilter2_GetMode_Proxy(
    IFileSinkFilter2* This,
    DWORD *pdwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSinkFilter2_GetMode_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pdwFlags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[920]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSinkFilter2_GetMode_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2522], (void *)pdwFlags );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSinkFilter2_GetMode_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSinkFilter2 * _This;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * pdwFlags;
};

static void __finally_IFileSinkFilter2_GetMode_Stub( struct __frame_IFileSinkFilter2_GetMode_Stub *__frame )
{

}

void __RPC_STUB IFileSinkFilter2_GetMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSinkFilter2_GetMode_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSinkFilter2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSinkFilter2_GetMode_Stub );
    __frame->pdwFlags = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[920]);


        __frame->pdwFlags = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetMode(__frame->_This, __frame->pdwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwFlags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSinkFilter2_GetMode_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFileSinkFilter2_FormatStringOffsetTable[] =
{
    896,  /* IFileSinkFilter::SetFileName */
    906,  /* IFileSinkFilter::GetCurFile */
    916,  /* IFileSinkFilter2::SetMode */
    920,  /* IFileSinkFilter2::GetMode */
};

static const CINTERFACE_PROXY_VTABLE(7) _IFileSinkFilter2ProxyVtbl =
{
    {
        &IID_IFileSinkFilter2,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFileSinkFilter_SetFileName_Proxy,
        IFileSinkFilter_GetCurFile_Proxy,
        IFileSinkFilter2_SetMode_Proxy,
        IFileSinkFilter2_GetMode_Proxy,
    }
};

static const MIDL_SERVER_INFO IFileSinkFilter2_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFileSinkFilter2_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFileSinkFilter2_table[] =
{
    IFileSinkFilter_SetFileName_Stub,
    IFileSinkFilter_GetCurFile_Stub,
    IFileSinkFilter2_SetMode_Stub,
    IFileSinkFilter2_GetMode_Stub
};

static const CInterfaceStubVtbl _IFileSinkFilter2StubVtbl =
{
    {
        &IID_IFileSinkFilter2,
        &IFileSinkFilter2_ServerInfo,
        7,
        &IFileSinkFilter2_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IGraphBuilder interface
 */
static void __finally_IGraphBuilder_Connect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_Connect_Proxy(
    IGraphBuilder* This,
    IPin *ppinOut,
    IPin *ppinIn)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_Connect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2526]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppinIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2544]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2526]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppinIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2544]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[926]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_Connect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_Connect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
    IPin * ppinOut;
    IPin * ppinIn;
};

static void __finally_IGraphBuilder_Connect_Stub( struct __frame_IGraphBuilder_Connect_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppinOut,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2526]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppinIn,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2544]);

}

void __RPC_STUB IGraphBuilder_Connect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_Connect_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_Connect_Stub );
    __frame->ppinOut = 0;
    __frame->ppinIn = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[926]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppinOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2526],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppinIn,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2544],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Connect(__frame->_This, __frame->ppinOut, __frame->ppinIn);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_Connect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_Render_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_Render_Proxy(
    IGraphBuilder* This,
    IPin *ppinOut)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_Render_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2562]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2562]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[936]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_Render_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_Render_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
    IPin * ppinOut;
};

static void __finally_IGraphBuilder_Render_Stub( struct __frame_IGraphBuilder_Render_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppinOut,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2562]);

}

void __RPC_STUB IGraphBuilder_Render_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_Render_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_Render_Stub );
    __frame->ppinOut = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[936]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppinOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2562],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Render(__frame->_This, __frame->ppinOut);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_Render_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_RenderFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_RenderFile_Proxy(
    IGraphBuilder* This,
    LPCWSTR lpcwstrFile,
    LPCWSTR lpcwstrPlayList)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_RenderFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!lpcwstrFile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2582]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrPlayList,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2582]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrPlayList,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[942]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_RenderFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_RenderFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
    LPCWSTR lpcwstrFile;
    LPCWSTR lpcwstrPlayList;
};

static void __finally_IGraphBuilder_RenderFile_Stub( struct __frame_IGraphBuilder_RenderFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpcwstrFile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2580]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpcwstrPlayList,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482]);

}

void __RPC_STUB IGraphBuilder_RenderFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_RenderFile_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_RenderFile_Stub );
    __frame->lpcwstrFile = 0;
    __frame->lpcwstrPlayList = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[942]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpcwstrFile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2582],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpcwstrPlayList,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RenderFile(__frame->_This, __frame->lpcwstrFile, __frame->lpcwstrPlayList);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_RenderFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_AddSourceFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_AddSourceFilter_Proxy(
    IGraphBuilder* This,
    LPCWSTR lpcwstrFileName,
    LPCWSTR lpcwstrFilterName,
    IBaseFilter **ppFilter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_AddSourceFilter_Proxy );
    __frame->This = This;
    if (ppFilter) MIDL_memset( ppFilter, 0, sizeof( *ppFilter ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!lpcwstrFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2590]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFilterName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2590]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFilterName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[952]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_AddSourceFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2614], (void *)ppFilter );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_AddSourceFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
    LPCWSTR lpcwstrFileName;
    LPCWSTR lpcwstrFilterName;
    IBaseFilter *_W0;
    IBaseFilter ** ppFilter;
};

static void __finally_IGraphBuilder_AddSourceFilter_Stub( struct __frame_IGraphBuilder_AddSourceFilter_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpcwstrFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2588]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpcwstrFilterName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614]);

}

void __RPC_STUB IGraphBuilder_AddSourceFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_AddSourceFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_AddSourceFilter_Stub );
    __frame->lpcwstrFileName = 0;
    __frame->lpcwstrFilterName = 0;
    __frame->ppFilter = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[952]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpcwstrFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2590],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpcwstrFilterName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482],
            0);


        __frame->ppFilter = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AddSourceFilter(__frame->_This, __frame->lpcwstrFileName, __frame->lpcwstrFilterName, __frame->ppFilter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_AddSourceFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_SetLogFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_SetLogFile_Proxy(
    IGraphBuilder* This,
    DWORD_PTR hFile)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_SetLogFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD_PTR *)__frame->_StubMsg.Buffer = hFile;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[966]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_SetLogFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_SetLogFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
    DWORD_PTR hFile;
};

static void __finally_IGraphBuilder_SetLogFile_Stub( struct __frame_IGraphBuilder_SetLogFile_Stub *__frame )
{

}

void __RPC_STUB IGraphBuilder_SetLogFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_SetLogFile_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_SetLogFile_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[966]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hFile = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetLogFile(__frame->_This, __frame->hFile);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_SetLogFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_Abort_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_Abort_Proxy(
    IGraphBuilder* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_Abort_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[970]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_Abort_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_Abort_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
};

static void __finally_IGraphBuilder_Abort_Stub( struct __frame_IGraphBuilder_Abort_Stub *__frame )
{
}

void __RPC_STUB IGraphBuilder_Abort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_Abort_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_Abort_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[970]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Abort(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_Abort_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_ShouldOperationContinue_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_ShouldOperationContinue_Proxy(
    IGraphBuilder* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_ShouldOperationContinue_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[972]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_ShouldOperationContinue_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_ShouldOperationContinue_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
};

static void __finally_IGraphBuilder_ShouldOperationContinue_Stub( struct __frame_IGraphBuilder_ShouldOperationContinue_Stub *__frame )
{
}

void __RPC_STUB IGraphBuilder_ShouldOperationContinue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_ShouldOperationContinue_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_ShouldOperationContinue_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[972]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShouldOperationContinue(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_ShouldOperationContinue_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IGraphBuilder_FormatStringOffsetTable[] =
{
    148,  /* IFilterGraph::AddFilter */
    158,  /* IFilterGraph::RemoveFilter */
    164,  /* IFilterGraph::EnumFilters */
    170,  /* IFilterGraph::FindFilterByName */
    180,  /* IFilterGraph::ConnectDirect */
    194,  /* IFilterGraph::Reconnect */
    200,  /* IFilterGraph::Disconnect */
    206,  /* IFilterGraph::SetDefaultSyncSource */
    926,  /* IGraphBuilder::Connect */
    936,  /* IGraphBuilder::Render */
    942,  /* IGraphBuilder::RenderFile */
    952,  /* IGraphBuilder::AddSourceFilter */
    966,  /* IGraphBuilder::SetLogFile */
    970,  /* IGraphBuilder::Abort */
    972,  /* IGraphBuilder::ShouldOperationContinue */
};

static const CINTERFACE_PROXY_VTABLE(18) _IGraphBuilderProxyVtbl =
{
    {
        &IID_IGraphBuilder,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterGraph_AddFilter_Proxy,
        IFilterGraph_RemoveFilter_Proxy,
        IFilterGraph_EnumFilters_Proxy,
        IFilterGraph_FindFilterByName_Proxy,
        IFilterGraph_ConnectDirect_Proxy,
        IFilterGraph_Reconnect_Proxy,
        IFilterGraph_Disconnect_Proxy,
        IFilterGraph_SetDefaultSyncSource_Proxy,
        IGraphBuilder_Connect_Proxy,
        IGraphBuilder_Render_Proxy,
        IGraphBuilder_RenderFile_Proxy,
        IGraphBuilder_AddSourceFilter_Proxy,
        IGraphBuilder_SetLogFile_Proxy,
        IGraphBuilder_Abort_Proxy,
        IGraphBuilder_ShouldOperationContinue_Proxy,
    }
};

static const MIDL_SERVER_INFO IGraphBuilder_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IGraphBuilder_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IGraphBuilder_table[] =
{
    IFilterGraph_AddFilter_Stub,
    IFilterGraph_RemoveFilter_Stub,
    IFilterGraph_EnumFilters_Stub,
    IFilterGraph_FindFilterByName_Stub,
    IFilterGraph_ConnectDirect_Stub,
    IFilterGraph_Reconnect_Stub,
    IFilterGraph_Disconnect_Stub,
    IFilterGraph_SetDefaultSyncSource_Stub,
    IGraphBuilder_Connect_Stub,
    IGraphBuilder_Render_Stub,
    IGraphBuilder_RenderFile_Stub,
    IGraphBuilder_AddSourceFilter_Stub,
    IGraphBuilder_SetLogFile_Stub,
    IGraphBuilder_Abort_Stub,
    IGraphBuilder_ShouldOperationContinue_Stub
};

static const CInterfaceStubVtbl _IGraphBuilderStubVtbl =
{
    {
        &IID_IGraphBuilder,
        &IGraphBuilder_ServerInfo,
        18,
        &IGraphBuilder_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICaptureGraphBuilder interface
 */
static void __finally_ICaptureGraphBuilder_SetFiltergraph_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_SetFiltergraph_Proxy(
    ICaptureGraphBuilder* This,
    IGraphBuilder *pfg)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_SetFiltergraph_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2618]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2618]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[974]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_SetFiltergraph_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_SetFiltergraph_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    IGraphBuilder * pfg;
};

static void __finally_ICaptureGraphBuilder_SetFiltergraph_Stub( struct __frame_ICaptureGraphBuilder_SetFiltergraph_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2618]);

}

void __RPC_STUB ICaptureGraphBuilder_SetFiltergraph_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_SetFiltergraph_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_SetFiltergraph_Stub );
    __frame->pfg = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[974]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2618],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFiltergraph(__frame->_This, __frame->pfg);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_SetFiltergraph_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_GetFiltergraph_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_GetFiltergraph_Proxy(
    ICaptureGraphBuilder* This,
    IGraphBuilder **ppfg)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_GetFiltergraph_Proxy );
    __frame->This = This;
    if (ppfg) MIDL_memset( ppfg, 0, sizeof( *ppfg ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppfg) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[980]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2654],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_GetFiltergraph_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2654], (void *)ppfg );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_GetFiltergraph_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    IGraphBuilder *_W0;
    IGraphBuilder ** ppfg;
};

static void __finally_ICaptureGraphBuilder_GetFiltergraph_Stub( struct __frame_ICaptureGraphBuilder_GetFiltergraph_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppfg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2654]);

}

void __RPC_STUB ICaptureGraphBuilder_GetFiltergraph_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_GetFiltergraph_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_GetFiltergraph_Stub );
    __frame->ppfg = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[980]);


        __frame->ppfg = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFiltergraph(__frame->_This, __frame->ppfg);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2654]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2654]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_GetFiltergraph_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_SetOutputFileName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_SetOutputFileName_Proxy(
    ICaptureGraphBuilder* This,
    const GUID *pType,
    LPCOLESTR lpstrFile,
    IBaseFilter **ppf,
    IFileSinkFilter **ppSink)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_SetOutputFileName_Proxy );
    __frame->This = This;
    if (ppf) MIDL_memset( ppf, 0, sizeof( *ppf ));
    if (ppSink) MIDL_memset( ppSink, 0, sizeof( *ppSink ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!lpstrFile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppf) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSink) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2682]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2664]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2682]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[986]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2702],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2724],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_SetOutputFileName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2702], (void *)ppf );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2724], (void *)ppSink );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_SetOutputFileName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    const GUID * pType;
    LPCOLESTR lpstrFile;
    IBaseFilter *_W0;
    IBaseFilter ** ppf;
    IFileSinkFilter *_W1;
    IFileSinkFilter ** ppSink;
};

static void __finally_ICaptureGraphBuilder_SetOutputFileName_Stub( struct __frame_ICaptureGraphBuilder_SetOutputFileName_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpstrFile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2680]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppf,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2702]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2724]);

}

void __RPC_STUB ICaptureGraphBuilder_SetOutputFileName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_SetOutputFileName_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_SetOutputFileName_Stub );
    __frame->pType = 0;
    __frame->lpstrFile = 0;
    __frame->ppf = 0;
    __frame->ppSink = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[986]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2664],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpstrFile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2682],
            0);


        __frame->ppf = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppSink = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetOutputFileName(__frame->_This, __frame->pType, __frame->lpstrFile, __frame->ppf, __frame->ppSink);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2702]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2724]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2702]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2724]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_SetOutputFileName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_RemoteFindInterface_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_RemoteFindInterface_Proxy(
    ICaptureGraphBuilder* This,
    const GUID *pCategory,
    IBaseFilter *pf,
    REFIID riid,
    IUnknown **ppint)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_RemoteFindInterface_Proxy );
    __frame->This = This;
    if (ppint) MIDL_memset( ppint, 0, sizeof( *ppint ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppint) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2750]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2746]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2750]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2774]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1004]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppint,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2808],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_RemoteFindInterface_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2808], (void *)ppint );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_RemoteFindInterface_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    IBaseFilter * pf;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppint;
};

static void __finally_ICaptureGraphBuilder_RemoteFindInterface_Stub( struct __frame_ICaptureGraphBuilder_RemoteFindInterface_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pCategory,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2746]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pf,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2750]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppint,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2808]);

}

void __RPC_STUB ICaptureGraphBuilder_RemoteFindInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_RemoteFindInterface_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_RemoteFindInterface_Stub );
    __frame->pCategory = 0;
    __frame->pf = 0;
    __frame->riid = 0;
    __frame->ppint = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1004]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2746],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2750],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2774],
            0);


        __frame->ppint = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICaptureGraphBuilder_FindInterface_Stub(__frame->_This, __frame->pCategory, __frame->pf, __frame->riid, __frame->ppint);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppint,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2808]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppint,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2808]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_RemoteFindInterface_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_RenderStream_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_RenderStream_Proxy(
    ICaptureGraphBuilder* This,
    const GUID *pCategory,
    IUnknown *pSource,
    IBaseFilter *pfCompressor,
    IBaseFilter *pfRenderer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_RenderStream_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2834]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfCompressor,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2852]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfRenderer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2870]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2818]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2834]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfCompressor,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2852]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfRenderer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2870]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1022]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_RenderStream_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_RenderStream_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    IUnknown * pSource;
    IBaseFilter * pfCompressor;
    IBaseFilter * pfRenderer;
};

static void __finally_ICaptureGraphBuilder_RenderStream_Stub( struct __frame_ICaptureGraphBuilder_RenderStream_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSource,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2834]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfCompressor,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2852]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfRenderer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2870]);

}

void __RPC_STUB ICaptureGraphBuilder_RenderStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_RenderStream_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_RenderStream_Stub );
    __frame->pCategory = 0;
    __frame->pSource = 0;
    __frame->pfCompressor = 0;
    __frame->pfRenderer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1022]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2818],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSource,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2834],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfCompressor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2852],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfRenderer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2870],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RenderStream(__frame->_This, __frame->pCategory, __frame->pSource, __frame->pfCompressor, __frame->pfRenderer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_RenderStream_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_ControlStream_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_ControlStream_Proxy(
    ICaptureGraphBuilder* This,
    const GUID *pCategory,
    IBaseFilter *pFilter,
    REFERENCE_TIME *pstart,
    REFERENCE_TIME *pstop,
    WORD wStartCookie,
    WORD wStopCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_ControlStream_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pstart) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pstop) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 64;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2910]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2894]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2910]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pstart;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pstop;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(WORD *)__frame->_StubMsg.Buffer = wStartCookie;
            __frame->_StubMsg.Buffer += sizeof(WORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(WORD *)__frame->_StubMsg.Buffer = wStopCookie;
            __frame->_StubMsg.Buffer += sizeof(WORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1040]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_ControlStream_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_ControlStream_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    IBaseFilter * pFilter;
    REFERENCE_TIME * pstart;
    REFERENCE_TIME * pstop;
    WORD wStartCookie;
    WORD wStopCookie;
};

static void __finally_ICaptureGraphBuilder_ControlStream_Stub( struct __frame_ICaptureGraphBuilder_ControlStream_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2910]);





}

void __RPC_STUB ICaptureGraphBuilder_ControlStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_ControlStream_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_ControlStream_Stub );
    __frame->pCategory = 0;
    __frame->pFilter = 0;
    __frame->pstart = 0;
    __frame->pstop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1040]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2894],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2910],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pstart = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pstop = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(WORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->wStartCookie = *(WORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(WORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(WORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->wStopCookie = *(WORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(WORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ControlStream(__frame->_This, __frame->pCategory, __frame->pFilter, __frame->pstart, __frame->pstop, __frame->wStartCookie, __frame->wStopCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_ControlStream_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_AllocCapFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_AllocCapFile_Proxy(
    ICaptureGraphBuilder* This,
    LPCOLESTR lpstr,
    DWORDLONG dwlSize)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_AllocCapFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!lpstr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpstr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2938]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpstr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2938]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(DWORDLONG *)__frame->_StubMsg.Buffer = dwlSize;
            __frame->_StubMsg.Buffer += sizeof(DWORDLONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1062]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_AllocCapFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_AllocCapFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    LPCOLESTR lpstr;
    DWORDLONG dwlSize;
};

static void __finally_ICaptureGraphBuilder_AllocCapFile_Stub( struct __frame_ICaptureGraphBuilder_AllocCapFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpstr,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2936]);


}

void __RPC_STUB ICaptureGraphBuilder_AllocCapFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_AllocCapFile_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_AllocCapFile_Stub );
    __frame->lpstr = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1062]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpstr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2938],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(DWORDLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwlSize = *(DWORDLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORDLONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AllocCapFile(__frame->_This, __frame->lpstr, __frame->dwlSize);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_AllocCapFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_CopyCaptureFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_CopyCaptureFile_Proxy(
    ICaptureGraphBuilder* This,
    LPOLESTR lpwstrOld,
    LPOLESTR lpwstrNew,
    int fAllowEscAbort,
    IAMCopyCaptureFileProgress *pCallback)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_CopyCaptureFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!lpwstrOld) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!lpwstrNew) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrOld,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2942]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2946]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pCallback,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2948]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrOld,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2942]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2946]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(int *)__frame->_StubMsg.Buffer = fAllowEscAbort;
            __frame->_StubMsg.Buffer += sizeof(int);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCallback,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2948]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1070]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_CopyCaptureFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_CopyCaptureFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    LPOLESTR lpwstrOld;
    LPOLESTR lpwstrNew;
    int fAllowEscAbort;
    IAMCopyCaptureFileProgress * pCallback;
};

static void __finally_ICaptureGraphBuilder_CopyCaptureFile_Stub( struct __frame_ICaptureGraphBuilder_CopyCaptureFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpwstrOld,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2940]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpwstrNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2944]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pCallback,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2948]);

}

void __RPC_STUB ICaptureGraphBuilder_CopyCaptureFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_CopyCaptureFile_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_CopyCaptureFile_Stub );
    __frame->lpwstrOld = 0;
    __frame->lpwstrNew = 0;
    __frame->pCallback = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1070]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpwstrOld,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2942],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpwstrNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2946],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->fAllowEscAbort = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCallback,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2948],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CopyCaptureFile(__frame->_This, __frame->lpwstrOld, __frame->lpwstrNew, __frame->fAllowEscAbort, __frame->pCallback);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_CopyCaptureFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICaptureGraphBuilder_FormatStringOffsetTable[] =
{
    974,  /* ICaptureGraphBuilder::SetFiltergraph */
    980,  /* ICaptureGraphBuilder::GetFiltergraph */
    986,  /* ICaptureGraphBuilder::SetOutputFileName */
    1004,  /* ICaptureGraphBuilder::RemoteFindInterface */
    1022,  /* ICaptureGraphBuilder::RenderStream */
    1040,  /* ICaptureGraphBuilder::ControlStream */
    1062,  /* ICaptureGraphBuilder::AllocCapFile */
    1070,  /* ICaptureGraphBuilder::CopyCaptureFile */
};

static const CINTERFACE_PROXY_VTABLE(11) _ICaptureGraphBuilderProxyVtbl =
{
    {
        &IID_ICaptureGraphBuilder,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICaptureGraphBuilder_SetFiltergraph_Proxy,
        ICaptureGraphBuilder_GetFiltergraph_Proxy,
        ICaptureGraphBuilder_SetOutputFileName_Proxy,
        ICaptureGraphBuilder_FindInterface_Proxy,
        ICaptureGraphBuilder_RenderStream_Proxy,
        ICaptureGraphBuilder_ControlStream_Proxy,
        ICaptureGraphBuilder_AllocCapFile_Proxy,
        ICaptureGraphBuilder_CopyCaptureFile_Proxy,
    }
};

static const MIDL_SERVER_INFO ICaptureGraphBuilder_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICaptureGraphBuilder_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICaptureGraphBuilder_table[] =
{
    ICaptureGraphBuilder_SetFiltergraph_Stub,
    ICaptureGraphBuilder_GetFiltergraph_Stub,
    ICaptureGraphBuilder_SetOutputFileName_Stub,
    ICaptureGraphBuilder_RemoteFindInterface_Stub,
    ICaptureGraphBuilder_RenderStream_Stub,
    ICaptureGraphBuilder_ControlStream_Stub,
    ICaptureGraphBuilder_AllocCapFile_Stub,
    ICaptureGraphBuilder_CopyCaptureFile_Stub
};

static const CInterfaceStubVtbl _ICaptureGraphBuilderStubVtbl =
{
    {
        &IID_ICaptureGraphBuilder,
        &ICaptureGraphBuilder_ServerInfo,
        11,
        &ICaptureGraphBuilder_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAMCopyCaptureFileProgress interface
 */
static void __finally_IAMCopyCaptureFileProgress_Progress_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMCopyCaptureFileProgress_Progress_Proxy(
    IAMCopyCaptureFileProgress* This,
    int iProgress)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMCopyCaptureFileProgress_Progress_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(int *)__frame->_StubMsg.Buffer = iProgress;
            __frame->_StubMsg.Buffer += sizeof(int);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1086]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMCopyCaptureFileProgress_Progress_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMCopyCaptureFileProgress_Progress_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMCopyCaptureFileProgress * _This;
    HRESULT _RetVal;
    int iProgress;
};

static void __finally_IAMCopyCaptureFileProgress_Progress_Stub( struct __frame_IAMCopyCaptureFileProgress_Progress_Stub *__frame )
{

}

void __RPC_STUB IAMCopyCaptureFileProgress_Progress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMCopyCaptureFileProgress_Progress_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMCopyCaptureFileProgress*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMCopyCaptureFileProgress_Progress_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1086]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->iProgress = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Progress(__frame->_This, __frame->iProgress);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMCopyCaptureFileProgress_Progress_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAMCopyCaptureFileProgress_FormatStringOffsetTable[] =
{
    1086,  /* IAMCopyCaptureFileProgress::Progress */
};

static const CINTERFACE_PROXY_VTABLE(4) _IAMCopyCaptureFileProgressProxyVtbl =
{
    {
        &IID_IAMCopyCaptureFileProgress,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAMCopyCaptureFileProgress_Progress_Proxy,
    }
};

static const MIDL_SERVER_INFO IAMCopyCaptureFileProgress_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAMCopyCaptureFileProgress_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAMCopyCaptureFileProgress_table[] =
{
    IAMCopyCaptureFileProgress_Progress_Stub
};

static const CInterfaceStubVtbl _IAMCopyCaptureFileProgressStubVtbl =
{
    {
        &IID_IAMCopyCaptureFileProgress,
        &IAMCopyCaptureFileProgress_ServerInfo,
        4,
        &IAMCopyCaptureFileProgress_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICaptureGraphBuilder2 interface
 */
static void __finally_ICaptureGraphBuilder2_SetFiltergraph_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_SetFiltergraph_Proxy(
    ICaptureGraphBuilder2* This,
    IGraphBuilder *pfg)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_SetFiltergraph_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2966]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2966]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1090]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_SetFiltergraph_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_SetFiltergraph_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    IGraphBuilder * pfg;
};

static void __finally_ICaptureGraphBuilder2_SetFiltergraph_Stub( struct __frame_ICaptureGraphBuilder2_SetFiltergraph_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2966]);

}

void __RPC_STUB ICaptureGraphBuilder2_SetFiltergraph_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_SetFiltergraph_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_SetFiltergraph_Stub );
    __frame->pfg = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1090]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2966],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFiltergraph(__frame->_This, __frame->pfg);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_SetFiltergraph_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_GetFiltergraph_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_GetFiltergraph_Proxy(
    ICaptureGraphBuilder2* This,
    IGraphBuilder **ppfg)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_GetFiltergraph_Proxy );
    __frame->This = This;
    if (ppfg) MIDL_memset( ppfg, 0, sizeof( *ppfg ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppfg) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1096]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3002],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_GetFiltergraph_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3002], (void *)ppfg );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_GetFiltergraph_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    IGraphBuilder *_W0;
    IGraphBuilder ** ppfg;
};

static void __finally_ICaptureGraphBuilder2_GetFiltergraph_Stub( struct __frame_ICaptureGraphBuilder2_GetFiltergraph_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppfg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3002]);

}

void __RPC_STUB ICaptureGraphBuilder2_GetFiltergraph_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_GetFiltergraph_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_GetFiltergraph_Stub );
    __frame->ppfg = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1096]);


        __frame->ppfg = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFiltergraph(__frame->_This, __frame->ppfg);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3002]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3002]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_GetFiltergraph_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_SetOutputFileName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_SetOutputFileName_Proxy(
    ICaptureGraphBuilder2* This,
    const GUID *pType,
    LPCOLESTR lpstrFile,
    IBaseFilter **ppf,
    IFileSinkFilter **ppSink)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_SetOutputFileName_Proxy );
    __frame->This = This;
    if (ppf) MIDL_memset( ppf, 0, sizeof( *ppf ));
    if (ppSink) MIDL_memset( ppSink, 0, sizeof( *ppSink ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!lpstrFile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppf) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSink) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3030]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3012]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3030]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1102]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3050],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3072],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_SetOutputFileName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3050], (void *)ppf );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3072], (void *)ppSink );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_SetOutputFileName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    const GUID * pType;
    LPCOLESTR lpstrFile;
    IBaseFilter *_W0;
    IBaseFilter ** ppf;
    IFileSinkFilter *_W1;
    IFileSinkFilter ** ppSink;
};

static void __finally_ICaptureGraphBuilder2_SetOutputFileName_Stub( struct __frame_ICaptureGraphBuilder2_SetOutputFileName_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpstrFile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3028]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppf,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3050]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3072]);

}

void __RPC_STUB ICaptureGraphBuilder2_SetOutputFileName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_SetOutputFileName_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_SetOutputFileName_Stub );
    __frame->pType = 0;
    __frame->lpstrFile = 0;
    __frame->ppf = 0;
    __frame->ppSink = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1102]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3012],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpstrFile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3030],
            0);


        __frame->ppf = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppSink = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetOutputFileName(__frame->_This, __frame->pType, __frame->lpstrFile, __frame->ppf, __frame->ppSink);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3050]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3072]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3050]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3072]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_SetOutputFileName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_RemoteFindInterface_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_RemoteFindInterface_Proxy(
    ICaptureGraphBuilder2* This,
    const GUID *pCategory,
    const GUID *pType,
    IBaseFilter *pf,
    REFIID riid,
    IUnknown **ppint)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_RemoteFindInterface_Proxy );
    __frame->This = This;
    if (ppint) MIDL_memset( ppint, 0, sizeof( *ppint ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppint) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 60;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3120]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3082]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3104]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3120]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2774]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1120]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppint,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3160],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_RemoteFindInterface_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3160], (void *)ppint );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_RemoteFindInterface_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    const GUID * pType;
    IBaseFilter * pf;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppint;
};

static void __finally_ICaptureGraphBuilder2_RemoteFindInterface_Stub( struct __frame_ICaptureGraphBuilder2_RemoteFindInterface_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pf,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3120]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppint,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3160]);

}

void __RPC_STUB ICaptureGraphBuilder2_RemoteFindInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_RemoteFindInterface_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_RemoteFindInterface_Stub );
    __frame->pCategory = 0;
    __frame->pType = 0;
    __frame->pf = 0;
    __frame->riid = 0;
    __frame->ppint = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1120]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3082],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3104],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3120],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2774],
            0);


        __frame->ppint = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICaptureGraphBuilder2_FindInterface_Stub(__frame->_This, __frame->pCategory, __frame->pType, __frame->pf, __frame->riid, __frame->ppint);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppint,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3160]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppint,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3160]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_RemoteFindInterface_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_RenderStream_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_RenderStream_Proxy(
    ICaptureGraphBuilder2* This,
    const GUID *pCategory,
    const GUID *pType,
    IUnknown *pSource,
    IBaseFilter *pfCompressor,
    IBaseFilter *pfRenderer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_RenderStream_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3208]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfCompressor,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3226]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfRenderer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3244]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3170]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3192]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3208]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfCompressor,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3226]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfRenderer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3244]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1142]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_RenderStream_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_RenderStream_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    const GUID * pType;
    IUnknown * pSource;
    IBaseFilter * pfCompressor;
    IBaseFilter * pfRenderer;
};

static void __finally_ICaptureGraphBuilder2_RenderStream_Stub( struct __frame_ICaptureGraphBuilder2_RenderStream_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSource,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3208]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfCompressor,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3226]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfRenderer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3244]);

}

void __RPC_STUB ICaptureGraphBuilder2_RenderStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_RenderStream_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_RenderStream_Stub );
    __frame->pCategory = 0;
    __frame->pType = 0;
    __frame->pSource = 0;
    __frame->pfCompressor = 0;
    __frame->pfRenderer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1142]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3170],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3192],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSource,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3208],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfCompressor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3226],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfRenderer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3244],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RenderStream(__frame->_This, __frame->pCategory, __frame->pType, __frame->pSource, __frame->pfCompressor, __frame->pfRenderer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_RenderStream_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_ControlStream_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_ControlStream_Proxy(
    ICaptureGraphBuilder2* This,
    const GUID *pCategory,
    const GUID *pType,
    IBaseFilter *pFilter,
    REFERENCE_TIME *pstart,
    REFERENCE_TIME *pstop,
    WORD wStartCookie,
    WORD wStopCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_ControlStream_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pstart) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pstop) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 84;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3306]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3268]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3290]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3306]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pstart;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pstop;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(WORD *)__frame->_StubMsg.Buffer = wStartCookie;
            __frame->_StubMsg.Buffer += sizeof(WORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(WORD *)__frame->_StubMsg.Buffer = wStopCookie;
            __frame->_StubMsg.Buffer += sizeof(WORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1164]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_ControlStream_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_ControlStream_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    const GUID * pType;
    IBaseFilter * pFilter;
    REFERENCE_TIME * pstart;
    REFERENCE_TIME * pstop;
    WORD wStartCookie;
    WORD wStopCookie;
};

static void __finally_ICaptureGraphBuilder2_ControlStream_Stub( struct __frame_ICaptureGraphBuilder2_ControlStream_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3306]);





}

void __RPC_STUB ICaptureGraphBuilder2_ControlStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_ControlStream_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_ControlStream_Stub );
    __frame->pCategory = 0;
    __frame->pType = 0;
    __frame->pFilter = 0;
    __frame->pstart = 0;
    __frame->pstop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1164]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3268],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3290],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3306],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pstart = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pstop = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(WORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->wStartCookie = *(WORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(WORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(WORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->wStopCookie = *(WORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(WORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ControlStream(__frame->_This, __frame->pCategory, __frame->pType, __frame->pFilter, __frame->pstart, __frame->pstop, __frame->wStartCookie, __frame->wStopCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_ControlStream_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_AllocCapFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_AllocCapFile_Proxy(
    ICaptureGraphBuilder2* This,
    LPCOLESTR lpstr,
    DWORDLONG dwlSize)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_AllocCapFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!lpstr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpstr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3334]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpstr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3334]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(DWORDLONG *)__frame->_StubMsg.Buffer = dwlSize;
            __frame->_StubMsg.Buffer += sizeof(DWORDLONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1190]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_AllocCapFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_AllocCapFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    LPCOLESTR lpstr;
    DWORDLONG dwlSize;
};

static void __finally_ICaptureGraphBuilder2_AllocCapFile_Stub( struct __frame_ICaptureGraphBuilder2_AllocCapFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpstr,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3332]);


}

void __RPC_STUB ICaptureGraphBuilder2_AllocCapFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_AllocCapFile_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_AllocCapFile_Stub );
    __frame->lpstr = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1190]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpstr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3334],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(DWORDLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwlSize = *(DWORDLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORDLONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AllocCapFile(__frame->_This, __frame->lpstr, __frame->dwlSize);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_AllocCapFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_CopyCaptureFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_CopyCaptureFile_Proxy(
    ICaptureGraphBuilder2* This,
    LPOLESTR lpwstrOld,
    LPOLESTR lpwstrNew,
    int fAllowEscAbort,
    IAMCopyCaptureFileProgress *pCallback)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_CopyCaptureFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!lpwstrOld) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!lpwstrNew) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrOld,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3338]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3342]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pCallback,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3344]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrOld,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3338]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3342]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(int *)__frame->_StubMsg.Buffer = fAllowEscAbort;
            __frame->_StubMsg.Buffer += sizeof(int);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCallback,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3344]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1198]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_CopyCaptureFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_CopyCaptureFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    LPOLESTR lpwstrOld;
    LPOLESTR lpwstrNew;
    int fAllowEscAbort;
    IAMCopyCaptureFileProgress * pCallback;
};

static void __finally_ICaptureGraphBuilder2_CopyCaptureFile_Stub( struct __frame_ICaptureGraphBuilder2_CopyCaptureFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpwstrOld,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3336]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpwstrNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3340]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pCallback,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3344]);

}

void __RPC_STUB ICaptureGraphBuilder2_CopyCaptureFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_CopyCaptureFile_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_CopyCaptureFile_Stub );
    __frame->lpwstrOld = 0;
    __frame->lpwstrNew = 0;
    __frame->pCallback = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1198]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpwstrOld,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3338],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpwstrNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3342],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->fAllowEscAbort = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCallback,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3344],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CopyCaptureFile(__frame->_This, __frame->lpwstrOld, __frame->lpwstrNew, __frame->fAllowEscAbort, __frame->pCallback);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_CopyCaptureFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_FindPin_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_FindPin_Proxy(
    ICaptureGraphBuilder2* This,
    IUnknown *pSource,
    PIN_DIRECTION pindir,
    const GUID *pCategory,
    const GUID *pType,
    BOOL fUnconnected,
    int num,
    IPin **ppPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_FindPin_Proxy );
    __frame->This = This;
    if (ppPin) MIDL_memset( ppPin, 0, sizeof( *ppPin ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 62;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3362]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3362]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&pindir,
                0x0d /* FC_ENUM16 */);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3386]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3408]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = fUnconnected;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(int *)__frame->_StubMsg.Buffer = num;
            __frame->_StubMsg.Buffer += sizeof(int);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1214]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3442],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_FindPin_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3442], (void *)ppPin );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_FindPin_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    IUnknown * pSource;
    PIN_DIRECTION pindir;
    const GUID * pCategory;
    const GUID * pType;
    BOOL fUnconnected;
    int num;
    IPin *_W0;
    IPin ** ppPin;
};

static void __finally_ICaptureGraphBuilder2_FindPin_Stub( struct __frame_ICaptureGraphBuilder2_FindPin_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSource,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3362]);






    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3442]);

}

void __RPC_STUB ICaptureGraphBuilder2_FindPin_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_FindPin_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_FindPin_Stub );
    __frame->pSource = 0;
    __frame->pCategory = 0;
    __frame->pType = 0;
    __frame->ppPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1214]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSource,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3362],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->pindir,
            0x0d /* FC_ENUM16 */);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3386],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3408],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->fUnconnected = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->num = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);


        __frame->ppPin = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->FindPin(__frame->_This, __frame->pSource, __frame->pindir, __frame->pCategory, __frame->pType, __frame->fUnconnected, __frame->num, __frame->ppPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3442]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3442]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_FindPin_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICaptureGraphBuilder2_FormatStringOffsetTable[] =
{
    1090,  /* ICaptureGraphBuilder2::SetFiltergraph */
    1096,  /* ICaptureGraphBuilder2::GetFiltergraph */
    1102,  /* ICaptureGraphBuilder2::SetOutputFileName */
    1120,  /* ICaptureGraphBuilder2::RemoteFindInterface */
    1142,  /* ICaptureGraphBuilder2::RenderStream */
    1164,  /* ICaptureGraphBuilder2::ControlStream */
    1190,  /* ICaptureGraphBuilder2::AllocCapFile */
    1198,  /* ICaptureGraphBuilder2::CopyCaptureFile */
    1214,  /* ICaptureGraphBuilder2::FindPin */
};

static const CINTERFACE_PROXY_VTABLE(12) _ICaptureGraphBuilder2ProxyVtbl =
{
    {
        &IID_ICaptureGraphBuilder2,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICaptureGraphBuilder2_SetFiltergraph_Proxy,
        ICaptureGraphBuilder2_GetFiltergraph_Proxy,
        ICaptureGraphBuilder2_SetOutputFileName_Proxy,
        ICaptureGraphBuilder2_FindInterface_Proxy,
        ICaptureGraphBuilder2_RenderStream_Proxy,
        ICaptureGraphBuilder2_ControlStream_Proxy,
        ICaptureGraphBuilder2_AllocCapFile_Proxy,
        ICaptureGraphBuilder2_CopyCaptureFile_Proxy,
        ICaptureGraphBuilder2_FindPin_Proxy,
    }
};

static const MIDL_SERVER_INFO ICaptureGraphBuilder2_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICaptureGraphBuilder2_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICaptureGraphBuilder2_table[] =
{
    ICaptureGraphBuilder2_SetFiltergraph_Stub,
    ICaptureGraphBuilder2_GetFiltergraph_Stub,
    ICaptureGraphBuilder2_SetOutputFileName_Stub,
    ICaptureGraphBuilder2_RemoteFindInterface_Stub,
    ICaptureGraphBuilder2_RenderStream_Stub,
    ICaptureGraphBuilder2_ControlStream_Stub,
    ICaptureGraphBuilder2_AllocCapFile_Stub,
    ICaptureGraphBuilder2_CopyCaptureFile_Stub,
    ICaptureGraphBuilder2_FindPin_Stub
};

static const CInterfaceStubVtbl _ICaptureGraphBuilder2StubVtbl =
{
    {
        &IID_ICaptureGraphBuilder2,
        &ICaptureGraphBuilder2_ServerInfo,
        12,
        &ICaptureGraphBuilder2_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFilterGraph2 interface
 */
static void __finally_IFilterGraph2_AddSourceFilterForMoniker_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph2_AddSourceFilterForMoniker_Proxy(
    IFilterGraph2* This,
    IMoniker *pMoniker,
    IBindCtx *pCtx,
    LPCWSTR lpcwstrFilterName,
    IBaseFilter **ppFilter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph2_AddSourceFilterForMoniker_Proxy );
    __frame->This = This;
    if (ppFilter) MIDL_memset( ppFilter, 0, sizeof( *ppFilter ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 18);
        if (!ppFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3446]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pCtx,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3464]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFilterName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3446]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCtx,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3464]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFilterName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1238]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3504],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph2_AddSourceFilterForMoniker_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3504], (void *)ppFilter );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph2_AddSourceFilterForMoniker_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph2 * _This;
    HRESULT _RetVal;
    IMoniker * pMoniker;
    IBindCtx * pCtx;
    LPCWSTR lpcwstrFilterName;
    IBaseFilter *_W0;
    IBaseFilter ** ppFilter;
};

static void __finally_IFilterGraph2_AddSourceFilterForMoniker_Stub( struct __frame_IFilterGraph2_AddSourceFilterForMoniker_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pMoniker,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3446]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pCtx,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3464]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpcwstrFilterName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3504]);

}

void __RPC_STUB IFilterGraph2_AddSourceFilterForMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph2_AddSourceFilterForMoniker_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph2_AddSourceFilterForMoniker_Stub );
    __frame->pMoniker = 0;
    __frame->pCtx = 0;
    __frame->lpcwstrFilterName = 0;
    __frame->ppFilter = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1238]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3446],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCtx,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3464],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpcwstrFilterName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3482],
            0);


        __frame->ppFilter = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AddSourceFilterForMoniker(__frame->_This, __frame->pMoniker, __frame->pCtx, __frame->lpcwstrFilterName, __frame->ppFilter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3504]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3504]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph2_AddSourceFilterForMoniker_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph2_ReconnectEx_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph2_ReconnectEx_Proxy(
    IFilterGraph2* This,
    IPin *ppin,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph2_ReconnectEx_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 19);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3508]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3570]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3508]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3570]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1256]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph2_ReconnectEx_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph2_ReconnectEx_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph2 * _This;
    HRESULT _RetVal;
    IPin * ppin;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IFilterGraph2_ReconnectEx_Stub( struct __frame_IFilterGraph2_ReconnectEx_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3508]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3570]);

}

void __RPC_STUB IFilterGraph2_ReconnectEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph2_ReconnectEx_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph2_ReconnectEx_Stub );
    __frame->ppin = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1256]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3508],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3570],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReconnectEx(__frame->_This, __frame->ppin, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph2_ReconnectEx_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph2_RenderEx_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph2_RenderEx_Proxy(
    IFilterGraph2* This,
    IPin *pPinOut,
    DWORD dwFlags,
    DWORD *pvContext)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph2_RenderEx_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 20);
        if (!pvContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pPinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3574]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3574]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = *pvContext;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1266]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pvContext = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph2_RenderEx_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3592], (void *)pvContext );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph2_RenderEx_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph2 * _This;
    HRESULT _RetVal;
    IPin * pPinOut;
    DWORD dwFlags;
    DWORD * pvContext;
};

static void __finally_IFilterGraph2_RenderEx_Stub( struct __frame_IFilterGraph2_RenderEx_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPinOut,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3574]);



}

void __RPC_STUB IFilterGraph2_RenderEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph2_RenderEx_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph2_RenderEx_Stub );
    __frame->pPinOut = 0;
    __frame->pvContext = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1266]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPinOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3574],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pvContext = (DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RenderEx(__frame->_This, __frame->pPinOut, __frame->dwFlags, __frame->pvContext);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pvContext;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph2_RenderEx_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFilterGraph2_FormatStringOffsetTable[] =
{
    148,  /* IFilterGraph::AddFilter */
    158,  /* IFilterGraph::RemoveFilter */
    164,  /* IFilterGraph::EnumFilters */
    170,  /* IFilterGraph::FindFilterByName */
    180,  /* IFilterGraph::ConnectDirect */
    194,  /* IFilterGraph::Reconnect */
    200,  /* IFilterGraph::Disconnect */
    206,  /* IFilterGraph::SetDefaultSyncSource */
    926,  /* IGraphBuilder::Connect */
    936,  /* IGraphBuilder::Render */
    942,  /* IGraphBuilder::RenderFile */
    952,  /* IGraphBuilder::AddSourceFilter */
    966,  /* IGraphBuilder::SetLogFile */
    970,  /* IGraphBuilder::Abort */
    972,  /* IGraphBuilder::ShouldOperationContinue */
    1238,  /* IFilterGraph2::AddSourceFilterForMoniker */
    1256,  /* IFilterGraph2::ReconnectEx */
    1266,  /* IFilterGraph2::RenderEx */
};

static const CINTERFACE_PROXY_VTABLE(21) _IFilterGraph2ProxyVtbl =
{
    {
        &IID_IFilterGraph2,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterGraph_AddFilter_Proxy,
        IFilterGraph_RemoveFilter_Proxy,
        IFilterGraph_EnumFilters_Proxy,
        IFilterGraph_FindFilterByName_Proxy,
        IFilterGraph_ConnectDirect_Proxy,
        IFilterGraph_Reconnect_Proxy,
        IFilterGraph_Disconnect_Proxy,
        IFilterGraph_SetDefaultSyncSource_Proxy,
        IGraphBuilder_Connect_Proxy,
        IGraphBuilder_Render_Proxy,
        IGraphBuilder_RenderFile_Proxy,
        IGraphBuilder_AddSourceFilter_Proxy,
        IGraphBuilder_SetLogFile_Proxy,
        IGraphBuilder_Abort_Proxy,
        IGraphBuilder_ShouldOperationContinue_Proxy,
        IFilterGraph2_AddSourceFilterForMoniker_Proxy,
        IFilterGraph2_ReconnectEx_Proxy,
        IFilterGraph2_RenderEx_Proxy,
    }
};

static const MIDL_SERVER_INFO IFilterGraph2_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFilterGraph2_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFilterGraph2_table[] =
{
    IFilterGraph_AddFilter_Stub,
    IFilterGraph_RemoveFilter_Stub,
    IFilterGraph_EnumFilters_Stub,
    IFilterGraph_FindFilterByName_Stub,
    IFilterGraph_ConnectDirect_Stub,
    IFilterGraph_Reconnect_Stub,
    IFilterGraph_Disconnect_Stub,
    IFilterGraph_SetDefaultSyncSource_Stub,
    IGraphBuilder_Connect_Stub,
    IGraphBuilder_Render_Stub,
    IGraphBuilder_RenderFile_Stub,
    IGraphBuilder_AddSourceFilter_Stub,
    IGraphBuilder_SetLogFile_Stub,
    IGraphBuilder_Abort_Stub,
    IGraphBuilder_ShouldOperationContinue_Stub,
    IFilterGraph2_AddSourceFilterForMoniker_Stub,
    IFilterGraph2_ReconnectEx_Stub,
    IFilterGraph2_RenderEx_Stub
};

static const CInterfaceStubVtbl _IFilterGraph2StubVtbl =
{
    {
        &IID_IFilterGraph2,
        &IFilterGraph2_ServerInfo,
        21,
        &IFilterGraph2_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAMStreamConfig interface
 */
static void __finally_IAMStreamConfig_SetFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamConfig_SetFormat_Proxy(
    IAMStreamConfig* This,
    AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamConfig_SetFormat_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1278]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamConfig_SetFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamConfig_SetFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamConfig * _This;
    HRESULT _RetVal;
    AM_MEDIA_TYPE * pmt;
};

static void __finally_IAMStreamConfig_SetFormat_Stub( struct __frame_IAMStreamConfig_SetFormat_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3596]);

}

void __RPC_STUB IAMStreamConfig_SetFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamConfig_SetFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamConfig*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamConfig_SetFormat_Stub );
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1278]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFormat(__frame->_This, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamConfig_SetFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMStreamConfig_GetFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamConfig_GetFormat_Proxy(
    IAMStreamConfig* This,
    AM_MEDIA_TYPE **pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamConfig_GetFormat_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3604]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3604]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1284]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamConfig_GetFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamConfig_GetFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamConfig * _This;
    HRESULT _RetVal;
    AM_MEDIA_TYPE ** pmt;
};

static void __finally_IAMStreamConfig_GetFormat_Stub( struct __frame_IAMStreamConfig_GetFormat_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3604]);

}

void __RPC_STUB IAMStreamConfig_GetFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamConfig_GetFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamConfig*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamConfig_GetFormat_Stub );
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1284]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3604],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFormat(__frame->_This, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamConfig_GetFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMStreamConfig_GetNumberOfCapabilities_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamConfig_GetNumberOfCapabilities_Proxy(
    IAMStreamConfig* This,
    int *piCount,
    int *piSize)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamConfig_GetNumberOfCapabilities_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!piCount) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!piSize) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1290]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *piCount = *(int *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(int);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *piSize = *(int *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(int);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamConfig_GetNumberOfCapabilities_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3608], (void *)piCount );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3612], (void *)piSize );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamConfig_GetNumberOfCapabilities_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamConfig * _This;
    HRESULT _RetVal;
    int _W0;
    int * piCount;
    int _W1;
    int * piSize;
};

static void __finally_IAMStreamConfig_GetNumberOfCapabilities_Stub( struct __frame_IAMStreamConfig_GetNumberOfCapabilities_Stub *__frame )
{


}

void __RPC_STUB IAMStreamConfig_GetNumberOfCapabilities_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamConfig_GetNumberOfCapabilities_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamConfig*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamConfig_GetNumberOfCapabilities_Stub );
    __frame->piCount = 0;
    __frame->piSize = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1290]);


        __frame->piCount = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->piSize = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetNumberOfCapabilities(__frame->_This, __frame->piCount, __frame->piSize);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(int *)__frame->_StubMsg.Buffer = *__frame->piCount;
        __frame->_StubMsg.Buffer += sizeof(int);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(int *)__frame->_StubMsg.Buffer = *__frame->piSize;
        __frame->_StubMsg.Buffer += sizeof(int);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamConfig_GetNumberOfCapabilities_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMStreamConfig_GetStreamCaps_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamConfig_GetStreamCaps_Proxy(
    IAMStreamConfig* This,
    int iIndex,
    AM_MEDIA_TYPE **pmt,
    BYTE *pSCC)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamConfig_GetStreamCaps_Proxy );
    __frame->This = This;
    if (pmt) MIDL_memset( pmt, 0, sizeof( *pmt ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pSCC) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(int *)__frame->_StubMsg.Buffer = iIndex;
            __frame->_StubMsg.Buffer += sizeof(int);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1300]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3620],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 0) & ~0x0);
            if (__frame->_StubMsg.Buffer + sizeof(BYTE) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pSCC = *(BYTE *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BYTE);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamConfig_GetStreamCaps_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3620], (void *)pmt );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3624], (void *)pSCC );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamConfig_GetStreamCaps_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamConfig * _This;
    HRESULT _RetVal;
    int iIndex;
    AM_MEDIA_TYPE *_W0;
    AM_MEDIA_TYPE ** pmt;
    BYTE _W1;
    BYTE * pSCC;
};

static void __finally_IAMStreamConfig_GetStreamCaps_Stub( struct __frame_IAMStreamConfig_GetStreamCaps_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3620]);


}

void __RPC_STUB IAMStreamConfig_GetStreamCaps_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamConfig_GetStreamCaps_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamConfig*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamConfig_GetStreamCaps_Stub );
    __frame->pmt = 0;
    __frame->pSCC = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1300]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->iIndex = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);


        __frame->pmt = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pSCC = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetStreamCaps(__frame->_This, __frame->iIndex, __frame->pmt, __frame->pSCC);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 13;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3620]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3620]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 0) & ~0x0);
        *(BYTE *)__frame->_StubMsg.Buffer = *__frame->pSCC;
        __frame->_StubMsg.Buffer += sizeof(BYTE);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamConfig_GetStreamCaps_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAMStreamConfig_FormatStringOffsetTable[] =
{
    1278,  /* IAMStreamConfig::SetFormat */
    1284,  /* IAMStreamConfig::GetFormat */
    1290,  /* IAMStreamConfig::GetNumberOfCapabilities */
    1300,  /* IAMStreamConfig::GetStreamCaps */
};

static const CINTERFACE_PROXY_VTABLE(7) _IAMStreamConfigProxyVtbl =
{
    {
        &IID_IAMStreamConfig,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAMStreamConfig_SetFormat_Proxy,
        IAMStreamConfig_GetFormat_Proxy,
        IAMStreamConfig_GetNumberOfCapabilities_Proxy,
        IAMStreamConfig_GetStreamCaps_Proxy,
    }
};

static const MIDL_SERVER_INFO IAMStreamConfig_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAMStreamConfig_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAMStreamConfig_table[] =
{
    IAMStreamConfig_SetFormat_Stub,
    IAMStreamConfig_GetFormat_Stub,
    IAMStreamConfig_GetNumberOfCapabilities_Stub,
    IAMStreamConfig_GetStreamCaps_Stub
};

static const CInterfaceStubVtbl _IAMStreamConfigStubVtbl =
{
    {
        &IID_IAMStreamConfig,
        &IAMStreamConfig_ServerInfo,
        7,
        &IAMStreamConfig_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAMVideoProcAmp interface
 */
static void __finally_IAMVideoProcAmp_GetRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMVideoProcAmp_GetRange_Proxy(
    IAMVideoProcAmp* This,
    LONG Property,
    LONG *pMin,
    LONG *pMax,
    LONG *pSteppingDelta,
    LONG *pDefault,
    LONG *pCapsFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMVideoProcAmp_GetRange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pMin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pMax) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pSteppingDelta) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pDefault) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pCapsFlags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = Property;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1312]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pMin = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pMax = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pSteppingDelta = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pDefault = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCapsFlags = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMVideoProcAmp_GetRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3628], (void *)pMin );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3632], (void *)pMax );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3636], (void *)pSteppingDelta );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3640], (void *)pDefault );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3644], (void *)pCapsFlags );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMVideoProcAmp_GetRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMVideoProcAmp * _This;
    HRESULT _RetVal;
    LONG Property;
    LONG _W0;
    LONG * pMin;
    LONG _W1;
    LONG * pMax;
    LONG _W2;
    LONG * pSteppingDelta;
    LONG _W3;
    LONG * pDefault;
    LONG _W4;
    LONG * pCapsFlags;
};

static void __finally_IAMVideoProcAmp_GetRange_Stub( struct __frame_IAMVideoProcAmp_GetRange_Stub *__frame )
{






}

void __RPC_STUB IAMVideoProcAmp_GetRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMVideoProcAmp_GetRange_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMVideoProcAmp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMVideoProcAmp_GetRange_Stub );
    __frame->pMin = 0;
    __frame->pMax = 0;
    __frame->pSteppingDelta = 0;
    __frame->pDefault = 0;
    __frame->pCapsFlags = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1312]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->Property = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->pMin = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pMax = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->pSteppingDelta = &__frame->_W2;
        __frame->_W2 = 0;
        __frame->pDefault = &__frame->_W3;
        __frame->_W3 = 0;
        __frame->pCapsFlags = &__frame->_W4;
        __frame->_W4 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRange(__frame->_This, __frame->Property, __frame->pMin, __frame->pMax, __frame->pSteppingDelta, __frame->pDefault, __frame->pCapsFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 48;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pMin;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pMax;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pSteppingDelta;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pDefault;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pCapsFlags;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMVideoProcAmp_GetRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMVideoProcAmp_Set_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMVideoProcAmp_Set_Proxy(
    IAMVideoProcAmp* This,
    LONG Property,
    LONG lValue,
    LONG Flags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMVideoProcAmp_Set_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = Property;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = lValue;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = Flags;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1336]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMVideoProcAmp_Set_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMVideoProcAmp_Set_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMVideoProcAmp * _This;
    HRESULT _RetVal;
    LONG Property;
    LONG lValue;
    LONG Flags;
};

static void __finally_IAMVideoProcAmp_Set_Stub( struct __frame_IAMVideoProcAmp_Set_Stub *__frame )
{



}

void __RPC_STUB IAMVideoProcAmp_Set_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMVideoProcAmp_Set_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMVideoProcAmp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMVideoProcAmp_Set_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1336]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->Property = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lValue = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->Flags = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Set(__frame->_This, __frame->Property, __frame->lValue, __frame->Flags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMVideoProcAmp_Set_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMVideoProcAmp_Get_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMVideoProcAmp_Get_Proxy(
    IAMVideoProcAmp* This,
    LONG Property,
    LONG *lValue,
    LONG *Flags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMVideoProcAmp_Get_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!lValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!Flags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = Property;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1344]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *lValue = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *Flags = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMVideoProcAmp_Get_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3648], (void *)lValue );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3652], (void *)Flags );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMVideoProcAmp_Get_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMVideoProcAmp * _This;
    HRESULT _RetVal;
    LONG Property;
    LONG _W0;
    LONG * lValue;
    LONG _W1;
    LONG * Flags;
};

static void __finally_IAMVideoProcAmp_Get_Stub( struct __frame_IAMVideoProcAmp_Get_Stub *__frame )
{



}

void __RPC_STUB IAMVideoProcAmp_Get_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMVideoProcAmp_Get_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMVideoProcAmp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMVideoProcAmp_Get_Stub );
    __frame->lValue = 0;
    __frame->Flags = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1344]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->Property = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->lValue = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->Flags = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Get(__frame->_This, __frame->Property, __frame->lValue, __frame->Flags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->lValue;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->Flags;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMVideoProcAmp_Get_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAMVideoProcAmp_FormatStringOffsetTable[] =
{
    1312,  /* IAMVideoProcAmp::GetRange */
    1336,  /* IAMVideoProcAmp::Set */
    1344,  /* IAMVideoProcAmp::Get */
};

static const CINTERFACE_PROXY_VTABLE(6) _IAMVideoProcAmpProxyVtbl =
{
    {
        &IID_IAMVideoProcAmp,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAMVideoProcAmp_GetRange_Proxy,
        IAMVideoProcAmp_Set_Proxy,
        IAMVideoProcAmp_Get_Proxy,
    }
};

static const MIDL_SERVER_INFO IAMVideoProcAmp_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAMVideoProcAmp_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAMVideoProcAmp_table[] =
{
    IAMVideoProcAmp_GetRange_Stub,
    IAMVideoProcAmp_Set_Stub,
    IAMVideoProcAmp_Get_Stub
};

static const CInterfaceStubVtbl _IAMVideoProcAmpStubVtbl =
{
    {
        &IID_IAMVideoProcAmp,
        &IAMVideoProcAmp_ServerInfo,
        6,
        &IAMVideoProcAmp_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAsyncReader interface
 */
static void __finally_IAsyncReader_RequestAllocator_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_RequestAllocator_Proxy(
    IAsyncReader* This,
    IMemAllocator *pPreferred,
    ALLOCATOR_PROPERTIES *pProps,
    IMemAllocator **ppActual)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_RequestAllocator_Proxy );
    __frame->This = This;
    if (ppActual) MIDL_memset( ppActual, 0, sizeof( *ppActual ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pProps) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppActual) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pPreferred,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3656]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPreferred,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3656]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pProps,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1002]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1356]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppActual,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_RequestAllocator_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3696], (void *)ppActual );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_RequestAllocator_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    IMemAllocator * pPreferred;
    ALLOCATOR_PROPERTIES * pProps;
    IMemAllocator *_W0;
    IMemAllocator ** ppActual;
};

static void __finally_IAsyncReader_RequestAllocator_Stub( struct __frame_IAsyncReader_RequestAllocator_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPreferred,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3656]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppActual,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696]);

}

void __RPC_STUB IAsyncReader_RequestAllocator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_RequestAllocator_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_RequestAllocator_Stub );
    __frame->pPreferred = 0;
    __frame->pProps = 0;
    __frame->ppActual = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1356]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPreferred,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3656],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pProps,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1002],
            0);


        __frame->ppActual = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RequestAllocator(__frame->_This, __frame->pPreferred, __frame->pProps, __frame->ppActual);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppActual,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppActual,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_RequestAllocator_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_Request_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_Request_Proxy(
    IAsyncReader* This,
    IMediaSample *pSample,
    DWORD_PTR dwUser)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_Request_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3700]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3700]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD_PTR *)__frame->_StubMsg.Buffer = dwUser;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1370]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_Request_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_Request_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    IMediaSample * pSample;
    DWORD_PTR dwUser;
};

static void __finally_IAsyncReader_Request_Stub( struct __frame_IAsyncReader_Request_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSample,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3700]);


}

void __RPC_STUB IAsyncReader_Request_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_Request_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_Request_Stub );
    __frame->pSample = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1370]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSample,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3700],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwUser = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Request(__frame->_This, __frame->pSample, __frame->dwUser);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_Request_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_WaitForNext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_WaitForNext_Proxy(
    IAsyncReader* This,
    DWORD dwTimeout,
    IMediaSample **ppSample,
    DWORD_PTR *pdwUser)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_WaitForNext_Proxy );
    __frame->This = This;
    if (ppSample) MIDL_memset( ppSample, 0, sizeof( *ppSample ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppSample) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pdwUser) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwTimeout;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1378]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3736],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwUser = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_WaitForNext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3736], (void *)ppSample );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3740], (void *)pdwUser );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_WaitForNext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    DWORD dwTimeout;
    IMediaSample *_W0;
    IMediaSample ** ppSample;
    DWORD_PTR _W1;
    DWORD_PTR * pdwUser;
};

static void __finally_IAsyncReader_WaitForNext_Stub( struct __frame_IAsyncReader_WaitForNext_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSample,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3736]);


}

void __RPC_STUB IAsyncReader_WaitForNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_WaitForNext_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_WaitForNext_Stub );
    __frame->ppSample = 0;
    __frame->pdwUser = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1378]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwTimeout = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->ppSample = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pdwUser = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->WaitForNext(__frame->_This, __frame->dwTimeout, __frame->ppSample, __frame->pdwUser);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSample,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3736]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSample,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3736]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD_PTR *)__frame->_StubMsg.Buffer = *__frame->pdwUser;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_WaitForNext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_SyncReadAligned_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_SyncReadAligned_Proxy(
    IAsyncReader* This,
    IMediaSample *pSample)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_SyncReadAligned_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3744]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3744]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1390]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_SyncReadAligned_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_SyncReadAligned_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    IMediaSample * pSample;
};

static void __finally_IAsyncReader_SyncReadAligned_Stub( struct __frame_IAsyncReader_SyncReadAligned_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSample,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3744]);

}

void __RPC_STUB IAsyncReader_SyncReadAligned_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_SyncReadAligned_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_SyncReadAligned_Stub );
    __frame->pSample = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1390]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSample,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3744],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SyncReadAligned(__frame->_This, __frame->pSample);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_SyncReadAligned_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_SyncRead_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_SyncRead_Proxy(
    IAsyncReader* This,
    LONGLONG llPosition,
    LONG lLength,
    BYTE *pBuffer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_SyncRead_Proxy );
    __frame->This = This;
    if (pBuffer) MIDL_memset( pBuffer, 0, sizeof( *pBuffer ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pBuffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(LONGLONG *)__frame->_StubMsg.Buffer = llPosition;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = lLength;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1396]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3762],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_SyncRead_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)lLength;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3772], (void *)pBuffer );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_SyncRead_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    LONGLONG llPosition;
    LONG lLength;
    BYTE * pBuffer;
};

static void __finally_IAsyncReader_SyncRead_Stub( struct __frame_IAsyncReader_SyncRead_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->lLength;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3772]);

}

void __RPC_STUB IAsyncReader_SyncRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_SyncRead_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_SyncRead_Stub );
    __frame->pBuffer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1396]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->llPosition = *(LONGLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lLength = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->pBuffer = NdrAllocate(&__frame->_StubMsg, __frame->lLength * 1);
        memset(__frame->pBuffer, 0, __frame->lLength * 1);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SyncRead(__frame->_This, __frame->llPosition, __frame->lLength, __frame->pBuffer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->lLength;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3762]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->lLength;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3762]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_SyncRead_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_Length_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_Length_Proxy(
    IAsyncReader* This,
    LONGLONG *pTotal,
    LONGLONG *pAvailable)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_Length_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pTotal) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pAvailable) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1406]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pTotal = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pAvailable = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_Length_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3776], (void *)pTotal );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3780], (void *)pAvailable );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_Length_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pTotal;
    LONGLONG _W1;
    LONGLONG * pAvailable;
};

static void __finally_IAsyncReader_Length_Stub( struct __frame_IAsyncReader_Length_Stub *__frame )
{


}

void __RPC_STUB IAsyncReader_Length_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_Length_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_Length_Stub );
    __frame->pTotal = 0;
    __frame->pAvailable = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1406]);


        __frame->pTotal = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pAvailable = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Length(__frame->_This, __frame->pTotal, __frame->pAvailable);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 40;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pTotal;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pAvailable;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_Length_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_BeginFlush_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_BeginFlush_Proxy(
    IAsyncReader* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_BeginFlush_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1416]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_BeginFlush_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_BeginFlush_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
};

static void __finally_IAsyncReader_BeginFlush_Stub( struct __frame_IAsyncReader_BeginFlush_Stub *__frame )
{
}

void __RPC_STUB IAsyncReader_BeginFlush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_BeginFlush_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_BeginFlush_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1416]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->BeginFlush(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_BeginFlush_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_EndFlush_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_EndFlush_Proxy(
    IAsyncReader* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_EndFlush_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1418]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_EndFlush_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_EndFlush_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
};

static void __finally_IAsyncReader_EndFlush_Stub( struct __frame_IAsyncReader_EndFlush_Stub *__frame )
{
}

void __RPC_STUB IAsyncReader_EndFlush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_EndFlush_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_EndFlush_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1418]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EndFlush(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_EndFlush_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAsyncReader_FormatStringOffsetTable[] =
{
    1356,  /* IAsyncReader::RequestAllocator */
    1370,  /* IAsyncReader::Request */
    1378,  /* IAsyncReader::WaitForNext */
    1390,  /* IAsyncReader::SyncReadAligned */
    1396,  /* IAsyncReader::SyncRead */
    1406,  /* IAsyncReader::Length */
    1416,  /* IAsyncReader::BeginFlush */
    1418,  /* IAsyncReader::EndFlush */
};

static const CINTERFACE_PROXY_VTABLE(11) _IAsyncReaderProxyVtbl =
{
    {
        &IID_IAsyncReader,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAsyncReader_RequestAllocator_Proxy,
        IAsyncReader_Request_Proxy,
        IAsyncReader_WaitForNext_Proxy,
        IAsyncReader_SyncReadAligned_Proxy,
        IAsyncReader_SyncRead_Proxy,
        IAsyncReader_Length_Proxy,
        IAsyncReader_BeginFlush_Proxy,
        IAsyncReader_EndFlush_Proxy,
    }
};

static const MIDL_SERVER_INFO IAsyncReader_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAsyncReader_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAsyncReader_table[] =
{
    IAsyncReader_RequestAllocator_Stub,
    IAsyncReader_Request_Stub,
    IAsyncReader_WaitForNext_Stub,
    IAsyncReader_SyncReadAligned_Stub,
    IAsyncReader_SyncRead_Stub,
    IAsyncReader_Length_Stub,
    IAsyncReader_BeginFlush_Stub,
    IAsyncReader_EndFlush_Stub
};

static const CInterfaceStubVtbl _IAsyncReaderStubVtbl =
{
    {
        &IID_IAsyncReader,
        &IAsyncReader_ServerInfo,
        11,
        &IAsyncReader_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IGraphVersion interface
 */
static void __finally_IGraphVersion_QueryVersion_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphVersion_QueryVersion_Proxy(
    IGraphVersion* This,
    LONG *pVersion)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphVersion_QueryVersion_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pVersion) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = *pVersion;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1420]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphVersion_QueryVersion_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphVersion_QueryVersion_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphVersion * _This;
    HRESULT _RetVal;
    LONG * pVersion;
};

static void __finally_IGraphVersion_QueryVersion_Stub( struct __frame_IGraphVersion_QueryVersion_Stub *__frame )
{

}

void __RPC_STUB IGraphVersion_QueryVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphVersion_QueryVersion_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphVersion*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphVersion_QueryVersion_Stub );
    __frame->pVersion = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1420]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pVersion = (LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryVersion(__frame->_This, __frame->pVersion);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphVersion_QueryVersion_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IGraphVersion_FormatStringOffsetTable[] =
{
    1420,  /* IGraphVersion::QueryVersion */
};

static const CINTERFACE_PROXY_VTABLE(4) _IGraphVersionProxyVtbl =
{
    {
        &IID_IGraphVersion,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IGraphVersion_QueryVersion_Proxy,
    }
};

static const MIDL_SERVER_INFO IGraphVersion_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IGraphVersion_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IGraphVersion_table[] =
{
    IGraphVersion_QueryVersion_Stub
};

static const CInterfaceStubVtbl _IGraphVersionStubVtbl =
{
    {
        &IID_IGraphVersion,
        &IGraphVersion_ServerInfo,
        4,
        &IGraphVersion_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IResourceConsumer interface
 */
static void __finally_IResourceConsumer_AcquireResource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceConsumer_AcquireResource_Proxy(
    IResourceConsumer* This,
    LONG idResource)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceConsumer_AcquireResource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1426]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceConsumer_AcquireResource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceConsumer_AcquireResource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceConsumer * _This;
    HRESULT _RetVal;
    LONG idResource;
};

static void __finally_IResourceConsumer_AcquireResource_Stub( struct __frame_IResourceConsumer_AcquireResource_Stub *__frame )
{

}

void __RPC_STUB IResourceConsumer_AcquireResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceConsumer_AcquireResource_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceConsumer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceConsumer_AcquireResource_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1426]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AcquireResource(__frame->_This, __frame->idResource);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceConsumer_AcquireResource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceConsumer_ReleaseResource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceConsumer_ReleaseResource_Proxy(
    IResourceConsumer* This,
    LONG idResource)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceConsumer_ReleaseResource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1430]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceConsumer_ReleaseResource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceConsumer_ReleaseResource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceConsumer * _This;
    HRESULT _RetVal;
    LONG idResource;
};

static void __finally_IResourceConsumer_ReleaseResource_Stub( struct __frame_IResourceConsumer_ReleaseResource_Stub *__frame )
{

}

void __RPC_STUB IResourceConsumer_ReleaseResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceConsumer_ReleaseResource_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceConsumer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceConsumer_ReleaseResource_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1430]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseResource(__frame->_This, __frame->idResource);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceConsumer_ReleaseResource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IResourceConsumer_FormatStringOffsetTable[] =
{
    1426,  /* IResourceConsumer::AcquireResource */
    1430,  /* IResourceConsumer::ReleaseResource */
};

static const CINTERFACE_PROXY_VTABLE(5) _IResourceConsumerProxyVtbl =
{
    {
        &IID_IResourceConsumer,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IResourceConsumer_AcquireResource_Proxy,
        IResourceConsumer_ReleaseResource_Proxy,
    }
};

static const MIDL_SERVER_INFO IResourceConsumer_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IResourceConsumer_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IResourceConsumer_table[] =
{
    IResourceConsumer_AcquireResource_Stub,
    IResourceConsumer_ReleaseResource_Stub
};

static const CInterfaceStubVtbl _IResourceConsumerStubVtbl =
{
    {
        &IID_IResourceConsumer,
        &IResourceConsumer_ServerInfo,
        5,
        &IResourceConsumer_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IResourceManager interface
 */
static void __finally_IResourceManager_Register_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_Register_Proxy(
    IResourceManager* This,
    LPCWSTR pName,
    LONG cResource,
    LONG *plToken)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_Register_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!plToken) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3790]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3790]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1434]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *plToken = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_Register_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3792], (void *)plToken );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_Register_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LPCWSTR pName;
    LONG cResource;
    LONG _W0;
    LONG * plToken;
};

static void __finally_IResourceManager_Register_Stub( struct __frame_IResourceManager_Register_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3788]);



}

void __RPC_STUB IResourceManager_Register_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_Register_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_Register_Stub );
    __frame->pName = 0;
    __frame->plToken = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1434]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3790],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->plToken = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Register(__frame->_This, __frame->pName, __frame->cResource, __frame->plToken);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->plToken;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_Register_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_RegisterGroup_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_RegisterGroup_Proxy(
    IResourceManager* This,
    LPCWSTR pName,
    LONG cResource,
    LONG *palTokens,
    LONG *plToken)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_RegisterGroup_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!palTokens) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!plToken) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3798]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cResource;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)palTokens,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3800]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3798]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cResource;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)palTokens,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3800]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1446]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *plToken = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_RegisterGroup_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3814], (void *)plToken );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_RegisterGroup_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LPCWSTR pName;
    LONG cResource;
    LONG * palTokens;
    LONG _W0;
    LONG * plToken;
};

static void __finally_IResourceManager_RegisterGroup_Stub( struct __frame_IResourceManager_RegisterGroup_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3796]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cResource;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->palTokens,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3800]);


}

void __RPC_STUB IResourceManager_RegisterGroup_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_RegisterGroup_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_RegisterGroup_Stub );
    __frame->pName = 0;
    __frame->palTokens = 0;
    __frame->plToken = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1446]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3798],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->palTokens,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3800],
            0);


        __frame->plToken = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterGroup(__frame->_This, __frame->pName, __frame->cResource, __frame->palTokens, __frame->plToken);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->plToken;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_RegisterGroup_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_RequestResource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_RequestResource_Proxy(
    IResourceManager* This,
    LONG idResource,
    IUnknown *pFocusObject,
    IResourceConsumer *pConsumer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_RequestResource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3818]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3818]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1462]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_RequestResource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_RequestResource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LONG idResource;
    IUnknown * pFocusObject;
    IResourceConsumer * pConsumer;
};

static void __finally_IResourceManager_RequestResource_Stub( struct __frame_IResourceManager_RequestResource_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFocusObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3818]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pConsumer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);

}

void __RPC_STUB IResourceManager_RequestResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_RequestResource_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_RequestResource_Stub );
    __frame->pFocusObject = 0;
    __frame->pConsumer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1462]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFocusObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3818],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pConsumer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RequestResource(__frame->_This, __frame->idResource, __frame->pFocusObject, __frame->pConsumer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_RequestResource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_NotifyAcquire_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_NotifyAcquire_Proxy(
    IResourceManager* This,
    LONG idResource,
    IResourceConsumer *pConsumer,
    HRESULT hr)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_NotifyAcquire_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HRESULT *)__frame->_StubMsg.Buffer = hr;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1474]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_NotifyAcquire_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_NotifyAcquire_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LONG idResource;
    IResourceConsumer * pConsumer;
    HRESULT hr;
};

static void __finally_IResourceManager_NotifyAcquire_Stub( struct __frame_IResourceManager_NotifyAcquire_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pConsumer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854]);


}

void __RPC_STUB IResourceManager_NotifyAcquire_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_NotifyAcquire_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_NotifyAcquire_Stub );
    __frame->pConsumer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1474]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pConsumer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hr = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->NotifyAcquire(__frame->_This, __frame->idResource, __frame->pConsumer, __frame->hr);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_NotifyAcquire_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_NotifyRelease_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_NotifyRelease_Proxy(
    IResourceManager* This,
    LONG idResource,
    IResourceConsumer *pConsumer,
    BOOL bStillWant)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_NotifyRelease_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3872]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3872]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bStillWant;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1484]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_NotifyRelease_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_NotifyRelease_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LONG idResource;
    IResourceConsumer * pConsumer;
    BOOL bStillWant;
};

static void __finally_IResourceManager_NotifyRelease_Stub( struct __frame_IResourceManager_NotifyRelease_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pConsumer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3872]);


}

void __RPC_STUB IResourceManager_NotifyRelease_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_NotifyRelease_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_NotifyRelease_Stub );
    __frame->pConsumer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1484]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pConsumer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3872],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bStillWant = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->NotifyRelease(__frame->_This, __frame->idResource, __frame->pConsumer, __frame->bStillWant);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_NotifyRelease_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_CancelRequest_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_CancelRequest_Proxy(
    IResourceManager* This,
    LONG idResource,
    IResourceConsumer *pConsumer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_CancelRequest_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3890]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3890]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1494]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_CancelRequest_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_CancelRequest_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LONG idResource;
    IResourceConsumer * pConsumer;
};

static void __finally_IResourceManager_CancelRequest_Stub( struct __frame_IResourceManager_CancelRequest_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pConsumer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3890]);

}

void __RPC_STUB IResourceManager_CancelRequest_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_CancelRequest_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_CancelRequest_Stub );
    __frame->pConsumer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1494]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pConsumer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3890],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CancelRequest(__frame->_This, __frame->idResource, __frame->pConsumer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_CancelRequest_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_SetFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_SetFocus_Proxy(
    IResourceManager* This,
    IUnknown *pFocusObject)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_SetFocus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3908]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3908]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1502]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_SetFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_SetFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    IUnknown * pFocusObject;
};

static void __finally_IResourceManager_SetFocus_Stub( struct __frame_IResourceManager_SetFocus_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFocusObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3908]);

}

void __RPC_STUB IResourceManager_SetFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_SetFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_SetFocus_Stub );
    __frame->pFocusObject = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1502]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFocusObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3908],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFocus(__frame->_This, __frame->pFocusObject);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_SetFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_ReleaseFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_ReleaseFocus_Proxy(
    IResourceManager* This,
    IUnknown *pFocusObject)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_ReleaseFocus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3926]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3926]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1508]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_ReleaseFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_ReleaseFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    IUnknown * pFocusObject;
};

static void __finally_IResourceManager_ReleaseFocus_Stub( struct __frame_IResourceManager_ReleaseFocus_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFocusObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3926]);

}

void __RPC_STUB IResourceManager_ReleaseFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_ReleaseFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_ReleaseFocus_Stub );
    __frame->pFocusObject = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1508]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFocusObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3926],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseFocus(__frame->_This, __frame->pFocusObject);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_ReleaseFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IResourceManager_FormatStringOffsetTable[] =
{
    1434,  /* IResourceManager::Register */
    1446,  /* IResourceManager::RegisterGroup */
    1462,  /* IResourceManager::RequestResource */
    1474,  /* IResourceManager::NotifyAcquire */
    1484,  /* IResourceManager::NotifyRelease */
    1494,  /* IResourceManager::CancelRequest */
    1502,  /* IResourceManager::SetFocus */
    1508,  /* IResourceManager::ReleaseFocus */
};

static const CINTERFACE_PROXY_VTABLE(11) _IResourceManagerProxyVtbl =
{
    {
        &IID_IResourceManager,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IResourceManager_Register_Proxy,
        IResourceManager_RegisterGroup_Proxy,
        IResourceManager_RequestResource_Proxy,
        IResourceManager_NotifyAcquire_Proxy,
        IResourceManager_NotifyRelease_Proxy,
        IResourceManager_CancelRequest_Proxy,
        IResourceManager_SetFocus_Proxy,
        IResourceManager_ReleaseFocus_Proxy,
    }
};

static const MIDL_SERVER_INFO IResourceManager_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IResourceManager_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IResourceManager_table[] =
{
    IResourceManager_Register_Stub,
    IResourceManager_RegisterGroup_Stub,
    IResourceManager_RequestResource_Stub,
    IResourceManager_NotifyAcquire_Stub,
    IResourceManager_NotifyRelease_Stub,
    IResourceManager_CancelRequest_Stub,
    IResourceManager_SetFocus_Stub,
    IResourceManager_ReleaseFocus_Stub
};

static const CInterfaceStubVtbl _IResourceManagerStubVtbl =
{
    {
        &IID_IResourceManager,
        &IResourceManager_ServerInfo,
        11,
        &IResourceManager_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ISeekingPassThru interface
 */
static void __finally_ISeekingPassThru_Init_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ISeekingPassThru_Init_Proxy(
    ISeekingPassThru* This,
    BOOL bSupportRendering,
    IPin *pPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ISeekingPassThru_Init_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3944]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bSupportRendering;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3944]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1514]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ISeekingPassThru_Init_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ISeekingPassThru_Init_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ISeekingPassThru * _This;
    HRESULT _RetVal;
    BOOL bSupportRendering;
    IPin * pPin;
};

static void __finally_ISeekingPassThru_Init_Stub( struct __frame_ISeekingPassThru_Init_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3944]);

}

void __RPC_STUB ISeekingPassThru_Init_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ISeekingPassThru_Init_Stub __f, * const __frame = &__f;

    __frame->_This = (ISeekingPassThru*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ISeekingPassThru_Init_Stub );
    __frame->pPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1514]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bSupportRendering = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3944],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Init(__frame->_This, __frame->bSupportRendering, __frame->pPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ISeekingPassThru_Init_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ISeekingPassThru_FormatStringOffsetTable[] =
{
    1514,  /* ISeekingPassThru::Init */
};

static const CINTERFACE_PROXY_VTABLE(4) _ISeekingPassThruProxyVtbl =
{
    {
        &IID_ISeekingPassThru,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ISeekingPassThru_Init_Proxy,
    }
};

static const MIDL_SERVER_INFO ISeekingPassThru_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISeekingPassThru_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ISeekingPassThru_table[] =
{
    ISeekingPassThru_Init_Stub
};

static const CInterfaceStubVtbl _ISeekingPassThruStubVtbl =
{
    {
        &IID_ISeekingPassThru,
        &ISeekingPassThru_ServerInfo,
        4,
        &ISeekingPassThru_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

static const MIDL_STUB_DESC Object_StubDesc =
{
    0,
    NdrOleAllocate,
    NdrOleFree,
    {0}, 0, 0, 0, 0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

#if !defined(__RPC_WIN32__)
#error Currently only Wine and WIN32 are supported.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter clsidDeviceClass) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x14),	/* type offset = 20 */
/* 4 (parameter ppEnumMoniker) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2a),	/* type offset = 42 */
/* 8 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter pReceivePin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2e),	/* type offset = 46 */
/* 16 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x90),	/* type offset = 144 */
/* 20 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 22 (parameter pConnector) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x94),	/* type offset = 148 */
/* 26 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd2),	/* type offset = 210 */
/* 30 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 32 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter pPin) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe8),	/* type offset = 232 */
/* 38 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 40 (parameter pmt) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x118),	/* type offset = 280 */
/* 44 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter pInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x146),	/* type offset = 326 */
/* 50 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 52 (parameter pPinDir) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14a),	/* type offset = 330 */
/* 56 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 58 (parameter Id) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x152),	/* type offset = 338 */
/* 62 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 64 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x182),	/* type offset = 386 */
/* 68 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 70 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x198),	/* type offset = 408 */
/* 74 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter apPin) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1ae),	/* type offset = 430 */
/* 80 (parameter nPin) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1b2),	/* type offset = 434 */
/* 84 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 88 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter tStart) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 94 (parameter tStop) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 96 (parameter dRate) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0c,    /* FC_DOUBLE */
/* 98 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 100 (parameter cPins) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 102 (parameter ppPins) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1c8),	/* type offset = 456 */
/* 106 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1de),	/* type offset = 478 */
/* 110 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 112 (parameter cPins) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 114 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 116 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 118 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1f4),	/* type offset = 500 */
/* 122 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 124 (parameter cMediaTypes) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 126 (parameter ppMediaTypes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1f8),	/* type offset = 504 */
/* 130 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x21c),	/* type offset = 540 */
/* 134 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 136 (parameter cMediaTypes) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 138 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 140 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 142 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x232),	/* type offset = 562 */
/* 146 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 148 (parameter pFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x236),	/* type offset = 566 */
/* 152 (parameter pName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x248),	/* type offset = 584 */
/* 156 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 158 (parameter pFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x24c),	/* type offset = 588 */
/* 162 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 164 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x270),	/* type offset = 624 */
/* 168 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 170 (parameter pName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x274),	/* type offset = 628 */
/* 174 (parameter ppFilter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x28a),	/* type offset = 650 */
/* 178 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 180 (parameter ppinOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x28e),	/* type offset = 654 */
/* 184 (parameter ppinIn) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2a0),	/* type offset = 672 */
/* 188 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2de),	/* type offset = 734 */
/* 192 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter ppin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2e2),	/* type offset = 738 */
/* 198 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 200 (parameter ppin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2f4),	/* type offset = 756 */
/* 204 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 206 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 208 (parameter cFilters) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 210 (parameter ppFilter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x318),	/* type offset = 792 */
/* 214 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x31c),	/* type offset = 796 */
/* 218 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 220 (parameter cFilters) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 222 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 224 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 226 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x332),	/* type offset = 818 */
/* 230 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 232 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 234 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 236 (parameter tStart) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 238 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 240 (parameter dwMilliSecsTimeout) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 242 (parameter State) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x336),	/* type offset = 822 */
/* 246 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 248 (parameter pClock) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x33a),	/* type offset = 826 */
/* 252 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 254 (parameter pClock) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x35e),	/* type offset = 862 */
/* 258 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x374),	/* type offset = 884 */
/* 264 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 266 (parameter Id) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x378),	/* type offset = 888 */
/* 270 (parameter ppPin) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x38e),	/* type offset = 910 */
/* 274 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 276 (parameter pInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3bc),	/* type offset = 956 */
/* 280 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 282 (parameter pGraph) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3c0),	/* type offset = 960 */
/* 286 (parameter pName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3d2),	/* type offset = 978 */
/* 290 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 292 (parameter pVendorInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3da),	/* type offset = 986 */
/* 296 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 298 (parameter pTime) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3de),	/* type offset = 990 */
/* 302 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 304 (parameter baseTime) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 306 (parameter streamTime) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 308 (parameter hEvent) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 310 (parameter pdwAdviseCookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3e2),	/* type offset = 994 */
/* 314 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 316 (parameter startTime) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 318 (parameter periodTime) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 320 (parameter hSemaphore) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 322 (parameter pdwAdviseCookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3e6),	/* type offset = 998 */
/* 326 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 328 (parameter dwAdviseCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 330 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 332 (parameter pRequest) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3f4),	/* type offset = 1012 */
/* 336 (parameter pActual) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3f8),	/* type offset = 1016 */
/* 340 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 342 (parameter pProps) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3fc),	/* type offset = 1020 */
/* 346 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 348 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 350 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 352 (parameter ppBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x412),	/* type offset = 1042 */
/* 356 (parameter pStartTime) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x416),	/* type offset = 1046 */
/* 360 (parameter pEndTime) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x41a),	/* type offset = 1050 */
/* 364 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 366 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 368 (parameter pBuffer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x41e),	/* type offset = 1054 */
/* 372 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 374 (parameter pNotify) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x430),	/* type offset = 1072 */
/* 378 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 380 (parameter plBuffersFree) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x442),	/* type offset = 1090 */
/* 384 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 386 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 388 (parameter ppAllocator) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x458),	/* type offset = 1112 */
/* 392 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 394 (parameter pAllocator) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x45c),	/* type offset = 1116 */
/* 398 (parameter bReadOnly) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 400 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 402 (parameter pProps) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x46e),	/* type offset = 1134 */
/* 406 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 408 (parameter pSample) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x472),	/* type offset = 1138 */
/* 412 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 414 (parameter pSamples) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x496),	/* type offset = 1174 */
/* 418 (parameter nSamples) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 420 (parameter nSamplesProcessed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4ac),	/* type offset = 1196 */
/* 424 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 426 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 428 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 430 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 432 (parameter pCapabilities) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4b0),	/* type offset = 1200 */
/* 436 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 438 (parameter pCapabilities) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x4b4),	/* type offset = 1204 */
/* 442 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 444 (parameter pFormat) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4ca),	/* type offset = 1226 */
/* 448 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 450 (parameter pFormat) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4ce),	/* type offset = 1230 */
/* 454 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 456 (parameter pFormat) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4d2),	/* type offset = 1234 */
/* 460 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 462 (parameter pFormat) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4e8),	/* type offset = 1256 */
/* 466 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 468 (parameter pFormat) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4fe),	/* type offset = 1278 */
/* 472 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 474 (parameter pDuration) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x502),	/* type offset = 1282 */
/* 478 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 480 (parameter pStop) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x506),	/* type offset = 1286 */
/* 484 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 486 (parameter pCurrent) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x50a),	/* type offset = 1290 */
/* 490 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 492 (parameter pTarget) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x50e),	/* type offset = 1294 */
/* 496 (parameter pTargetFormat) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x524),	/* type offset = 1316 */
/* 500 (parameter Source) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 502 (parameter pSourceFormat) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x53a),	/* type offset = 1338 */
/* 506 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 508 (parameter pCurrent) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x53e),	/* type offset = 1342 */
/* 512 (parameter dwCurrentFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 514 (parameter pStop) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x542),	/* type offset = 1346 */
/* 518 (parameter dwStopFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 520 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 522 (parameter pCurrent) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x546),	/* type offset = 1350 */
/* 526 (parameter pStop) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x54a),	/* type offset = 1354 */
/* 530 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 532 (parameter pEarliest) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x54e),	/* type offset = 1358 */
/* 536 (parameter pLatest) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x552),	/* type offset = 1362 */
/* 540 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 542 (parameter dRate) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0c,    /* FC_DOUBLE */
/* 544 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 546 (parameter pdRate) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x556),	/* type offset = 1366 */
/* 550 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 552 (parameter pllPreroll) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x55a),	/* type offset = 1370 */
/* 556 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 558 (parameter streams) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x55e),	/* type offset = 1374 */
/* 562 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 564 (parameter index) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 566 (parameter media_type) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x566),	/* type offset = 1382 */
/* 570 (parameter flags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x56a),	/* type offset = 1386 */
/* 574 (parameter lcid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x56e),	/* type offset = 1390 */
/* 578 (parameter group) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x572),	/* type offset = 1394 */
/* 582 (parameter name) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x57a),	/* type offset = 1402 */
/* 586 (parameter object) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x590),	/* type offset = 1424 */
/* 590 (parameter unknown) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5a6),	/* type offset = 1446 */
/* 594 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 596 (parameter index) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 598 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 600 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 602 (parameter cFilters) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 604 (parameter apRegFilter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ca),	/* type offset = 1482 */
/* 608 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ce),	/* type offset = 1486 */
/* 612 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 614 (parameter cFilters) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 616 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 618 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 620 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5e4),	/* type offset = 1508 */
/* 624 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 626 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 630 (parameter Name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e8),	/* type offset = 1512 */
/* 634 (parameter dwMerit) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 636 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 638 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 642 (parameter Name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ec),	/* type offset = 1516 */
/* 646 (parameter MRId) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5f0),	/* type offset = 1520 */
/* 650 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 652 (parameter Filter) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 656 (parameter Name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f4),	/* type offset = 1524 */
/* 660 (parameter bRendered) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 662 (parameter bOutput) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 664 (parameter bZero) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 666 (parameter bMany) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 668 (parameter ConnectsToFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 672 (parameter ConnectsToPin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f8),	/* type offset = 1528 */
/* 676 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 678 (parameter clsFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 682 (parameter strName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5fc),	/* type offset = 1532 */
/* 686 (parameter clsMajorType) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 690 (parameter clsSubType) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 694 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 696 (parameter Filter) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 700 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 702 (parameter MRId) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 706 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 708 (parameter Filter) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 712 (parameter Name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x600),	/* type offset = 1536 */
/* 716 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 718 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x616),	/* type offset = 1558 */
/* 722 (parameter dwMerit) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 724 (parameter bInputNeeded) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 726 (parameter clsInMaj) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 730 (parameter clsInSub) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 734 (parameter bRender) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 736 (parameter bOutputNeeded) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 738 (parameter clsOutMaj) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 742 (parameter clsOutSub) */
        0x4d,    /* FC_IN_PARAM */
        0x04,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 746 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 748 (parameter clsidCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x61a),	/* type offset = 1562 */
/* 752 (parameter dwCategoryMerit) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 754 (parameter Description) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x61e),	/* type offset = 1566 */
/* 758 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 760 (parameter pclsidCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x634),	/* type offset = 1588 */
/* 764 (parameter szInstance) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x638),	/* type offset = 1592 */
/* 768 (parameter Filter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x63c),	/* type offset = 1596 */
/* 772 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 774 (parameter clsidFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x640),	/* type offset = 1600 */
/* 778 (parameter Name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x644),	/* type offset = 1604 */
/* 782 (parameter ppMoniker) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x65a),	/* type offset = 1626 */
/* 786 (parameter pclsidCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x670),	/* type offset = 1648 */
/* 790 (parameter szInstance) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x674),	/* type offset = 1652 */
/* 794 (parameter prf2) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x864),	/* type offset = 2148 */
/* 798 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 800 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x87a),	/* type offset = 2170 */
/* 804 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 806 (parameter bExactMatch) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 808 (parameter dwMerit) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 810 (parameter bInputNeeded) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 812 (parameter cInputTypes) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 814 (parameter pInputTypes) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x890),	/* type offset = 2192 */
/* 818 (parameter pMedIn) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8ae),	/* type offset = 2222 */
/* 822 (parameter pPinCategoryIn) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8c4),	/* type offset = 2244 */
/* 826 (parameter bRender) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 828 (parameter bOutputNeeded) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 830 (parameter cOutputTypes) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 832 (parameter pOutputTypes) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8da),	/* type offset = 2266 */
/* 836 (parameter pMedOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8f8),	/* type offset = 2296 */
/* 840 (parameter pPinCategoryOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x90e),	/* type offset = 2318 */
/* 844 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 846 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x924),	/* type offset = 2340 */
/* 850 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 852 (parameter pSelf) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x928),	/* type offset = 2344 */
/* 856 (parameter q) */
        0x4d,    /* FC_IN_PARAM */
        0x06,
        NdrFcShort(0x93a),	/* type offset = 2362 */
/* 860 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 862 (parameter piqc) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x948),	/* type offset = 2376 */
/* 866 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 868 (parameter EventCode) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 870 (parameter EventParam1) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 872 (parameter EventParam2) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 874 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 876 (parameter pszFileName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x95a),	/* type offset = 2394 */
/* 880 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x98a),	/* type offset = 2442 */
/* 884 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 886 (parameter ppszFileName) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x992),	/* type offset = 2450 */
/* 890 (parameter pmt) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x996),	/* type offset = 2454 */
/* 894 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 896 (parameter pszFileName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x99a),	/* type offset = 2458 */
/* 900 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9ca),	/* type offset = 2506 */
/* 904 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 906 (parameter ppszFileName) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9d2),	/* type offset = 2514 */
/* 910 (parameter pmt) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9d6),	/* type offset = 2518 */
/* 914 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 916 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 918 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 920 (parameter pdwFlags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9da),	/* type offset = 2522 */
/* 924 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 926 (parameter ppinOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9de),	/* type offset = 2526 */
/* 930 (parameter ppinIn) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9f0),	/* type offset = 2544 */
/* 934 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 936 (parameter ppinOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa02),	/* type offset = 2562 */
/* 940 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 942 (parameter lpcwstrFile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa14),	/* type offset = 2580 */
/* 946 (parameter lpcwstrPlayList) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa18),	/* type offset = 2584 */
/* 950 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 952 (parameter lpcwstrFileName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa1c),	/* type offset = 2588 */
/* 956 (parameter lpcwstrFilterName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa20),	/* type offset = 2592 */
/* 960 (parameter ppFilter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa36),	/* type offset = 2614 */
/* 964 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 966 (parameter hFile) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 968 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 970 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 972 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 974 (parameter pfg) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa3a),	/* type offset = 2618 */
/* 978 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 980 (parameter ppfg) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa5e),	/* type offset = 2654 */
/* 984 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 986 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa74),	/* type offset = 2676 */
/* 990 (parameter lpstrFile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa78),	/* type offset = 2680 */
/* 994 (parameter ppf) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa8e),	/* type offset = 2702 */
/* 998 (parameter ppSink) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xaa4),	/* type offset = 2724 */
/* 1002 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1004 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xaba),	/* type offset = 2746 */
/* 1008 (parameter pf) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xabe),	/* type offset = 2750 */
/* 1012 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xae2),	/* type offset = 2786 */
/* 1016 (parameter ppint) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xaf8),	/* type offset = 2808 */
/* 1020 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1022 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb0e),	/* type offset = 2830 */
/* 1026 (parameter pSource) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb12),	/* type offset = 2834 */
/* 1030 (parameter pfCompressor) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb24),	/* type offset = 2852 */
/* 1034 (parameter pfRenderer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb36),	/* type offset = 2870 */
/* 1038 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1040 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb5a),	/* type offset = 2906 */
/* 1044 (parameter pFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb5e),	/* type offset = 2910 */
/* 1048 (parameter pstart) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb70),	/* type offset = 2928 */
/* 1052 (parameter pstop) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb74),	/* type offset = 2932 */
/* 1056 (parameter wStartCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 1058 (parameter wStopCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 1060 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1062 (parameter lpstr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb78),	/* type offset = 2936 */
/* 1066 (parameter dwlSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 1068 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1070 (parameter lpwstrOld) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb7c),	/* type offset = 2940 */
/* 1074 (parameter lpwstrNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb80),	/* type offset = 2944 */
/* 1078 (parameter fAllowEscAbort) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1080 (parameter pCallback) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb84),	/* type offset = 2948 */
/* 1084 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1086 (parameter iProgress) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1088 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1090 (parameter pfg) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb96),	/* type offset = 2966 */
/* 1094 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1096 (parameter ppfg) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xbba),	/* type offset = 3002 */
/* 1100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1102 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbd0),	/* type offset = 3024 */
/* 1106 (parameter lpstrFile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbd4),	/* type offset = 3028 */
/* 1110 (parameter ppf) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xbea),	/* type offset = 3050 */
/* 1114 (parameter ppSink) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xc00),	/* type offset = 3072 */
/* 1118 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1120 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc16),	/* type offset = 3094 */
/* 1124 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc2c),	/* type offset = 3116 */
/* 1128 (parameter pf) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc30),	/* type offset = 3120 */
/* 1132 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc42),	/* type offset = 3138 */
/* 1136 (parameter ppint) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xc58),	/* type offset = 3160 */
/* 1140 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1142 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc6e),	/* type offset = 3182 */
/* 1146 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc84),	/* type offset = 3204 */
/* 1150 (parameter pSource) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc88),	/* type offset = 3208 */
/* 1154 (parameter pfCompressor) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc9a),	/* type offset = 3226 */
/* 1158 (parameter pfRenderer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xcac),	/* type offset = 3244 */
/* 1162 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1164 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xcd0),	/* type offset = 3280 */
/* 1168 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xce6),	/* type offset = 3302 */
/* 1172 (parameter pFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xcea),	/* type offset = 3306 */
/* 1176 (parameter pstart) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xcfc),	/* type offset = 3324 */
/* 1180 (parameter pstop) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd00),	/* type offset = 3328 */
/* 1184 (parameter wStartCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 1186 (parameter wStopCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 1188 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1190 (parameter lpstr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd04),	/* type offset = 3332 */
/* 1194 (parameter dwlSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 1196 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1198 (parameter lpwstrOld) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd08),	/* type offset = 3336 */
/* 1202 (parameter lpwstrNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd0c),	/* type offset = 3340 */
/* 1206 (parameter fAllowEscAbort) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1208 (parameter pCallback) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd10),	/* type offset = 3344 */
/* 1212 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1214 (parameter pSource) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd22),	/* type offset = 3362 */
/* 1218 (parameter pindir) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1220 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd46),	/* type offset = 3398 */
/* 1224 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd5c),	/* type offset = 3420 */
/* 1228 (parameter fUnconnected) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1230 (parameter num) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1232 (parameter ppPin) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd72),	/* type offset = 3442 */
/* 1236 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1238 (parameter pMoniker) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd76),	/* type offset = 3446 */
/* 1242 (parameter pCtx) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd88),	/* type offset = 3464 */
/* 1246 (parameter lpcwstrFilterName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd9a),	/* type offset = 3482 */
/* 1250 (parameter ppFilter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xdb0),	/* type offset = 3504 */
/* 1254 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1256 (parameter ppin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xdb4),	/* type offset = 3508 */
/* 1260 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xdf2),	/* type offset = 3570 */
/* 1264 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1266 (parameter pPinOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xdf6),	/* type offset = 3574 */
/* 1270 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1272 (parameter pvContext) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xe08),	/* type offset = 3592 */
/* 1276 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1278 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe0c),	/* type offset = 3596 */
/* 1282 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1284 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe14),	/* type offset = 3604 */
/* 1288 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1290 (parameter piCount) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe18),	/* type offset = 3608 */
/* 1294 (parameter piSize) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe1c),	/* type offset = 3612 */
/* 1298 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1300 (parameter iIndex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1302 (parameter pmt) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe24),	/* type offset = 3620 */
/* 1306 (parameter pSCC) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe28),	/* type offset = 3624 */
/* 1310 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1312 (parameter Property) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1314 (parameter pMin) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe2c),	/* type offset = 3628 */
/* 1318 (parameter pMax) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe30),	/* type offset = 3632 */
/* 1322 (parameter pSteppingDelta) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe34),	/* type offset = 3636 */
/* 1326 (parameter pDefault) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe38),	/* type offset = 3640 */
/* 1330 (parameter pCapsFlags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe3c),	/* type offset = 3644 */
/* 1334 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1336 (parameter Property) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1338 (parameter lValue) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1340 (parameter Flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1342 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1344 (parameter Property) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1346 (parameter lValue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe40),	/* type offset = 3648 */
/* 1350 (parameter Flags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe44),	/* type offset = 3652 */
/* 1354 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1356 (parameter pPreferred) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe48),	/* type offset = 3656 */
/* 1360 (parameter pProps) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe5a),	/* type offset = 3674 */
/* 1364 (parameter ppActual) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe70),	/* type offset = 3696 */
/* 1368 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1370 (parameter pSample) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe74),	/* type offset = 3700 */
/* 1374 (parameter dwUser) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 1376 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1378 (parameter dwTimeout) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1380 (parameter ppSample) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe98),	/* type offset = 3736 */
/* 1384 (parameter pdwUser) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe9c),	/* type offset = 3740 */
/* 1388 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1390 (parameter pSample) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xea0),	/* type offset = 3744 */
/* 1394 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1396 (parameter llPosition) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 1398 (parameter lLength) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1400 (parameter pBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xeb2),	/* type offset = 3762 */
/* 1404 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1406 (parameter pTotal) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xec0),	/* type offset = 3776 */
/* 1410 (parameter pAvailable) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xec4),	/* type offset = 3780 */
/* 1414 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1416 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1418 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1420 (parameter pVersion) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xec8),	/* type offset = 3784 */
/* 1424 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1426 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1428 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1430 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1432 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1434 (parameter pName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xecc),	/* type offset = 3788 */
/* 1438 (parameter cResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1440 (parameter plToken) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xed0),	/* type offset = 3792 */
/* 1444 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1446 (parameter pName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xed4),	/* type offset = 3796 */
/* 1450 (parameter cResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1452 (parameter palTokens) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xed8),	/* type offset = 3800 */
/* 1456 (parameter plToken) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xee6),	/* type offset = 3814 */
/* 1460 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1462 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1464 (parameter pFocusObject) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xeea),	/* type offset = 3818 */
/* 1468 (parameter pConsumer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xefc),	/* type offset = 3836 */
/* 1472 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1474 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1476 (parameter pConsumer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf0e),	/* type offset = 3854 */
/* 1480 (parameter hr) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1482 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1484 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1486 (parameter pConsumer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf20),	/* type offset = 3872 */
/* 1490 (parameter bStillWant) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1492 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1494 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1496 (parameter pConsumer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf32),	/* type offset = 3890 */
/* 1500 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1502 (parameter pFocusObject) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf44),	/* type offset = 3908 */
/* 1506 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1508 (parameter pFocusObject) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf56),	/* type offset = 3926 */
/* 1512 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1514 (parameter bSupportRendering) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1516 (parameter pPin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf68),	/* type offset = 3944 */
/* 1520 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 8 (CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2) */
        0x5b,	/* FC_END */
/* 20 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (8) */
/* 24 (IEnumMoniker *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000102),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 42 (IEnumMoniker **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (24) */
/* 46 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 64 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 70 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (64) */
        0x5b,	/* FC_END */
/* 82 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 100 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 110 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x48),	/* 72 */
        NdrFcShort(0x0),
        NdrFcShort(0x18),	/* Offset= 24 (140) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffce),	/* Offset= -50 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffca),	/* Offset= -54 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffc3),	/* Offset= -61 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcb),	/* Offset= -53 (82) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 140 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (100) */
/* 144 (const AM_MEDIA_TYPE *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffdc),	/* Offset= -36 (110) */
/* 148 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 166 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 176 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x48),	/* 72 */
        NdrFcShort(0x0),
        NdrFcShort(0x18),	/* Offset= 24 (206) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff8c),	/* Offset= -116 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff88),	/* Offset= -120 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff81),	/* Offset= -127 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff89),	/* Offset= -119 (82) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 206 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (166) */
/* 210 (const AM_MEDIA_TYPE *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffdc),	/* Offset= -36 (176) */
/* 214 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 232 (IPin **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (214) */
/* 236 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 246 (AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x48),	/* 72 */
        NdrFcShort(0x0),
        NdrFcShort(0x18),	/* Offset= 24 (276) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff46),	/* Offset= -186 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff42),	/* Offset= -190 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff3b),	/* Offset= -197 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff43),	/* Offset= -189 (82) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 276 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (236) */
/* 280 (AM_MEDIA_TYPE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffdc),	/* Offset= -36 (246) */
/* 284 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 302 (WCHAR[128]) */
        0x1d,	/* FC_SMFARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x100),	/* 256 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 308 (PIN_INFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x108),	/* 264 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (314) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (284) */
        0x0d,	/* FC_ENUM16 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffeb),	/* Offset= -21 (302) */
        0x5b,	/* FC_END */
/* 326 (PIN_INFO *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (308) */
/* 330 (PIN_DIRECTION *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0d,	/* FC_ENUM16 */
        0x5c,	/* FC_PAD */
/* 334 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (338) */
/* 338 (LPWSTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 340 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 342 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 352 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x48),	/* 72 */
        NdrFcShort(0x0),
        NdrFcShort(0x18),	/* Offset= 24 (382) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfedc),	/* Offset= -292 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfed8),	/* Offset= -296 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfed1),	/* Offset= -303 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfed9),	/* Offset= -295 (82) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 382 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (342) */
/* 386 (const AM_MEDIA_TYPE *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffdc),	/* Offset= -36 (352) */
/* 390 (IEnumMediaTypes *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x89c31040),
        NdrFcShort(0x846b),
        NdrFcShort(0x11ce),
        0x97,
        0xd3,
        0x00,
        0xaa,
        0x00,
        0x55,
        0x59,
        0x5a,

/* 408 (IEnumMediaTypes **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (390) */
/* 412 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 430 (IPin **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (412) */
/* 434 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 438 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 456 (IPin **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPins, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (438) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 474 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (456) */
/* 478 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 482 (IEnumPins *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86892),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 500 (IEnumPins **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (482) */
/* 504 (AM_MEDIA_TYPE **) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cMediaTypes, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfee6),	/* Offset= -282 (246) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfee1),	/* Offset= -287 (246) */
        0x5b,	/* FC_END */
/* 536 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffde),	/* Offset= -34 (504) */
/* 540 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 544 (IEnumMediaTypes *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x89c31040),
        NdrFcShort(0x846b),
        NdrFcShort(0x11ce),
        0x97,
        0xd3,
        0x00,
        0xaa,
        0x00,
        0x55,
        0x59,
        0x5a,

/* 562 (IEnumMediaTypes **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (544) */
/* 566 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 584 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 586 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 588 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 606 (IEnumFilters *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86893),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 624 (IEnumFilters **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (606) */
/* 628 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 630 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 632 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 650 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (632) */
/* 654 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 672 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 690 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 700 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x48),	/* 72 */
        NdrFcShort(0x0),
        NdrFcShort(0x18),	/* Offset= 24 (730) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd80),	/* Offset= -640 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd7c),	/* Offset= -644 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd75),	/* Offset= -651 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd7d),	/* Offset= -643 (82) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 730 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (690) */
/* 734 (const AM_MEDIA_TYPE *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (700) */
/* 738 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 756 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 774 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 792 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (774) */
/* 796 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 800 (IEnumFilters *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86893),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 818 (IEnumFilters **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (800) */
/* 822 (FILTER_STATE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0d,	/* FC_ENUM16 */
        0x5c,	/* FC_PAD */
/* 826 (IReferenceClock *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86897),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 844 (IReferenceClock *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86897),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 862 (IReferenceClock **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (844) */
/* 866 (IEnumPins *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86892),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 884 (IEnumPins **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (866) */
/* 888 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 890 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 892 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 910 (IPin **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (892) */
/* 914 (WCHAR[128]) */
        0x1d,	/* FC_SMFARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x100),	/* 256 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 920 (IFilterGraph *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689f),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 938 (FILTER_INFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x104),	/* 260 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (944) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (914) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (920) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 956 (FILTER_INFO *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (938) */
/* 960 (IFilterGraph *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689f),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 978 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 980 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 982 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (986) */
/* 986 (LPWSTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 988 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 990 (REFERENCE_TIME *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 994 (DWORD_PTR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 998 (DWORD_PTR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1002 (ALLOCATOR_PROPERTIES) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1012 (ALLOCATOR_PROPERTIES *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1002) */
/* 1016 (ALLOCATOR_PROPERTIES *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff0),	/* Offset= -16 (1002) */
/* 1020 (ALLOCATOR_PROPERTIES *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (1002) */
/* 1024 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1042 (IMediaSample **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1024) */
/* 1046 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1050 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1054 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1072 (IMemAllocatorNotifyCallbackTemp *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x92980b30),
        NdrFcShort(0xc1de),
        NdrFcShort(0x11d2),
        0xab,
        0xf5,
        0x00,
        0xa0,
        0xc9,
        0x05,
        0xf3,
        0x75,

/* 1090 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1094 (IMemAllocator *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689c),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1112 (IMemAllocator **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1094) */
/* 1116 (IMemAllocator *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689c),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1134 (ALLOCATOR_PROPERTIES *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff7a),	/* Offset= -134 (1002) */
/* 1138 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1156 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1174 (IMediaSample **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x28,	/* Corr desc: parameter nSamples, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1156) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1192 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1174) */
/* 1196 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1200 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1204 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1208 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1214 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1208) */
        0x5b,	/* FC_END */
/* 1226 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1214) */
/* 1230 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfb76),	/* Offset= -1162 (70) */
/* 1234 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfb72),	/* Offset= -1166 (70) */
/* 1238 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1244 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1238) */
        0x5b,	/* FC_END */
/* 1256 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1244) */
/* 1260 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1266 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1260) */
        0x5b,	/* FC_END */
/* 1278 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1266) */
/* 1282 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1286 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1290 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1294 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1298 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1304 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1298) */
        0x5b,	/* FC_END */
/* 1316 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1304) */
/* 1320 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1326 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1320) */
        0x5b,	/* FC_END */
/* 1338 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1326) */
/* 1342 (LONGLONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1346 (LONGLONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1350 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1354 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1358 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1362 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1366 (double *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 1370 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1374 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1378 (AM_MEDIA_TYPE *) */
        0x13, 0x0,		/* FC_OP */
        NdrFcShort(0xfb92),	/* Offset= -1134 (246) */
/* 1382 (AM_MEDIA_TYPE **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1378) */
/* 1386 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1390 (LCID *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1394 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1398 (WCHAR *) */
        0x13, 0xc,	/* FC_OP [allocated_on_stack] [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
/* 1402 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1398) */
/* 1406 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1424 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1406) */
/* 1428 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1446 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1428) */
/* 1450 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1452 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1454 (REGFILTER) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
/* 1466 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1468 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfa47),	/* Offset= -1465 (8) */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1478 (REGFILTER *) */
        0x13, 0x0,		/* FC_OP */
        NdrFcShort(0xffe6),	/* Offset= -26 (1454) */
/* 1482 (REGFILTER **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1478) */
/* 1486 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1490 (IEnumRegFilters *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a4),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1508 (IEnumRegFilters **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1490) */
/* 1512 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1514 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1516 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1518 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1520 (CLSID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfa16),	/* Offset= -1514 (8) */
/* 1524 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1526 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1528 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1530 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1532 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1534 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1536 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1538 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1540 (IEnumRegFilters *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a4),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1558 (IEnumRegFilters **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1540) */
/* 1562 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9ec),	/* Offset= -1556 (8) */
/* 1566 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1568 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1570 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1576 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1570) */
        0x5b,	/* FC_END */
/* 1588 (const CLSID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1576) */
/* 1592 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1594 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1596 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9ca),	/* Offset= -1590 (8) */
/* 1600 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9c6),	/* Offset= -1594 (8) */
/* 1604 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1606 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1608 (IMoniker *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1626 (IMoniker **) */
        0x11, 0x10,		/* FC_RP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1608) */
/* 1630 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1636 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1630) */
        0x5b,	/* FC_END */
/* 1648 (const CLSID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1636) */
/* 1652 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1654 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1656 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1658 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1660 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1666 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1660) */
        0x5b,	/* FC_END */
/* 1678 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1684 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1678) */
        0x5b,	/* FC_END */
/* 1696 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1702 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1696) */
        0x5b,	/* FC_END */
/* 1714 (const REGPINTYPES) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (1684) */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (1702) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1744 (const REGFILTERPINS) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 1756 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1758 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x14),	/* Memory offset = 20 */
        NdrFcShort(0x14),	/* Buffer offset = 20 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff9a),	/* Offset= -102 (1666) */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x18),	/* Memory offset = 24 */
        NdrFcShort(0x18),	/* Buffer offset = 24 */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x20),	/* Memory offset = 32 */
        NdrFcShort(0x20),	/* Buffer offset = 32 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffb6),	/* Offset= -74 (1714) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1802 (const REGFILTERPINS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x19,	/* Corr desc: field pointer cPins, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x24),	/* Increment = 36 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x4),	/* Number of pointers = 4 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 1824 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1826 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        NdrFcShort(0x14),	/* Memory offset = 20 */
        NdrFcShort(0x14),	/* Buffer offset = 20 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff58),	/* Offset= -168 (1666) */
        NdrFcShort(0x18),	/* Memory offset = 24 */
        NdrFcShort(0x18),	/* Buffer offset = 24 */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
        NdrFcShort(0x20),	/* Memory offset = 32 */
        NdrFcShort(0x20),	/* Buffer offset = 32 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff78),	/* Offset= -136 (1714) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff91),	/* Offset= -111 (1744) */
        0x5b,	/* FC_END */
/* 1858 (struct ) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffba),	/* Offset= -70 (1802) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1878 (const REGPINTYPES) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff30),	/* Offset= -208 (1684) */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff38),	/* Offset= -200 (1702) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1908 (const REGPINTYPES *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer nMediaTypes, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x8),	/* Increment = 8 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x2),	/* Number of pointers = 2 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff08),	/* Offset= -248 (1684) */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff12),	/* Offset= -238 (1702) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffbd),	/* Offset= -67 (1878) */
        0x5b,	/* FC_END */
/* 1948 (const REGPINMEDIUM) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf866),	/* Offset= -1946 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1960 (const REGPINMEDIUM *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x19,	/* Corr desc: field pointer nMediums, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (1948) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1974 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1980 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1974) */
        0x5b,	/* FC_END */
/* 1992 (const REGFILTERPINS2) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x1c),	/* 28 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0xc),	/* Memory offset = 12 */
        NdrFcShort(0xc),	/* Buffer offset = 12 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff9e),	/* Offset= -98 (1908) */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x14),	/* Memory offset = 20 */
        NdrFcShort(0x14),	/* Buffer offset = 20 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc8),	/* Offset= -56 (1960) */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x18),	/* Memory offset = 24 */
        NdrFcShort(0x18),	/* Buffer offset = 24 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd2),	/* Offset= -46 (1980) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2038 (const REGFILTERPINS2 *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x1c),	/* 28 */
        0x19,	/* Corr desc: field pointer cPins2, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x1c),	/* Increment = 28 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x3),	/* Number of pointers = 3 */
        NdrFcShort(0xc),	/* Memory offset = 12 */
        NdrFcShort(0xc),	/* Buffer offset = 12 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff66),	/* Offset= -154 (1908) */
        NdrFcShort(0x14),	/* Memory offset = 20 */
        NdrFcShort(0x14),	/* Buffer offset = 20 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff92),	/* Offset= -110 (1960) */
        NdrFcShort(0x18),	/* Memory offset = 24 */
        NdrFcShort(0x18),	/* Buffer offset = 24 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff9e),	/* Offset= -98 (1980) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffa5),	/* Offset= -91 (1992) */
        0x5b,	/* FC_END */
/* 2086 (struct ) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc2),	/* Offset= -62 (2038) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2106 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x2),	/* 2 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xff00),	/* Offset= -256 (1858) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffde),	/* Offset= -34 (2086) */
        NdrFcShort(0x0),
/* 2124 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwVersion, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffe8),	/* Offset= -24 (2106) */
/* 2132 (const REGFILTER2) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (2138) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (2124) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2148 (const REGFILTER2 *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffee),	/* Offset= -18 (2132) */
/* 2152 (IEnumMoniker *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000102),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2170 (IEnumMoniker **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2152) */
/* 2174 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2180 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2174) */
        0x5b,	/* FC_END */
/* 2192 (const GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter cInputTypes, FC_ULONG */
        0x56,	/* FC_MULT_2 */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (2180) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2206 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff0),	/* Offset= -16 (2192) */
/* 2210 (const REGPINMEDIUM) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf760),	/* Offset= -2208 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2222 (const REGPINMEDIUM *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2210) */
/* 2226 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2232 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2226) */
        0x5b,	/* FC_END */
/* 2244 (const CLSID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2232) */
/* 2248 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2254 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2248) */
        0x5b,	/* FC_END */
/* 2266 (const GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter cOutputTypes, FC_ULONG */
        0x56,	/* FC_MULT_2 */
        NdrFcShort(0x30),	/* offset = 48 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (2254) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2280 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff0),	/* Offset= -16 (2266) */
/* 2284 (const REGPINMEDIUM) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf716),	/* Offset= -2282 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2296 (const REGPINMEDIUM *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2284) */
/* 2300 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2306 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2300) */
        0x5b,	/* FC_END */
/* 2318 (const CLSID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2306) */
/* 2322 (ICreateDevEnum *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x29840822),
        NdrFcShort(0x5b84),
        NdrFcShort(0x11d0),
        0xbd,
        0x3b,
        0x00,
        0xa0,
        0xc9,
        0x11,
        0xce,
        0x86,

/* 2340 (ICreateDevEnum **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2322) */
/* 2344 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2362 (Quality) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (2368) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x0b,	/* FC_HYPER */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2376 (IQualityControl *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a5),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2394 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2396 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2398 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2408 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x48),	/* 72 */
        NdrFcShort(0x0),
        NdrFcShort(0x18),	/* Offset= 24 (2438) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf6d4),	/* Offset= -2348 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf6d0),	/* Offset= -2352 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf6c9),	/* Offset= -2359 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf6d1),	/* Offset= -2351 (82) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2438 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (2398) */
/* 2442 (const AM_MEDIA_TYPE *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (2408) */
/* 2446 (LPOLESTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (2450) */
/* 2450 (LPOLESTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 2452 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2454 (AM_MEDIA_TYPE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf75e),	/* Offset= -2210 (246) */
/* 2458 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2460 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2462 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2472 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x48),	/* 72 */
        NdrFcShort(0x0),
        NdrFcShort(0x18),	/* Offset= 24 (2502) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf694),	/* Offset= -2412 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf690),	/* Offset= -2416 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf689),	/* Offset= -2423 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf691),	/* Offset= -2415 (82) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2502 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (2462) */
/* 2506 (const AM_MEDIA_TYPE *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (2472) */
/* 2510 (LPOLESTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (2514) */
/* 2514 (LPOLESTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 2516 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2518 (AM_MEDIA_TYPE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf71e),	/* Offset= -2274 (246) */
/* 2522 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2526 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2544 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2562 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2580 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2582 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2584 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2586 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2588 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2590 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2592 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2594 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2596 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2614 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2596) */
/* 2618 (IGraphBuilder *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a9),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2636 (IGraphBuilder *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a9),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2654 (IGraphBuilder **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2636) */
/* 2658 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2664 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2658) */
        0x5b,	/* FC_END */
/* 2676 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2664) */
/* 2680 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2682 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2684 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2702 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2684) */
/* 2706 (IFileSinkFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa2104830),
        NdrFcShort(0x7c70),
        NdrFcShort(0x11cf),
        0x8b,
        0xce,
        0x00,
        0xaa,
        0x00,
        0xa3,
        0xf1,
        0xa6,

/* 2724 (IFileSinkFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2706) */
/* 2728 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2734 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2728) */
        0x5b,	/* FC_END */
/* 2746 (const GUID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2734) */
/* 2750 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2768 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2774 (IID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2768) */
        0x5b,	/* FC_END */
/* 2786 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2774) */
/* 2790 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2808 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2790) */
/* 2812 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2818 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2812) */
        0x5b,	/* FC_END */
/* 2830 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2818) */
/* 2834 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2852 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2870 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2888 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2894 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2888) */
        0x5b,	/* FC_END */
/* 2906 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2894) */
/* 2910 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2928 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 2932 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 2936 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2938 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2940 (LPOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2942 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2944 (LPOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2946 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2948 (IAMCopyCaptureFileProgress *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x670d1d20),
        NdrFcShort(0xa068),
        NdrFcShort(0x11d0),
        0xb3,
        0xf0,
        0x00,
        0xaa,
        0x00,
        0x37,
        0x61,
        0xc5,

/* 2966 (IGraphBuilder *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a9),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2984 (IGraphBuilder *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a9),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3002 (IGraphBuilder **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2984) */
/* 3006 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3012 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3006) */
        0x5b,	/* FC_END */
/* 3024 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3012) */
/* 3028 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3030 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3032 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3050 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3032) */
/* 3054 (IFileSinkFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa2104830),
        NdrFcShort(0x7c70),
        NdrFcShort(0x11cf),
        0x8b,
        0xce,
        0x00,
        0xaa,
        0x00,
        0xa3,
        0xf1,
        0xa6,

/* 3072 (IFileSinkFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3054) */
/* 3076 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3082 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3076) */
        0x5b,	/* FC_END */
/* 3094 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3082) */
/* 3098 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3104 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3098) */
        0x5b,	/* FC_END */
/* 3116 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3104) */
/* 3120 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3138 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfe92),	/* Offset= -366 (2774) */
/* 3142 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3160 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3142) */
/* 3164 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3170 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3164) */
        0x5b,	/* FC_END */
/* 3182 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3170) */
/* 3186 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3192 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3186) */
        0x5b,	/* FC_END */
/* 3204 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3192) */
/* 3208 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3226 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3244 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3262 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3268 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3262) */
        0x5b,	/* FC_END */
/* 3280 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3268) */
/* 3284 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3290 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3284) */
        0x5b,	/* FC_END */
/* 3302 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3290) */
/* 3306 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3324 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 3328 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 3332 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3334 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3336 (LPOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3338 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3340 (LPOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3342 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3344 (IAMCopyCaptureFileProgress *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x670d1d20),
        NdrFcShort(0xa068),
        NdrFcShort(0x11d0),
        0xb3,
        0xf0,
        0x00,
        0xaa,
        0x00,
        0x37,
        0x61,
        0xc5,

/* 3362 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3380 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3386 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3380) */
        0x5b,	/* FC_END */
/* 3398 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3386) */
/* 3402 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3408 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3402) */
        0x5b,	/* FC_END */
/* 3420 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3408) */
/* 3424 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3442 (IPin **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3424) */
/* 3446 (IMoniker *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3464 (IBindCtx *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000e),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3482 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 3484 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3486 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3504 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3486) */
/* 3508 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3526 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 3536 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x48),	/* 72 */
        NdrFcShort(0x0),
        NdrFcShort(0x18),	/* Offset= 24 (3566) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf26c),	/* Offset= -3476 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf268),	/* Offset= -3480 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf261),	/* Offset= -3487 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf269),	/* Offset= -3479 (82) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 3566 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (3526) */
/* 3570 (const AM_MEDIA_TYPE *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (3536) */
/* 3574 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3592 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 3596 (AM_MEDIA_TYPE *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf2e8),	/* Offset= -3352 (246) */
/* 3600 (AM_MEDIA_TYPE *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf2e4),	/* Offset= -3356 (246) */
/* 3604 (AM_MEDIA_TYPE **) */
        0x11, 0x10,		/* FC_RP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3600) */
/* 3608 (int *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3612 (int *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3616 (AM_MEDIA_TYPE *) */
        0x13, 0x0,		/* FC_OP */
        NdrFcShort(0xf2d4),	/* Offset= -3372 (246) */
/* 3620 (AM_MEDIA_TYPE **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3616) */
/* 3624 (BYTE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 3628 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3632 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3636 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3640 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3644 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3648 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3652 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3656 (IMemAllocator *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689c),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3674 (ALLOCATOR_PROPERTIES *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf58e),	/* Offset= -2674 (1002) */
/* 3678 (IMemAllocator *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689c),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3696 (IMemAllocator **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3678) */
/* 3700 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3718 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3736 (IMediaSample **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3718) */
/* 3740 (DWORD_PTR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 3744 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3762 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x28,	/* Corr desc: parameter lLength, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 3772 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (3762) */
/* 3776 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 3780 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 3784 (LONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3788 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3790 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3792 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3796 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3798 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3800 (LONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x28,	/* Corr desc: parameter cResource, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3810 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (3800) */
/* 3814 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3818 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3836 (IResourceConsumer *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868ad),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3854 (IResourceConsumer *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868ad),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3872 (IResourceConsumer *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868ad),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3890 (IResourceConsumer *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868ad),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3908 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3926 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3944 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

        0x0
    }
};

static const CInterfaceProxyVtbl* const _quartz_strmif_ProxyVtblList[] =
{
    (const CInterfaceProxyVtbl*)&_IAMCopyCaptureFileProgressProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICreateDevEnumProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMemAllocatorNotifyCallbackTempProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFileSinkFilterProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumMediaTypesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAMStreamConfigProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAMStreamSelectProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAMVideoProcAmpProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMediaSeekingProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFilterGraph2ProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ISeekingPassThruProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFileSinkFilter2ProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IPinProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumPinsProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumFiltersProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IBaseFilterProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IReferenceClockProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMediaFilterProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMemAllocatorProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMemInputPinProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFilterGraphProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMediaEventSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFilterMapperProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumRegFiltersProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IQualityControlProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFileSourceFilterProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IGraphBuilderProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAsyncReaderProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IGraphVersionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IResourceManagerProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IResourceConsumerProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFilterMapper2ProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFilterMapper3ProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAMovieSetupProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICaptureGraphBuilder2ProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICaptureGraphBuilderProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMemAllocatorCallbackTempProxyVtbl,
    0
};

static const CInterfaceStubVtbl* const _quartz_strmif_StubVtblList[] =
{
    &_IAMCopyCaptureFileProgressStubVtbl,
    &_ICreateDevEnumStubVtbl,
    &_IMemAllocatorNotifyCallbackTempStubVtbl,
    &_IFileSinkFilterStubVtbl,
    &_IEnumMediaTypesStubVtbl,
    &_IAMStreamConfigStubVtbl,
    &_IAMStreamSelectStubVtbl,
    &_IAMVideoProcAmpStubVtbl,
    &_IMediaSeekingStubVtbl,
    &_IFilterGraph2StubVtbl,
    &_ISeekingPassThruStubVtbl,
    &_IFileSinkFilter2StubVtbl,
    &_IPinStubVtbl,
    &_IEnumPinsStubVtbl,
    &_IEnumFiltersStubVtbl,
    &_IBaseFilterStubVtbl,
    &_IReferenceClockStubVtbl,
    &_IMediaFilterStubVtbl,
    &_IMemAllocatorStubVtbl,
    &_IMemInputPinStubVtbl,
    &_IFilterGraphStubVtbl,
    &_IMediaEventSinkStubVtbl,
    &_IFilterMapperStubVtbl,
    &_IEnumRegFiltersStubVtbl,
    &_IQualityControlStubVtbl,
    &_IFileSourceFilterStubVtbl,
    &_IGraphBuilderStubVtbl,
    &_IAsyncReaderStubVtbl,
    &_IGraphVersionStubVtbl,
    &_IResourceManagerStubVtbl,
    &_IResourceConsumerStubVtbl,
    &_IFilterMapper2StubVtbl,
    &_IFilterMapper3StubVtbl,
    &_IAMovieSetupStubVtbl,
    &_ICaptureGraphBuilder2StubVtbl,
    &_ICaptureGraphBuilderStubVtbl,
    &_IMemAllocatorCallbackTempStubVtbl,
    0
};

static PCInterfaceName const _quartz_strmif_InterfaceNamesList[] =
{
    "IAMCopyCaptureFileProgress",
    "ICreateDevEnum",
    "IMemAllocatorNotifyCallbackTemp",
    "IFileSinkFilter",
    "IEnumMediaTypes",
    "IAMStreamConfig",
    "IAMStreamSelect",
    "IAMVideoProcAmp",
    "IMediaSeeking",
    "IFilterGraph2",
    "ISeekingPassThru",
    "IFileSinkFilter2",
    "IPin",
    "IEnumPins",
    "IEnumFilters",
    "IBaseFilter",
    "IReferenceClock",
    "IMediaFilter",
    "IMemAllocator",
    "IMemInputPin",
    "IFilterGraph",
    "IMediaEventSink",
    "IFilterMapper",
    "IEnumRegFilters",
    "IQualityControl",
    "IFileSourceFilter",
    "IGraphBuilder",
    "IAsyncReader",
    "IGraphVersion",
    "IResourceManager",
    "IResourceConsumer",
    "IFilterMapper2",
    "IFilterMapper3",
    "IAMovieSetup",
    "ICaptureGraphBuilder2",
    "ICaptureGraphBuilder",
    "IMemAllocatorCallbackTemp",
    0
};

static const IID * _quartz_strmif_BaseIIDList[] =
{
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    &IID_IPersist,  /* IBaseFilter */
    0,
    &IID_IPersist,  /* IMediaFilter */
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

static int __stdcall _quartz_strmif_IID_Lookup(const IID* pIID, int* pIndex)
{
    int low = 0, high = 36;

    while (low <= high)
    {
        int pos = (low + high) / 2;
        int res = IID_GENERIC_CHECK_IID(_quartz_strmif, pIID, pos);
        if (!res) { *pIndex = pos; return 1; }
        if (res > 0) low = pos + 1;
        else high = pos - 1;
    }
    return 0;
}

const ExtendedProxyFileInfo quartz_strmif_ProxyFileInfo DECLSPEC_HIDDEN =
{
    (const PCInterfaceProxyVtblList*)_quartz_strmif_ProxyVtblList,
    (const PCInterfaceStubVtblList*)_quartz_strmif_StubVtblList,
    _quartz_strmif_InterfaceNamesList,
    _quartz_strmif_BaseIIDList,
    _quartz_strmif_IID_Lookup,
    37,
    1,
    0,
    0,
    0,
    0
};

#else /* _WIN64 */

#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 440
#endif

#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error This code needs a newer version of rpcproxy.h
#endif /* __RPCPROXY_H_VERSION__ */

#include "quartz_strmif.h"

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __proxy_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    void             *This;
};

static int __proxy_filter( struct __proxy_frame *__frame )
{
    return (__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE);
}

#define TYPE_FORMAT_STRING_SIZE 3805
#define PROC_FORMAT_STRING_SIZE 1523

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const MIDL_STUB_DESC Object_StubDesc;

/*****************************************************************************
 * ICreateDevEnum interface
 */
static void __finally_ICreateDevEnum_CreateClassEnumerator_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICreateDevEnum_CreateClassEnumerator_Proxy(
    ICreateDevEnum* This,
    REFCLSID clsidDeviceClass,
    IEnumMoniker **ppEnumMoniker,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICreateDevEnum_CreateClassEnumerator_Proxy );
    __frame->This = This;
    if (ppEnumMoniker) MIDL_memset( ppEnumMoniker, 0, sizeof( *ppEnumMoniker ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!clsidDeviceClass) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppEnumMoniker) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsidDeviceClass,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnumMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[42],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICreateDevEnum_CreateClassEnumerator_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[42], (void *)ppEnumMoniker );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICreateDevEnum_CreateClassEnumerator_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICreateDevEnum * _This;
    HRESULT _RetVal;
    REFCLSID clsidDeviceClass;
    IEnumMoniker *_W0;
    IEnumMoniker ** ppEnumMoniker;
    DWORD dwFlags;
};

static void __finally_ICreateDevEnum_CreateClassEnumerator_Stub( struct __frame_ICreateDevEnum_CreateClassEnumerator_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnumMoniker,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[42]);


}

void __RPC_STUB ICreateDevEnum_CreateClassEnumerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICreateDevEnum_CreateClassEnumerator_Stub __f, * const __frame = &__f;

    __frame->_This = (ICreateDevEnum*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICreateDevEnum_CreateClassEnumerator_Stub );
    __frame->clsidDeviceClass = 0;
    __frame->ppEnumMoniker = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsidDeviceClass,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->ppEnumMoniker = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateClassEnumerator(__frame->_This, __frame->clsidDeviceClass, __frame->ppEnumMoniker, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnumMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[42]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnumMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[42]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICreateDevEnum_CreateClassEnumerator_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICreateDevEnum_FormatStringOffsetTable[] =
{
    0,  /* ICreateDevEnum::CreateClassEnumerator */
};

static const CINTERFACE_PROXY_VTABLE(4) _ICreateDevEnumProxyVtbl =
{
    {
        &IID_ICreateDevEnum,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICreateDevEnum_CreateClassEnumerator_Proxy,
    }
};

static const MIDL_SERVER_INFO ICreateDevEnum_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICreateDevEnum_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICreateDevEnum_table[] =
{
    ICreateDevEnum_CreateClassEnumerator_Stub
};

static const CInterfaceStubVtbl _ICreateDevEnumStubVtbl =
{
    {
        &IID_ICreateDevEnum,
        &ICreateDevEnum_ServerInfo,
        4,
        &ICreateDevEnum_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IPin interface
 */
static void __finally_IPin_Connect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_Connect_Proxy(
    IPin* This,
    IPin *pReceivePin,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_Connect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pReceivePin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pReceivePin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46]);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_Connect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_Connect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    IPin * pReceivePin;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IPin_Connect_Stub( struct __frame_IPin_Connect_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pReceivePin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[146]);

}

void __RPC_STUB IPin_Connect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_Connect_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_Connect_Stub );
    __frame->pReceivePin = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pReceivePin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46],
            0);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Connect(__frame->_This, __frame->pReceivePin, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_Connect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_ReceiveConnection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_ReceiveConnection_Proxy(
    IPin* This,
    IPin *pConnector,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_ReceiveConnection_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pConnector,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[150]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[178]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pConnector,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[150]);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[178]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[22]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_ReceiveConnection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_ReceiveConnection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    IPin * pConnector;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IPin_ReceiveConnection_Stub( struct __frame_IPin_ReceiveConnection_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pConnector,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[150]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[214]);

}

void __RPC_STUB IPin_ReceiveConnection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_ReceiveConnection_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_ReceiveConnection_Stub );
    __frame->pConnector = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[22]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pConnector,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[150],
            0);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[178],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReceiveConnection(__frame->_This, __frame->pConnector, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_ReceiveConnection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_Disconnect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_Disconnect_Proxy(
    IPin* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_Disconnect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[32]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_Disconnect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_Disconnect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
};

static void __finally_IPin_Disconnect_Stub( struct __frame_IPin_Disconnect_Stub *__frame )
{
}

void __RPC_STUB IPin_Disconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_Disconnect_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_Disconnect_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[32]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Disconnect(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_Disconnect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_ConnectedTo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_ConnectedTo_Proxy(
    IPin* This,
    IPin **pPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_ConnectedTo_Proxy );
    __frame->This = This;
    if (pPin) MIDL_memset( pPin, 0, sizeof( *pPin ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[34]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[236],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_ConnectedTo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[236], (void *)pPin );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_ConnectedTo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    IPin *_W0;
    IPin ** pPin;
};

static void __finally_IPin_ConnectedTo_Stub( struct __frame_IPin_ConnectedTo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[236]);

}

void __RPC_STUB IPin_ConnectedTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_ConnectedTo_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_ConnectedTo_Stub );
    __frame->pPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[34]);


        __frame->pPin = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ConnectedTo(__frame->_This, __frame->pPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[236]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[236]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_ConnectedTo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_ConnectionMediaType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_ConnectionMediaType_Proxy(
    IPin* This,
    AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_ConnectionMediaType_Proxy );
    __frame->This = This;
    if (pmt) MIDL_memset( pmt, 0, sizeof( *pmt ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[40]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_ConnectionMediaType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[286], (void *)pmt );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_ConnectionMediaType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    AM_MEDIA_TYPE _W0;
    AM_MEDIA_TYPE * pmt;
};

static void __finally_IPin_ConnectionMediaType_Stub( struct __frame_IPin_ConnectionMediaType_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[286]);

}

void __RPC_STUB IPin_ConnectionMediaType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_ConnectionMediaType_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_ConnectionMediaType_Stub );
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[40]);


        __frame->pmt = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ConnectionMediaType(__frame->_This, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_ConnectionMediaType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_QueryPinInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_QueryPinInfo_Proxy(
    IPin* This,
    PIN_INFO *pInfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_QueryPinInfo_Proxy );
    __frame->This = This;
    if (pInfo) MIDL_memset( pInfo, 0, sizeof( *pInfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[314],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_QueryPinInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[334], (void *)pInfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_QueryPinInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    PIN_INFO _W0;
    PIN_INFO * pInfo;
};

static void __finally_IPin_QueryPinInfo_Stub( struct __frame_IPin_QueryPinInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[334]);

}

void __RPC_STUB IPin_QueryPinInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_QueryPinInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_QueryPinInfo_Stub );
    __frame->pInfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[46]);


        __frame->pInfo = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryPinInfo(__frame->_This, __frame->pInfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[314]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[314]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_QueryPinInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_QueryDirection_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_QueryDirection_Proxy(
    IPin* This,
    PIN_DIRECTION *pPinDir)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_QueryDirection_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pPinDir) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[52]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pPinDir,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[338],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_QueryDirection_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[338], (void *)pPinDir );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_QueryDirection_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    PIN_DIRECTION _W0;
    PIN_DIRECTION * pPinDir;
};

static void __finally_IPin_QueryDirection_Stub( struct __frame_IPin_QueryDirection_Stub *__frame )
{

}

void __RPC_STUB IPin_QueryDirection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_QueryDirection_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_QueryDirection_Stub );
    __frame->pPinDir = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[52]);


        __frame->pPinDir = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryDirection(__frame->_This, __frame->pPinDir);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 14;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pPinDir,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[338]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_QueryDirection_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_QueryId_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_QueryId_Proxy(
    IPin* This,
    LPWSTR *Id)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_QueryId_Proxy );
    __frame->This = This;
    if (Id) MIDL_memset( Id, 0, sizeof( *Id ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!Id) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&Id,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[342],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_QueryId_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[346], (void *)Id );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_QueryId_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    LPWSTR _W0;
    LPWSTR * Id;
};

static void __finally_IPin_QueryId_Stub( struct __frame_IPin_QueryId_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Id,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[342]);

}

void __RPC_STUB IPin_QueryId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_QueryId_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_QueryId_Stub );
    __frame->Id = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[58]);


        __frame->Id = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryId(__frame->_This, __frame->Id);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->Id,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[342]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->Id,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[342]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_QueryId_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_QueryAccept_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_QueryAccept_Proxy(
    IPin* This,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_QueryAccept_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[360]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[360]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[64]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_QueryAccept_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_QueryAccept_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IPin_QueryAccept_Stub( struct __frame_IPin_QueryAccept_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[396]);

}

void __RPC_STUB IPin_QueryAccept_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_QueryAccept_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_QueryAccept_Stub );
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[64]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[360],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryAccept(__frame->_This, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_QueryAccept_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_EnumMediaTypes_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_EnumMediaTypes_Proxy(
    IPin* This,
    IEnumMediaTypes **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_EnumMediaTypes_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[70]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[418],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_EnumMediaTypes_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[418], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_EnumMediaTypes_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    IEnumMediaTypes *_W0;
    IEnumMediaTypes ** ppEnum;
};

static void __finally_IPin_EnumMediaTypes_Stub( struct __frame_IPin_EnumMediaTypes_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[418]);

}

void __RPC_STUB IPin_EnumMediaTypes_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_EnumMediaTypes_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_EnumMediaTypes_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[70]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumMediaTypes(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[418]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[418]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_EnumMediaTypes_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_QueryInternalConnections_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_QueryInternalConnections_Proxy(
    IPin* This,
    IPin **apPin,
    ULONG *nPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_QueryInternalConnections_Proxy );
    __frame->This = This;
    if (apPin) MIDL_memset( apPin, 0, sizeof( *apPin ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!apPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!nPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *nPin;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&apPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[440],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *nPin = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_QueryInternalConnections_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[440], (void *)apPin );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[444], (void *)nPin );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_QueryInternalConnections_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    IPin *_W0;
    IPin ** apPin;
    ULONG * nPin;
};

static void __finally_IPin_QueryInternalConnections_Stub( struct __frame_IPin_QueryInternalConnections_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->apPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[440]);


}

void __RPC_STUB IPin_QueryInternalConnections_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_QueryInternalConnections_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_QueryInternalConnections_Stub );
    __frame->apPin = 0;
    __frame->nPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[76]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->nPin = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->apPin = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryInternalConnections(__frame->_This, __frame->apPin, __frame->nPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->apPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[440]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->apPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[440]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->nPin;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_QueryInternalConnections_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_EndOfStream_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_EndOfStream_Proxy(
    IPin* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_EndOfStream_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[86]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_EndOfStream_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_EndOfStream_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
};

static void __finally_IPin_EndOfStream_Stub( struct __frame_IPin_EndOfStream_Stub *__frame )
{
}

void __RPC_STUB IPin_EndOfStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_EndOfStream_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_EndOfStream_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[86]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EndOfStream(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_EndOfStream_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_BeginFlush_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_BeginFlush_Proxy(
    IPin* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_BeginFlush_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[88]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_BeginFlush_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_BeginFlush_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
};

static void __finally_IPin_BeginFlush_Stub( struct __frame_IPin_BeginFlush_Stub *__frame )
{
}

void __RPC_STUB IPin_BeginFlush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_BeginFlush_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_BeginFlush_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[88]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->BeginFlush(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_BeginFlush_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_EndFlush_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_EndFlush_Proxy(
    IPin* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_EndFlush_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[90]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_EndFlush_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_EndFlush_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
};

static void __finally_IPin_EndFlush_Stub( struct __frame_IPin_EndFlush_Stub *__frame )
{
}

void __RPC_STUB IPin_EndFlush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_EndFlush_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_EndFlush_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[90]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EndFlush(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_EndFlush_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IPin_NewSegment_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IPin_NewSegment_Proxy(
    IPin* This,
    REFERENCE_TIME tStart,
    REFERENCE_TIME tStop,
    double dRate)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IPin_NewSegment_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = tStart;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = tStop;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(double *)__frame->_StubMsg.Buffer = dRate;
            __frame->_StubMsg.Buffer += sizeof(double);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[92]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IPin_NewSegment_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IPin_NewSegment_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IPin * _This;
    HRESULT _RetVal;
    REFERENCE_TIME tStart;
    REFERENCE_TIME tStop;
    double dRate;
};

static void __finally_IPin_NewSegment_Stub( struct __frame_IPin_NewSegment_Stub *__frame )
{



}

void __RPC_STUB IPin_NewSegment_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IPin_NewSegment_Stub __f, * const __frame = &__f;

    __frame->_This = (IPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IPin_NewSegment_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[92]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tStart = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tStop = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(double) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dRate = *(double *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(double);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->NewSegment(__frame->_This, __frame->tStart, __frame->tStop, __frame->dRate);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IPin_NewSegment_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IPin_FormatStringOffsetTable[] =
{
    12,  /* IPin::Connect */
    22,  /* IPin::ReceiveConnection */
    32,  /* IPin::Disconnect */
    34,  /* IPin::ConnectedTo */
    40,  /* IPin::ConnectionMediaType */
    46,  /* IPin::QueryPinInfo */
    52,  /* IPin::QueryDirection */
    58,  /* IPin::QueryId */
    64,  /* IPin::QueryAccept */
    70,  /* IPin::EnumMediaTypes */
    76,  /* IPin::QueryInternalConnections */
    86,  /* IPin::EndOfStream */
    88,  /* IPin::BeginFlush */
    90,  /* IPin::EndFlush */
    92,  /* IPin::NewSegment */
};

static const CINTERFACE_PROXY_VTABLE(18) _IPinProxyVtbl =
{
    {
        &IID_IPin,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IPin_Connect_Proxy,
        IPin_ReceiveConnection_Proxy,
        IPin_Disconnect_Proxy,
        IPin_ConnectedTo_Proxy,
        IPin_ConnectionMediaType_Proxy,
        IPin_QueryPinInfo_Proxy,
        IPin_QueryDirection_Proxy,
        IPin_QueryId_Proxy,
        IPin_QueryAccept_Proxy,
        IPin_EnumMediaTypes_Proxy,
        IPin_QueryInternalConnections_Proxy,
        IPin_EndOfStream_Proxy,
        IPin_BeginFlush_Proxy,
        IPin_EndFlush_Proxy,
        IPin_NewSegment_Proxy,
    }
};

static const MIDL_SERVER_INFO IPin_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IPin_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IPin_table[] =
{
    IPin_Connect_Stub,
    IPin_ReceiveConnection_Stub,
    IPin_Disconnect_Stub,
    IPin_ConnectedTo_Stub,
    IPin_ConnectionMediaType_Stub,
    IPin_QueryPinInfo_Stub,
    IPin_QueryDirection_Stub,
    IPin_QueryId_Stub,
    IPin_QueryAccept_Stub,
    IPin_EnumMediaTypes_Stub,
    IPin_QueryInternalConnections_Stub,
    IPin_EndOfStream_Stub,
    IPin_BeginFlush_Stub,
    IPin_EndFlush_Stub,
    IPin_NewSegment_Stub
};

static const CInterfaceStubVtbl _IPinStubVtbl =
{
    {
        &IID_IPin,
        &IPin_ServerInfo,
        18,
        &IPin_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumPins interface
 */
static void __finally_IEnumPins_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumPins_Next_Proxy(
    IEnumPins* This,
    ULONG cPins,
    IPin **ppPins,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumPins_Next_Proxy );
    __frame->This = This;
    if (ppPins) MIDL_memset( ppPins, 0, sizeof( *ppPins ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppPins) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPins;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[100]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppPins,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[466],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumPins_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)cPins;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[484], (void *)ppPins );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[488], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumPins_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumPins * _This;
    HRESULT _RetVal;
    ULONG cPins;
    IPin ** ppPins;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumPins_Next_Stub( struct __frame_IEnumPins_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPins;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppPins,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[484]);


}

void __RPC_STUB IEnumPins_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumPins_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumPins*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumPins_Next_Stub );
    __frame->ppPins = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[100]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPins = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppPins = NdrAllocate(&__frame->_StubMsg, __frame->cPins * 8);
        memset(__frame->ppPins, 0, __frame->cPins * 8);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->cPins, __frame->ppPins, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPins;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPins,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[466]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPins;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPins,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[466]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumPins_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumPins_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumPins_Skip_Proxy(
    IEnumPins* This,
    ULONG cPins)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumPins_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPins;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[112]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumPins_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumPins_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumPins * _This;
    HRESULT _RetVal;
    ULONG cPins;
};

static void __finally_IEnumPins_Skip_Stub( struct __frame_IEnumPins_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumPins_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumPins_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumPins*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumPins_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[112]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPins = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->cPins);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumPins_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumPins_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumPins_Reset_Proxy(
    IEnumPins* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumPins_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[116]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumPins_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumPins_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumPins * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumPins_Reset_Stub( struct __frame_IEnumPins_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumPins_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumPins_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumPins*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumPins_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[116]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumPins_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumPins_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumPins_Clone_Proxy(
    IEnumPins* This,
    IEnumPins **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumPins_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[510],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumPins_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[510], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumPins_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumPins * _This;
    HRESULT _RetVal;
    IEnumPins *_W0;
    IEnumPins ** ppEnum;
};

static void __finally_IEnumPins_Clone_Stub( struct __frame_IEnumPins_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[510]);

}

void __RPC_STUB IEnumPins_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumPins_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumPins*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumPins_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[510]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[510]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumPins_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumPins_FormatStringOffsetTable[] =
{
    100,  /* IEnumPins::Next */
    112,  /* IEnumPins::Skip */
    116,  /* IEnumPins::Reset */
    118,  /* IEnumPins::Clone */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumPinsProxyVtbl =
{
    {
        &IID_IEnumPins,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumPins_Next_Proxy,
        IEnumPins_Skip_Proxy,
        IEnumPins_Reset_Proxy,
        IEnumPins_Clone_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumPins_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumPins_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumPins_table[] =
{
    IEnumPins_Next_Stub,
    IEnumPins_Skip_Stub,
    IEnumPins_Reset_Stub,
    IEnumPins_Clone_Stub
};

static const CInterfaceStubVtbl _IEnumPinsStubVtbl =
{
    {
        &IID_IEnumPins,
        &IEnumPins_ServerInfo,
        7,
        &IEnumPins_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumMediaTypes interface
 */
static void __finally_IEnumMediaTypes_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumMediaTypes_Next_Proxy(
    IEnumMediaTypes* This,
    ULONG cMediaTypes,
    AM_MEDIA_TYPE **ppMediaTypes,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumMediaTypes_Next_Proxy );
    __frame->This = This;
    if (ppMediaTypes) MIDL_memset( ppMediaTypes, 0, sizeof( *ppMediaTypes ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppMediaTypes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cMediaTypes;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[124]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppMediaTypes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[514],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumMediaTypes_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)cMediaTypes;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[532], (void *)ppMediaTypes );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[536], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumMediaTypes_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumMediaTypes * _This;
    HRESULT _RetVal;
    ULONG cMediaTypes;
    AM_MEDIA_TYPE ** ppMediaTypes;
    ULONG _W0;
    ULONG * pcFetched;
};

static void __finally_IEnumMediaTypes_Next_Stub( struct __frame_IEnumMediaTypes_Next_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cMediaTypes;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppMediaTypes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532]);


}

void __RPC_STUB IEnumMediaTypes_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumMediaTypes_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumMediaTypes*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumMediaTypes_Next_Stub );
    __frame->ppMediaTypes = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[124]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cMediaTypes = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppMediaTypes = NdrAllocate(&__frame->_StubMsg, __frame->cMediaTypes * 8);
        memset(__frame->ppMediaTypes, 0, __frame->cMediaTypes * 8);
        __frame->pcFetched = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->cMediaTypes, __frame->ppMediaTypes, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cMediaTypes;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppMediaTypes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[514]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cMediaTypes;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppMediaTypes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[514]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumMediaTypes_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumMediaTypes_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumMediaTypes_Skip_Proxy(
    IEnumMediaTypes* This,
    ULONG cMediaTypes)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumMediaTypes_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cMediaTypes;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[136]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumMediaTypes_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumMediaTypes_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumMediaTypes * _This;
    HRESULT _RetVal;
    ULONG cMediaTypes;
};

static void __finally_IEnumMediaTypes_Skip_Stub( struct __frame_IEnumMediaTypes_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumMediaTypes_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumMediaTypes_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumMediaTypes*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumMediaTypes_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[136]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cMediaTypes = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->cMediaTypes);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumMediaTypes_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumMediaTypes_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumMediaTypes_Reset_Proxy(
    IEnumMediaTypes* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumMediaTypes_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[140]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumMediaTypes_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumMediaTypes_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumMediaTypes * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumMediaTypes_Reset_Stub( struct __frame_IEnumMediaTypes_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumMediaTypes_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumMediaTypes_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumMediaTypes*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumMediaTypes_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[140]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumMediaTypes_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumMediaTypes_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumMediaTypes_Clone_Proxy(
    IEnumMediaTypes* This,
    IEnumMediaTypes **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumMediaTypes_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[142]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[558],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumMediaTypes_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[558], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumMediaTypes_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumMediaTypes * _This;
    HRESULT _RetVal;
    IEnumMediaTypes *_W0;
    IEnumMediaTypes ** ppEnum;
};

static void __finally_IEnumMediaTypes_Clone_Stub( struct __frame_IEnumMediaTypes_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[558]);

}

void __RPC_STUB IEnumMediaTypes_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumMediaTypes_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumMediaTypes*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumMediaTypes_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[142]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[558]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[558]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumMediaTypes_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumMediaTypes_FormatStringOffsetTable[] =
{
    124,  /* IEnumMediaTypes::Next */
    136,  /* IEnumMediaTypes::Skip */
    140,  /* IEnumMediaTypes::Reset */
    142,  /* IEnumMediaTypes::Clone */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumMediaTypesProxyVtbl =
{
    {
        &IID_IEnumMediaTypes,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumMediaTypes_Next_Proxy,
        IEnumMediaTypes_Skip_Proxy,
        IEnumMediaTypes_Reset_Proxy,
        IEnumMediaTypes_Clone_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumMediaTypes_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumMediaTypes_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumMediaTypes_table[] =
{
    IEnumMediaTypes_Next_Stub,
    IEnumMediaTypes_Skip_Stub,
    IEnumMediaTypes_Reset_Stub,
    IEnumMediaTypes_Clone_Stub
};

static const CInterfaceStubVtbl _IEnumMediaTypesStubVtbl =
{
    {
        &IID_IEnumMediaTypes,
        &IEnumMediaTypes_ServerInfo,
        7,
        &IEnumMediaTypes_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFilterGraph interface
 */
static void __finally_IFilterGraph_AddFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_AddFilter_Proxy(
    IFilterGraph* This,
    IBaseFilter *pFilter,
    LPCWSTR pName)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_AddFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[562]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[582]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[562]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[582]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[148]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_AddFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_AddFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IBaseFilter * pFilter;
    LPCWSTR pName;
};

static void __finally_IFilterGraph_AddFilter_Stub( struct __frame_IFilterGraph_AddFilter_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[562]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[580]);

}

void __RPC_STUB IFilterGraph_AddFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_AddFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_AddFilter_Stub );
    __frame->pFilter = 0;
    __frame->pName = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[148]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[562],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[582],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AddFilter(__frame->_This, __frame->pFilter, __frame->pName);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_AddFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_RemoveFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_RemoveFilter_Proxy(
    IFilterGraph* This,
    IBaseFilter *pFilter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_RemoveFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[584]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[584]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[158]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_RemoveFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_RemoveFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IBaseFilter * pFilter;
};

static void __finally_IFilterGraph_RemoveFilter_Stub( struct __frame_IFilterGraph_RemoveFilter_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[584]);

}

void __RPC_STUB IFilterGraph_RemoveFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_RemoveFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_RemoveFilter_Stub );
    __frame->pFilter = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[158]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[584],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RemoveFilter(__frame->_This, __frame->pFilter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_RemoveFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_EnumFilters_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_EnumFilters_Proxy(
    IFilterGraph* This,
    IEnumFilters **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_EnumFilters_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[164]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[620],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_EnumFilters_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[620], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_EnumFilters_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IEnumFilters *_W0;
    IEnumFilters ** ppEnum;
};

static void __finally_IFilterGraph_EnumFilters_Stub( struct __frame_IFilterGraph_EnumFilters_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[620]);

}

void __RPC_STUB IFilterGraph_EnumFilters_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_EnumFilters_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_EnumFilters_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[164]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumFilters(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[620]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[620]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_EnumFilters_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_FindFilterByName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_FindFilterByName_Proxy(
    IFilterGraph* This,
    LPCWSTR pName,
    IBaseFilter **ppFilter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_FindFilterByName_Proxy );
    __frame->This = This;
    if (ppFilter) MIDL_memset( ppFilter, 0, sizeof( *ppFilter ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[626]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[626]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[170]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[646],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_FindFilterByName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[646], (void *)ppFilter );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_FindFilterByName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    LPCWSTR pName;
    IBaseFilter *_W0;
    IBaseFilter ** ppFilter;
};

static void __finally_IFilterGraph_FindFilterByName_Stub( struct __frame_IFilterGraph_FindFilterByName_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[624]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[646]);

}

void __RPC_STUB IFilterGraph_FindFilterByName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_FindFilterByName_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_FindFilterByName_Stub );
    __frame->pName = 0;
    __frame->ppFilter = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[170]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[626],
            0);


        __frame->ppFilter = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->FindFilterByName(__frame->_This, __frame->pName, __frame->ppFilter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[646]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[646]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_FindFilterByName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_ConnectDirect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_ConnectDirect_Proxy(
    IFilterGraph* This,
    IPin *ppinOut,
    IPin *ppinIn,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_ConnectDirect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[650]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppinIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[668]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[732]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[650]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppinIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[668]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[732]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[180]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_ConnectDirect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_ConnectDirect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IPin * ppinOut;
    IPin * ppinIn;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IFilterGraph_ConnectDirect_Stub( struct __frame_IFilterGraph_ConnectDirect_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppinOut,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[650]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppinIn,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[668]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[732]);

}

void __RPC_STUB IFilterGraph_ConnectDirect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_ConnectDirect_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_ConnectDirect_Stub );
    __frame->ppinOut = 0;
    __frame->ppinIn = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[180]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppinOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[650],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppinIn,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[668],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[732],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ConnectDirect(__frame->_This, __frame->ppinOut, __frame->ppinIn, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_ConnectDirect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_Reconnect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_Reconnect_Proxy(
    IFilterGraph* This,
    IPin *ppin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_Reconnect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[736]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[736]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[194]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_Reconnect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_Reconnect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IPin * ppin;
};

static void __finally_IFilterGraph_Reconnect_Stub( struct __frame_IFilterGraph_Reconnect_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[736]);

}

void __RPC_STUB IFilterGraph_Reconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_Reconnect_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_Reconnect_Stub );
    __frame->ppin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[194]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[736],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reconnect(__frame->_This, __frame->ppin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_Reconnect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_Disconnect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_Disconnect_Proxy(
    IFilterGraph* This,
    IPin *ppin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_Disconnect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[754]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[754]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[200]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_Disconnect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_Disconnect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
    IPin * ppin;
};

static void __finally_IFilterGraph_Disconnect_Stub( struct __frame_IFilterGraph_Disconnect_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[754]);

}

void __RPC_STUB IFilterGraph_Disconnect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_Disconnect_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_Disconnect_Stub );
    __frame->ppin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[200]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[754],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Disconnect(__frame->_This, __frame->ppin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_Disconnect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph_SetDefaultSyncSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph_SetDefaultSyncSource_Proxy(
    IFilterGraph* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph_SetDefaultSyncSource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[206]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph_SetDefaultSyncSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph_SetDefaultSyncSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph * _This;
    HRESULT _RetVal;
};

static void __finally_IFilterGraph_SetDefaultSyncSource_Stub( struct __frame_IFilterGraph_SetDefaultSyncSource_Stub *__frame )
{
}

void __RPC_STUB IFilterGraph_SetDefaultSyncSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph_SetDefaultSyncSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph_SetDefaultSyncSource_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[206]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetDefaultSyncSource(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph_SetDefaultSyncSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFilterGraph_FormatStringOffsetTable[] =
{
    148,  /* IFilterGraph::AddFilter */
    158,  /* IFilterGraph::RemoveFilter */
    164,  /* IFilterGraph::EnumFilters */
    170,  /* IFilterGraph::FindFilterByName */
    180,  /* IFilterGraph::ConnectDirect */
    194,  /* IFilterGraph::Reconnect */
    200,  /* IFilterGraph::Disconnect */
    206,  /* IFilterGraph::SetDefaultSyncSource */
};

static const CINTERFACE_PROXY_VTABLE(11) _IFilterGraphProxyVtbl =
{
    {
        &IID_IFilterGraph,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterGraph_AddFilter_Proxy,
        IFilterGraph_RemoveFilter_Proxy,
        IFilterGraph_EnumFilters_Proxy,
        IFilterGraph_FindFilterByName_Proxy,
        IFilterGraph_ConnectDirect_Proxy,
        IFilterGraph_Reconnect_Proxy,
        IFilterGraph_Disconnect_Proxy,
        IFilterGraph_SetDefaultSyncSource_Proxy,
    }
};

static const MIDL_SERVER_INFO IFilterGraph_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFilterGraph_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFilterGraph_table[] =
{
    IFilterGraph_AddFilter_Stub,
    IFilterGraph_RemoveFilter_Stub,
    IFilterGraph_EnumFilters_Stub,
    IFilterGraph_FindFilterByName_Stub,
    IFilterGraph_ConnectDirect_Stub,
    IFilterGraph_Reconnect_Stub,
    IFilterGraph_Disconnect_Stub,
    IFilterGraph_SetDefaultSyncSource_Stub
};

static const CInterfaceStubVtbl _IFilterGraphStubVtbl =
{
    {
        &IID_IFilterGraph,
        &IFilterGraph_ServerInfo,
        11,
        &IFilterGraph_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumFilters interface
 */
static void __finally_IEnumFilters_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumFilters_Next_Proxy(
    IEnumFilters* This,
    ULONG cFilters,
    IBaseFilter **ppFilter,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumFilters_Next_Proxy );
    __frame->This = This;
    if (ppFilter) MIDL_memset( ppFilter, 0, sizeof( *ppFilter ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cFilters;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[208]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[790],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumFilters_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[790], (void *)ppFilter );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[794], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumFilters_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumFilters * _This;
    HRESULT _RetVal;
    ULONG cFilters;
    IBaseFilter *_W0;
    IBaseFilter ** ppFilter;
    ULONG _W1;
    ULONG * pcFetched;
};

static void __finally_IEnumFilters_Next_Stub( struct __frame_IEnumFilters_Next_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[790]);


}

void __RPC_STUB IEnumFilters_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumFilters_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumFilters_Next_Stub );
    __frame->ppFilter = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[208]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cFilters = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppFilter = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pcFetched = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->cFilters, __frame->ppFilter, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[790]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[790]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumFilters_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumFilters_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumFilters_Skip_Proxy(
    IEnumFilters* This,
    ULONG cFilters)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumFilters_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cFilters;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[220]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumFilters_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumFilters_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumFilters * _This;
    HRESULT _RetVal;
    ULONG cFilters;
};

static void __finally_IEnumFilters_Skip_Stub( struct __frame_IEnumFilters_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumFilters_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumFilters_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumFilters_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[220]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cFilters = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->cFilters);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumFilters_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumFilters_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumFilters_Reset_Proxy(
    IEnumFilters* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumFilters_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[224]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumFilters_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumFilters_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumFilters * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumFilters_Reset_Stub( struct __frame_IEnumFilters_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumFilters_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumFilters_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumFilters_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[224]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumFilters_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumFilters_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumFilters_Clone_Proxy(
    IEnumFilters* This,
    IEnumFilters **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumFilters_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[226]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[816],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumFilters_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[816], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumFilters_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumFilters * _This;
    HRESULT _RetVal;
    IEnumFilters *_W0;
    IEnumFilters ** ppEnum;
};

static void __finally_IEnumFilters_Clone_Stub( struct __frame_IEnumFilters_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[816]);

}

void __RPC_STUB IEnumFilters_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumFilters_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumFilters_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[226]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[816]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[816]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumFilters_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumFilters_FormatStringOffsetTable[] =
{
    208,  /* IEnumFilters::Next */
    220,  /* IEnumFilters::Skip */
    224,  /* IEnumFilters::Reset */
    226,  /* IEnumFilters::Clone */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumFiltersProxyVtbl =
{
    {
        &IID_IEnumFilters,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumFilters_Next_Proxy,
        IEnumFilters_Skip_Proxy,
        IEnumFilters_Reset_Proxy,
        IEnumFilters_Clone_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumFilters_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumFilters_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumFilters_table[] =
{
    IEnumFilters_Next_Stub,
    IEnumFilters_Skip_Stub,
    IEnumFilters_Reset_Stub,
    IEnumFilters_Clone_Stub
};

static const CInterfaceStubVtbl _IEnumFiltersStubVtbl =
{
    {
        &IID_IEnumFilters,
        &IEnumFilters_ServerInfo,
        7,
        &IEnumFilters_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMediaFilter interface
 */
static void __finally_IMediaFilter_Stop_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_Stop_Proxy(
    IMediaFilter* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_Stop_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[232]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_Stop_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_Stop_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
};

static void __finally_IMediaFilter_Stop_Stub( struct __frame_IMediaFilter_Stop_Stub *__frame )
{
}

void __RPC_STUB IMediaFilter_Stop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_Stop_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_Stop_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[232]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Stop(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_Stop_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaFilter_Pause_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_Pause_Proxy(
    IMediaFilter* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_Pause_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[234]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_Pause_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_Pause_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
};

static void __finally_IMediaFilter_Pause_Stub( struct __frame_IMediaFilter_Pause_Stub *__frame )
{
}

void __RPC_STUB IMediaFilter_Pause_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_Pause_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_Pause_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[234]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Pause(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_Pause_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaFilter_Run_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_Run_Proxy(
    IMediaFilter* This,
    REFERENCE_TIME tStart)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_Run_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = tStart;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[236]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_Run_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_Run_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
    REFERENCE_TIME tStart;
};

static void __finally_IMediaFilter_Run_Stub( struct __frame_IMediaFilter_Run_Stub *__frame )
{

}

void __RPC_STUB IMediaFilter_Run_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_Run_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_Run_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[236]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->tStart = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Run(__frame->_This, __frame->tStart);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_Run_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaFilter_GetState_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_GetState_Proxy(
    IMediaFilter* This,
    DWORD dwMilliSecsTimeout,
    FILTER_STATE *State)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_GetState_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!State) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwMilliSecsTimeout;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[240]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&State,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[820],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_GetState_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[820], (void *)State );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_GetState_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
    DWORD dwMilliSecsTimeout;
    FILTER_STATE _W0;
    FILTER_STATE * State;
};

static void __finally_IMediaFilter_GetState_Stub( struct __frame_IMediaFilter_GetState_Stub *__frame )
{


}

void __RPC_STUB IMediaFilter_GetState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_GetState_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_GetState_Stub );
    __frame->State = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[240]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwMilliSecsTimeout = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->State = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetState(__frame->_This, __frame->dwMilliSecsTimeout, __frame->State);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 14;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->State,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[820]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_GetState_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaFilter_SetSyncSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_SetSyncSource_Proxy(
    IMediaFilter* This,
    IReferenceClock *pClock)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_SetSyncSource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pClock,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[824]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pClock,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[824]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[248]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_SetSyncSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_SetSyncSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
    IReferenceClock * pClock;
};

static void __finally_IMediaFilter_SetSyncSource_Stub( struct __frame_IMediaFilter_SetSyncSource_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pClock,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[824]);

}

void __RPC_STUB IMediaFilter_SetSyncSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_SetSyncSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_SetSyncSource_Stub );
    __frame->pClock = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[248]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pClock,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[824],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetSyncSource(__frame->_This, __frame->pClock);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_SetSyncSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaFilter_GetSyncSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaFilter_GetSyncSource_Proxy(
    IMediaFilter* This,
    IReferenceClock **pClock)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaFilter_GetSyncSource_Proxy );
    __frame->This = This;
    if (pClock) MIDL_memset( pClock, 0, sizeof( *pClock ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pClock) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[254]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pClock,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[860],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaFilter_GetSyncSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[860], (void *)pClock );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaFilter_GetSyncSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaFilter * _This;
    HRESULT _RetVal;
    IReferenceClock *_W0;
    IReferenceClock ** pClock;
};

static void __finally_IMediaFilter_GetSyncSource_Stub( struct __frame_IMediaFilter_GetSyncSource_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pClock,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[860]);

}

void __RPC_STUB IMediaFilter_GetSyncSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaFilter_GetSyncSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaFilter_GetSyncSource_Stub );
    __frame->pClock = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[254]);


        __frame->pClock = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSyncSource(__frame->_This, __frame->pClock);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pClock,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[860]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pClock,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[860]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaFilter_GetSyncSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMediaFilter_FormatStringOffsetTable[] =
{
    (unsigned short)-1,  /* IPersist::GetClassID */
    232,  /* IMediaFilter::Stop */
    234,  /* IMediaFilter::Pause */
    236,  /* IMediaFilter::Run */
    240,  /* IMediaFilter::GetState */
    248,  /* IMediaFilter::SetSyncSource */
    254,  /* IMediaFilter::GetSyncSource */
};

static CINTERFACE_PROXY_VTABLE(10) _IMediaFilterProxyVtbl =
{
    {
        &IID_IMediaFilter,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        0,  /* IPersist::GetClassID */
        IMediaFilter_Stop_Proxy,
        IMediaFilter_Pause_Proxy,
        IMediaFilter_Run_Proxy,
        IMediaFilter_GetState_Proxy,
        IMediaFilter_SetSyncSource_Proxy,
        IMediaFilter_GetSyncSource_Proxy,
    }
};

static const MIDL_SERVER_INFO IMediaFilter_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMediaFilter_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMediaFilter_table[] =
{
    STUB_FORWARDING_FUNCTION,
    IMediaFilter_Stop_Stub,
    IMediaFilter_Pause_Stub,
    IMediaFilter_Run_Stub,
    IMediaFilter_GetState_Stub,
    IMediaFilter_SetSyncSource_Stub,
    IMediaFilter_GetSyncSource_Stub
};

static CInterfaceStubVtbl _IMediaFilterStubVtbl =
{
    {
        &IID_IMediaFilter,
        &IMediaFilter_ServerInfo,
        10,
        &IMediaFilter_table[-3]
    },
    {
        CStdStubBuffer_DELEGATING_METHODS
    }
};

/*****************************************************************************
 * IBaseFilter interface
 */
static void __finally_IBaseFilter_EnumPins_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBaseFilter_EnumPins_Proxy(
    IBaseFilter* This,
    IEnumPins **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBaseFilter_EnumPins_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[260]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[882],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBaseFilter_EnumPins_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[882], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBaseFilter_EnumPins_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBaseFilter * _This;
    HRESULT _RetVal;
    IEnumPins *_W0;
    IEnumPins ** ppEnum;
};

static void __finally_IBaseFilter_EnumPins_Stub( struct __frame_IBaseFilter_EnumPins_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[882]);

}

void __RPC_STUB IBaseFilter_EnumPins_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBaseFilter_EnumPins_Stub __f, * const __frame = &__f;

    __frame->_This = (IBaseFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBaseFilter_EnumPins_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[260]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumPins(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[882]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[882]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBaseFilter_EnumPins_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IBaseFilter_FindPin_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBaseFilter_FindPin_Proxy(
    IBaseFilter* This,
    LPCWSTR Id,
    IPin **ppPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBaseFilter_FindPin_Proxy );
    __frame->This = This;
    if (ppPin) MIDL_memset( ppPin, 0, sizeof( *ppPin ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!Id) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Id,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[888]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Id,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[888]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[266]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[908],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBaseFilter_FindPin_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[908], (void *)ppPin );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBaseFilter_FindPin_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBaseFilter * _This;
    HRESULT _RetVal;
    LPCWSTR Id;
    IPin *_W0;
    IPin ** ppPin;
};

static void __finally_IBaseFilter_FindPin_Stub( struct __frame_IBaseFilter_FindPin_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Id,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[886]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[908]);

}

void __RPC_STUB IBaseFilter_FindPin_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBaseFilter_FindPin_Stub __f, * const __frame = &__f;

    __frame->_This = (IBaseFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBaseFilter_FindPin_Stub );
    __frame->Id = 0;
    __frame->ppPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[266]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Id,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[888],
            0);


        __frame->ppPin = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->FindPin(__frame->_This, __frame->Id, __frame->ppPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[908]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[908]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBaseFilter_FindPin_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IBaseFilter_QueryFilterInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBaseFilter_QueryFilterInfo_Proxy(
    IBaseFilter* This,
    FILTER_INFO *pInfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBaseFilter_QueryFilterInfo_Proxy );
    __frame->This = This;
    if (pInfo) MIDL_memset( pInfo, 0, sizeof( *pInfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!pInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[276]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[936],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBaseFilter_QueryFilterInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[954], (void *)pInfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBaseFilter_QueryFilterInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBaseFilter * _This;
    HRESULT _RetVal;
    FILTER_INFO _W0;
    FILTER_INFO * pInfo;
};

static void __finally_IBaseFilter_QueryFilterInfo_Stub( struct __frame_IBaseFilter_QueryFilterInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[954]);

}

void __RPC_STUB IBaseFilter_QueryFilterInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBaseFilter_QueryFilterInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IBaseFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBaseFilter_QueryFilterInfo_Stub );
    __frame->pInfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[276]);


        __frame->pInfo = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryFilterInfo(__frame->_This, __frame->pInfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[936]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[936]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBaseFilter_QueryFilterInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IBaseFilter_JoinFilterGraph_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBaseFilter_JoinFilterGraph_Proxy(
    IBaseFilter* This,
    IFilterGraph *pGraph,
    LPCWSTR pName)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBaseFilter_JoinFilterGraph_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!pName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pGraph,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[958]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[978]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pGraph,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[958]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[978]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBaseFilter_JoinFilterGraph_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBaseFilter_JoinFilterGraph_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBaseFilter * _This;
    HRESULT _RetVal;
    IFilterGraph * pGraph;
    LPCWSTR pName;
};

static void __finally_IBaseFilter_JoinFilterGraph_Stub( struct __frame_IBaseFilter_JoinFilterGraph_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pGraph,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[958]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[976]);

}

void __RPC_STUB IBaseFilter_JoinFilterGraph_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBaseFilter_JoinFilterGraph_Stub __f, * const __frame = &__f;

    __frame->_This = (IBaseFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBaseFilter_JoinFilterGraph_Stub );
    __frame->pGraph = 0;
    __frame->pName = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pGraph,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[958],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[978],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->JoinFilterGraph(__frame->_This, __frame->pGraph, __frame->pName);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBaseFilter_JoinFilterGraph_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IBaseFilter_QueryVendorInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBaseFilter_QueryVendorInfo_Proxy(
    IBaseFilter* This,
    LPWSTR *pVendorInfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBaseFilter_QueryVendorInfo_Proxy );
    __frame->This = This;
    if (pVendorInfo) MIDL_memset( pVendorInfo, 0, sizeof( *pVendorInfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!pVendorInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[292]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pVendorInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[980],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBaseFilter_QueryVendorInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[984], (void *)pVendorInfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBaseFilter_QueryVendorInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBaseFilter * _This;
    HRESULT _RetVal;
    LPWSTR _W0;
    LPWSTR * pVendorInfo;
};

static void __finally_IBaseFilter_QueryVendorInfo_Stub( struct __frame_IBaseFilter_QueryVendorInfo_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pVendorInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[980]);

}

void __RPC_STUB IBaseFilter_QueryVendorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBaseFilter_QueryVendorInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IBaseFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBaseFilter_QueryVendorInfo_Stub );
    __frame->pVendorInfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[292]);


        __frame->pVendorInfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryVendorInfo(__frame->_This, __frame->pVendorInfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pVendorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[980]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pVendorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[980]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBaseFilter_QueryVendorInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IBaseFilter_FormatStringOffsetTable[] =
{
    (unsigned short)-1,  /* IPersist::GetClassID */
    232,  /* IMediaFilter::Stop */
    234,  /* IMediaFilter::Pause */
    236,  /* IMediaFilter::Run */
    240,  /* IMediaFilter::GetState */
    248,  /* IMediaFilter::SetSyncSource */
    254,  /* IMediaFilter::GetSyncSource */
    260,  /* IBaseFilter::EnumPins */
    266,  /* IBaseFilter::FindPin */
    276,  /* IBaseFilter::QueryFilterInfo */
    282,  /* IBaseFilter::JoinFilterGraph */
    292,  /* IBaseFilter::QueryVendorInfo */
};

static CINTERFACE_PROXY_VTABLE(15) _IBaseFilterProxyVtbl =
{
    {
        &IID_IBaseFilter,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        0,  /* IPersist::GetClassID */
        IMediaFilter_Stop_Proxy,
        IMediaFilter_Pause_Proxy,
        IMediaFilter_Run_Proxy,
        IMediaFilter_GetState_Proxy,
        IMediaFilter_SetSyncSource_Proxy,
        IMediaFilter_GetSyncSource_Proxy,
        IBaseFilter_EnumPins_Proxy,
        IBaseFilter_FindPin_Proxy,
        IBaseFilter_QueryFilterInfo_Proxy,
        IBaseFilter_JoinFilterGraph_Proxy,
        IBaseFilter_QueryVendorInfo_Proxy,
    }
};

static const MIDL_SERVER_INFO IBaseFilter_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IBaseFilter_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IBaseFilter_table[] =
{
    STUB_FORWARDING_FUNCTION,
    IMediaFilter_Stop_Stub,
    IMediaFilter_Pause_Stub,
    IMediaFilter_Run_Stub,
    IMediaFilter_GetState_Stub,
    IMediaFilter_SetSyncSource_Stub,
    IMediaFilter_GetSyncSource_Stub,
    IBaseFilter_EnumPins_Stub,
    IBaseFilter_FindPin_Stub,
    IBaseFilter_QueryFilterInfo_Stub,
    IBaseFilter_JoinFilterGraph_Stub,
    IBaseFilter_QueryVendorInfo_Stub
};

static CInterfaceStubVtbl _IBaseFilterStubVtbl =
{
    {
        &IID_IBaseFilter,
        &IBaseFilter_ServerInfo,
        15,
        &IBaseFilter_table[-3]
    },
    {
        CStdStubBuffer_DELEGATING_METHODS
    }
};

/*****************************************************************************
 * IReferenceClock interface
 */
static void __finally_IReferenceClock_GetTime_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IReferenceClock_GetTime_Proxy(
    IReferenceClock* This,
    REFERENCE_TIME *pTime)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IReferenceClock_GetTime_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pTime) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[298]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pTime = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IReferenceClock_GetTime_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[988], (void *)pTime );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IReferenceClock_GetTime_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IReferenceClock * _This;
    HRESULT _RetVal;
    REFERENCE_TIME _W0;
    REFERENCE_TIME * pTime;
};

static void __finally_IReferenceClock_GetTime_Stub( struct __frame_IReferenceClock_GetTime_Stub *__frame )
{

}

void __RPC_STUB IReferenceClock_GetTime_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IReferenceClock_GetTime_Stub __f, * const __frame = &__f;

    __frame->_This = (IReferenceClock*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IReferenceClock_GetTime_Stub );
    __frame->pTime = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[298]);


        __frame->pTime = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetTime(__frame->_This, __frame->pTime);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *__frame->pTime;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IReferenceClock_GetTime_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IReferenceClock_AdviseTime_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IReferenceClock_AdviseTime_Proxy(
    IReferenceClock* This,
    REFERENCE_TIME baseTime,
    REFERENCE_TIME streamTime,
    HEVENT hEvent,
    DWORD_PTR *pdwAdviseCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IReferenceClock_AdviseTime_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pdwAdviseCookie) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = baseTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = streamTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hEvent,
                0xb9 /* FC_UINT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[304]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwAdviseCookie = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IReferenceClock_AdviseTime_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[992], (void *)pdwAdviseCookie );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IReferenceClock_AdviseTime_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IReferenceClock * _This;
    HRESULT _RetVal;
    REFERENCE_TIME baseTime;
    REFERENCE_TIME streamTime;
    HEVENT hEvent;
    DWORD_PTR _W0;
    DWORD_PTR * pdwAdviseCookie;
};

static void __finally_IReferenceClock_AdviseTime_Stub( struct __frame_IReferenceClock_AdviseTime_Stub *__frame )
{




}

void __RPC_STUB IReferenceClock_AdviseTime_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IReferenceClock_AdviseTime_Stub __f, * const __frame = &__f;

    __frame->_This = (IReferenceClock*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IReferenceClock_AdviseTime_Stub );
    __frame->pdwAdviseCookie = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[304]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->baseTime = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->streamTime = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hEvent,
            0xb9 /* FC_UINT3264 */);


        __frame->pdwAdviseCookie = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdviseTime(__frame->_This, __frame->baseTime, __frame->streamTime, __frame->hEvent, __frame->pdwAdviseCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD_PTR *)__frame->_StubMsg.Buffer = *__frame->pdwAdviseCookie;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IReferenceClock_AdviseTime_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IReferenceClock_AdvisePeriodic_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IReferenceClock_AdvisePeriodic_Proxy(
    IReferenceClock* This,
    REFERENCE_TIME startTime,
    REFERENCE_TIME periodTime,
    HSEMAPHORE hSemaphore,
    DWORD_PTR *pdwAdviseCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IReferenceClock_AdvisePeriodic_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pdwAdviseCookie) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = startTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = periodTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hSemaphore,
                0xb9 /* FC_UINT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[316]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwAdviseCookie = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IReferenceClock_AdvisePeriodic_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[996], (void *)pdwAdviseCookie );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IReferenceClock_AdvisePeriodic_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IReferenceClock * _This;
    HRESULT _RetVal;
    REFERENCE_TIME startTime;
    REFERENCE_TIME periodTime;
    HSEMAPHORE hSemaphore;
    DWORD_PTR _W0;
    DWORD_PTR * pdwAdviseCookie;
};

static void __finally_IReferenceClock_AdvisePeriodic_Stub( struct __frame_IReferenceClock_AdvisePeriodic_Stub *__frame )
{




}

void __RPC_STUB IReferenceClock_AdvisePeriodic_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IReferenceClock_AdvisePeriodic_Stub __f, * const __frame = &__f;

    __frame->_This = (IReferenceClock*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IReferenceClock_AdvisePeriodic_Stub );
    __frame->pdwAdviseCookie = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[316]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->startTime = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->periodTime = *(REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hSemaphore,
            0xb9 /* FC_UINT3264 */);


        __frame->pdwAdviseCookie = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AdvisePeriodic(__frame->_This, __frame->startTime, __frame->periodTime, __frame->hSemaphore, __frame->pdwAdviseCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD_PTR *)__frame->_StubMsg.Buffer = *__frame->pdwAdviseCookie;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IReferenceClock_AdvisePeriodic_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IReferenceClock_Unadvise_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IReferenceClock_Unadvise_Proxy(
    IReferenceClock* This,
    DWORD_PTR dwAdviseCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IReferenceClock_Unadvise_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&dwAdviseCookie,
                0xb9 /* FC_UINT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[328]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IReferenceClock_Unadvise_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IReferenceClock_Unadvise_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IReferenceClock * _This;
    HRESULT _RetVal;
    DWORD_PTR dwAdviseCookie;
};

static void __finally_IReferenceClock_Unadvise_Stub( struct __frame_IReferenceClock_Unadvise_Stub *__frame )
{

}

void __RPC_STUB IReferenceClock_Unadvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IReferenceClock_Unadvise_Stub __f, * const __frame = &__f;

    __frame->_This = (IReferenceClock*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IReferenceClock_Unadvise_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[328]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->dwAdviseCookie,
            0xb9 /* FC_UINT3264 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Unadvise(__frame->_This, __frame->dwAdviseCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IReferenceClock_Unadvise_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IReferenceClock_FormatStringOffsetTable[] =
{
    298,  /* IReferenceClock::GetTime */
    304,  /* IReferenceClock::AdviseTime */
    316,  /* IReferenceClock::AdvisePeriodic */
    328,  /* IReferenceClock::Unadvise */
};

static const CINTERFACE_PROXY_VTABLE(7) _IReferenceClockProxyVtbl =
{
    {
        &IID_IReferenceClock,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IReferenceClock_GetTime_Proxy,
        IReferenceClock_AdviseTime_Proxy,
        IReferenceClock_AdvisePeriodic_Proxy,
        IReferenceClock_Unadvise_Proxy,
    }
};

static const MIDL_SERVER_INFO IReferenceClock_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IReferenceClock_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IReferenceClock_table[] =
{
    IReferenceClock_GetTime_Stub,
    IReferenceClock_AdviseTime_Stub,
    IReferenceClock_AdvisePeriodic_Stub,
    IReferenceClock_Unadvise_Stub
};

static const CInterfaceStubVtbl _IReferenceClockStubVtbl =
{
    {
        &IID_IReferenceClock,
        &IReferenceClock_ServerInfo,
        7,
        &IReferenceClock_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMemAllocator interface
 */
static void __finally_IMemAllocator_SetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_SetProperties_Proxy(
    IMemAllocator* This,
    ALLOCATOR_PROPERTIES *pRequest,
    ALLOCATOR_PROPERTIES *pActual)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_SetProperties_Proxy );
    __frame->This = This;
    if (pActual) MIDL_memset( pActual, 0, sizeof( *pActual ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pRequest) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pActual) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pRequest,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1000]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[332]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pActual,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1000],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_SetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1014], (void *)pActual );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_SetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
    ALLOCATOR_PROPERTIES * pRequest;
    ALLOCATOR_PROPERTIES _W0;
    ALLOCATOR_PROPERTIES * pActual;
};

static void __finally_IMemAllocator_SetProperties_Stub( struct __frame_IMemAllocator_SetProperties_Stub *__frame )
{


}

void __RPC_STUB IMemAllocator_SetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_SetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_SetProperties_Stub );
    __frame->pRequest = 0;
    __frame->pActual = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[332]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pRequest,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1000],
            0);


        __frame->pActual = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetProperties(__frame->_This, __frame->pRequest, __frame->pActual);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pActual,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1000]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_SetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocator_GetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_GetProperties_Proxy(
    IMemAllocator* This,
    ALLOCATOR_PROPERTIES *pProps)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_GetProperties_Proxy );
    __frame->This = This;
    if (pProps) MIDL_memset( pProps, 0, sizeof( *pProps ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pProps) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[342]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProps,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1000],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_GetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1018], (void *)pProps );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_GetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
    ALLOCATOR_PROPERTIES _W0;
    ALLOCATOR_PROPERTIES * pProps;
};

static void __finally_IMemAllocator_GetProperties_Stub( struct __frame_IMemAllocator_GetProperties_Stub *__frame )
{

}

void __RPC_STUB IMemAllocator_GetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_GetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_GetProperties_Stub );
    __frame->pProps = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[342]);


        __frame->pProps = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetProperties(__frame->_This, __frame->pProps);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProps,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1000]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_GetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocator_Commit_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_Commit_Proxy(
    IMemAllocator* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_Commit_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[348]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_Commit_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_Commit_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
};

static void __finally_IMemAllocator_Commit_Stub( struct __frame_IMemAllocator_Commit_Stub *__frame )
{
}

void __RPC_STUB IMemAllocator_Commit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_Commit_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_Commit_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[348]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Commit(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_Commit_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocator_Decommit_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_Decommit_Proxy(
    IMemAllocator* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_Decommit_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[350]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_Decommit_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_Decommit_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
};

static void __finally_IMemAllocator_Decommit_Stub( struct __frame_IMemAllocator_Decommit_Stub *__frame )
{
}

void __RPC_STUB IMemAllocator_Decommit_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_Decommit_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_Decommit_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[350]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Decommit(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_Decommit_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocator_GetBuffer_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_GetBuffer_Proxy(
    IMemAllocator* This,
    IMediaSample **ppBuffer,
    REFERENCE_TIME *pStartTime,
    REFERENCE_TIME *pEndTime,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_GetBuffer_Proxy );
    __frame->This = This;
    if (ppBuffer) MIDL_memset( ppBuffer, 0, sizeof( *ppBuffer ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppBuffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pStartTime) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pEndTime) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pStartTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pEndTime;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[352]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1040],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_GetBuffer_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1040], (void *)ppBuffer );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_GetBuffer_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
    IMediaSample *_W0;
    IMediaSample ** ppBuffer;
    REFERENCE_TIME * pStartTime;
    REFERENCE_TIME * pEndTime;
    DWORD dwFlags;
};

static void __finally_IMemAllocator_GetBuffer_Stub( struct __frame_IMemAllocator_GetBuffer_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1040]);




}

void __RPC_STUB IMemAllocator_GetBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_GetBuffer_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_GetBuffer_Stub );
    __frame->ppBuffer = 0;
    __frame->pStartTime = 0;
    __frame->pEndTime = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[352]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pStartTime = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pEndTime = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->ppBuffer = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetBuffer(__frame->_This, __frame->ppBuffer, __frame->pStartTime, __frame->pEndTime, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1040]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1040]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_GetBuffer_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocator_ReleaseBuffer_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocator_ReleaseBuffer_Proxy(
    IMemAllocator* This,
    IMediaSample *pBuffer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocator_ReleaseBuffer_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1052]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1052]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocator_ReleaseBuffer_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocator_ReleaseBuffer_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocator * _This;
    HRESULT _RetVal;
    IMediaSample * pBuffer;
};

static void __finally_IMemAllocator_ReleaseBuffer_Stub( struct __frame_IMemAllocator_ReleaseBuffer_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1052]);

}

void __RPC_STUB IMemAllocator_ReleaseBuffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocator_ReleaseBuffer_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocator*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocator_ReleaseBuffer_Stub );
    __frame->pBuffer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1052],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseBuffer(__frame->_This, __frame->pBuffer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocator_ReleaseBuffer_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMemAllocator_FormatStringOffsetTable[] =
{
    332,  /* IMemAllocator::SetProperties */
    342,  /* IMemAllocator::GetProperties */
    348,  /* IMemAllocator::Commit */
    350,  /* IMemAllocator::Decommit */
    352,  /* IMemAllocator::GetBuffer */
    368,  /* IMemAllocator::ReleaseBuffer */
};

static const CINTERFACE_PROXY_VTABLE(9) _IMemAllocatorProxyVtbl =
{
    {
        &IID_IMemAllocator,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMemAllocator_SetProperties_Proxy,
        IMemAllocator_GetProperties_Proxy,
        IMemAllocator_Commit_Proxy,
        IMemAllocator_Decommit_Proxy,
        IMemAllocator_GetBuffer_Proxy,
        IMemAllocator_ReleaseBuffer_Proxy,
    }
};

static const MIDL_SERVER_INFO IMemAllocator_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMemAllocator_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMemAllocator_table[] =
{
    IMemAllocator_SetProperties_Stub,
    IMemAllocator_GetProperties_Stub,
    IMemAllocator_Commit_Stub,
    IMemAllocator_Decommit_Stub,
    IMemAllocator_GetBuffer_Stub,
    IMemAllocator_ReleaseBuffer_Stub
};

static const CInterfaceStubVtbl _IMemAllocatorStubVtbl =
{
    {
        &IID_IMemAllocator,
        &IMemAllocator_ServerInfo,
        9,
        &IMemAllocator_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMemAllocatorCallbackTemp interface
 */
static void __finally_IMemAllocatorCallbackTemp_SetNotify_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocatorCallbackTemp_SetNotify_Proxy(
    IMemAllocatorCallbackTemp* This,
    IMemAllocatorNotifyCallbackTemp *pNotify)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocatorCallbackTemp_SetNotify_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pNotify,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1070]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pNotify,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1070]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[374]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocatorCallbackTemp_SetNotify_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocatorCallbackTemp_SetNotify_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocatorCallbackTemp * _This;
    HRESULT _RetVal;
    IMemAllocatorNotifyCallbackTemp * pNotify;
};

static void __finally_IMemAllocatorCallbackTemp_SetNotify_Stub( struct __frame_IMemAllocatorCallbackTemp_SetNotify_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pNotify,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1070]);

}

void __RPC_STUB IMemAllocatorCallbackTemp_SetNotify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocatorCallbackTemp_SetNotify_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocatorCallbackTemp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocatorCallbackTemp_SetNotify_Stub );
    __frame->pNotify = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[374]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pNotify,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1070],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetNotify(__frame->_This, __frame->pNotify);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocatorCallbackTemp_SetNotify_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemAllocatorCallbackTemp_GetFreeCount_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocatorCallbackTemp_GetFreeCount_Proxy(
    IMemAllocatorCallbackTemp* This,
    LONG *plBuffersFree)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocatorCallbackTemp_GetFreeCount_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!plBuffersFree) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[380]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *plBuffersFree = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocatorCallbackTemp_GetFreeCount_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1088], (void *)plBuffersFree );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocatorCallbackTemp_GetFreeCount_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocatorCallbackTemp * _This;
    HRESULT _RetVal;
    LONG _W0;
    LONG * plBuffersFree;
};

static void __finally_IMemAllocatorCallbackTemp_GetFreeCount_Stub( struct __frame_IMemAllocatorCallbackTemp_GetFreeCount_Stub *__frame )
{

}

void __RPC_STUB IMemAllocatorCallbackTemp_GetFreeCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocatorCallbackTemp_GetFreeCount_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocatorCallbackTemp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocatorCallbackTemp_GetFreeCount_Stub );
    __frame->plBuffersFree = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[380]);


        __frame->plBuffersFree = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFreeCount(__frame->_This, __frame->plBuffersFree);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->plBuffersFree;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocatorCallbackTemp_GetFreeCount_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMemAllocatorCallbackTemp_FormatStringOffsetTable[] =
{
    332,  /* IMemAllocator::SetProperties */
    342,  /* IMemAllocator::GetProperties */
    348,  /* IMemAllocator::Commit */
    350,  /* IMemAllocator::Decommit */
    352,  /* IMemAllocator::GetBuffer */
    368,  /* IMemAllocator::ReleaseBuffer */
    374,  /* IMemAllocatorCallbackTemp::SetNotify */
    380,  /* IMemAllocatorCallbackTemp::GetFreeCount */
};

static const CINTERFACE_PROXY_VTABLE(11) _IMemAllocatorCallbackTempProxyVtbl =
{
    {
        &IID_IMemAllocatorCallbackTemp,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMemAllocator_SetProperties_Proxy,
        IMemAllocator_GetProperties_Proxy,
        IMemAllocator_Commit_Proxy,
        IMemAllocator_Decommit_Proxy,
        IMemAllocator_GetBuffer_Proxy,
        IMemAllocator_ReleaseBuffer_Proxy,
        IMemAllocatorCallbackTemp_SetNotify_Proxy,
        IMemAllocatorCallbackTemp_GetFreeCount_Proxy,
    }
};

static const MIDL_SERVER_INFO IMemAllocatorCallbackTemp_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMemAllocatorCallbackTemp_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMemAllocatorCallbackTemp_table[] =
{
    IMemAllocator_SetProperties_Stub,
    IMemAllocator_GetProperties_Stub,
    IMemAllocator_Commit_Stub,
    IMemAllocator_Decommit_Stub,
    IMemAllocator_GetBuffer_Stub,
    IMemAllocator_ReleaseBuffer_Stub,
    IMemAllocatorCallbackTemp_SetNotify_Stub,
    IMemAllocatorCallbackTemp_GetFreeCount_Stub
};

static const CInterfaceStubVtbl _IMemAllocatorCallbackTempStubVtbl =
{
    {
        &IID_IMemAllocatorCallbackTemp,
        &IMemAllocatorCallbackTemp_ServerInfo,
        11,
        &IMemAllocatorCallbackTemp_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMemAllocatorNotifyCallbackTemp interface
 */
static void __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemAllocatorNotifyCallbackTemp_NotifyRelease_Proxy(
    IMemAllocatorNotifyCallbackTemp* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[386]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemAllocatorNotifyCallbackTemp * _This;
    HRESULT _RetVal;
};

static void __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub( struct __frame_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub *__frame )
{
}

void __RPC_STUB IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemAllocatorNotifyCallbackTemp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[386]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->NotifyRelease(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMemAllocatorNotifyCallbackTemp_FormatStringOffsetTable[] =
{
    386,  /* IMemAllocatorNotifyCallbackTemp::NotifyRelease */
};

static const CINTERFACE_PROXY_VTABLE(4) _IMemAllocatorNotifyCallbackTempProxyVtbl =
{
    {
        &IID_IMemAllocatorNotifyCallbackTemp,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMemAllocatorNotifyCallbackTemp_NotifyRelease_Proxy,
    }
};

static const MIDL_SERVER_INFO IMemAllocatorNotifyCallbackTemp_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMemAllocatorNotifyCallbackTemp_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMemAllocatorNotifyCallbackTemp_table[] =
{
    IMemAllocatorNotifyCallbackTemp_NotifyRelease_Stub
};

static const CInterfaceStubVtbl _IMemAllocatorNotifyCallbackTempStubVtbl =
{
    {
        &IID_IMemAllocatorNotifyCallbackTemp,
        &IMemAllocatorNotifyCallbackTemp_ServerInfo,
        4,
        &IMemAllocatorNotifyCallbackTemp_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMemInputPin interface
 */
static void __finally_IMemInputPin_GetAllocator_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_GetAllocator_Proxy(
    IMemInputPin* This,
    IMemAllocator **ppAllocator)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_GetAllocator_Proxy );
    __frame->This = This;
    if (ppAllocator) MIDL_memset( ppAllocator, 0, sizeof( *ppAllocator ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppAllocator) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[388]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppAllocator,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1110],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_GetAllocator_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1110], (void *)ppAllocator );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_GetAllocator_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
    IMemAllocator *_W0;
    IMemAllocator ** ppAllocator;
};

static void __finally_IMemInputPin_GetAllocator_Stub( struct __frame_IMemInputPin_GetAllocator_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppAllocator,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1110]);

}

void __RPC_STUB IMemInputPin_GetAllocator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_GetAllocator_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_GetAllocator_Stub );
    __frame->ppAllocator = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[388]);


        __frame->ppAllocator = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetAllocator(__frame->_This, __frame->ppAllocator);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppAllocator,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1110]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppAllocator,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1110]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_GetAllocator_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemInputPin_NotifyAllocator_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_NotifyAllocator_Proxy(
    IMemInputPin* This,
    IMemAllocator *pAllocator,
    BOOL bReadOnly)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_NotifyAllocator_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pAllocator,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1114]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pAllocator,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1114]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bReadOnly;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[394]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_NotifyAllocator_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_NotifyAllocator_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
    IMemAllocator * pAllocator;
    BOOL bReadOnly;
};

static void __finally_IMemInputPin_NotifyAllocator_Stub( struct __frame_IMemInputPin_NotifyAllocator_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pAllocator,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1114]);


}

void __RPC_STUB IMemInputPin_NotifyAllocator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_NotifyAllocator_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_NotifyAllocator_Stub );
    __frame->pAllocator = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[394]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pAllocator,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1114],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bReadOnly = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->NotifyAllocator(__frame->_This, __frame->pAllocator, __frame->bReadOnly);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_NotifyAllocator_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemInputPin_GetAllocatorRequirements_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_GetAllocatorRequirements_Proxy(
    IMemInputPin* This,
    ALLOCATOR_PROPERTIES *pProps)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_GetAllocatorRequirements_Proxy );
    __frame->This = This;
    if (pProps) MIDL_memset( pProps, 0, sizeof( *pProps ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pProps) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[402]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pProps,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1000],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_GetAllocatorRequirements_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1132], (void *)pProps );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_GetAllocatorRequirements_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
    ALLOCATOR_PROPERTIES _W0;
    ALLOCATOR_PROPERTIES * pProps;
};

static void __finally_IMemInputPin_GetAllocatorRequirements_Stub( struct __frame_IMemInputPin_GetAllocatorRequirements_Stub *__frame )
{

}

void __RPC_STUB IMemInputPin_GetAllocatorRequirements_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_GetAllocatorRequirements_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_GetAllocatorRequirements_Stub );
    __frame->pProps = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[402]);


        __frame->pProps = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetAllocatorRequirements(__frame->_This, __frame->pProps);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pProps,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1000]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_GetAllocatorRequirements_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemInputPin_Receive_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_Receive_Proxy(
    IMemInputPin* This,
    IMediaSample *pSample)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_Receive_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1136]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1136]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[408]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_Receive_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_Receive_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
    IMediaSample * pSample;
};

static void __finally_IMemInputPin_Receive_Stub( struct __frame_IMemInputPin_Receive_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSample,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1136]);

}

void __RPC_STUB IMemInputPin_Receive_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_Receive_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_Receive_Stub );
    __frame->pSample = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[408]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSample,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1136],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Receive(__frame->_This, __frame->pSample);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_Receive_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemInputPin_ReceiveMultiple_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_ReceiveMultiple_Proxy(
    IMemInputPin* This,
    IMediaSample **pSamples,
    LONG nSamples,
    LONG *nSamplesProcessed)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_ReceiveMultiple_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pSamples) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!nSamplesProcessed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)nSamples;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSamples,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1172]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            __frame->_StubMsg.MaxCount = (ULONG_PTR)nSamples;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSamples,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1172]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = nSamples;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[414]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *nSamplesProcessed = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_ReceiveMultiple_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1194], (void *)nSamplesProcessed );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_ReceiveMultiple_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
    IMediaSample ** pSamples;
    LONG nSamples;
    LONG _W0;
    LONG * nSamplesProcessed;
};

static void __finally_IMemInputPin_ReceiveMultiple_Stub( struct __frame_IMemInputPin_ReceiveMultiple_Stub *__frame )
{
    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->nSamples;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSamples,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1190]);



}

void __RPC_STUB IMemInputPin_ReceiveMultiple_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_ReceiveMultiple_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_ReceiveMultiple_Stub );
    __frame->pSamples = 0;
    __frame->nSamplesProcessed = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[414]);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSamples,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1172],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->nSamples = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->nSamplesProcessed = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReceiveMultiple(__frame->_This, __frame->pSamples, __frame->nSamples, __frame->nSamplesProcessed);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->nSamplesProcessed;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_ReceiveMultiple_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMemInputPin_ReceiveCanBlock_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMemInputPin_ReceiveCanBlock_Proxy(
    IMemInputPin* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMemInputPin_ReceiveCanBlock_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[426]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMemInputPin_ReceiveCanBlock_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMemInputPin_ReceiveCanBlock_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMemInputPin * _This;
    HRESULT _RetVal;
};

static void __finally_IMemInputPin_ReceiveCanBlock_Stub( struct __frame_IMemInputPin_ReceiveCanBlock_Stub *__frame )
{
}

void __RPC_STUB IMemInputPin_ReceiveCanBlock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMemInputPin_ReceiveCanBlock_Stub __f, * const __frame = &__f;

    __frame->_This = (IMemInputPin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMemInputPin_ReceiveCanBlock_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[426]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReceiveCanBlock(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMemInputPin_ReceiveCanBlock_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMemInputPin_FormatStringOffsetTable[] =
{
    388,  /* IMemInputPin::GetAllocator */
    394,  /* IMemInputPin::NotifyAllocator */
    402,  /* IMemInputPin::GetAllocatorRequirements */
    408,  /* IMemInputPin::Receive */
    414,  /* IMemInputPin::ReceiveMultiple */
    426,  /* IMemInputPin::ReceiveCanBlock */
};

static const CINTERFACE_PROXY_VTABLE(9) _IMemInputPinProxyVtbl =
{
    {
        &IID_IMemInputPin,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMemInputPin_GetAllocator_Proxy,
        IMemInputPin_NotifyAllocator_Proxy,
        IMemInputPin_GetAllocatorRequirements_Proxy,
        IMemInputPin_Receive_Proxy,
        IMemInputPin_ReceiveMultiple_Proxy,
        IMemInputPin_ReceiveCanBlock_Proxy,
    }
};

static const MIDL_SERVER_INFO IMemInputPin_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMemInputPin_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMemInputPin_table[] =
{
    IMemInputPin_GetAllocator_Stub,
    IMemInputPin_NotifyAllocator_Stub,
    IMemInputPin_GetAllocatorRequirements_Stub,
    IMemInputPin_Receive_Stub,
    IMemInputPin_ReceiveMultiple_Stub,
    IMemInputPin_ReceiveCanBlock_Stub
};

static const CInterfaceStubVtbl _IMemInputPinStubVtbl =
{
    {
        &IID_IMemInputPin,
        &IMemInputPin_ServerInfo,
        9,
        &IMemInputPin_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAMovieSetup interface
 */
static void __finally_IAMovieSetup_Register_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMovieSetup_Register_Proxy(
    IAMovieSetup* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMovieSetup_Register_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMovieSetup_Register_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMovieSetup_Register_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMovieSetup * _This;
    HRESULT _RetVal;
};

static void __finally_IAMovieSetup_Register_Stub( struct __frame_IAMovieSetup_Register_Stub *__frame )
{
}

void __RPC_STUB IAMovieSetup_Register_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMovieSetup_Register_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMovieSetup*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMovieSetup_Register_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Register(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMovieSetup_Register_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMovieSetup_Unregister_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMovieSetup_Unregister_Proxy(
    IAMovieSetup* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMovieSetup_Unregister_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[430]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMovieSetup_Unregister_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMovieSetup_Unregister_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMovieSetup * _This;
    HRESULT _RetVal;
};

static void __finally_IAMovieSetup_Unregister_Stub( struct __frame_IAMovieSetup_Unregister_Stub *__frame )
{
}

void __RPC_STUB IAMovieSetup_Unregister_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMovieSetup_Unregister_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMovieSetup*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMovieSetup_Unregister_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[430]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Unregister(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMovieSetup_Unregister_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAMovieSetup_FormatStringOffsetTable[] =
{
    428,  /* IAMovieSetup::Register */
    430,  /* IAMovieSetup::Unregister */
};

static const CINTERFACE_PROXY_VTABLE(5) _IAMovieSetupProxyVtbl =
{
    {
        &IID_IAMovieSetup,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAMovieSetup_Register_Proxy,
        IAMovieSetup_Unregister_Proxy,
    }
};

static const MIDL_SERVER_INFO IAMovieSetup_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAMovieSetup_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAMovieSetup_table[] =
{
    IAMovieSetup_Register_Stub,
    IAMovieSetup_Unregister_Stub
};

static const CInterfaceStubVtbl _IAMovieSetupStubVtbl =
{
    {
        &IID_IAMovieSetup,
        &IAMovieSetup_ServerInfo,
        5,
        &IAMovieSetup_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMediaSeeking interface
 */
static void __finally_IMediaSeeking_GetCapabilities_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetCapabilities_Proxy(
    IMediaSeeking* This,
    DWORD *pCapabilities)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetCapabilities_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pCapabilities) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[432]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCapabilities = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetCapabilities_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1198], (void *)pCapabilities );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetCapabilities_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * pCapabilities;
};

static void __finally_IMediaSeeking_GetCapabilities_Stub( struct __frame_IMediaSeeking_GetCapabilities_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetCapabilities_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetCapabilities_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetCapabilities_Stub );
    __frame->pCapabilities = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[432]);


        __frame->pCapabilities = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCapabilities(__frame->_This, __frame->pCapabilities);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pCapabilities;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetCapabilities_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_CheckCapabilities_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_CheckCapabilities_Proxy(
    IMediaSeeking* This,
    DWORD *pCapabilities)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_CheckCapabilities_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pCapabilities) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = *pCapabilities;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[438]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCapabilities = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_CheckCapabilities_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1202], (void *)pCapabilities );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_CheckCapabilities_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    DWORD * pCapabilities;
};

static void __finally_IMediaSeeking_CheckCapabilities_Stub( struct __frame_IMediaSeeking_CheckCapabilities_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_CheckCapabilities_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_CheckCapabilities_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_CheckCapabilities_Stub );
    __frame->pCapabilities = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[438]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pCapabilities = (DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CheckCapabilities(__frame->_This, __frame->pCapabilities);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pCapabilities;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_CheckCapabilities_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_IsFormatSupported_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_IsFormatSupported_Proxy(
    IMediaSeeking* This,
    const GUID *pFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_IsFormatSupported_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1212]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[444]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_IsFormatSupported_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_IsFormatSupported_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    const GUID * pFormat;
};

static void __finally_IMediaSeeking_IsFormatSupported_Stub( struct __frame_IMediaSeeking_IsFormatSupported_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_IsFormatSupported_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_IsFormatSupported_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_IsFormatSupported_Stub );
    __frame->pFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[444]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1212],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsFormatSupported(__frame->_This, __frame->pFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_IsFormatSupported_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_QueryPreferredFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_QueryPreferredFormat_Proxy(
    IMediaSeeking* This,
    GUID *pFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_QueryPreferredFormat_Proxy );
    __frame->This = This;
    if (pFormat) MIDL_memset( pFormat, 0, sizeof( *pFormat ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[450]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_QueryPreferredFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1228], (void *)pFormat );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_QueryPreferredFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * pFormat;
};

static void __finally_IMediaSeeking_QueryPreferredFormat_Stub( struct __frame_IMediaSeeking_QueryPreferredFormat_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_QueryPreferredFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_QueryPreferredFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_QueryPreferredFormat_Stub );
    __frame->pFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[450]);


        __frame->pFormat = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryPreferredFormat(__frame->_This, __frame->pFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_QueryPreferredFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetTimeFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetTimeFormat_Proxy(
    IMediaSeeking* This,
    GUID *pFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetTimeFormat_Proxy );
    __frame->This = This;
    if (pFormat) MIDL_memset( pFormat, 0, sizeof( *pFormat ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[456]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetTimeFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1232], (void *)pFormat );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetTimeFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    GUID _W0;
    GUID * pFormat;
};

static void __finally_IMediaSeeking_GetTimeFormat_Stub( struct __frame_IMediaSeeking_GetTimeFormat_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetTimeFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetTimeFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetTimeFormat_Stub );
    __frame->pFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[456]);


        __frame->pFormat = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetTimeFormat(__frame->_This, __frame->pFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[70]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetTimeFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_IsUsingTimeFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_IsUsingTimeFormat_Proxy(
    IMediaSeeking* This,
    const GUID *pFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_IsUsingTimeFormat_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1242]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[462]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_IsUsingTimeFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_IsUsingTimeFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    const GUID * pFormat;
};

static void __finally_IMediaSeeking_IsUsingTimeFormat_Stub( struct __frame_IMediaSeeking_IsUsingTimeFormat_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_IsUsingTimeFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_IsUsingTimeFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_IsUsingTimeFormat_Stub );
    __frame->pFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[462]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1242],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->IsUsingTimeFormat(__frame->_This, __frame->pFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_IsUsingTimeFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_SetTimeFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_SetTimeFormat_Proxy(
    IMediaSeeking* This,
    const GUID *pFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_SetTimeFormat_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!pFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1264]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[468]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_SetTimeFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_SetTimeFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    const GUID * pFormat;
};

static void __finally_IMediaSeeking_SetTimeFormat_Stub( struct __frame_IMediaSeeking_SetTimeFormat_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_SetTimeFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_SetTimeFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_SetTimeFormat_Stub );
    __frame->pFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[468]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1264],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetTimeFormat(__frame->_This, __frame->pFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_SetTimeFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetDuration_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetDuration_Proxy(
    IMediaSeeking* This,
    LONGLONG *pDuration)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetDuration_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!pDuration) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[474]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pDuration = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetDuration_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1280], (void *)pDuration );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetDuration_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pDuration;
};

static void __finally_IMediaSeeking_GetDuration_Stub( struct __frame_IMediaSeeking_GetDuration_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetDuration_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetDuration_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetDuration_Stub );
    __frame->pDuration = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[474]);


        __frame->pDuration = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetDuration(__frame->_This, __frame->pDuration);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pDuration;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetDuration_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetStopPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetStopPosition_Proxy(
    IMediaSeeking* This,
    LONGLONG *pStop)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetStopPosition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pStop) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[480]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pStop = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetStopPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1284], (void *)pStop );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetStopPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pStop;
};

static void __finally_IMediaSeeking_GetStopPosition_Stub( struct __frame_IMediaSeeking_GetStopPosition_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetStopPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetStopPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetStopPosition_Stub );
    __frame->pStop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[480]);


        __frame->pStop = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetStopPosition(__frame->_This, __frame->pStop);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pStop;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetStopPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetCurrentPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetCurrentPosition_Proxy(
    IMediaSeeking* This,
    LONGLONG *pCurrent)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetCurrentPosition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        if (!pCurrent) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[486]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCurrent = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetCurrentPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1288], (void *)pCurrent );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetCurrentPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pCurrent;
};

static void __finally_IMediaSeeking_GetCurrentPosition_Stub( struct __frame_IMediaSeeking_GetCurrentPosition_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetCurrentPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetCurrentPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetCurrentPosition_Stub );
    __frame->pCurrent = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[486]);


        __frame->pCurrent = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCurrentPosition(__frame->_This, __frame->pCurrent);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pCurrent;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetCurrentPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_ConvertTimeFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_ConvertTimeFormat_Proxy(
    IMediaSeeking* This,
    LONGLONG *pTarget,
    const GUID *pTargetFormat,
    LONGLONG Source,
    const GUID *pSourceFormat)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_ConvertTimeFormat_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!pTarget) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pTargetFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pSourceFormat) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 56;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pTargetFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1302]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(LONGLONG *)__frame->_StubMsg.Buffer = Source;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSourceFormat,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1324]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[492]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pTarget = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_ConvertTimeFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1292], (void *)pTarget );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_ConvertTimeFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pTarget;
    const GUID * pTargetFormat;
    LONGLONG Source;
    const GUID * pSourceFormat;
};

static void __finally_IMediaSeeking_ConvertTimeFormat_Stub( struct __frame_IMediaSeeking_ConvertTimeFormat_Stub *__frame )
{




}

void __RPC_STUB IMediaSeeking_ConvertTimeFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_ConvertTimeFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_ConvertTimeFormat_Stub );
    __frame->pTarget = 0;
    __frame->pTargetFormat = 0;
    __frame->pSourceFormat = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[492]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pTargetFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1302],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->Source = *(LONGLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSourceFormat,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1324],
            0);


        __frame->pTarget = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ConvertTimeFormat(__frame->_This, __frame->pTarget, __frame->pTargetFormat, __frame->Source, __frame->pSourceFormat);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pTarget;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_ConvertTimeFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_SetPositions_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_SetPositions_Proxy(
    IMediaSeeking* This,
    LONGLONG *pCurrent,
    DWORD dwCurrentFlags,
    LONGLONG *pStop,
    DWORD dwStopFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_SetPositions_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!pCurrent) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pStop) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(LONGLONG *)__frame->_StubMsg.Buffer = *pCurrent;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwCurrentFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(LONGLONG *)__frame->_StubMsg.Buffer = *pStop;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwStopFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[508]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCurrent = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pStop = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_SetPositions_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1340], (void *)pCurrent );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1344], (void *)pStop );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_SetPositions_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG * pCurrent;
    DWORD dwCurrentFlags;
    LONGLONG * pStop;
    DWORD dwStopFlags;
};

static void __finally_IMediaSeeking_SetPositions_Stub( struct __frame_IMediaSeeking_SetPositions_Stub *__frame )
{




}

void __RPC_STUB IMediaSeeking_SetPositions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_SetPositions_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_SetPositions_Stub );
    __frame->pCurrent = 0;
    __frame->pStop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[508]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pCurrent = (LONGLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwCurrentFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pStop = (LONGLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwStopFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetPositions(__frame->_This, __frame->pCurrent, __frame->dwCurrentFlags, __frame->pStop, __frame->dwStopFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 40;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pCurrent;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pStop;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_SetPositions_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetPositions_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetPositions_Proxy(
    IMediaSeeking* This,
    LONGLONG *pCurrent,
    LONGLONG *pStop)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetPositions_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        if (!pCurrent) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pStop) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[522]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCurrent = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pStop = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetPositions_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1348], (void *)pCurrent );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1352], (void *)pStop );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetPositions_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pCurrent;
    LONGLONG _W1;
    LONGLONG * pStop;
};

static void __finally_IMediaSeeking_GetPositions_Stub( struct __frame_IMediaSeeking_GetPositions_Stub *__frame )
{


}

void __RPC_STUB IMediaSeeking_GetPositions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetPositions_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetPositions_Stub );
    __frame->pCurrent = 0;
    __frame->pStop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[522]);


        __frame->pCurrent = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pStop = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetPositions(__frame->_This, __frame->pCurrent, __frame->pStop);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 40;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pCurrent;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pStop;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetPositions_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetAvailable_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetAvailable_Proxy(
    IMediaSeeking* This,
    LONGLONG *pEarliest,
    LONGLONG *pLatest)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetAvailable_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        if (!pEarliest) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pLatest) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[532]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pEarliest = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pLatest = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetAvailable_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1356], (void *)pEarliest );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1360], (void *)pLatest );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetAvailable_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pEarliest;
    LONGLONG _W1;
    LONGLONG * pLatest;
};

static void __finally_IMediaSeeking_GetAvailable_Stub( struct __frame_IMediaSeeking_GetAvailable_Stub *__frame )
{


}

void __RPC_STUB IMediaSeeking_GetAvailable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetAvailable_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetAvailable_Stub );
    __frame->pEarliest = 0;
    __frame->pLatest = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[532]);


        __frame->pEarliest = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pLatest = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetAvailable(__frame->_This, __frame->pEarliest, __frame->pLatest);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 40;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pEarliest;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pLatest;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetAvailable_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_SetRate_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_SetRate_Proxy(
    IMediaSeeking* This,
    double dRate)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_SetRate_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(double *)__frame->_StubMsg.Buffer = dRate;
            __frame->_StubMsg.Buffer += sizeof(double);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[542]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_SetRate_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_SetRate_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    double dRate;
};

static void __finally_IMediaSeeking_SetRate_Stub( struct __frame_IMediaSeeking_SetRate_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_SetRate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_SetRate_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_SetRate_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[542]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(double) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dRate = *(double *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(double);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetRate(__frame->_This, __frame->dRate);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_SetRate_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetRate_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetRate_Proxy(
    IMediaSeeking* This,
    double *pdRate)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetRate_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 18);
        if (!pdRate) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[546]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(double) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdRate = *(double *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(double);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetRate_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1364], (void *)pdRate );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetRate_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    double _W0;
    double * pdRate;
};

static void __finally_IMediaSeeking_GetRate_Stub( struct __frame_IMediaSeeking_GetRate_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetRate_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetRate_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetRate_Stub );
    __frame->pdRate = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[546]);


        __frame->pdRate = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRate(__frame->_This, __frame->pdRate);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(double *)__frame->_StubMsg.Buffer = *__frame->pdRate;
        __frame->_StubMsg.Buffer += sizeof(double);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetRate_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IMediaSeeking_GetPreroll_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaSeeking_GetPreroll_Proxy(
    IMediaSeeking* This,
    LONGLONG *pllPreroll)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaSeeking_GetPreroll_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 19);
        if (!pllPreroll) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[552]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pllPreroll = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaSeeking_GetPreroll_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1368], (void *)pllPreroll );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaSeeking_GetPreroll_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaSeeking * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pllPreroll;
};

static void __finally_IMediaSeeking_GetPreroll_Stub( struct __frame_IMediaSeeking_GetPreroll_Stub *__frame )
{

}

void __RPC_STUB IMediaSeeking_GetPreroll_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaSeeking_GetPreroll_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaSeeking*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaSeeking_GetPreroll_Stub );
    __frame->pllPreroll = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[552]);


        __frame->pllPreroll = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetPreroll(__frame->_This, __frame->pllPreroll);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pllPreroll;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaSeeking_GetPreroll_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMediaSeeking_FormatStringOffsetTable[] =
{
    432,  /* IMediaSeeking::GetCapabilities */
    438,  /* IMediaSeeking::CheckCapabilities */
    444,  /* IMediaSeeking::IsFormatSupported */
    450,  /* IMediaSeeking::QueryPreferredFormat */
    456,  /* IMediaSeeking::GetTimeFormat */
    462,  /* IMediaSeeking::IsUsingTimeFormat */
    468,  /* IMediaSeeking::SetTimeFormat */
    474,  /* IMediaSeeking::GetDuration */
    480,  /* IMediaSeeking::GetStopPosition */
    486,  /* IMediaSeeking::GetCurrentPosition */
    492,  /* IMediaSeeking::ConvertTimeFormat */
    508,  /* IMediaSeeking::SetPositions */
    522,  /* IMediaSeeking::GetPositions */
    532,  /* IMediaSeeking::GetAvailable */
    542,  /* IMediaSeeking::SetRate */
    546,  /* IMediaSeeking::GetRate */
    552,  /* IMediaSeeking::GetPreroll */
};

static const CINTERFACE_PROXY_VTABLE(20) _IMediaSeekingProxyVtbl =
{
    {
        &IID_IMediaSeeking,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMediaSeeking_GetCapabilities_Proxy,
        IMediaSeeking_CheckCapabilities_Proxy,
        IMediaSeeking_IsFormatSupported_Proxy,
        IMediaSeeking_QueryPreferredFormat_Proxy,
        IMediaSeeking_GetTimeFormat_Proxy,
        IMediaSeeking_IsUsingTimeFormat_Proxy,
        IMediaSeeking_SetTimeFormat_Proxy,
        IMediaSeeking_GetDuration_Proxy,
        IMediaSeeking_GetStopPosition_Proxy,
        IMediaSeeking_GetCurrentPosition_Proxy,
        IMediaSeeking_ConvertTimeFormat_Proxy,
        IMediaSeeking_SetPositions_Proxy,
        IMediaSeeking_GetPositions_Proxy,
        IMediaSeeking_GetAvailable_Proxy,
        IMediaSeeking_SetRate_Proxy,
        IMediaSeeking_GetRate_Proxy,
        IMediaSeeking_GetPreroll_Proxy,
    }
};

static const MIDL_SERVER_INFO IMediaSeeking_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMediaSeeking_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMediaSeeking_table[] =
{
    IMediaSeeking_GetCapabilities_Stub,
    IMediaSeeking_CheckCapabilities_Stub,
    IMediaSeeking_IsFormatSupported_Stub,
    IMediaSeeking_QueryPreferredFormat_Stub,
    IMediaSeeking_GetTimeFormat_Stub,
    IMediaSeeking_IsUsingTimeFormat_Stub,
    IMediaSeeking_SetTimeFormat_Stub,
    IMediaSeeking_GetDuration_Stub,
    IMediaSeeking_GetStopPosition_Stub,
    IMediaSeeking_GetCurrentPosition_Stub,
    IMediaSeeking_ConvertTimeFormat_Stub,
    IMediaSeeking_SetPositions_Stub,
    IMediaSeeking_GetPositions_Stub,
    IMediaSeeking_GetAvailable_Stub,
    IMediaSeeking_SetRate_Stub,
    IMediaSeeking_GetRate_Stub,
    IMediaSeeking_GetPreroll_Stub
};

static const CInterfaceStubVtbl _IMediaSeekingStubVtbl =
{
    {
        &IID_IMediaSeeking,
        &IMediaSeeking_ServerInfo,
        20,
        &IMediaSeeking_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAMStreamSelect interface
 */
static void __finally_IAMStreamSelect_Count_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamSelect_Count_Proxy(
    IAMStreamSelect* This,
    DWORD *streams)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamSelect_Count_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!streams) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[558]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *streams = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamSelect_Count_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1372], (void *)streams );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamSelect_Count_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamSelect * _This;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * streams;
};

static void __finally_IAMStreamSelect_Count_Stub( struct __frame_IAMStreamSelect_Count_Stub *__frame )
{

}

void __RPC_STUB IAMStreamSelect_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamSelect_Count_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamSelect*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamSelect_Count_Stub );
    __frame->streams = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[558]);


        __frame->streams = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Count(__frame->_This, __frame->streams);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->streams;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamSelect_Count_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMStreamSelect_Info_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamSelect_Info_Proxy(
    IAMStreamSelect* This,
    LONG index,
    AM_MEDIA_TYPE **media_type,
    DWORD *flags,
    LCID *lcid,
    DWORD *group,
    WCHAR **name,
    IUnknown **object,
    IUnknown **unknown)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamSelect_Info_Proxy );
    __frame->This = This;
    if (media_type) MIDL_memset( media_type, 0, sizeof( *media_type ));
    if (name) MIDL_memset( name, 0, sizeof( *name ));
    if (object) MIDL_memset( object, 0, sizeof( *object ));
    if (unknown) MIDL_memset( unknown, 0, sizeof( *unknown ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!media_type) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!flags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!lcid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!group) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!object) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!unknown) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = index;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[564]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&media_type,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1380],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *flags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LCID) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *lcid = *(LCID *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LCID);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *group = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1400],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&object,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1422],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&unknown,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamSelect_Info_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1380], (void *)media_type );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1384], (void *)flags );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1388], (void *)lcid );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1392], (void *)group );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1400], (void *)name );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1422], (void *)object );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1444], (void *)unknown );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamSelect_Info_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamSelect * _This;
    HRESULT _RetVal;
    LONG index;
    AM_MEDIA_TYPE *_W0;
    AM_MEDIA_TYPE ** media_type;
    DWORD _W1;
    DWORD * flags;
    LCID _W2;
    LCID * lcid;
    DWORD _W3;
    DWORD * group;
    WCHAR *_W4;
    WCHAR ** name;
    IUnknown *_W5;
    IUnknown ** object;
    IUnknown *_W6;
    IUnknown ** unknown;
};

static void __finally_IAMStreamSelect_Info_Stub( struct __frame_IAMStreamSelect_Info_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->media_type,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1380]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1400]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1422]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->unknown,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);

}

void __RPC_STUB IAMStreamSelect_Info_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamSelect_Info_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamSelect*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamSelect_Info_Stub );
    __frame->media_type = 0;
    __frame->flags = 0;
    __frame->lcid = 0;
    __frame->group = 0;
    __frame->name = 0;
    __frame->object = 0;
    __frame->unknown = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[564]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->index = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->media_type = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->flags = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->lcid = &__frame->_W2;
        __frame->_W2 = 0;
        __frame->group = &__frame->_W3;
        __frame->_W3 = 0;
        __frame->name = &__frame->_W4;
        __frame->_W4 = 0;
        __frame->object = &__frame->_W5;
        __frame->_W5 = 0;
        __frame->unknown = &__frame->_W6;
        __frame->_W6 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Info(__frame->_This, __frame->index, __frame->media_type, __frame->flags, __frame->lcid, __frame->group, __frame->name, __frame->object, __frame->unknown);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 46;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->media_type,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1380]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->object,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1422]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->unknown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->media_type,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1380]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->flags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LCID *)__frame->_StubMsg.Buffer = *__frame->lcid;
        __frame->_StubMsg.Buffer += sizeof(LCID);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->group;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1400]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->object,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1422]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->unknown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamSelect_Info_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMStreamSelect_Enable_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamSelect_Enable_Proxy(
    IAMStreamSelect* This,
    LONG index,
    DWORD flags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamSelect_Enable_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = index;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = flags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[596]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamSelect_Enable_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamSelect_Enable_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamSelect * _This;
    HRESULT _RetVal;
    LONG index;
    DWORD flags;
};

static void __finally_IAMStreamSelect_Enable_Stub( struct __frame_IAMStreamSelect_Enable_Stub *__frame )
{


}

void __RPC_STUB IAMStreamSelect_Enable_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamSelect_Enable_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamSelect*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamSelect_Enable_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[596]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->index = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->flags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Enable(__frame->_This, __frame->index, __frame->flags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamSelect_Enable_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAMStreamSelect_FormatStringOffsetTable[] =
{
    558,  /* IAMStreamSelect::Count */
    564,  /* IAMStreamSelect::Info */
    596,  /* IAMStreamSelect::Enable */
};

static const CINTERFACE_PROXY_VTABLE(6) _IAMStreamSelectProxyVtbl =
{
    {
        &IID_IAMStreamSelect,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAMStreamSelect_Count_Proxy,
        IAMStreamSelect_Info_Proxy,
        IAMStreamSelect_Enable_Proxy,
    }
};

static const MIDL_SERVER_INFO IAMStreamSelect_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAMStreamSelect_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAMStreamSelect_table[] =
{
    IAMStreamSelect_Count_Stub,
    IAMStreamSelect_Info_Stub,
    IAMStreamSelect_Enable_Stub
};

static const CInterfaceStubVtbl _IAMStreamSelectStubVtbl =
{
    {
        &IID_IAMStreamSelect,
        &IAMStreamSelect_ServerInfo,
        6,
        &IAMStreamSelect_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IEnumRegFilters interface
 */
static void __finally_IEnumRegFilters_Next_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumRegFilters_Next_Proxy(
    IEnumRegFilters* This,
    ULONG cFilters,
    REGFILTER **apRegFilter,
    ULONG *pcFetched)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumRegFilters_Next_Proxy );
    __frame->This = This;
    if (apRegFilter) MIDL_memset( apRegFilter, 0, sizeof( *apRegFilter ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!apRegFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcFetched) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cFilters;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[602]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&apRegFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1474],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcFetched = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumRegFilters_Next_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1474], (void *)apRegFilter );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1478], (void *)pcFetched );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumRegFilters_Next_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumRegFilters * _This;
    HRESULT _RetVal;
    ULONG cFilters;
    REGFILTER *_W0;
    REGFILTER ** apRegFilter;
    ULONG _W1;
    ULONG * pcFetched;
};

static void __finally_IEnumRegFilters_Next_Stub( struct __frame_IEnumRegFilters_Next_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->apRegFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1474]);


}

void __RPC_STUB IEnumRegFilters_Next_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumRegFilters_Next_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumRegFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumRegFilters_Next_Stub );
    __frame->apRegFilter = 0;
    __frame->pcFetched = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[602]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cFilters = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->apRegFilter = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pcFetched = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Next(__frame->_This, __frame->cFilters, __frame->apRegFilter, __frame->pcFetched);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->apRegFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1474]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->apRegFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1474]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcFetched;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumRegFilters_Next_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumRegFilters_Skip_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumRegFilters_Skip_Proxy(
    IEnumRegFilters* This,
    ULONG cFilters)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumRegFilters_Skip_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cFilters;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[614]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumRegFilters_Skip_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumRegFilters_Skip_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumRegFilters * _This;
    HRESULT _RetVal;
    ULONG cFilters;
};

static void __finally_IEnumRegFilters_Skip_Stub( struct __frame_IEnumRegFilters_Skip_Stub *__frame )
{

}

void __RPC_STUB IEnumRegFilters_Skip_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumRegFilters_Skip_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumRegFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumRegFilters_Skip_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[614]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cFilters = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Skip(__frame->_This, __frame->cFilters);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumRegFilters_Skip_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumRegFilters_Reset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumRegFilters_Reset_Proxy(
    IEnumRegFilters* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumRegFilters_Reset_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[618]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumRegFilters_Reset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumRegFilters_Reset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumRegFilters * _This;
    HRESULT _RetVal;
};

static void __finally_IEnumRegFilters_Reset_Stub( struct __frame_IEnumRegFilters_Reset_Stub *__frame )
{
}

void __RPC_STUB IEnumRegFilters_Reset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumRegFilters_Reset_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumRegFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumRegFilters_Reset_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[618]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Reset(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumRegFilters_Reset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IEnumRegFilters_Clone_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IEnumRegFilters_Clone_Proxy(
    IEnumRegFilters* This,
    IEnumRegFilters **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IEnumRegFilters_Clone_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[620]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IEnumRegFilters_Clone_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1500], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IEnumRegFilters_Clone_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IEnumRegFilters * _This;
    HRESULT _RetVal;
    IEnumRegFilters *_W0;
    IEnumRegFilters ** ppEnum;
};

static void __finally_IEnumRegFilters_Clone_Stub( struct __frame_IEnumRegFilters_Clone_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);

}

void __RPC_STUB IEnumRegFilters_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IEnumRegFilters_Clone_Stub __f, * const __frame = &__f;

    __frame->_This = (IEnumRegFilters*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IEnumRegFilters_Clone_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[620]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Clone(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IEnumRegFilters_Clone_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IEnumRegFilters_FormatStringOffsetTable[] =
{
    602,  /* IEnumRegFilters::Next */
    614,  /* IEnumRegFilters::Skip */
    618,  /* IEnumRegFilters::Reset */
    620,  /* IEnumRegFilters::Clone */
};

static const CINTERFACE_PROXY_VTABLE(7) _IEnumRegFiltersProxyVtbl =
{
    {
        &IID_IEnumRegFilters,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IEnumRegFilters_Next_Proxy,
        IEnumRegFilters_Skip_Proxy,
        IEnumRegFilters_Reset_Proxy,
        IEnumRegFilters_Clone_Proxy,
    }
};

static const MIDL_SERVER_INFO IEnumRegFilters_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IEnumRegFilters_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IEnumRegFilters_table[] =
{
    IEnumRegFilters_Next_Stub,
    IEnumRegFilters_Skip_Stub,
    IEnumRegFilters_Reset_Stub,
    IEnumRegFilters_Clone_Stub
};

static const CInterfaceStubVtbl _IEnumRegFiltersStubVtbl =
{
    {
        &IID_IEnumRegFilters,
        &IEnumRegFilters_ServerInfo,
        7,
        &IEnumRegFilters_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFilterMapper interface
 */
static void __finally_IFilterMapper_RegisterFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_RegisterFilter_Proxy(
    IFilterMapper* This,
    CLSID clsid,
    LPCWSTR Name,
    DWORD dwMerit)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_RegisterFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!Name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1506]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1506]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwMerit;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[626]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_RegisterFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_RegisterFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID clsid;
    void *_p_clsid;
    LPCWSTR Name;
    DWORD dwMerit;
};

static void __finally_IFilterMapper_RegisterFilter_Stub( struct __frame_IFilterMapper_RegisterFilter_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1504]);


}

void __RPC_STUB IFilterMapper_RegisterFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_RegisterFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_RegisterFilter_Stub );
    MIDL_memset(&__frame->clsid, 0, sizeof(__frame->clsid));
    __frame->_p_clsid = &__frame->clsid;
    __frame->Name = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[626]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1506],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwMerit = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterFilter(__frame->_This, __frame->clsid, __frame->Name, __frame->dwMerit);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_RegisterFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_RegisterFilterInstance_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_RegisterFilterInstance_Proxy(
    IFilterMapper* This,
    CLSID clsid,
    LPCWSTR Name,
    CLSID *MRId)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_RegisterFilterInstance_Proxy );
    __frame->This = This;
    if (MRId) MIDL_memset( MRId, 0, sizeof( *MRId ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!Name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!MRId) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1510]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1510]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[638]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&MRId,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_RegisterFilterInstance_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1512], (void *)MRId );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_RegisterFilterInstance_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID clsid;
    void *_p_clsid;
    LPCWSTR Name;
    CLSID _W0;
    CLSID * MRId;
};

static void __finally_IFilterMapper_RegisterFilterInstance_Stub( struct __frame_IFilterMapper_RegisterFilterInstance_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1508]);


}

void __RPC_STUB IFilterMapper_RegisterFilterInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_RegisterFilterInstance_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_RegisterFilterInstance_Stub );
    MIDL_memset(&__frame->clsid, 0, sizeof(__frame->clsid));
    __frame->_p_clsid = &__frame->clsid;
    __frame->Name = 0;
    __frame->MRId = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[638]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1510],
            0);


        __frame->MRId = &__frame->_W0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterFilterInstance(__frame->_This, __frame->clsid, __frame->Name, __frame->MRId);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 28;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->MRId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_RegisterFilterInstance_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_RegisterPin_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_RegisterPin_Proxy(
    IFilterMapper* This,
    CLSID Filter,
    LPCWSTR Name,
    BOOL bRendered,
    BOOL bOutput,
    BOOL bZero,
    BOOL bMany,
    CLSID ConnectsToFilter,
    LPCWSTR ConnectsToPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_RegisterPin_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!Name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ConnectsToPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 72;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ConnectsToPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1522]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&Filter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bRendered;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bOutput;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bZero;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bMany;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&ConnectsToFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ConnectsToPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1522]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[652]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_RegisterPin_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_RegisterPin_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID Filter;
    void *_p_Filter;
    LPCWSTR Name;
    BOOL bRendered;
    BOOL bOutput;
    BOOL bZero;
    BOOL bMany;
    CLSID ConnectsToFilter;
    void *_p_ConnectsToFilter;
    LPCWSTR ConnectsToPin;
};

static void __finally_IFilterMapper_RegisterPin_Stub( struct __frame_IFilterMapper_RegisterPin_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1516]);






    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ConnectsToPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1520]);

}

void __RPC_STUB IFilterMapper_RegisterPin_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_RegisterPin_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_RegisterPin_Stub );
    MIDL_memset(&__frame->Filter, 0, sizeof(__frame->Filter));
    __frame->_p_Filter = &__frame->Filter;
    __frame->Name = 0;
    MIDL_memset(&__frame->ConnectsToFilter, 0, sizeof(__frame->ConnectsToFilter));
    __frame->_p_ConnectsToFilter = &__frame->ConnectsToFilter;
    __frame->ConnectsToPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[652]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_Filter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bRendered = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bOutput = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bZero = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bMany = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_ConnectsToFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ConnectsToPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1522],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterPin(__frame->_This, __frame->Filter, __frame->Name, __frame->bRendered, __frame->bOutput, __frame->bZero, __frame->bMany, __frame->ConnectsToFilter, __frame->ConnectsToPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_RegisterPin_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_RegisterPinType_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_RegisterPinType_Proxy(
    IFilterMapper* This,
    CLSID clsFilter,
    LPCWSTR strName,
    CLSID clsMajorType,
    CLSID clsSubType)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_RegisterPinType_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!strName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 60;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)strName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1526]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)strName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1526]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsMajorType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsSubType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[678]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_RegisterPinType_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_RegisterPinType_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID clsFilter;
    void *_p_clsFilter;
    LPCWSTR strName;
    CLSID clsMajorType;
    void *_p_clsMajorType;
    CLSID clsSubType;
    void *_p_clsSubType;
};

static void __finally_IFilterMapper_RegisterPinType_Stub( struct __frame_IFilterMapper_RegisterPinType_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->strName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1524]);



}

void __RPC_STUB IFilterMapper_RegisterPinType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_RegisterPinType_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_RegisterPinType_Stub );
    MIDL_memset(&__frame->clsFilter, 0, sizeof(__frame->clsFilter));
    __frame->_p_clsFilter = &__frame->clsFilter;
    __frame->strName = 0;
    MIDL_memset(&__frame->clsMajorType, 0, sizeof(__frame->clsMajorType));
    __frame->_p_clsMajorType = &__frame->clsMajorType;
    MIDL_memset(&__frame->clsSubType, 0, sizeof(__frame->clsSubType));
    __frame->_p_clsSubType = &__frame->clsSubType;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[678]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->strName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1526],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsMajorType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsSubType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterPinType(__frame->_This, __frame->clsFilter, __frame->strName, __frame->clsMajorType, __frame->clsSubType);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_RegisterPinType_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_UnregisterFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_UnregisterFilter_Proxy(
    IFilterMapper* This,
    CLSID Filter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_UnregisterFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&Filter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[696]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_UnregisterFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_UnregisterFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID Filter;
    void *_p_Filter;
};

static void __finally_IFilterMapper_UnregisterFilter_Stub( struct __frame_IFilterMapper_UnregisterFilter_Stub *__frame )
{

}

void __RPC_STUB IFilterMapper_UnregisterFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_UnregisterFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_UnregisterFilter_Stub );
    MIDL_memset(&__frame->Filter, 0, sizeof(__frame->Filter));
    __frame->_p_Filter = &__frame->Filter;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[696]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_Filter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnregisterFilter(__frame->_This, __frame->Filter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_UnregisterFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_UnregisterFilterInstance_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_UnregisterFilterInstance_Proxy(
    IFilterMapper* This,
    CLSID MRId)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_UnregisterFilterInstance_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&MRId,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[702]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_UnregisterFilterInstance_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_UnregisterFilterInstance_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID MRId;
    void *_p_MRId;
};

static void __finally_IFilterMapper_UnregisterFilterInstance_Stub( struct __frame_IFilterMapper_UnregisterFilterInstance_Stub *__frame )
{

}

void __RPC_STUB IFilterMapper_UnregisterFilterInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_UnregisterFilterInstance_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_UnregisterFilterInstance_Stub );
    MIDL_memset(&__frame->MRId, 0, sizeof(__frame->MRId));
    __frame->_p_MRId = &__frame->MRId;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[702]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_MRId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnregisterFilterInstance(__frame->_This, __frame->MRId);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_UnregisterFilterInstance_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_UnregisterPin_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_UnregisterPin_Proxy(
    IFilterMapper* This,
    CLSID Filter,
    LPCWSTR Name)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_UnregisterPin_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!Name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1530]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&Filter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1530]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[708]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_UnregisterPin_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_UnregisterPin_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    CLSID Filter;
    void *_p_Filter;
    LPCWSTR Name;
};

static void __finally_IFilterMapper_UnregisterPin_Stub( struct __frame_IFilterMapper_UnregisterPin_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1528]);

}

void __RPC_STUB IFilterMapper_UnregisterPin_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_UnregisterPin_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_UnregisterPin_Stub );
    MIDL_memset(&__frame->Filter, 0, sizeof(__frame->Filter));
    __frame->_p_Filter = &__frame->Filter;
    __frame->Name = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[708]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_Filter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1530],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnregisterPin(__frame->_This, __frame->Filter, __frame->Name);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_UnregisterPin_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper_EnumMatchingFilters_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper_EnumMatchingFilters_Proxy(
    IFilterMapper* This,
    IEnumRegFilters **ppEnum,
    DWORD dwMerit,
    BOOL bInputNeeded,
    CLSID clsInMaj,
    CLSID clsInSub,
    BOOL bRender,
    BOOL bOutputNeeded,
    CLSID clsOutMaj,
    CLSID clsOutSub)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper_EnumMatchingFilters_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 112;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwMerit;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bInputNeeded;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsInMaj,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsInSub,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bRender;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bOutputNeeded;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsOutMaj,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&clsOutSub,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper_EnumMatchingFilters_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1550], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper_EnumMatchingFilters_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper * _This;
    HRESULT _RetVal;
    IEnumRegFilters *_W0;
    IEnumRegFilters ** ppEnum;
    DWORD dwMerit;
    BOOL bInputNeeded;
    CLSID clsInMaj;
    void *_p_clsInMaj;
    CLSID clsInSub;
    void *_p_clsInSub;
    BOOL bRender;
    BOOL bOutputNeeded;
    CLSID clsOutMaj;
    void *_p_clsOutMaj;
    CLSID clsOutSub;
    void *_p_clsOutSub;
};

static void __finally_IFilterMapper_EnumMatchingFilters_Stub( struct __frame_IFilterMapper_EnumMatchingFilters_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);









}

void __RPC_STUB IFilterMapper_EnumMatchingFilters_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper_EnumMatchingFilters_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper_EnumMatchingFilters_Stub );
    __frame->ppEnum = 0;
    MIDL_memset(&__frame->clsInMaj, 0, sizeof(__frame->clsInMaj));
    __frame->_p_clsInMaj = &__frame->clsInMaj;
    MIDL_memset(&__frame->clsInSub, 0, sizeof(__frame->clsInSub));
    __frame->_p_clsInSub = &__frame->clsInSub;
    MIDL_memset(&__frame->clsOutMaj, 0, sizeof(__frame->clsOutMaj));
    __frame->_p_clsOutMaj = &__frame->clsOutMaj;
    MIDL_memset(&__frame->clsOutSub, 0, sizeof(__frame->clsOutSub));
    __frame->_p_clsOutSub = &__frame->clsOutSub;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwMerit = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bInputNeeded = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsInMaj,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsInSub,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bRender = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bOutputNeeded = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsOutMaj,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_clsOutSub,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumMatchingFilters(__frame->_This, __frame->ppEnum, __frame->dwMerit, __frame->bInputNeeded, __frame->clsInMaj, __frame->clsInSub, __frame->bRender, __frame->bOutputNeeded, __frame->clsOutMaj, __frame->clsOutSub);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper_EnumMatchingFilters_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFilterMapper_FormatStringOffsetTable[] =
{
    626,  /* IFilterMapper::RegisterFilter */
    638,  /* IFilterMapper::RegisterFilterInstance */
    652,  /* IFilterMapper::RegisterPin */
    678,  /* IFilterMapper::RegisterPinType */
    696,  /* IFilterMapper::UnregisterFilter */
    702,  /* IFilterMapper::UnregisterFilterInstance */
    708,  /* IFilterMapper::UnregisterPin */
    718,  /* IFilterMapper::EnumMatchingFilters */
};

static const CINTERFACE_PROXY_VTABLE(11) _IFilterMapperProxyVtbl =
{
    {
        &IID_IFilterMapper,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterMapper_RegisterFilter_Proxy,
        IFilterMapper_RegisterFilterInstance_Proxy,
        IFilterMapper_RegisterPin_Proxy,
        IFilterMapper_RegisterPinType_Proxy,
        IFilterMapper_UnregisterFilter_Proxy,
        IFilterMapper_UnregisterFilterInstance_Proxy,
        IFilterMapper_UnregisterPin_Proxy,
        IFilterMapper_EnumMatchingFilters_Proxy,
    }
};

static const MIDL_SERVER_INFO IFilterMapper_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFilterMapper_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFilterMapper_table[] =
{
    IFilterMapper_RegisterFilter_Stub,
    IFilterMapper_RegisterFilterInstance_Stub,
    IFilterMapper_RegisterPin_Stub,
    IFilterMapper_RegisterPinType_Stub,
    IFilterMapper_UnregisterFilter_Stub,
    IFilterMapper_UnregisterFilterInstance_Stub,
    IFilterMapper_UnregisterPin_Stub,
    IFilterMapper_EnumMatchingFilters_Stub
};

static const CInterfaceStubVtbl _IFilterMapperStubVtbl =
{
    {
        &IID_IFilterMapper,
        &IFilterMapper_ServerInfo,
        11,
        &IFilterMapper_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFilterMapper2 interface
 */
static void __finally_IFilterMapper2_CreateCategory_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper2_CreateCategory_Proxy(
    IFilterMapper2* This,
    REFCLSID clsidCategory,
    DWORD dwCategoryMerit,
    LPCWSTR Description)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper2_CreateCategory_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!clsidCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!Description) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Description,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1560]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsidCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwCategoryMerit;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Description,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1560]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[748]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper2_CreateCategory_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper2_CreateCategory_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper2 * _This;
    HRESULT _RetVal;
    REFCLSID clsidCategory;
    DWORD dwCategoryMerit;
    LPCWSTR Description;
};

static void __finally_IFilterMapper2_CreateCategory_Stub( struct __frame_IFilterMapper2_CreateCategory_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Description,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1558]);

}

void __RPC_STUB IFilterMapper2_CreateCategory_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper2_CreateCategory_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper2_CreateCategory_Stub );
    __frame->clsidCategory = 0;
    __frame->Description = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[748]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsidCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwCategoryMerit = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Description,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1560],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateCategory(__frame->_This, __frame->clsidCategory, __frame->dwCategoryMerit, __frame->Description);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper2_CreateCategory_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper2_UnregisterFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper2_UnregisterFilter_Proxy(
    IFilterMapper2* This,
    const CLSID *pclsidCategory,
    LPCOLESTR szInstance,
    REFCLSID Filter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper2_UnregisterFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pclsidCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!szInstance) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!Filter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)szInstance,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1586]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pclsidCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1568]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)szInstance,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1586]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Filter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[760]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper2_UnregisterFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper2_UnregisterFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper2 * _This;
    HRESULT _RetVal;
    const CLSID * pclsidCategory;
    LPCOLESTR szInstance;
    REFCLSID Filter;
};

static void __finally_IFilterMapper2_UnregisterFilter_Stub( struct __frame_IFilterMapper2_UnregisterFilter_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->szInstance,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1584]);


}

void __RPC_STUB IFilterMapper2_UnregisterFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper2_UnregisterFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper2_UnregisterFilter_Stub );
    __frame->pclsidCategory = 0;
    __frame->szInstance = 0;
    __frame->Filter = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[760]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pclsidCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1568],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->szInstance,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1586],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Filter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->UnregisterFilter(__frame->_This, __frame->pclsidCategory, __frame->szInstance, __frame->Filter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper2_UnregisterFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper2_RegisterFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper2_RegisterFilter_Proxy(
    IFilterMapper2* This,
    REFCLSID clsidFilter,
    LPCWSTR Name,
    IMoniker **ppMoniker,
    const CLSID *pclsidCategory,
    LPCOLESTR szInstance,
    const REGFILTER2 *prf2)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper2_RegisterFilter_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!clsidFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!Name) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppMoniker) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pclsidCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!szInstance) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prf2) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1598]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)szInstance,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1646]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)prf2,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1968]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)clsidFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)Name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1598]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pclsidCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1628]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)szInstance,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1646]);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)prf2,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1968]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[774]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper2_RegisterFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1618], (void *)ppMoniker );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper2_RegisterFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper2 * _This;
    HRESULT _RetVal;
    REFCLSID clsidFilter;
    LPCWSTR Name;
    IMoniker ** ppMoniker;
    const CLSID * pclsidCategory;
    LPCOLESTR szInstance;
    const REGFILTER2 * prf2;
};

static void __finally_IFilterMapper2_RegisterFilter_Stub( struct __frame_IFilterMapper2_RegisterFilter_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->Name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1596]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppMoniker,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->szInstance,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1644]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prf2,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1984]);

}

void __RPC_STUB IFilterMapper2_RegisterFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper2_RegisterFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper2_RegisterFilter_Stub );
    __frame->clsidFilter = 0;
    __frame->Name = 0;
    __frame->ppMoniker = 0;
    __frame->pclsidCategory = 0;
    __frame->szInstance = 0;
    __frame->prf2 = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[774]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->clsidFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->Name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1598],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pclsidCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1628],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->szInstance,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1646],
            0);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->prf2,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1968],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterFilter(__frame->_This, __frame->clsidFilter, __frame->Name, __frame->ppMoniker, __frame->pclsidCategory, __frame->szInstance, __frame->prf2);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper2_RegisterFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterMapper2_EnumMatchingFilters_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper2_EnumMatchingFilters_Proxy(
    IFilterMapper2* This,
    IEnumMoniker **ppEnum,
    DWORD dwFlags,
    BOOL bExactMatch,
    DWORD dwMerit,
    BOOL bInputNeeded,
    DWORD cInputTypes,
    const GUID *pInputTypes,
    const REGPINMEDIUM *pMedIn,
    const CLSID *pPinCategoryIn,
    BOOL bRender,
    BOOL bOutputNeeded,
    DWORD cOutputTypes,
    const GUID *pOutputTypes,
    const REGPINMEDIUM *pMedOut,
    const CLSID *pPinCategoryOut)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper2_EnumMatchingFilters_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pInputTypes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pMedIn) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pPinCategoryIn) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pOutputTypes) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pMedOut) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pPinCategoryOut) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 160;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(cInputTypes * 2);

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pInputTypes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2028]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(cOutputTypes * 2);

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pOutputTypes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2102]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bExactMatch;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwMerit;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bInputNeeded;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = cInputTypes;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(cInputTypes * 2);

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pInputTypes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2028]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pMedIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2046]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPinCategoryIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2068]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bRender;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bOutputNeeded;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = cOutputTypes;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(cOutputTypes * 2);

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pOutputTypes,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2102]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pMedOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2120]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPinCategoryOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2142]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[800]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2006],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper2_EnumMatchingFilters_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2006], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper2_EnumMatchingFilters_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper2 * _This;
    HRESULT _RetVal;
    IEnumMoniker *_W0;
    IEnumMoniker ** ppEnum;
    DWORD dwFlags;
    BOOL bExactMatch;
    DWORD dwMerit;
    BOOL bInputNeeded;
    DWORD cInputTypes;
    const GUID * pInputTypes;
    const REGPINMEDIUM * pMedIn;
    const CLSID * pPinCategoryIn;
    BOOL bRender;
    BOOL bOutputNeeded;
    DWORD cOutputTypes;
    const GUID * pOutputTypes;
    const REGPINMEDIUM * pMedOut;
    const CLSID * pPinCategoryOut;
};

static void __finally_IFilterMapper2_EnumMatchingFilters_Stub( struct __frame_IFilterMapper2_EnumMatchingFilters_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2006]);






    __frame->_StubMsg.MaxCount = (ULONG_PTR)(__frame->cInputTypes * 2);

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pInputTypes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2028]);






    __frame->_StubMsg.MaxCount = (ULONG_PTR)(__frame->cOutputTypes * 2);

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pOutputTypes,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2102]);



}

void __RPC_STUB IFilterMapper2_EnumMatchingFilters_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper2_EnumMatchingFilters_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper2_EnumMatchingFilters_Stub );
    __frame->ppEnum = 0;
    __frame->pInputTypes = 0;
    __frame->pMedIn = 0;
    __frame->pPinCategoryIn = 0;
    __frame->pOutputTypes = 0;
    __frame->pMedOut = 0;
    __frame->pPinCategoryOut = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[800]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bExactMatch = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwMerit = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bInputNeeded = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cInputTypes = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pInputTypes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2028],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pMedIn,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2046],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPinCategoryIn,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2068],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bRender = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bOutputNeeded = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cOutputTypes = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pOutputTypes,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2102],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pMedOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2120],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPinCategoryOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2142],
            0);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EnumMatchingFilters(__frame->_This, __frame->ppEnum, __frame->dwFlags, __frame->bExactMatch, __frame->dwMerit, __frame->bInputNeeded, __frame->cInputTypes, __frame->pInputTypes, __frame->pMedIn, __frame->pPinCategoryIn, __frame->bRender, __frame->bOutputNeeded, __frame->cOutputTypes, __frame->pOutputTypes, __frame->pMedOut, __frame->pPinCategoryOut);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2006]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2006]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper2_EnumMatchingFilters_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFilterMapper2_FormatStringOffsetTable[] =
{
    748,  /* IFilterMapper2::CreateCategory */
    760,  /* IFilterMapper2::UnregisterFilter */
    774,  /* IFilterMapper2::RegisterFilter */
    800,  /* IFilterMapper2::EnumMatchingFilters */
};

static const CINTERFACE_PROXY_VTABLE(7) _IFilterMapper2ProxyVtbl =
{
    {
        &IID_IFilterMapper2,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterMapper2_CreateCategory_Proxy,
        IFilterMapper2_UnregisterFilter_Proxy,
        IFilterMapper2_RegisterFilter_Proxy,
        IFilterMapper2_EnumMatchingFilters_Proxy,
    }
};

static const MIDL_SERVER_INFO IFilterMapper2_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFilterMapper2_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFilterMapper2_table[] =
{
    IFilterMapper2_CreateCategory_Stub,
    IFilterMapper2_UnregisterFilter_Stub,
    IFilterMapper2_RegisterFilter_Stub,
    IFilterMapper2_EnumMatchingFilters_Stub
};

static const CInterfaceStubVtbl _IFilterMapper2StubVtbl =
{
    {
        &IID_IFilterMapper2,
        &IFilterMapper2_ServerInfo,
        7,
        &IFilterMapper2_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFilterMapper3 interface
 */
static void __finally_IFilterMapper3_GetICreateDevEnum_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterMapper3_GetICreateDevEnum_Proxy(
    IFilterMapper3* This,
    ICreateDevEnum **ppEnum)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterMapper3_GetICreateDevEnum_Proxy );
    __frame->This = This;
    if (ppEnum) MIDL_memset( ppEnum, 0, sizeof( *ppEnum ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!ppEnum) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[846]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppEnum,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterMapper3_GetICreateDevEnum_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2176], (void *)ppEnum );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterMapper3_GetICreateDevEnum_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterMapper3 * _This;
    HRESULT _RetVal;
    ICreateDevEnum *_W0;
    ICreateDevEnum ** ppEnum;
};

static void __finally_IFilterMapper3_GetICreateDevEnum_Stub( struct __frame_IFilterMapper3_GetICreateDevEnum_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppEnum,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176]);

}

void __RPC_STUB IFilterMapper3_GetICreateDevEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterMapper3_GetICreateDevEnum_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterMapper3*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterMapper3_GetICreateDevEnum_Stub );
    __frame->ppEnum = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[846]);


        __frame->ppEnum = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetICreateDevEnum(__frame->_This, __frame->ppEnum);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppEnum,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterMapper3_GetICreateDevEnum_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFilterMapper3_FormatStringOffsetTable[] =
{
    748,  /* IFilterMapper2::CreateCategory */
    760,  /* IFilterMapper2::UnregisterFilter */
    774,  /* IFilterMapper2::RegisterFilter */
    800,  /* IFilterMapper2::EnumMatchingFilters */
    846,  /* IFilterMapper3::GetICreateDevEnum */
};

static const CINTERFACE_PROXY_VTABLE(8) _IFilterMapper3ProxyVtbl =
{
    {
        &IID_IFilterMapper3,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterMapper2_CreateCategory_Proxy,
        IFilterMapper2_UnregisterFilter_Proxy,
        IFilterMapper2_RegisterFilter_Proxy,
        IFilterMapper2_EnumMatchingFilters_Proxy,
        IFilterMapper3_GetICreateDevEnum_Proxy,
    }
};

static const MIDL_SERVER_INFO IFilterMapper3_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFilterMapper3_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFilterMapper3_table[] =
{
    IFilterMapper2_CreateCategory_Stub,
    IFilterMapper2_UnregisterFilter_Stub,
    IFilterMapper2_RegisterFilter_Stub,
    IFilterMapper2_EnumMatchingFilters_Stub,
    IFilterMapper3_GetICreateDevEnum_Stub
};

static const CInterfaceStubVtbl _IFilterMapper3StubVtbl =
{
    {
        &IID_IFilterMapper3,
        &IFilterMapper3_ServerInfo,
        8,
        &IFilterMapper3_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IQualityControl interface
 */
static void __finally_IQualityControl_Notify_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IQualityControl_Notify_Proxy(
    IQualityControl* This,
    IBaseFilter *pSelf,
    Quality q)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IQualityControl_Notify_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSelf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2180]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)&q,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2198]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSelf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2180]);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&q,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2198]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[852]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IQualityControl_Notify_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IQualityControl_Notify_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IQualityControl * _This;
    HRESULT _RetVal;
    IBaseFilter * pSelf;
    Quality q;
    void *_p_q;
};

static void __finally_IQualityControl_Notify_Stub( struct __frame_IQualityControl_Notify_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSelf,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2180]);

    NdrComplexStructFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->q,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2198]);

}

void __RPC_STUB IQualityControl_Notify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IQualityControl_Notify_Stub __f, * const __frame = &__f;

    __frame->_This = (IQualityControl*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IQualityControl_Notify_Stub );
    __frame->pSelf = 0;
    MIDL_memset(&__frame->q, 0, sizeof(__frame->q));
    __frame->_p_q = &__frame->q;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[852]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSelf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2180],
            0);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->_p_q,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2198],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Notify(__frame->_This, __frame->pSelf, __frame->q);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IQualityControl_Notify_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IQualityControl_SetSink_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IQualityControl_SetSink_Proxy(
    IQualityControl* This,
    IQualityControl *piqc)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IQualityControl_SetSink_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)piqc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)piqc,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[862]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IQualityControl_SetSink_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IQualityControl_SetSink_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IQualityControl * _This;
    HRESULT _RetVal;
    IQualityControl * piqc;
};

static void __finally_IQualityControl_SetSink_Stub( struct __frame_IQualityControl_SetSink_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->piqc,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212]);

}

void __RPC_STUB IQualityControl_SetSink_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IQualityControl_SetSink_Stub __f, * const __frame = &__f;

    __frame->_This = (IQualityControl*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IQualityControl_SetSink_Stub );
    __frame->piqc = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[862]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->piqc,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2212],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetSink(__frame->_This, __frame->piqc);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IQualityControl_SetSink_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IQualityControl_FormatStringOffsetTable[] =
{
    852,  /* IQualityControl::Notify */
    862,  /* IQualityControl::SetSink */
};

static const CINTERFACE_PROXY_VTABLE(5) _IQualityControlProxyVtbl =
{
    {
        &IID_IQualityControl,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IQualityControl_Notify_Proxy,
        IQualityControl_SetSink_Proxy,
    }
};

static const MIDL_SERVER_INFO IQualityControl_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IQualityControl_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IQualityControl_table[] =
{
    IQualityControl_Notify_Stub,
    IQualityControl_SetSink_Stub
};

static const CInterfaceStubVtbl _IQualityControlStubVtbl =
{
    {
        &IID_IQualityControl,
        &IQualityControl_ServerInfo,
        5,
        &IQualityControl_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IMediaEventSink interface
 */
static void __finally_IMediaEventSink_Notify_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IMediaEventSink_Notify_Proxy(
    IMediaEventSink* This,
    LONG EventCode,
    LONG_PTR EventParam1,
    LONG_PTR EventParam2)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IMediaEventSink_Notify_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = EventCode;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&EventParam1,
                0xb8 /* FC_INT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&EventParam2,
                0xb8 /* FC_INT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[868]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IMediaEventSink_Notify_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IMediaEventSink_Notify_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IMediaEventSink * _This;
    HRESULT _RetVal;
    LONG EventCode;
    LONG_PTR EventParam1;
    LONG_PTR EventParam2;
};

static void __finally_IMediaEventSink_Notify_Stub( struct __frame_IMediaEventSink_Notify_Stub *__frame )
{



}

void __RPC_STUB IMediaEventSink_Notify_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IMediaEventSink_Notify_Stub __f, * const __frame = &__f;

    __frame->_This = (IMediaEventSink*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IMediaEventSink_Notify_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[868]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->EventCode = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->EventParam1,
            0xb8 /* FC_INT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->EventParam2,
            0xb8 /* FC_INT3264 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Notify(__frame->_This, __frame->EventCode, __frame->EventParam1, __frame->EventParam2);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IMediaEventSink_Notify_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IMediaEventSink_FormatStringOffsetTable[] =
{
    868,  /* IMediaEventSink::Notify */
};

static const CINTERFACE_PROXY_VTABLE(4) _IMediaEventSinkProxyVtbl =
{
    {
        &IID_IMediaEventSink,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IMediaEventSink_Notify_Proxy,
    }
};

static const MIDL_SERVER_INFO IMediaEventSink_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IMediaEventSink_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IMediaEventSink_table[] =
{
    IMediaEventSink_Notify_Stub
};

static const CInterfaceStubVtbl _IMediaEventSinkStubVtbl =
{
    {
        &IID_IMediaEventSink,
        &IMediaEventSink_ServerInfo,
        4,
        &IMediaEventSink_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFileSourceFilter interface
 */
static void __finally_IFileSourceFilter_Load_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSourceFilter_Load_Proxy(
    IFileSourceFilter* This,
    LPCOLESTR pszFileName,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSourceFilter_Load_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pszFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2232]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2280]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2232]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2280]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[876]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSourceFilter_Load_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSourceFilter_Load_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSourceFilter * _This;
    HRESULT _RetVal;
    LPCOLESTR pszFileName;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IFileSourceFilter_Load_Stub( struct __frame_IFileSourceFilter_Load_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pszFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2230]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2280]);

}

void __RPC_STUB IFileSourceFilter_Load_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSourceFilter_Load_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSourceFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSourceFilter_Load_Stub );
    __frame->pszFileName = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[876]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2232],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2280],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Load(__frame->_This, __frame->pszFileName, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSourceFilter_Load_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFileSourceFilter_GetCurFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSourceFilter_GetCurFile_Proxy(
    IFileSourceFilter* This,
    LPOLESTR *ppszFileName,
    AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSourceFilter_GetCurFile_Proxy );
    __frame->This = This;
    if (ppszFileName) MIDL_memset( ppszFileName, 0, sizeof( *ppszFileName ));
    if (pmt) MIDL_memset( pmt, 0, sizeof( *pmt ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppszFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[886]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2284],
                0);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSourceFilter_GetCurFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2288], (void *)ppszFileName );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2292], (void *)pmt );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSourceFilter_GetCurFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSourceFilter * _This;
    HRESULT _RetVal;
    LPOLESTR _W0;
    LPOLESTR * ppszFileName;
    AM_MEDIA_TYPE _W1;
    AM_MEDIA_TYPE * pmt;
};

static void __finally_IFileSourceFilter_GetCurFile_Stub( struct __frame_IFileSourceFilter_GetCurFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppszFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2284]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2292]);

}

void __RPC_STUB IFileSourceFilter_GetCurFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSourceFilter_GetCurFile_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSourceFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSourceFilter_GetCurFile_Stub );
    __frame->ppszFileName = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[886]);


        __frame->ppszFileName = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pmt = &__frame->_W1;
        memset(&__frame->_W1, 0, sizeof(__frame->_W1));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCurFile(__frame->_This, __frame->ppszFileName, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2284]);

        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2284]);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSourceFilter_GetCurFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFileSourceFilter_FormatStringOffsetTable[] =
{
    876,  /* IFileSourceFilter::Load */
    886,  /* IFileSourceFilter::GetCurFile */
};

static const CINTERFACE_PROXY_VTABLE(5) _IFileSourceFilterProxyVtbl =
{
    {
        &IID_IFileSourceFilter,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFileSourceFilter_Load_Proxy,
        IFileSourceFilter_GetCurFile_Proxy,
    }
};

static const MIDL_SERVER_INFO IFileSourceFilter_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFileSourceFilter_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFileSourceFilter_table[] =
{
    IFileSourceFilter_Load_Stub,
    IFileSourceFilter_GetCurFile_Stub
};

static const CInterfaceStubVtbl _IFileSourceFilterStubVtbl =
{
    {
        &IID_IFileSourceFilter,
        &IFileSourceFilter_ServerInfo,
        5,
        &IFileSourceFilter_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFileSinkFilter interface
 */
static void __finally_IFileSinkFilter_SetFileName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSinkFilter_SetFileName_Proxy(
    IFileSinkFilter* This,
    LPCOLESTR pszFileName,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSinkFilter_SetFileName_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pszFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2298]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2346]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2298]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2346]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[896]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSinkFilter_SetFileName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSinkFilter_SetFileName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSinkFilter * _This;
    HRESULT _RetVal;
    LPCOLESTR pszFileName;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IFileSinkFilter_SetFileName_Stub( struct __frame_IFileSinkFilter_SetFileName_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pszFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2296]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2346]);

}

void __RPC_STUB IFileSinkFilter_SetFileName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSinkFilter_SetFileName_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSinkFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSinkFilter_SetFileName_Stub );
    __frame->pszFileName = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[896]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2298],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2346],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFileName(__frame->_This, __frame->pszFileName, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSinkFilter_SetFileName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFileSinkFilter_GetCurFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSinkFilter_GetCurFile_Proxy(
    IFileSinkFilter* This,
    LPOLESTR *ppszFileName,
    AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSinkFilter_GetCurFile_Proxy );
    __frame->This = This;
    if (ppszFileName) MIDL_memset( ppszFileName, 0, sizeof( *ppszFileName ));
    if (pmt) MIDL_memset( pmt, 0, sizeof( *pmt ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppszFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[906]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppszFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2350],
                0);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSinkFilter_GetCurFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2354], (void *)ppszFileName );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2358], (void *)pmt );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSinkFilter_GetCurFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSinkFilter * _This;
    HRESULT _RetVal;
    LPOLESTR _W0;
    LPOLESTR * ppszFileName;
    AM_MEDIA_TYPE _W1;
    AM_MEDIA_TYPE * pmt;
};

static void __finally_IFileSinkFilter_GetCurFile_Stub( struct __frame_IFileSinkFilter_GetCurFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppszFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2350]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2358]);

}

void __RPC_STUB IFileSinkFilter_GetCurFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSinkFilter_GetCurFile_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSinkFilter*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSinkFilter_GetCurFile_Stub );
    __frame->ppszFileName = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[906]);


        __frame->ppszFileName = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pmt = &__frame->_W1;
        memset(&__frame->_W1, 0, sizeof(__frame->_W1));

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetCurFile(__frame->_This, __frame->ppszFileName, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2350]);

        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppszFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2350]);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSinkFilter_GetCurFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFileSinkFilter_FormatStringOffsetTable[] =
{
    896,  /* IFileSinkFilter::SetFileName */
    906,  /* IFileSinkFilter::GetCurFile */
};

static const CINTERFACE_PROXY_VTABLE(5) _IFileSinkFilterProxyVtbl =
{
    {
        &IID_IFileSinkFilter,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFileSinkFilter_SetFileName_Proxy,
        IFileSinkFilter_GetCurFile_Proxy,
    }
};

static const MIDL_SERVER_INFO IFileSinkFilter_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFileSinkFilter_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFileSinkFilter_table[] =
{
    IFileSinkFilter_SetFileName_Stub,
    IFileSinkFilter_GetCurFile_Stub
};

static const CInterfaceStubVtbl _IFileSinkFilterStubVtbl =
{
    {
        &IID_IFileSinkFilter,
        &IFileSinkFilter_ServerInfo,
        5,
        &IFileSinkFilter_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFileSinkFilter2 interface
 */
static void __finally_IFileSinkFilter2_SetMode_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSinkFilter2_SetMode_Proxy(
    IFileSinkFilter2* This,
    DWORD dwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSinkFilter2_SetMode_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[916]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSinkFilter2_SetMode_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSinkFilter2_SetMode_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSinkFilter2 * _This;
    HRESULT _RetVal;
    DWORD dwFlags;
};

static void __finally_IFileSinkFilter2_SetMode_Stub( struct __frame_IFileSinkFilter2_SetMode_Stub *__frame )
{

}

void __RPC_STUB IFileSinkFilter2_SetMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSinkFilter2_SetMode_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSinkFilter2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSinkFilter2_SetMode_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[916]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetMode(__frame->_This, __frame->dwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSinkFilter2_SetMode_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFileSinkFilter2_GetMode_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFileSinkFilter2_GetMode_Proxy(
    IFileSinkFilter2* This,
    DWORD *pdwFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFileSinkFilter2_GetMode_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pdwFlags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[920]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFileSinkFilter2_GetMode_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2362], (void *)pdwFlags );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFileSinkFilter2_GetMode_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFileSinkFilter2 * _This;
    HRESULT _RetVal;
    DWORD _W0;
    DWORD * pdwFlags;
};

static void __finally_IFileSinkFilter2_GetMode_Stub( struct __frame_IFileSinkFilter2_GetMode_Stub *__frame )
{

}

void __RPC_STUB IFileSinkFilter2_GetMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFileSinkFilter2_GetMode_Stub __f, * const __frame = &__f;

    __frame->_This = (IFileSinkFilter2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFileSinkFilter2_GetMode_Stub );
    __frame->pdwFlags = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[920]);


        __frame->pdwFlags = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetMode(__frame->_This, __frame->pdwFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pdwFlags;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFileSinkFilter2_GetMode_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFileSinkFilter2_FormatStringOffsetTable[] =
{
    896,  /* IFileSinkFilter::SetFileName */
    906,  /* IFileSinkFilter::GetCurFile */
    916,  /* IFileSinkFilter2::SetMode */
    920,  /* IFileSinkFilter2::GetMode */
};

static const CINTERFACE_PROXY_VTABLE(7) _IFileSinkFilter2ProxyVtbl =
{
    {
        &IID_IFileSinkFilter2,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFileSinkFilter_SetFileName_Proxy,
        IFileSinkFilter_GetCurFile_Proxy,
        IFileSinkFilter2_SetMode_Proxy,
        IFileSinkFilter2_GetMode_Proxy,
    }
};

static const MIDL_SERVER_INFO IFileSinkFilter2_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFileSinkFilter2_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFileSinkFilter2_table[] =
{
    IFileSinkFilter_SetFileName_Stub,
    IFileSinkFilter_GetCurFile_Stub,
    IFileSinkFilter2_SetMode_Stub,
    IFileSinkFilter2_GetMode_Stub
};

static const CInterfaceStubVtbl _IFileSinkFilter2StubVtbl =
{
    {
        &IID_IFileSinkFilter2,
        &IFileSinkFilter2_ServerInfo,
        7,
        &IFileSinkFilter2_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IGraphBuilder interface
 */
static void __finally_IGraphBuilder_Connect_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_Connect_Proxy(
    IGraphBuilder* This,
    IPin *ppinOut,
    IPin *ppinIn)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_Connect_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2366]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppinIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2384]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2366]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppinIn,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2384]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[926]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_Connect_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_Connect_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
    IPin * ppinOut;
    IPin * ppinIn;
};

static void __finally_IGraphBuilder_Connect_Stub( struct __frame_IGraphBuilder_Connect_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppinOut,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2366]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppinIn,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2384]);

}

void __RPC_STUB IGraphBuilder_Connect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_Connect_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_Connect_Stub );
    __frame->ppinOut = 0;
    __frame->ppinIn = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[926]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppinOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2366],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppinIn,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2384],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Connect(__frame->_This, __frame->ppinOut, __frame->ppinIn);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_Connect_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_Render_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_Render_Proxy(
    IGraphBuilder* This,
    IPin *ppinOut)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_Render_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2402]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2402]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[936]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_Render_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_Render_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
    IPin * ppinOut;
};

static void __finally_IGraphBuilder_Render_Stub( struct __frame_IGraphBuilder_Render_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppinOut,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2402]);

}

void __RPC_STUB IGraphBuilder_Render_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_Render_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_Render_Stub );
    __frame->ppinOut = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[936]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppinOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2402],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Render(__frame->_This, __frame->ppinOut);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_Render_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_RenderFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_RenderFile_Proxy(
    IGraphBuilder* This,
    LPCWSTR lpcwstrFile,
    LPCWSTR lpcwstrPlayList)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_RenderFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        if (!lpcwstrFile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2422]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrPlayList,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2422]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrPlayList,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[942]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_RenderFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_RenderFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
    LPCWSTR lpcwstrFile;
    LPCWSTR lpcwstrPlayList;
};

static void __finally_IGraphBuilder_RenderFile_Stub( struct __frame_IGraphBuilder_RenderFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpcwstrFile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2420]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpcwstrPlayList,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322]);

}

void __RPC_STUB IGraphBuilder_RenderFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_RenderFile_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_RenderFile_Stub );
    __frame->lpcwstrFile = 0;
    __frame->lpcwstrPlayList = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[942]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpcwstrFile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2422],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpcwstrPlayList,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RenderFile(__frame->_This, __frame->lpcwstrFile, __frame->lpcwstrPlayList);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_RenderFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_AddSourceFilter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_AddSourceFilter_Proxy(
    IGraphBuilder* This,
    LPCWSTR lpcwstrFileName,
    LPCWSTR lpcwstrFilterName,
    IBaseFilter **ppFilter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_AddSourceFilter_Proxy );
    __frame->This = This;
    if (ppFilter) MIDL_memset( ppFilter, 0, sizeof( *ppFilter ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!lpcwstrFileName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2430]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFilterName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFileName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2430]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFilterName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[952]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2454],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_AddSourceFilter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2454], (void *)ppFilter );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_AddSourceFilter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
    LPCWSTR lpcwstrFileName;
    LPCWSTR lpcwstrFilterName;
    IBaseFilter *_W0;
    IBaseFilter ** ppFilter;
};

static void __finally_IGraphBuilder_AddSourceFilter_Stub( struct __frame_IGraphBuilder_AddSourceFilter_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpcwstrFileName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2428]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpcwstrFilterName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2454]);

}

void __RPC_STUB IGraphBuilder_AddSourceFilter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_AddSourceFilter_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_AddSourceFilter_Stub );
    __frame->lpcwstrFileName = 0;
    __frame->lpcwstrFilterName = 0;
    __frame->ppFilter = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[952]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpcwstrFileName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2430],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpcwstrFilterName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322],
            0);


        __frame->ppFilter = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AddSourceFilter(__frame->_This, __frame->lpcwstrFileName, __frame->lpcwstrFilterName, __frame->ppFilter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2454]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2454]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_AddSourceFilter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_SetLogFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_SetLogFile_Proxy(
    IGraphBuilder* This,
    DWORD_PTR hFile)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_SetLogFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hFile,
                0xb9 /* FC_UINT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[966]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_SetLogFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_SetLogFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
    DWORD_PTR hFile;
};

static void __finally_IGraphBuilder_SetLogFile_Stub( struct __frame_IGraphBuilder_SetLogFile_Stub *__frame )
{

}

void __RPC_STUB IGraphBuilder_SetLogFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_SetLogFile_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_SetLogFile_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[966]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hFile,
            0xb9 /* FC_UINT3264 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetLogFile(__frame->_This, __frame->hFile);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_SetLogFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_Abort_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_Abort_Proxy(
    IGraphBuilder* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_Abort_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[970]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_Abort_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_Abort_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
};

static void __finally_IGraphBuilder_Abort_Stub( struct __frame_IGraphBuilder_Abort_Stub *__frame )
{
}

void __RPC_STUB IGraphBuilder_Abort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_Abort_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_Abort_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[970]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Abort(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_Abort_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IGraphBuilder_ShouldOperationContinue_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphBuilder_ShouldOperationContinue_Proxy(
    IGraphBuilder* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphBuilder_ShouldOperationContinue_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[972]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphBuilder_ShouldOperationContinue_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphBuilder_ShouldOperationContinue_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphBuilder * _This;
    HRESULT _RetVal;
};

static void __finally_IGraphBuilder_ShouldOperationContinue_Stub( struct __frame_IGraphBuilder_ShouldOperationContinue_Stub *__frame )
{
}

void __RPC_STUB IGraphBuilder_ShouldOperationContinue_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphBuilder_ShouldOperationContinue_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphBuilder_ShouldOperationContinue_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[972]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ShouldOperationContinue(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphBuilder_ShouldOperationContinue_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IGraphBuilder_FormatStringOffsetTable[] =
{
    148,  /* IFilterGraph::AddFilter */
    158,  /* IFilterGraph::RemoveFilter */
    164,  /* IFilterGraph::EnumFilters */
    170,  /* IFilterGraph::FindFilterByName */
    180,  /* IFilterGraph::ConnectDirect */
    194,  /* IFilterGraph::Reconnect */
    200,  /* IFilterGraph::Disconnect */
    206,  /* IFilterGraph::SetDefaultSyncSource */
    926,  /* IGraphBuilder::Connect */
    936,  /* IGraphBuilder::Render */
    942,  /* IGraphBuilder::RenderFile */
    952,  /* IGraphBuilder::AddSourceFilter */
    966,  /* IGraphBuilder::SetLogFile */
    970,  /* IGraphBuilder::Abort */
    972,  /* IGraphBuilder::ShouldOperationContinue */
};

static const CINTERFACE_PROXY_VTABLE(18) _IGraphBuilderProxyVtbl =
{
    {
        &IID_IGraphBuilder,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterGraph_AddFilter_Proxy,
        IFilterGraph_RemoveFilter_Proxy,
        IFilterGraph_EnumFilters_Proxy,
        IFilterGraph_FindFilterByName_Proxy,
        IFilterGraph_ConnectDirect_Proxy,
        IFilterGraph_Reconnect_Proxy,
        IFilterGraph_Disconnect_Proxy,
        IFilterGraph_SetDefaultSyncSource_Proxy,
        IGraphBuilder_Connect_Proxy,
        IGraphBuilder_Render_Proxy,
        IGraphBuilder_RenderFile_Proxy,
        IGraphBuilder_AddSourceFilter_Proxy,
        IGraphBuilder_SetLogFile_Proxy,
        IGraphBuilder_Abort_Proxy,
        IGraphBuilder_ShouldOperationContinue_Proxy,
    }
};

static const MIDL_SERVER_INFO IGraphBuilder_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IGraphBuilder_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IGraphBuilder_table[] =
{
    IFilterGraph_AddFilter_Stub,
    IFilterGraph_RemoveFilter_Stub,
    IFilterGraph_EnumFilters_Stub,
    IFilterGraph_FindFilterByName_Stub,
    IFilterGraph_ConnectDirect_Stub,
    IFilterGraph_Reconnect_Stub,
    IFilterGraph_Disconnect_Stub,
    IFilterGraph_SetDefaultSyncSource_Stub,
    IGraphBuilder_Connect_Stub,
    IGraphBuilder_Render_Stub,
    IGraphBuilder_RenderFile_Stub,
    IGraphBuilder_AddSourceFilter_Stub,
    IGraphBuilder_SetLogFile_Stub,
    IGraphBuilder_Abort_Stub,
    IGraphBuilder_ShouldOperationContinue_Stub
};

static const CInterfaceStubVtbl _IGraphBuilderStubVtbl =
{
    {
        &IID_IGraphBuilder,
        &IGraphBuilder_ServerInfo,
        18,
        &IGraphBuilder_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICaptureGraphBuilder interface
 */
static void __finally_ICaptureGraphBuilder_SetFiltergraph_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_SetFiltergraph_Proxy(
    ICaptureGraphBuilder* This,
    IGraphBuilder *pfg)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_SetFiltergraph_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2458]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2458]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[974]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_SetFiltergraph_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_SetFiltergraph_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    IGraphBuilder * pfg;
};

static void __finally_ICaptureGraphBuilder_SetFiltergraph_Stub( struct __frame_ICaptureGraphBuilder_SetFiltergraph_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2458]);

}

void __RPC_STUB ICaptureGraphBuilder_SetFiltergraph_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_SetFiltergraph_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_SetFiltergraph_Stub );
    __frame->pfg = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[974]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2458],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFiltergraph(__frame->_This, __frame->pfg);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_SetFiltergraph_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_GetFiltergraph_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_GetFiltergraph_Proxy(
    ICaptureGraphBuilder* This,
    IGraphBuilder **ppfg)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_GetFiltergraph_Proxy );
    __frame->This = This;
    if (ppfg) MIDL_memset( ppfg, 0, sizeof( *ppfg ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppfg) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[980]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2494],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_GetFiltergraph_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2494], (void *)ppfg );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_GetFiltergraph_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    IGraphBuilder *_W0;
    IGraphBuilder ** ppfg;
};

static void __finally_ICaptureGraphBuilder_GetFiltergraph_Stub( struct __frame_ICaptureGraphBuilder_GetFiltergraph_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppfg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2494]);

}

void __RPC_STUB ICaptureGraphBuilder_GetFiltergraph_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_GetFiltergraph_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_GetFiltergraph_Stub );
    __frame->ppfg = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[980]);


        __frame->ppfg = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFiltergraph(__frame->_This, __frame->ppfg);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2494]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2494]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_GetFiltergraph_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_SetOutputFileName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_SetOutputFileName_Proxy(
    ICaptureGraphBuilder* This,
    const GUID *pType,
    LPCOLESTR lpstrFile,
    IBaseFilter **ppf,
    IFileSinkFilter **ppSink)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_SetOutputFileName_Proxy );
    __frame->This = This;
    if (ppf) MIDL_memset( ppf, 0, sizeof( *ppf ));
    if (ppSink) MIDL_memset( ppSink, 0, sizeof( *ppSink ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!lpstrFile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppf) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSink) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2522]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2504]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2522]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[986]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2542],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2564],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_SetOutputFileName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2542], (void *)ppf );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2564], (void *)ppSink );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_SetOutputFileName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    const GUID * pType;
    LPCOLESTR lpstrFile;
    IBaseFilter *_W0;
    IBaseFilter ** ppf;
    IFileSinkFilter *_W1;
    IFileSinkFilter ** ppSink;
};

static void __finally_ICaptureGraphBuilder_SetOutputFileName_Stub( struct __frame_ICaptureGraphBuilder_SetOutputFileName_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpstrFile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2520]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppf,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2542]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2564]);

}

void __RPC_STUB ICaptureGraphBuilder_SetOutputFileName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_SetOutputFileName_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_SetOutputFileName_Stub );
    __frame->pType = 0;
    __frame->lpstrFile = 0;
    __frame->ppf = 0;
    __frame->ppSink = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[986]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2504],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpstrFile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2522],
            0);


        __frame->ppf = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppSink = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetOutputFileName(__frame->_This, __frame->pType, __frame->lpstrFile, __frame->ppf, __frame->ppSink);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2542]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2564]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2542]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2564]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_SetOutputFileName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_RemoteFindInterface_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_RemoteFindInterface_Proxy(
    ICaptureGraphBuilder* This,
    const GUID *pCategory,
    IBaseFilter *pf,
    REFIID riid,
    IUnknown **ppint)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_RemoteFindInterface_Proxy );
    __frame->This = This;
    if (ppint) MIDL_memset( ppint, 0, sizeof( *ppint ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppint) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2590]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2586]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2590]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1004]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppint,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2648],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_RemoteFindInterface_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2648], (void *)ppint );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_RemoteFindInterface_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    IBaseFilter * pf;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppint;
};

static void __finally_ICaptureGraphBuilder_RemoteFindInterface_Stub( struct __frame_ICaptureGraphBuilder_RemoteFindInterface_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pCategory,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2586]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pf,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2590]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppint,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2648]);

}

void __RPC_STUB ICaptureGraphBuilder_RemoteFindInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_RemoteFindInterface_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_RemoteFindInterface_Stub );
    __frame->pCategory = 0;
    __frame->pf = 0;
    __frame->riid = 0;
    __frame->ppint = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1004]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2586],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2590],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614],
            0);


        __frame->ppint = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICaptureGraphBuilder_FindInterface_Stub(__frame->_This, __frame->pCategory, __frame->pf, __frame->riid, __frame->ppint);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppint,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2648]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppint,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2648]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_RemoteFindInterface_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_RenderStream_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_RenderStream_Proxy(
    ICaptureGraphBuilder* This,
    const GUID *pCategory,
    IUnknown *pSource,
    IBaseFilter *pfCompressor,
    IBaseFilter *pfRenderer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_RenderStream_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2674]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfCompressor,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2692]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfRenderer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2710]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2658]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2674]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfCompressor,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2692]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfRenderer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2710]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1022]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_RenderStream_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_RenderStream_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    IUnknown * pSource;
    IBaseFilter * pfCompressor;
    IBaseFilter * pfRenderer;
};

static void __finally_ICaptureGraphBuilder_RenderStream_Stub( struct __frame_ICaptureGraphBuilder_RenderStream_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSource,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2674]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfCompressor,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2692]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfRenderer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2710]);

}

void __RPC_STUB ICaptureGraphBuilder_RenderStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_RenderStream_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_RenderStream_Stub );
    __frame->pCategory = 0;
    __frame->pSource = 0;
    __frame->pfCompressor = 0;
    __frame->pfRenderer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1022]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2658],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSource,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2674],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfCompressor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2692],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfRenderer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2710],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RenderStream(__frame->_This, __frame->pCategory, __frame->pSource, __frame->pfCompressor, __frame->pfRenderer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_RenderStream_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_ControlStream_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_ControlStream_Proxy(
    ICaptureGraphBuilder* This,
    const GUID *pCategory,
    IBaseFilter *pFilter,
    REFERENCE_TIME *pstart,
    REFERENCE_TIME *pstop,
    WORD wStartCookie,
    WORD wStopCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_ControlStream_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pstart) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pstop) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 64;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2750]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2734]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2750]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pstart;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pstop;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(WORD *)__frame->_StubMsg.Buffer = wStartCookie;
            __frame->_StubMsg.Buffer += sizeof(WORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(WORD *)__frame->_StubMsg.Buffer = wStopCookie;
            __frame->_StubMsg.Buffer += sizeof(WORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1040]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_ControlStream_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_ControlStream_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    IBaseFilter * pFilter;
    REFERENCE_TIME * pstart;
    REFERENCE_TIME * pstop;
    WORD wStartCookie;
    WORD wStopCookie;
};

static void __finally_ICaptureGraphBuilder_ControlStream_Stub( struct __frame_ICaptureGraphBuilder_ControlStream_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2750]);





}

void __RPC_STUB ICaptureGraphBuilder_ControlStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_ControlStream_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_ControlStream_Stub );
    __frame->pCategory = 0;
    __frame->pFilter = 0;
    __frame->pstart = 0;
    __frame->pstop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1040]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2734],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2750],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pstart = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pstop = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(WORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->wStartCookie = *(WORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(WORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(WORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->wStopCookie = *(WORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(WORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ControlStream(__frame->_This, __frame->pCategory, __frame->pFilter, __frame->pstart, __frame->pstop, __frame->wStartCookie, __frame->wStopCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_ControlStream_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_AllocCapFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_AllocCapFile_Proxy(
    ICaptureGraphBuilder* This,
    LPCOLESTR lpstr,
    DWORDLONG dwlSize)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_AllocCapFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!lpstr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpstr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2778]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpstr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2778]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(DWORDLONG *)__frame->_StubMsg.Buffer = dwlSize;
            __frame->_StubMsg.Buffer += sizeof(DWORDLONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1062]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_AllocCapFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_AllocCapFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    LPCOLESTR lpstr;
    DWORDLONG dwlSize;
};

static void __finally_ICaptureGraphBuilder_AllocCapFile_Stub( struct __frame_ICaptureGraphBuilder_AllocCapFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpstr,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2776]);


}

void __RPC_STUB ICaptureGraphBuilder_AllocCapFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_AllocCapFile_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_AllocCapFile_Stub );
    __frame->lpstr = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1062]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpstr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2778],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(DWORDLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwlSize = *(DWORDLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORDLONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AllocCapFile(__frame->_This, __frame->lpstr, __frame->dwlSize);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_AllocCapFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder_CopyCaptureFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder_CopyCaptureFile_Proxy(
    ICaptureGraphBuilder* This,
    LPOLESTR lpwstrOld,
    LPOLESTR lpwstrNew,
    int fAllowEscAbort,
    IAMCopyCaptureFileProgress *pCallback)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder_CopyCaptureFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!lpwstrOld) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!lpwstrNew) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrOld,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2782]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2786]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pCallback,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2788]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrOld,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2782]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2786]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(int *)__frame->_StubMsg.Buffer = fAllowEscAbort;
            __frame->_StubMsg.Buffer += sizeof(int);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCallback,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2788]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1070]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder_CopyCaptureFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder_CopyCaptureFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder * _This;
    HRESULT _RetVal;
    LPOLESTR lpwstrOld;
    LPOLESTR lpwstrNew;
    int fAllowEscAbort;
    IAMCopyCaptureFileProgress * pCallback;
};

static void __finally_ICaptureGraphBuilder_CopyCaptureFile_Stub( struct __frame_ICaptureGraphBuilder_CopyCaptureFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpwstrOld,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2780]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpwstrNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2784]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pCallback,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2788]);

}

void __RPC_STUB ICaptureGraphBuilder_CopyCaptureFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder_CopyCaptureFile_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder_CopyCaptureFile_Stub );
    __frame->lpwstrOld = 0;
    __frame->lpwstrNew = 0;
    __frame->pCallback = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1070]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpwstrOld,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2782],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpwstrNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2786],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->fAllowEscAbort = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCallback,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2788],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CopyCaptureFile(__frame->_This, __frame->lpwstrOld, __frame->lpwstrNew, __frame->fAllowEscAbort, __frame->pCallback);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder_CopyCaptureFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICaptureGraphBuilder_FormatStringOffsetTable[] =
{
    974,  /* ICaptureGraphBuilder::SetFiltergraph */
    980,  /* ICaptureGraphBuilder::GetFiltergraph */
    986,  /* ICaptureGraphBuilder::SetOutputFileName */
    1004,  /* ICaptureGraphBuilder::RemoteFindInterface */
    1022,  /* ICaptureGraphBuilder::RenderStream */
    1040,  /* ICaptureGraphBuilder::ControlStream */
    1062,  /* ICaptureGraphBuilder::AllocCapFile */
    1070,  /* ICaptureGraphBuilder::CopyCaptureFile */
};

static const CINTERFACE_PROXY_VTABLE(11) _ICaptureGraphBuilderProxyVtbl =
{
    {
        &IID_ICaptureGraphBuilder,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICaptureGraphBuilder_SetFiltergraph_Proxy,
        ICaptureGraphBuilder_GetFiltergraph_Proxy,
        ICaptureGraphBuilder_SetOutputFileName_Proxy,
        ICaptureGraphBuilder_FindInterface_Proxy,
        ICaptureGraphBuilder_RenderStream_Proxy,
        ICaptureGraphBuilder_ControlStream_Proxy,
        ICaptureGraphBuilder_AllocCapFile_Proxy,
        ICaptureGraphBuilder_CopyCaptureFile_Proxy,
    }
};

static const MIDL_SERVER_INFO ICaptureGraphBuilder_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICaptureGraphBuilder_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICaptureGraphBuilder_table[] =
{
    ICaptureGraphBuilder_SetFiltergraph_Stub,
    ICaptureGraphBuilder_GetFiltergraph_Stub,
    ICaptureGraphBuilder_SetOutputFileName_Stub,
    ICaptureGraphBuilder_RemoteFindInterface_Stub,
    ICaptureGraphBuilder_RenderStream_Stub,
    ICaptureGraphBuilder_ControlStream_Stub,
    ICaptureGraphBuilder_AllocCapFile_Stub,
    ICaptureGraphBuilder_CopyCaptureFile_Stub
};

static const CInterfaceStubVtbl _ICaptureGraphBuilderStubVtbl =
{
    {
        &IID_ICaptureGraphBuilder,
        &ICaptureGraphBuilder_ServerInfo,
        11,
        &ICaptureGraphBuilder_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAMCopyCaptureFileProgress interface
 */
static void __finally_IAMCopyCaptureFileProgress_Progress_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMCopyCaptureFileProgress_Progress_Proxy(
    IAMCopyCaptureFileProgress* This,
    int iProgress)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMCopyCaptureFileProgress_Progress_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(int *)__frame->_StubMsg.Buffer = iProgress;
            __frame->_StubMsg.Buffer += sizeof(int);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1086]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMCopyCaptureFileProgress_Progress_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMCopyCaptureFileProgress_Progress_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMCopyCaptureFileProgress * _This;
    HRESULT _RetVal;
    int iProgress;
};

static void __finally_IAMCopyCaptureFileProgress_Progress_Stub( struct __frame_IAMCopyCaptureFileProgress_Progress_Stub *__frame )
{

}

void __RPC_STUB IAMCopyCaptureFileProgress_Progress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMCopyCaptureFileProgress_Progress_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMCopyCaptureFileProgress*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMCopyCaptureFileProgress_Progress_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1086]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->iProgress = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Progress(__frame->_This, __frame->iProgress);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMCopyCaptureFileProgress_Progress_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAMCopyCaptureFileProgress_FormatStringOffsetTable[] =
{
    1086,  /* IAMCopyCaptureFileProgress::Progress */
};

static const CINTERFACE_PROXY_VTABLE(4) _IAMCopyCaptureFileProgressProxyVtbl =
{
    {
        &IID_IAMCopyCaptureFileProgress,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAMCopyCaptureFileProgress_Progress_Proxy,
    }
};

static const MIDL_SERVER_INFO IAMCopyCaptureFileProgress_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAMCopyCaptureFileProgress_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAMCopyCaptureFileProgress_table[] =
{
    IAMCopyCaptureFileProgress_Progress_Stub
};

static const CInterfaceStubVtbl _IAMCopyCaptureFileProgressStubVtbl =
{
    {
        &IID_IAMCopyCaptureFileProgress,
        &IAMCopyCaptureFileProgress_ServerInfo,
        4,
        &IAMCopyCaptureFileProgress_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICaptureGraphBuilder2 interface
 */
static void __finally_ICaptureGraphBuilder2_SetFiltergraph_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_SetFiltergraph_Proxy(
    ICaptureGraphBuilder2* This,
    IGraphBuilder *pfg)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_SetFiltergraph_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2806]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2806]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1090]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_SetFiltergraph_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_SetFiltergraph_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    IGraphBuilder * pfg;
};

static void __finally_ICaptureGraphBuilder2_SetFiltergraph_Stub( struct __frame_ICaptureGraphBuilder2_SetFiltergraph_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2806]);

}

void __RPC_STUB ICaptureGraphBuilder2_SetFiltergraph_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_SetFiltergraph_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_SetFiltergraph_Stub );
    __frame->pfg = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1090]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2806],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFiltergraph(__frame->_This, __frame->pfg);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_SetFiltergraph_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_GetFiltergraph_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_GetFiltergraph_Proxy(
    ICaptureGraphBuilder2* This,
    IGraphBuilder **ppfg)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_GetFiltergraph_Proxy );
    __frame->This = This;
    if (ppfg) MIDL_memset( ppfg, 0, sizeof( *ppfg ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppfg) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1096]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppfg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2842],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_GetFiltergraph_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2842], (void *)ppfg );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_GetFiltergraph_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    IGraphBuilder *_W0;
    IGraphBuilder ** ppfg;
};

static void __finally_ICaptureGraphBuilder2_GetFiltergraph_Stub( struct __frame_ICaptureGraphBuilder2_GetFiltergraph_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppfg,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2842]);

}

void __RPC_STUB ICaptureGraphBuilder2_GetFiltergraph_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_GetFiltergraph_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_GetFiltergraph_Stub );
    __frame->ppfg = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1096]);


        __frame->ppfg = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFiltergraph(__frame->_This, __frame->ppfg);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2842]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppfg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2842]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_GetFiltergraph_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_SetOutputFileName_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_SetOutputFileName_Proxy(
    ICaptureGraphBuilder2* This,
    const GUID *pType,
    LPCOLESTR lpstrFile,
    IBaseFilter **ppf,
    IFileSinkFilter **ppSink)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_SetOutputFileName_Proxy );
    __frame->This = This;
    if (ppf) MIDL_memset( ppf, 0, sizeof( *ppf ));
    if (ppSink) MIDL_memset( ppSink, 0, sizeof( *ppSink ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!lpstrFile) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppf) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSink) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2870]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2852]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpstrFile,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2870]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1102]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2890],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSink,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2912],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_SetOutputFileName_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2890], (void *)ppf );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2912], (void *)ppSink );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_SetOutputFileName_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    const GUID * pType;
    LPCOLESTR lpstrFile;
    IBaseFilter *_W0;
    IBaseFilter ** ppf;
    IFileSinkFilter *_W1;
    IFileSinkFilter ** ppSink;
};

static void __finally_ICaptureGraphBuilder2_SetOutputFileName_Stub( struct __frame_ICaptureGraphBuilder2_SetOutputFileName_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpstrFile,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2868]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppf,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2890]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSink,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2912]);

}

void __RPC_STUB ICaptureGraphBuilder2_SetOutputFileName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_SetOutputFileName_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_SetOutputFileName_Stub );
    __frame->pType = 0;
    __frame->lpstrFile = 0;
    __frame->ppf = 0;
    __frame->ppSink = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1102]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2852],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpstrFile,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2870],
            0);


        __frame->ppf = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppSink = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetOutputFileName(__frame->_This, __frame->pType, __frame->lpstrFile, __frame->ppf, __frame->ppSink);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2890]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2912]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2890]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSink,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2912]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_SetOutputFileName_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_RemoteFindInterface_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_RemoteFindInterface_Proxy(
    ICaptureGraphBuilder2* This,
    const GUID *pCategory,
    const GUID *pType,
    IBaseFilter *pf,
    REFIID riid,
    IUnknown **ppint)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_RemoteFindInterface_Proxy );
    __frame->This = This;
    if (ppint) MIDL_memset( ppint, 0, sizeof( *ppint ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppint) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 60;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2960]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2922]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2944]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pf,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2960]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1120]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppint,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3000],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_RemoteFindInterface_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3000], (void *)ppint );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_RemoteFindInterface_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    const GUID * pType;
    IBaseFilter * pf;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppint;
};

static void __finally_ICaptureGraphBuilder2_RemoteFindInterface_Stub( struct __frame_ICaptureGraphBuilder2_RemoteFindInterface_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pf,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2960]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppint,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3000]);

}

void __RPC_STUB ICaptureGraphBuilder2_RemoteFindInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_RemoteFindInterface_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_RemoteFindInterface_Stub );
    __frame->pCategory = 0;
    __frame->pType = 0;
    __frame->pf = 0;
    __frame->riid = 0;
    __frame->ppint = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1120]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2922],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2944],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pf,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2960],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2614],
            0);


        __frame->ppint = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICaptureGraphBuilder2_FindInterface_Stub(__frame->_This, __frame->pCategory, __frame->pType, __frame->pf, __frame->riid, __frame->ppint);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppint,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3000]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppint,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3000]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_RemoteFindInterface_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_RenderStream_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_RenderStream_Proxy(
    ICaptureGraphBuilder2* This,
    const GUID *pCategory,
    const GUID *pType,
    IUnknown *pSource,
    IBaseFilter *pfCompressor,
    IBaseFilter *pfRenderer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_RenderStream_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3048]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfCompressor,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3066]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pfRenderer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3084]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3010]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3032]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3048]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfCompressor,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3066]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pfRenderer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3084]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1142]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_RenderStream_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_RenderStream_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    const GUID * pType;
    IUnknown * pSource;
    IBaseFilter * pfCompressor;
    IBaseFilter * pfRenderer;
};

static void __finally_ICaptureGraphBuilder2_RenderStream_Stub( struct __frame_ICaptureGraphBuilder2_RenderStream_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSource,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3048]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfCompressor,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3066]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pfRenderer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3084]);

}

void __RPC_STUB ICaptureGraphBuilder2_RenderStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_RenderStream_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_RenderStream_Stub );
    __frame->pCategory = 0;
    __frame->pType = 0;
    __frame->pSource = 0;
    __frame->pfCompressor = 0;
    __frame->pfRenderer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1142]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3010],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3032],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSource,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3048],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfCompressor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3066],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pfRenderer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3084],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RenderStream(__frame->_This, __frame->pCategory, __frame->pType, __frame->pSource, __frame->pfCompressor, __frame->pfRenderer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_RenderStream_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_ControlStream_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_ControlStream_Proxy(
    ICaptureGraphBuilder2* This,
    const GUID *pCategory,
    const GUID *pType,
    IBaseFilter *pFilter,
    REFERENCE_TIME *pstart,
    REFERENCE_TIME *pstop,
    WORD wStartCookie,
    WORD wStopCookie)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_ControlStream_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pstart) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pstop) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 84;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3146]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3108]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3130]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3146]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pstart;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(REFERENCE_TIME *)__frame->_StubMsg.Buffer = *pstop;
            __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(WORD *)__frame->_StubMsg.Buffer = wStartCookie;
            __frame->_StubMsg.Buffer += sizeof(WORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x2 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x1);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
            *(WORD *)__frame->_StubMsg.Buffer = wStopCookie;
            __frame->_StubMsg.Buffer += sizeof(WORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1164]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_ControlStream_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_ControlStream_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    const GUID * pCategory;
    const GUID * pType;
    IBaseFilter * pFilter;
    REFERENCE_TIME * pstart;
    REFERENCE_TIME * pstop;
    WORD wStartCookie;
    WORD wStopCookie;
};

static void __finally_ICaptureGraphBuilder2_ControlStream_Stub( struct __frame_ICaptureGraphBuilder2_ControlStream_Stub *__frame )
{


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3146]);





}

void __RPC_STUB ICaptureGraphBuilder2_ControlStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_ControlStream_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_ControlStream_Stub );
    __frame->pCategory = 0;
    __frame->pType = 0;
    __frame->pFilter = 0;
    __frame->pstart = 0;
    __frame->pstop = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1164]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3108],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3130],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3146],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pstart = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(REFERENCE_TIME) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pstop = (REFERENCE_TIME *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(REFERENCE_TIME);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(WORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->wStartCookie = *(WORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(WORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(WORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->wStopCookie = *(WORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(WORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ControlStream(__frame->_This, __frame->pCategory, __frame->pType, __frame->pFilter, __frame->pstart, __frame->pstop, __frame->wStartCookie, __frame->wStopCookie);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_ControlStream_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_AllocCapFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_AllocCapFile_Proxy(
    ICaptureGraphBuilder2* This,
    LPCOLESTR lpstr,
    DWORDLONG dwlSize)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_AllocCapFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        if (!lpstr) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpstr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3174]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpstr,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3174]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(DWORDLONG *)__frame->_StubMsg.Buffer = dwlSize;
            __frame->_StubMsg.Buffer += sizeof(DWORDLONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1190]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_AllocCapFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_AllocCapFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    LPCOLESTR lpstr;
    DWORDLONG dwlSize;
};

static void __finally_ICaptureGraphBuilder2_AllocCapFile_Stub( struct __frame_ICaptureGraphBuilder2_AllocCapFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpstr,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3172]);


}

void __RPC_STUB ICaptureGraphBuilder2_AllocCapFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_AllocCapFile_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_AllocCapFile_Stub );
    __frame->lpstr = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1190]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpstr,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3174],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(DWORDLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwlSize = *(DWORDLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORDLONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AllocCapFile(__frame->_This, __frame->lpstr, __frame->dwlSize);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_AllocCapFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_CopyCaptureFile_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_CopyCaptureFile_Proxy(
    ICaptureGraphBuilder2* This,
    LPOLESTR lpwstrOld,
    LPOLESTR lpwstrNew,
    int fAllowEscAbort,
    IAMCopyCaptureFileProgress *pCallback)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_CopyCaptureFile_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!lpwstrOld) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!lpwstrNew) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrOld,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3178]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3182]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pCallback,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3184]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrOld,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3178]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpwstrNew,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3182]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(int *)__frame->_StubMsg.Buffer = fAllowEscAbort;
            __frame->_StubMsg.Buffer += sizeof(int);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCallback,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3184]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1198]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_CopyCaptureFile_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_CopyCaptureFile_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    LPOLESTR lpwstrOld;
    LPOLESTR lpwstrNew;
    int fAllowEscAbort;
    IAMCopyCaptureFileProgress * pCallback;
};

static void __finally_ICaptureGraphBuilder2_CopyCaptureFile_Stub( struct __frame_ICaptureGraphBuilder2_CopyCaptureFile_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpwstrOld,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3176]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpwstrNew,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3180]);


    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pCallback,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3184]);

}

void __RPC_STUB ICaptureGraphBuilder2_CopyCaptureFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_CopyCaptureFile_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_CopyCaptureFile_Stub );
    __frame->lpwstrOld = 0;
    __frame->lpwstrNew = 0;
    __frame->pCallback = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1198]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpwstrOld,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3178],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpwstrNew,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3182],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->fAllowEscAbort = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCallback,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3184],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CopyCaptureFile(__frame->_This, __frame->lpwstrOld, __frame->lpwstrNew, __frame->fAllowEscAbort, __frame->pCallback);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_CopyCaptureFile_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICaptureGraphBuilder2_FindPin_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICaptureGraphBuilder2_FindPin_Proxy(
    ICaptureGraphBuilder2* This,
    IUnknown *pSource,
    PIN_DIRECTION pindir,
    const GUID *pCategory,
    const GUID *pType,
    BOOL fUnconnected,
    int num,
    IPin **ppPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICaptureGraphBuilder2_FindPin_Proxy );
    __frame->This = This;
    if (ppPin) MIDL_memset( ppPin, 0, sizeof( *ppPin ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pCategory) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppPin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 62;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3202]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSource,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3202]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&pindir,
                0x0d /* FC_ENUM16 */);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCategory,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3226]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3248]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = fUnconnected;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(int *)__frame->_StubMsg.Buffer = num;
            __frame->_StubMsg.Buffer += sizeof(int);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1214]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3282],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICaptureGraphBuilder2_FindPin_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3282], (void *)ppPin );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICaptureGraphBuilder2_FindPin_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICaptureGraphBuilder2 * _This;
    HRESULT _RetVal;
    IUnknown * pSource;
    PIN_DIRECTION pindir;
    const GUID * pCategory;
    const GUID * pType;
    BOOL fUnconnected;
    int num;
    IPin *_W0;
    IPin ** ppPin;
};

static void __finally_ICaptureGraphBuilder2_FindPin_Stub( struct __frame_ICaptureGraphBuilder2_FindPin_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSource,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3202]);






    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3282]);

}

void __RPC_STUB ICaptureGraphBuilder2_FindPin_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICaptureGraphBuilder2_FindPin_Stub __f, * const __frame = &__f;

    __frame->_This = (ICaptureGraphBuilder2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICaptureGraphBuilder2_FindPin_Stub );
    __frame->pSource = 0;
    __frame->pCategory = 0;
    __frame->pType = 0;
    __frame->ppPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1214]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSource,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3202],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->pindir,
            0x0d /* FC_ENUM16 */);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCategory,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3226],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3248],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->fUnconnected = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->num = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);


        __frame->ppPin = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->FindPin(__frame->_This, __frame->pSource, __frame->pindir, __frame->pCategory, __frame->pType, __frame->fUnconnected, __frame->num, __frame->ppPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3282]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3282]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICaptureGraphBuilder2_FindPin_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICaptureGraphBuilder2_FormatStringOffsetTable[] =
{
    1090,  /* ICaptureGraphBuilder2::SetFiltergraph */
    1096,  /* ICaptureGraphBuilder2::GetFiltergraph */
    1102,  /* ICaptureGraphBuilder2::SetOutputFileName */
    1120,  /* ICaptureGraphBuilder2::RemoteFindInterface */
    1142,  /* ICaptureGraphBuilder2::RenderStream */
    1164,  /* ICaptureGraphBuilder2::ControlStream */
    1190,  /* ICaptureGraphBuilder2::AllocCapFile */
    1198,  /* ICaptureGraphBuilder2::CopyCaptureFile */
    1214,  /* ICaptureGraphBuilder2::FindPin */
};

static const CINTERFACE_PROXY_VTABLE(12) _ICaptureGraphBuilder2ProxyVtbl =
{
    {
        &IID_ICaptureGraphBuilder2,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICaptureGraphBuilder2_SetFiltergraph_Proxy,
        ICaptureGraphBuilder2_GetFiltergraph_Proxy,
        ICaptureGraphBuilder2_SetOutputFileName_Proxy,
        ICaptureGraphBuilder2_FindInterface_Proxy,
        ICaptureGraphBuilder2_RenderStream_Proxy,
        ICaptureGraphBuilder2_ControlStream_Proxy,
        ICaptureGraphBuilder2_AllocCapFile_Proxy,
        ICaptureGraphBuilder2_CopyCaptureFile_Proxy,
        ICaptureGraphBuilder2_FindPin_Proxy,
    }
};

static const MIDL_SERVER_INFO ICaptureGraphBuilder2_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICaptureGraphBuilder2_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICaptureGraphBuilder2_table[] =
{
    ICaptureGraphBuilder2_SetFiltergraph_Stub,
    ICaptureGraphBuilder2_GetFiltergraph_Stub,
    ICaptureGraphBuilder2_SetOutputFileName_Stub,
    ICaptureGraphBuilder2_RemoteFindInterface_Stub,
    ICaptureGraphBuilder2_RenderStream_Stub,
    ICaptureGraphBuilder2_ControlStream_Stub,
    ICaptureGraphBuilder2_AllocCapFile_Stub,
    ICaptureGraphBuilder2_CopyCaptureFile_Stub,
    ICaptureGraphBuilder2_FindPin_Stub
};

static const CInterfaceStubVtbl _ICaptureGraphBuilder2StubVtbl =
{
    {
        &IID_ICaptureGraphBuilder2,
        &ICaptureGraphBuilder2_ServerInfo,
        12,
        &ICaptureGraphBuilder2_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IFilterGraph2 interface
 */
static void __finally_IFilterGraph2_AddSourceFilterForMoniker_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph2_AddSourceFilterForMoniker_Proxy(
    IFilterGraph2* This,
    IMoniker *pMoniker,
    IBindCtx *pCtx,
    LPCWSTR lpcwstrFilterName,
    IBaseFilter **ppFilter)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph2_AddSourceFilterForMoniker_Proxy );
    __frame->This = This;
    if (ppFilter) MIDL_memset( ppFilter, 0, sizeof( *ppFilter ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 18);
        if (!ppFilter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3286]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pCtx,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3304]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFilterName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pMoniker,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3286]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pCtx,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3304]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)lpcwstrFilterName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1238]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppFilter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3344],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph2_AddSourceFilterForMoniker_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3344], (void *)ppFilter );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph2_AddSourceFilterForMoniker_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph2 * _This;
    HRESULT _RetVal;
    IMoniker * pMoniker;
    IBindCtx * pCtx;
    LPCWSTR lpcwstrFilterName;
    IBaseFilter *_W0;
    IBaseFilter ** ppFilter;
};

static void __finally_IFilterGraph2_AddSourceFilterForMoniker_Stub( struct __frame_IFilterGraph2_AddSourceFilterForMoniker_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pMoniker,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3286]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pCtx,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3304]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpcwstrFilterName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppFilter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3344]);

}

void __RPC_STUB IFilterGraph2_AddSourceFilterForMoniker_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph2_AddSourceFilterForMoniker_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph2_AddSourceFilterForMoniker_Stub );
    __frame->pMoniker = 0;
    __frame->pCtx = 0;
    __frame->lpcwstrFilterName = 0;
    __frame->ppFilter = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1238]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pMoniker,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3286],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pCtx,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3304],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->lpcwstrFilterName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3322],
            0);


        __frame->ppFilter = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AddSourceFilterForMoniker(__frame->_This, __frame->pMoniker, __frame->pCtx, __frame->lpcwstrFilterName, __frame->ppFilter);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3344]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppFilter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3344]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph2_AddSourceFilterForMoniker_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph2_ReconnectEx_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph2_ReconnectEx_Proxy(
    IFilterGraph2* This,
    IPin *ppin,
    const AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph2_ReconnectEx_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 19);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3348]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3412]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3348]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3412]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1256]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph2_ReconnectEx_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph2_ReconnectEx_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph2 * _This;
    HRESULT _RetVal;
    IPin * ppin;
    const AM_MEDIA_TYPE * pmt;
};

static void __finally_IFilterGraph2_ReconnectEx_Stub( struct __frame_IFilterGraph2_ReconnectEx_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3348]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3412]);

}

void __RPC_STUB IFilterGraph2_ReconnectEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph2_ReconnectEx_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph2_ReconnectEx_Stub );
    __frame->ppin = 0;
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1256]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3348],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3412],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReconnectEx(__frame->_This, __frame->ppin, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph2_ReconnectEx_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IFilterGraph2_RenderEx_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IFilterGraph2_RenderEx_Proxy(
    IFilterGraph2* This,
    IPin *pPinOut,
    DWORD dwFlags,
    DWORD *pvContext)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IFilterGraph2_RenderEx_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 20);
        if (!pvContext) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pPinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3416]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPinOut,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3416]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = *pvContext;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1266]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pvContext = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IFilterGraph2_RenderEx_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3434], (void *)pvContext );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IFilterGraph2_RenderEx_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IFilterGraph2 * _This;
    HRESULT _RetVal;
    IPin * pPinOut;
    DWORD dwFlags;
    DWORD * pvContext;
};

static void __finally_IFilterGraph2_RenderEx_Stub( struct __frame_IFilterGraph2_RenderEx_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPinOut,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3416]);



}

void __RPC_STUB IFilterGraph2_RenderEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IFilterGraph2_RenderEx_Stub __f, * const __frame = &__f;

    __frame->_This = (IFilterGraph2*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IFilterGraph2_RenderEx_Stub );
    __frame->pPinOut = 0;
    __frame->pvContext = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1266]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPinOut,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3416],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pvContext = (DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RenderEx(__frame->_This, __frame->pPinOut, __frame->dwFlags, __frame->pvContext);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pvContext;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IFilterGraph2_RenderEx_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IFilterGraph2_FormatStringOffsetTable[] =
{
    148,  /* IFilterGraph::AddFilter */
    158,  /* IFilterGraph::RemoveFilter */
    164,  /* IFilterGraph::EnumFilters */
    170,  /* IFilterGraph::FindFilterByName */
    180,  /* IFilterGraph::ConnectDirect */
    194,  /* IFilterGraph::Reconnect */
    200,  /* IFilterGraph::Disconnect */
    206,  /* IFilterGraph::SetDefaultSyncSource */
    926,  /* IGraphBuilder::Connect */
    936,  /* IGraphBuilder::Render */
    942,  /* IGraphBuilder::RenderFile */
    952,  /* IGraphBuilder::AddSourceFilter */
    966,  /* IGraphBuilder::SetLogFile */
    970,  /* IGraphBuilder::Abort */
    972,  /* IGraphBuilder::ShouldOperationContinue */
    1238,  /* IFilterGraph2::AddSourceFilterForMoniker */
    1256,  /* IFilterGraph2::ReconnectEx */
    1266,  /* IFilterGraph2::RenderEx */
};

static const CINTERFACE_PROXY_VTABLE(21) _IFilterGraph2ProxyVtbl =
{
    {
        &IID_IFilterGraph2,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IFilterGraph_AddFilter_Proxy,
        IFilterGraph_RemoveFilter_Proxy,
        IFilterGraph_EnumFilters_Proxy,
        IFilterGraph_FindFilterByName_Proxy,
        IFilterGraph_ConnectDirect_Proxy,
        IFilterGraph_Reconnect_Proxy,
        IFilterGraph_Disconnect_Proxy,
        IFilterGraph_SetDefaultSyncSource_Proxy,
        IGraphBuilder_Connect_Proxy,
        IGraphBuilder_Render_Proxy,
        IGraphBuilder_RenderFile_Proxy,
        IGraphBuilder_AddSourceFilter_Proxy,
        IGraphBuilder_SetLogFile_Proxy,
        IGraphBuilder_Abort_Proxy,
        IGraphBuilder_ShouldOperationContinue_Proxy,
        IFilterGraph2_AddSourceFilterForMoniker_Proxy,
        IFilterGraph2_ReconnectEx_Proxy,
        IFilterGraph2_RenderEx_Proxy,
    }
};

static const MIDL_SERVER_INFO IFilterGraph2_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IFilterGraph2_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IFilterGraph2_table[] =
{
    IFilterGraph_AddFilter_Stub,
    IFilterGraph_RemoveFilter_Stub,
    IFilterGraph_EnumFilters_Stub,
    IFilterGraph_FindFilterByName_Stub,
    IFilterGraph_ConnectDirect_Stub,
    IFilterGraph_Reconnect_Stub,
    IFilterGraph_Disconnect_Stub,
    IFilterGraph_SetDefaultSyncSource_Stub,
    IGraphBuilder_Connect_Stub,
    IGraphBuilder_Render_Stub,
    IGraphBuilder_RenderFile_Stub,
    IGraphBuilder_AddSourceFilter_Stub,
    IGraphBuilder_SetLogFile_Stub,
    IGraphBuilder_Abort_Stub,
    IGraphBuilder_ShouldOperationContinue_Stub,
    IFilterGraph2_AddSourceFilterForMoniker_Stub,
    IFilterGraph2_ReconnectEx_Stub,
    IFilterGraph2_RenderEx_Stub
};

static const CInterfaceStubVtbl _IFilterGraph2StubVtbl =
{
    {
        &IID_IFilterGraph2,
        &IFilterGraph2_ServerInfo,
        21,
        &IFilterGraph2_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAMStreamConfig interface
 */
static void __finally_IAMStreamConfig_SetFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamConfig_SetFormat_Proxy(
    IAMStreamConfig* This,
    AM_MEDIA_TYPE *pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamConfig_SetFormat_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1278]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamConfig_SetFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamConfig_SetFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamConfig * _This;
    HRESULT _RetVal;
    AM_MEDIA_TYPE * pmt;
};

static void __finally_IAMStreamConfig_SetFormat_Stub( struct __frame_IAMStreamConfig_SetFormat_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3438]);

}

void __RPC_STUB IAMStreamConfig_SetFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamConfig_SetFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamConfig*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamConfig_SetFormat_Stub );
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1278]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFormat(__frame->_This, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamConfig_SetFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMStreamConfig_GetFormat_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamConfig_GetFormat_Proxy(
    IAMStreamConfig* This,
    AM_MEDIA_TYPE **pmt)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamConfig_GetFormat_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3446]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3446]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1284]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamConfig_GetFormat_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamConfig_GetFormat_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamConfig * _This;
    HRESULT _RetVal;
    AM_MEDIA_TYPE ** pmt;
};

static void __finally_IAMStreamConfig_GetFormat_Stub( struct __frame_IAMStreamConfig_GetFormat_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3446]);

}

void __RPC_STUB IAMStreamConfig_GetFormat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamConfig_GetFormat_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamConfig*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamConfig_GetFormat_Stub );
    __frame->pmt = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1284]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3446],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetFormat(__frame->_This, __frame->pmt);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamConfig_GetFormat_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMStreamConfig_GetNumberOfCapabilities_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamConfig_GetNumberOfCapabilities_Proxy(
    IAMStreamConfig* This,
    int *piCount,
    int *piSize)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamConfig_GetNumberOfCapabilities_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!piCount) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!piSize) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1290]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *piCount = *(int *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(int);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *piSize = *(int *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(int);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamConfig_GetNumberOfCapabilities_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3450], (void *)piCount );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3454], (void *)piSize );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamConfig_GetNumberOfCapabilities_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamConfig * _This;
    HRESULT _RetVal;
    int _W0;
    int * piCount;
    int _W1;
    int * piSize;
};

static void __finally_IAMStreamConfig_GetNumberOfCapabilities_Stub( struct __frame_IAMStreamConfig_GetNumberOfCapabilities_Stub *__frame )
{


}

void __RPC_STUB IAMStreamConfig_GetNumberOfCapabilities_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamConfig_GetNumberOfCapabilities_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamConfig*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamConfig_GetNumberOfCapabilities_Stub );
    __frame->piCount = 0;
    __frame->piSize = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1290]);


        __frame->piCount = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->piSize = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetNumberOfCapabilities(__frame->_This, __frame->piCount, __frame->piSize);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(int *)__frame->_StubMsg.Buffer = *__frame->piCount;
        __frame->_StubMsg.Buffer += sizeof(int);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(int *)__frame->_StubMsg.Buffer = *__frame->piSize;
        __frame->_StubMsg.Buffer += sizeof(int);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamConfig_GetNumberOfCapabilities_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMStreamConfig_GetStreamCaps_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMStreamConfig_GetStreamCaps_Proxy(
    IAMStreamConfig* This,
    int iIndex,
    AM_MEDIA_TYPE **pmt,
    BYTE *pSCC)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMStreamConfig_GetStreamCaps_Proxy );
    __frame->This = This;
    if (pmt) MIDL_memset( pmt, 0, sizeof( *pmt ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!pmt) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pSCC) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(int *)__frame->_StubMsg.Buffer = iIndex;
            __frame->_StubMsg.Buffer += sizeof(int);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1300]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pmt,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3462],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 0) & ~0x0);
            if (__frame->_StubMsg.Buffer + sizeof(BYTE) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pSCC = *(BYTE *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(BYTE);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMStreamConfig_GetStreamCaps_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3462], (void *)pmt );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3466], (void *)pSCC );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMStreamConfig_GetStreamCaps_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMStreamConfig * _This;
    HRESULT _RetVal;
    int iIndex;
    AM_MEDIA_TYPE *_W0;
    AM_MEDIA_TYPE ** pmt;
    BYTE _W1;
    BYTE * pSCC;
};

static void __finally_IAMStreamConfig_GetStreamCaps_Stub( struct __frame_IAMStreamConfig_GetStreamCaps_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pmt,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3462]);


}

void __RPC_STUB IAMStreamConfig_GetStreamCaps_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMStreamConfig_GetStreamCaps_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMStreamConfig*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMStreamConfig_GetStreamCaps_Stub );
    __frame->pmt = 0;
    __frame->pSCC = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1300]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->iIndex = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);


        __frame->pmt = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pSCC = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetStreamCaps(__frame->_This, __frame->iIndex, __frame->pmt, __frame->pSCC);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 13;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3462]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pmt,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3462]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 0) & ~0x0);
        *(BYTE *)__frame->_StubMsg.Buffer = *__frame->pSCC;
        __frame->_StubMsg.Buffer += sizeof(BYTE);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMStreamConfig_GetStreamCaps_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAMStreamConfig_FormatStringOffsetTable[] =
{
    1278,  /* IAMStreamConfig::SetFormat */
    1284,  /* IAMStreamConfig::GetFormat */
    1290,  /* IAMStreamConfig::GetNumberOfCapabilities */
    1300,  /* IAMStreamConfig::GetStreamCaps */
};

static const CINTERFACE_PROXY_VTABLE(7) _IAMStreamConfigProxyVtbl =
{
    {
        &IID_IAMStreamConfig,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAMStreamConfig_SetFormat_Proxy,
        IAMStreamConfig_GetFormat_Proxy,
        IAMStreamConfig_GetNumberOfCapabilities_Proxy,
        IAMStreamConfig_GetStreamCaps_Proxy,
    }
};

static const MIDL_SERVER_INFO IAMStreamConfig_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAMStreamConfig_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAMStreamConfig_table[] =
{
    IAMStreamConfig_SetFormat_Stub,
    IAMStreamConfig_GetFormat_Stub,
    IAMStreamConfig_GetNumberOfCapabilities_Stub,
    IAMStreamConfig_GetStreamCaps_Stub
};

static const CInterfaceStubVtbl _IAMStreamConfigStubVtbl =
{
    {
        &IID_IAMStreamConfig,
        &IAMStreamConfig_ServerInfo,
        7,
        &IAMStreamConfig_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAMVideoProcAmp interface
 */
static void __finally_IAMVideoProcAmp_GetRange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMVideoProcAmp_GetRange_Proxy(
    IAMVideoProcAmp* This,
    LONG Property,
    LONG *pMin,
    LONG *pMax,
    LONG *pSteppingDelta,
    LONG *pDefault,
    LONG *pCapsFlags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMVideoProcAmp_GetRange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pMin) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pMax) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pSteppingDelta) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pDefault) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pCapsFlags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = Property;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1312]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pMin = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pMax = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pSteppingDelta = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pDefault = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pCapsFlags = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMVideoProcAmp_GetRange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3470], (void *)pMin );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3474], (void *)pMax );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3478], (void *)pSteppingDelta );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3482], (void *)pDefault );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3486], (void *)pCapsFlags );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMVideoProcAmp_GetRange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMVideoProcAmp * _This;
    HRESULT _RetVal;
    LONG Property;
    LONG _W0;
    LONG * pMin;
    LONG _W1;
    LONG * pMax;
    LONG _W2;
    LONG * pSteppingDelta;
    LONG _W3;
    LONG * pDefault;
    LONG _W4;
    LONG * pCapsFlags;
};

static void __finally_IAMVideoProcAmp_GetRange_Stub( struct __frame_IAMVideoProcAmp_GetRange_Stub *__frame )
{






}

void __RPC_STUB IAMVideoProcAmp_GetRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMVideoProcAmp_GetRange_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMVideoProcAmp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMVideoProcAmp_GetRange_Stub );
    __frame->pMin = 0;
    __frame->pMax = 0;
    __frame->pSteppingDelta = 0;
    __frame->pDefault = 0;
    __frame->pCapsFlags = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1312]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->Property = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->pMin = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pMax = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->pSteppingDelta = &__frame->_W2;
        __frame->_W2 = 0;
        __frame->pDefault = &__frame->_W3;
        __frame->_W3 = 0;
        __frame->pCapsFlags = &__frame->_W4;
        __frame->_W4 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRange(__frame->_This, __frame->Property, __frame->pMin, __frame->pMax, __frame->pSteppingDelta, __frame->pDefault, __frame->pCapsFlags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 48;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pMin;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pMax;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pSteppingDelta;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pDefault;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->pCapsFlags;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMVideoProcAmp_GetRange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMVideoProcAmp_Set_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMVideoProcAmp_Set_Proxy(
    IAMVideoProcAmp* This,
    LONG Property,
    LONG lValue,
    LONG Flags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMVideoProcAmp_Set_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = Property;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = lValue;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = Flags;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1336]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMVideoProcAmp_Set_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMVideoProcAmp_Set_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMVideoProcAmp * _This;
    HRESULT _RetVal;
    LONG Property;
    LONG lValue;
    LONG Flags;
};

static void __finally_IAMVideoProcAmp_Set_Stub( struct __frame_IAMVideoProcAmp_Set_Stub *__frame )
{



}

void __RPC_STUB IAMVideoProcAmp_Set_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMVideoProcAmp_Set_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMVideoProcAmp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMVideoProcAmp_Set_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1336]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->Property = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lValue = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->Flags = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Set(__frame->_This, __frame->Property, __frame->lValue, __frame->Flags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMVideoProcAmp_Set_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAMVideoProcAmp_Get_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAMVideoProcAmp_Get_Proxy(
    IAMVideoProcAmp* This,
    LONG Property,
    LONG *lValue,
    LONG *Flags)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAMVideoProcAmp_Get_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!lValue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!Flags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = Property;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1344]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *lValue = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *Flags = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAMVideoProcAmp_Get_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3490], (void *)lValue );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3494], (void *)Flags );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAMVideoProcAmp_Get_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAMVideoProcAmp * _This;
    HRESULT _RetVal;
    LONG Property;
    LONG _W0;
    LONG * lValue;
    LONG _W1;
    LONG * Flags;
};

static void __finally_IAMVideoProcAmp_Get_Stub( struct __frame_IAMVideoProcAmp_Get_Stub *__frame )
{



}

void __RPC_STUB IAMVideoProcAmp_Get_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAMVideoProcAmp_Get_Stub __f, * const __frame = &__f;

    __frame->_This = (IAMVideoProcAmp*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAMVideoProcAmp_Get_Stub );
    __frame->lValue = 0;
    __frame->Flags = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1344]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->Property = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->lValue = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->Flags = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Get(__frame->_This, __frame->Property, __frame->lValue, __frame->Flags);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->lValue;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->Flags;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAMVideoProcAmp_Get_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAMVideoProcAmp_FormatStringOffsetTable[] =
{
    1312,  /* IAMVideoProcAmp::GetRange */
    1336,  /* IAMVideoProcAmp::Set */
    1344,  /* IAMVideoProcAmp::Get */
};

static const CINTERFACE_PROXY_VTABLE(6) _IAMVideoProcAmpProxyVtbl =
{
    {
        &IID_IAMVideoProcAmp,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAMVideoProcAmp_GetRange_Proxy,
        IAMVideoProcAmp_Set_Proxy,
        IAMVideoProcAmp_Get_Proxy,
    }
};

static const MIDL_SERVER_INFO IAMVideoProcAmp_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAMVideoProcAmp_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAMVideoProcAmp_table[] =
{
    IAMVideoProcAmp_GetRange_Stub,
    IAMVideoProcAmp_Set_Stub,
    IAMVideoProcAmp_Get_Stub
};

static const CInterfaceStubVtbl _IAMVideoProcAmpStubVtbl =
{
    {
        &IID_IAMVideoProcAmp,
        &IAMVideoProcAmp_ServerInfo,
        6,
        &IAMVideoProcAmp_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IAsyncReader interface
 */
static void __finally_IAsyncReader_RequestAllocator_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_RequestAllocator_Proxy(
    IAsyncReader* This,
    IMemAllocator *pPreferred,
    ALLOCATOR_PROPERTIES *pProps,
    IMemAllocator **ppActual)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_RequestAllocator_Proxy );
    __frame->This = This;
    if (ppActual) MIDL_memset( ppActual, 0, sizeof( *ppActual ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pProps) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppActual) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pPreferred,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3498]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPreferred,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3498]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pProps,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1000]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1356]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppActual,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3538],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_RequestAllocator_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3538], (void *)ppActual );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_RequestAllocator_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    IMemAllocator * pPreferred;
    ALLOCATOR_PROPERTIES * pProps;
    IMemAllocator *_W0;
    IMemAllocator ** ppActual;
};

static void __finally_IAsyncReader_RequestAllocator_Stub( struct __frame_IAsyncReader_RequestAllocator_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPreferred,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3498]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppActual,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3538]);

}

void __RPC_STUB IAsyncReader_RequestAllocator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_RequestAllocator_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_RequestAllocator_Stub );
    __frame->pPreferred = 0;
    __frame->pProps = 0;
    __frame->ppActual = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1356]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPreferred,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3498],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pProps,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1000],
            0);


        __frame->ppActual = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RequestAllocator(__frame->_This, __frame->pPreferred, __frame->pProps, __frame->ppActual);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppActual,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3538]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppActual,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3538]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_RequestAllocator_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_Request_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_Request_Proxy(
    IAsyncReader* This,
    IMediaSample *pSample,
    DWORD_PTR dwUser)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_Request_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3542]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3542]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&dwUser,
                0xb9 /* FC_UINT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1370]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_Request_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_Request_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    IMediaSample * pSample;
    DWORD_PTR dwUser;
};

static void __finally_IAsyncReader_Request_Stub( struct __frame_IAsyncReader_Request_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSample,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3542]);


}

void __RPC_STUB IAsyncReader_Request_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_Request_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_Request_Stub );
    __frame->pSample = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1370]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSample,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3542],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->dwUser,
            0xb9 /* FC_UINT3264 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Request(__frame->_This, __frame->pSample, __frame->dwUser);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_Request_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_WaitForNext_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_WaitForNext_Proxy(
    IAsyncReader* This,
    DWORD dwTimeout,
    IMediaSample **ppSample,
    DWORD_PTR *pdwUser)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_WaitForNext_Proxy );
    __frame->This = This;
    if (ppSample) MIDL_memset( ppSample, 0, sizeof( *ppSample ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!ppSample) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pdwUser) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwTimeout;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1378]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3578],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD_PTR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwUser = *(DWORD_PTR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_WaitForNext_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3578], (void *)ppSample );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3582], (void *)pdwUser );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_WaitForNext_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    DWORD dwTimeout;
    IMediaSample *_W0;
    IMediaSample ** ppSample;
    DWORD_PTR _W1;
    DWORD_PTR * pdwUser;
};

static void __finally_IAsyncReader_WaitForNext_Stub( struct __frame_IAsyncReader_WaitForNext_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSample,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3578]);


}

void __RPC_STUB IAsyncReader_WaitForNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_WaitForNext_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_WaitForNext_Stub );
    __frame->ppSample = 0;
    __frame->pdwUser = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1378]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwTimeout = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->ppSample = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pdwUser = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->WaitForNext(__frame->_This, __frame->dwTimeout, __frame->ppSample, __frame->pdwUser);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSample,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3578]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSample,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3578]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD_PTR *)__frame->_StubMsg.Buffer = *__frame->pdwUser;
        __frame->_StubMsg.Buffer += sizeof(DWORD_PTR);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_WaitForNext_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_SyncReadAligned_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_SyncReadAligned_Proxy(
    IAsyncReader* This,
    IMediaSample *pSample)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_SyncReadAligned_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3586]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSample,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3586]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1390]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_SyncReadAligned_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_SyncReadAligned_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    IMediaSample * pSample;
};

static void __finally_IAsyncReader_SyncReadAligned_Stub( struct __frame_IAsyncReader_SyncReadAligned_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSample,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3586]);

}

void __RPC_STUB IAsyncReader_SyncReadAligned_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_SyncReadAligned_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_SyncReadAligned_Stub );
    __frame->pSample = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1390]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSample,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3586],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SyncReadAligned(__frame->_This, __frame->pSample);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_SyncReadAligned_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_SyncRead_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_SyncRead_Proxy(
    IAsyncReader* This,
    LONGLONG llPosition,
    LONG lLength,
    BYTE *pBuffer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_SyncRead_Proxy );
    __frame->This = This;
    if (pBuffer) MIDL_memset( pBuffer, 0, sizeof( *pBuffer ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pBuffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            *(LONGLONG *)__frame->_StubMsg.Buffer = llPosition;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = lLength;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1396]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3604],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_SyncRead_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)lLength;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3614], (void *)pBuffer );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_SyncRead_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    LONGLONG llPosition;
    LONG lLength;
    BYTE * pBuffer;
};

static void __finally_IAsyncReader_SyncRead_Stub( struct __frame_IAsyncReader_SyncRead_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->lLength;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3614]);

}

void __RPC_STUB IAsyncReader_SyncRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_SyncRead_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_SyncRead_Stub );
    __frame->pBuffer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1396]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->llPosition = *(LONGLONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lLength = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->pBuffer = NdrAllocate(&__frame->_StubMsg, __frame->lLength * 1);
        memset(__frame->pBuffer, 0, __frame->lLength * 1);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SyncRead(__frame->_This, __frame->llPosition, __frame->lLength, __frame->pBuffer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->lLength;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3604]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->lLength;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3604]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_SyncRead_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_Length_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_Length_Proxy(
    IAsyncReader* This,
    LONGLONG *pTotal,
    LONGLONG *pAvailable)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_Length_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pTotal) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pAvailable) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1406]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pTotal = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
            if (__frame->_StubMsg.Buffer + sizeof(LONGLONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pAvailable = *(LONGLONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONGLONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_Length_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3618], (void *)pTotal );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3622], (void *)pAvailable );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_Length_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
    LONGLONG _W0;
    LONGLONG * pTotal;
    LONGLONG _W1;
    LONGLONG * pAvailable;
};

static void __finally_IAsyncReader_Length_Stub( struct __frame_IAsyncReader_Length_Stub *__frame )
{


}

void __RPC_STUB IAsyncReader_Length_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_Length_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_Length_Stub );
    __frame->pTotal = 0;
    __frame->pAvailable = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1406]);


        __frame->pTotal = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->pAvailable = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Length(__frame->_This, __frame->pTotal, __frame->pAvailable);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 40;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pTotal;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x8 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x7);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 7) & ~0x7);
        *(LONGLONG *)__frame->_StubMsg.Buffer = *__frame->pAvailable;
        __frame->_StubMsg.Buffer += sizeof(LONGLONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_Length_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_BeginFlush_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_BeginFlush_Proxy(
    IAsyncReader* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_BeginFlush_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1416]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_BeginFlush_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_BeginFlush_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
};

static void __finally_IAsyncReader_BeginFlush_Stub( struct __frame_IAsyncReader_BeginFlush_Stub *__frame )
{
}

void __RPC_STUB IAsyncReader_BeginFlush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_BeginFlush_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_BeginFlush_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1416]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->BeginFlush(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_BeginFlush_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAsyncReader_EndFlush_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAsyncReader_EndFlush_Proxy(
    IAsyncReader* This)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAsyncReader_EndFlush_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1418]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAsyncReader_EndFlush_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAsyncReader_EndFlush_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAsyncReader * _This;
    HRESULT _RetVal;
};

static void __finally_IAsyncReader_EndFlush_Stub( struct __frame_IAsyncReader_EndFlush_Stub *__frame )
{
}

void __RPC_STUB IAsyncReader_EndFlush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAsyncReader_EndFlush_Stub __f, * const __frame = &__f;

    __frame->_This = (IAsyncReader*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAsyncReader_EndFlush_Stub );
    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1418]);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->EndFlush(__frame->_This);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAsyncReader_EndFlush_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAsyncReader_FormatStringOffsetTable[] =
{
    1356,  /* IAsyncReader::RequestAllocator */
    1370,  /* IAsyncReader::Request */
    1378,  /* IAsyncReader::WaitForNext */
    1390,  /* IAsyncReader::SyncReadAligned */
    1396,  /* IAsyncReader::SyncRead */
    1406,  /* IAsyncReader::Length */
    1416,  /* IAsyncReader::BeginFlush */
    1418,  /* IAsyncReader::EndFlush */
};

static const CINTERFACE_PROXY_VTABLE(11) _IAsyncReaderProxyVtbl =
{
    {
        &IID_IAsyncReader,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAsyncReader_RequestAllocator_Proxy,
        IAsyncReader_Request_Proxy,
        IAsyncReader_WaitForNext_Proxy,
        IAsyncReader_SyncReadAligned_Proxy,
        IAsyncReader_SyncRead_Proxy,
        IAsyncReader_Length_Proxy,
        IAsyncReader_BeginFlush_Proxy,
        IAsyncReader_EndFlush_Proxy,
    }
};

static const MIDL_SERVER_INFO IAsyncReader_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAsyncReader_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAsyncReader_table[] =
{
    IAsyncReader_RequestAllocator_Stub,
    IAsyncReader_Request_Stub,
    IAsyncReader_WaitForNext_Stub,
    IAsyncReader_SyncReadAligned_Stub,
    IAsyncReader_SyncRead_Stub,
    IAsyncReader_Length_Stub,
    IAsyncReader_BeginFlush_Stub,
    IAsyncReader_EndFlush_Stub
};

static const CInterfaceStubVtbl _IAsyncReaderStubVtbl =
{
    {
        &IID_IAsyncReader,
        &IAsyncReader_ServerInfo,
        11,
        &IAsyncReader_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IGraphVersion interface
 */
static void __finally_IGraphVersion_QueryVersion_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IGraphVersion_QueryVersion_Proxy(
    IGraphVersion* This,
    LONG *pVersion)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IGraphVersion_QueryVersion_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pVersion) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = *pVersion;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1420]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IGraphVersion_QueryVersion_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IGraphVersion_QueryVersion_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IGraphVersion * _This;
    HRESULT _RetVal;
    LONG * pVersion;
};

static void __finally_IGraphVersion_QueryVersion_Stub( struct __frame_IGraphVersion_QueryVersion_Stub *__frame )
{

}

void __RPC_STUB IGraphVersion_QueryVersion_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IGraphVersion_QueryVersion_Stub __f, * const __frame = &__f;

    __frame->_This = (IGraphVersion*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IGraphVersion_QueryVersion_Stub );
    __frame->pVersion = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1420]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pVersion = (LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->QueryVersion(__frame->_This, __frame->pVersion);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IGraphVersion_QueryVersion_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IGraphVersion_FormatStringOffsetTable[] =
{
    1420,  /* IGraphVersion::QueryVersion */
};

static const CINTERFACE_PROXY_VTABLE(4) _IGraphVersionProxyVtbl =
{
    {
        &IID_IGraphVersion,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IGraphVersion_QueryVersion_Proxy,
    }
};

static const MIDL_SERVER_INFO IGraphVersion_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IGraphVersion_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IGraphVersion_table[] =
{
    IGraphVersion_QueryVersion_Stub
};

static const CInterfaceStubVtbl _IGraphVersionStubVtbl =
{
    {
        &IID_IGraphVersion,
        &IGraphVersion_ServerInfo,
        4,
        &IGraphVersion_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IResourceConsumer interface
 */
static void __finally_IResourceConsumer_AcquireResource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceConsumer_AcquireResource_Proxy(
    IResourceConsumer* This,
    LONG idResource)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceConsumer_AcquireResource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1426]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceConsumer_AcquireResource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceConsumer_AcquireResource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceConsumer * _This;
    HRESULT _RetVal;
    LONG idResource;
};

static void __finally_IResourceConsumer_AcquireResource_Stub( struct __frame_IResourceConsumer_AcquireResource_Stub *__frame )
{

}

void __RPC_STUB IResourceConsumer_AcquireResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceConsumer_AcquireResource_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceConsumer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceConsumer_AcquireResource_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1426]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AcquireResource(__frame->_This, __frame->idResource);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceConsumer_AcquireResource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceConsumer_ReleaseResource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceConsumer_ReleaseResource_Proxy(
    IResourceConsumer* This,
    LONG idResource)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceConsumer_ReleaseResource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1430]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceConsumer_ReleaseResource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceConsumer_ReleaseResource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceConsumer * _This;
    HRESULT _RetVal;
    LONG idResource;
};

static void __finally_IResourceConsumer_ReleaseResource_Stub( struct __frame_IResourceConsumer_ReleaseResource_Stub *__frame )
{

}

void __RPC_STUB IResourceConsumer_ReleaseResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceConsumer_ReleaseResource_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceConsumer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceConsumer_ReleaseResource_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1430]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseResource(__frame->_This, __frame->idResource);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceConsumer_ReleaseResource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IResourceConsumer_FormatStringOffsetTable[] =
{
    1426,  /* IResourceConsumer::AcquireResource */
    1430,  /* IResourceConsumer::ReleaseResource */
};

static const CINTERFACE_PROXY_VTABLE(5) _IResourceConsumerProxyVtbl =
{
    {
        &IID_IResourceConsumer,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IResourceConsumer_AcquireResource_Proxy,
        IResourceConsumer_ReleaseResource_Proxy,
    }
};

static const MIDL_SERVER_INFO IResourceConsumer_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IResourceConsumer_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IResourceConsumer_table[] =
{
    IResourceConsumer_AcquireResource_Stub,
    IResourceConsumer_ReleaseResource_Stub
};

static const CInterfaceStubVtbl _IResourceConsumerStubVtbl =
{
    {
        &IID_IResourceConsumer,
        &IResourceConsumer_ServerInfo,
        5,
        &IResourceConsumer_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IResourceManager interface
 */
static void __finally_IResourceManager_Register_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_Register_Proxy(
    IResourceManager* This,
    LPCWSTR pName,
    LONG cResource,
    LONG *plToken)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_Register_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!plToken) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3632]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3632]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1434]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *plToken = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_Register_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3634], (void *)plToken );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_Register_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LPCWSTR pName;
    LONG cResource;
    LONG _W0;
    LONG * plToken;
};

static void __finally_IResourceManager_Register_Stub( struct __frame_IResourceManager_Register_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3630]);



}

void __RPC_STUB IResourceManager_Register_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_Register_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_Register_Stub );
    __frame->pName = 0;
    __frame->plToken = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1434]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3632],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        __frame->plToken = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Register(__frame->_This, __frame->pName, __frame->cResource, __frame->plToken);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->plToken;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_Register_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_RegisterGroup_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_RegisterGroup_Proxy(
    IResourceManager* This,
    LPCWSTR pName,
    LONG cResource,
    LONG *palTokens,
    LONG *plToken)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_RegisterGroup_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!palTokens) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!plToken) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3640]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cResource;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)palTokens,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3642]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3640]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = cResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cResource;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)palTokens,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3642]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1446]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *plToken = *(LONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_RegisterGroup_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3656], (void *)plToken );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_RegisterGroup_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LPCWSTR pName;
    LONG cResource;
    LONG * palTokens;
    LONG _W0;
    LONG * plToken;
};

static void __finally_IResourceManager_RegisterGroup_Stub( struct __frame_IResourceManager_RegisterGroup_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3638]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cResource;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->palTokens,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3642]);


}

void __RPC_STUB IResourceManager_RegisterGroup_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_RegisterGroup_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_RegisterGroup_Stub );
    __frame->pName = 0;
    __frame->palTokens = 0;
    __frame->plToken = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1446]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3640],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->palTokens,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3642],
            0);


        __frame->plToken = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RegisterGroup(__frame->_This, __frame->pName, __frame->cResource, __frame->palTokens, __frame->plToken);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(LONG *)__frame->_StubMsg.Buffer = *__frame->plToken;
        __frame->_StubMsg.Buffer += sizeof(LONG);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_RegisterGroup_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_RequestResource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_RequestResource_Proxy(
    IResourceManager* This,
    LONG idResource,
    IUnknown *pFocusObject,
    IResourceConsumer *pConsumer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_RequestResource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3660]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3678]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3660]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3678]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1462]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_RequestResource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_RequestResource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LONG idResource;
    IUnknown * pFocusObject;
    IResourceConsumer * pConsumer;
};

static void __finally_IResourceManager_RequestResource_Stub( struct __frame_IResourceManager_RequestResource_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFocusObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3660]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pConsumer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3678]);

}

void __RPC_STUB IResourceManager_RequestResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_RequestResource_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_RequestResource_Stub );
    __frame->pFocusObject = 0;
    __frame->pConsumer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1462]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFocusObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3660],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pConsumer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3678],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RequestResource(__frame->_This, __frame->idResource, __frame->pFocusObject, __frame->pConsumer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_RequestResource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_NotifyAcquire_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_NotifyAcquire_Proxy(
    IResourceManager* This,
    LONG idResource,
    IResourceConsumer *pConsumer,
    HRESULT hr)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_NotifyAcquire_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HRESULT *)__frame->_StubMsg.Buffer = hr;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1474]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_NotifyAcquire_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_NotifyAcquire_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LONG idResource;
    IResourceConsumer * pConsumer;
    HRESULT hr;
};

static void __finally_IResourceManager_NotifyAcquire_Stub( struct __frame_IResourceManager_NotifyAcquire_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pConsumer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696]);


}

void __RPC_STUB IResourceManager_NotifyAcquire_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_NotifyAcquire_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_NotifyAcquire_Stub );
    __frame->pConsumer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1474]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pConsumer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hr = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->NotifyAcquire(__frame->_This, __frame->idResource, __frame->pConsumer, __frame->hr);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_NotifyAcquire_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_NotifyRelease_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_NotifyRelease_Proxy(
    IResourceManager* This,
    LONG idResource,
    IResourceConsumer *pConsumer,
    BOOL bStillWant)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_NotifyRelease_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3714]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3714]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bStillWant;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1484]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_NotifyRelease_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_NotifyRelease_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LONG idResource;
    IResourceConsumer * pConsumer;
    BOOL bStillWant;
};

static void __finally_IResourceManager_NotifyRelease_Stub( struct __frame_IResourceManager_NotifyRelease_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pConsumer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3714]);


}

void __RPC_STUB IResourceManager_NotifyRelease_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_NotifyRelease_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_NotifyRelease_Stub );
    __frame->pConsumer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1484]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pConsumer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3714],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bStillWant = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->NotifyRelease(__frame->_This, __frame->idResource, __frame->pConsumer, __frame->bStillWant);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_NotifyRelease_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_CancelRequest_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_CancelRequest_Proxy(
    IResourceManager* This,
    LONG idResource,
    IResourceConsumer *pConsumer)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_CancelRequest_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3732]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LONG *)__frame->_StubMsg.Buffer = idResource;
            __frame->_StubMsg.Buffer += sizeof(LONG);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pConsumer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3732]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1494]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_CancelRequest_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_CancelRequest_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    LONG idResource;
    IResourceConsumer * pConsumer;
};

static void __finally_IResourceManager_CancelRequest_Stub( struct __frame_IResourceManager_CancelRequest_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pConsumer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3732]);

}

void __RPC_STUB IResourceManager_CancelRequest_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_CancelRequest_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_CancelRequest_Stub );
    __frame->pConsumer = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1494]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->idResource = *(LONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LONG);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pConsumer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3732],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CancelRequest(__frame->_This, __frame->idResource, __frame->pConsumer);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_CancelRequest_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_SetFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_SetFocus_Proxy(
    IResourceManager* This,
    IUnknown *pFocusObject)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_SetFocus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3750]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3750]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1502]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_SetFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_SetFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    IUnknown * pFocusObject;
};

static void __finally_IResourceManager_SetFocus_Stub( struct __frame_IResourceManager_SetFocus_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFocusObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3750]);

}

void __RPC_STUB IResourceManager_SetFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_SetFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_SetFocus_Stub );
    __frame->pFocusObject = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1502]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFocusObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3750],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetFocus(__frame->_This, __frame->pFocusObject);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_SetFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IResourceManager_ReleaseFocus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IResourceManager_ReleaseFocus_Proxy(
    IResourceManager* This,
    IUnknown *pFocusObject)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IResourceManager_ReleaseFocus_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3768]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pFocusObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3768]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1508]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IResourceManager_ReleaseFocus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IResourceManager_ReleaseFocus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IResourceManager * _This;
    HRESULT _RetVal;
    IUnknown * pFocusObject;
};

static void __finally_IResourceManager_ReleaseFocus_Stub( struct __frame_IResourceManager_ReleaseFocus_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pFocusObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3768]);

}

void __RPC_STUB IResourceManager_ReleaseFocus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IResourceManager_ReleaseFocus_Stub __f, * const __frame = &__f;

    __frame->_This = (IResourceManager*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IResourceManager_ReleaseFocus_Stub );
    __frame->pFocusObject = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1508]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pFocusObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3768],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseFocus(__frame->_This, __frame->pFocusObject);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IResourceManager_ReleaseFocus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IResourceManager_FormatStringOffsetTable[] =
{
    1434,  /* IResourceManager::Register */
    1446,  /* IResourceManager::RegisterGroup */
    1462,  /* IResourceManager::RequestResource */
    1474,  /* IResourceManager::NotifyAcquire */
    1484,  /* IResourceManager::NotifyRelease */
    1494,  /* IResourceManager::CancelRequest */
    1502,  /* IResourceManager::SetFocus */
    1508,  /* IResourceManager::ReleaseFocus */
};

static const CINTERFACE_PROXY_VTABLE(11) _IResourceManagerProxyVtbl =
{
    {
        &IID_IResourceManager,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IResourceManager_Register_Proxy,
        IResourceManager_RegisterGroup_Proxy,
        IResourceManager_RequestResource_Proxy,
        IResourceManager_NotifyAcquire_Proxy,
        IResourceManager_NotifyRelease_Proxy,
        IResourceManager_CancelRequest_Proxy,
        IResourceManager_SetFocus_Proxy,
        IResourceManager_ReleaseFocus_Proxy,
    }
};

static const MIDL_SERVER_INFO IResourceManager_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IResourceManager_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IResourceManager_table[] =
{
    IResourceManager_Register_Stub,
    IResourceManager_RegisterGroup_Stub,
    IResourceManager_RequestResource_Stub,
    IResourceManager_NotifyAcquire_Stub,
    IResourceManager_NotifyRelease_Stub,
    IResourceManager_CancelRequest_Stub,
    IResourceManager_SetFocus_Stub,
    IResourceManager_ReleaseFocus_Stub
};

static const CInterfaceStubVtbl _IResourceManagerStubVtbl =
{
    {
        &IID_IResourceManager,
        &IResourceManager_ServerInfo,
        11,
        &IResourceManager_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ISeekingPassThru interface
 */
static void __finally_ISeekingPassThru_Init_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ISeekingPassThru_Init_Proxy(
    ISeekingPassThru* This,
    BOOL bSupportRendering,
    IPin *pPin)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ISeekingPassThru_Init_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3786]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = bSupportRendering;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pPin,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3786]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1514]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ISeekingPassThru_Init_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ISeekingPassThru_Init_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ISeekingPassThru * _This;
    HRESULT _RetVal;
    BOOL bSupportRendering;
    IPin * pPin;
};

static void __finally_ISeekingPassThru_Init_Stub( struct __frame_ISeekingPassThru_Init_Stub *__frame )
{

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pPin,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3786]);

}

void __RPC_STUB ISeekingPassThru_Init_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ISeekingPassThru_Init_Stub __f, * const __frame = &__f;

    __frame->_This = (ISeekingPassThru*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ISeekingPassThru_Init_Stub );
    __frame->pPin = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[1514]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->bSupportRendering = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pPin,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3786],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Init(__frame->_This, __frame->bSupportRendering, __frame->pPin);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ISeekingPassThru_Init_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ISeekingPassThru_FormatStringOffsetTable[] =
{
    1514,  /* ISeekingPassThru::Init */
};

static const CINTERFACE_PROXY_VTABLE(4) _ISeekingPassThruProxyVtbl =
{
    {
        &IID_ISeekingPassThru,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ISeekingPassThru_Init_Proxy,
    }
};

static const MIDL_SERVER_INFO ISeekingPassThru_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISeekingPassThru_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ISeekingPassThru_table[] =
{
    ISeekingPassThru_Init_Stub
};

static const CInterfaceStubVtbl _ISeekingPassThruStubVtbl =
{
    {
        &IID_ISeekingPassThru,
        &ISeekingPassThru_ServerInfo,
        4,
        &ISeekingPassThru_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

static const MIDL_STUB_DESC Object_StubDesc =
{
    0,
    NdrOleAllocate,
    NdrOleFree,
    {0}, 0, 0, 0, 0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

#if !defined(__RPC_WIN64__)
#error Currently only Wine and WIN32 are supported.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter clsidDeviceClass) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x14),	/* type offset = 20 */
/* 4 (parameter ppEnumMoniker) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2a),	/* type offset = 42 */
/* 8 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter pReceivePin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2e),	/* type offset = 46 */
/* 16 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x92),	/* type offset = 146 */
/* 20 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 22 (parameter pConnector) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x96),	/* type offset = 150 */
/* 26 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd6),	/* type offset = 214 */
/* 30 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 32 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter pPin) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xec),	/* type offset = 236 */
/* 38 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 40 (parameter pmt) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11e),	/* type offset = 286 */
/* 44 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter pInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14e),	/* type offset = 334 */
/* 50 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 52 (parameter pPinDir) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x152),	/* type offset = 338 */
/* 56 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 58 (parameter Id) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x15a),	/* type offset = 346 */
/* 62 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 64 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x18c),	/* type offset = 396 */
/* 68 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 70 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a2),	/* type offset = 418 */
/* 74 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter apPin) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1b8),	/* type offset = 440 */
/* 80 (parameter nPin) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1bc),	/* type offset = 444 */
/* 84 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 88 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter tStart) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 94 (parameter tStop) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 96 (parameter dRate) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0c,    /* FC_DOUBLE */
/* 98 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 100 (parameter cPins) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 102 (parameter ppPins) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d2),	/* type offset = 466 */
/* 106 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1e8),	/* type offset = 488 */
/* 110 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 112 (parameter cPins) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 114 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 116 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 118 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1fe),	/* type offset = 510 */
/* 122 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 124 (parameter cMediaTypes) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 126 (parameter ppMediaTypes) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x202),	/* type offset = 514 */
/* 130 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x218),	/* type offset = 536 */
/* 134 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 136 (parameter cMediaTypes) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 138 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 140 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 142 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x22e),	/* type offset = 558 */
/* 146 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 148 (parameter pFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x232),	/* type offset = 562 */
/* 152 (parameter pName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x244),	/* type offset = 580 */
/* 156 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 158 (parameter pFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x248),	/* type offset = 584 */
/* 162 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 164 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x26c),	/* type offset = 620 */
/* 168 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 170 (parameter pName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x270),	/* type offset = 624 */
/* 174 (parameter ppFilter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x286),	/* type offset = 646 */
/* 178 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 180 (parameter ppinOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x28a),	/* type offset = 650 */
/* 184 (parameter ppinIn) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x29c),	/* type offset = 668 */
/* 188 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2dc),	/* type offset = 732 */
/* 192 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter ppin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2e0),	/* type offset = 736 */
/* 198 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 200 (parameter ppin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2f2),	/* type offset = 754 */
/* 204 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 206 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 208 (parameter cFilters) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 210 (parameter ppFilter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x316),	/* type offset = 790 */
/* 214 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x31a),	/* type offset = 794 */
/* 218 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 220 (parameter cFilters) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 222 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 224 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 226 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x330),	/* type offset = 816 */
/* 230 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 232 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 234 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 236 (parameter tStart) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 238 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 240 (parameter dwMilliSecsTimeout) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 242 (parameter State) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x334),	/* type offset = 820 */
/* 246 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 248 (parameter pClock) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x338),	/* type offset = 824 */
/* 252 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 254 (parameter pClock) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x35c),	/* type offset = 860 */
/* 258 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x372),	/* type offset = 882 */
/* 264 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 266 (parameter Id) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x376),	/* type offset = 886 */
/* 270 (parameter ppPin) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x38c),	/* type offset = 908 */
/* 274 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 276 (parameter pInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3ba),	/* type offset = 954 */
/* 280 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 282 (parameter pGraph) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3be),	/* type offset = 958 */
/* 286 (parameter pName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3d0),	/* type offset = 976 */
/* 290 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 292 (parameter pVendorInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3d8),	/* type offset = 984 */
/* 296 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 298 (parameter pTime) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3dc),	/* type offset = 988 */
/* 302 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 304 (parameter baseTime) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 306 (parameter streamTime) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 308 (parameter hEvent) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 310 (parameter pdwAdviseCookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3e0),	/* type offset = 992 */
/* 314 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 316 (parameter startTime) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 318 (parameter periodTime) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 320 (parameter hSemaphore) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 322 (parameter pdwAdviseCookie) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3e4),	/* type offset = 996 */
/* 326 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 328 (parameter dwAdviseCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 330 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 332 (parameter pRequest) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3f2),	/* type offset = 1010 */
/* 336 (parameter pActual) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3f6),	/* type offset = 1014 */
/* 340 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 342 (parameter pProps) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3fa),	/* type offset = 1018 */
/* 346 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 348 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 350 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 352 (parameter ppBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x410),	/* type offset = 1040 */
/* 356 (parameter pStartTime) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x414),	/* type offset = 1044 */
/* 360 (parameter pEndTime) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x418),	/* type offset = 1048 */
/* 364 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 366 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 368 (parameter pBuffer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x41c),	/* type offset = 1052 */
/* 372 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 374 (parameter pNotify) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x42e),	/* type offset = 1070 */
/* 378 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 380 (parameter plBuffersFree) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x440),	/* type offset = 1088 */
/* 384 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 386 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 388 (parameter ppAllocator) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x456),	/* type offset = 1110 */
/* 392 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 394 (parameter pAllocator) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x45a),	/* type offset = 1114 */
/* 398 (parameter bReadOnly) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 400 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 402 (parameter pProps) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x46c),	/* type offset = 1132 */
/* 406 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 408 (parameter pSample) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x470),	/* type offset = 1136 */
/* 412 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 414 (parameter pSamples) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x494),	/* type offset = 1172 */
/* 418 (parameter nSamples) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 420 (parameter nSamplesProcessed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4aa),	/* type offset = 1194 */
/* 424 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 426 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 428 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 430 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 432 (parameter pCapabilities) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4ae),	/* type offset = 1198 */
/* 436 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 438 (parameter pCapabilities) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x4b2),	/* type offset = 1202 */
/* 442 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 444 (parameter pFormat) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4c8),	/* type offset = 1224 */
/* 448 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 450 (parameter pFormat) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4cc),	/* type offset = 1228 */
/* 454 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 456 (parameter pFormat) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4d0),	/* type offset = 1232 */
/* 460 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 462 (parameter pFormat) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4e6),	/* type offset = 1254 */
/* 466 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 468 (parameter pFormat) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4fc),	/* type offset = 1276 */
/* 472 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 474 (parameter pDuration) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x500),	/* type offset = 1280 */
/* 478 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 480 (parameter pStop) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x504),	/* type offset = 1284 */
/* 484 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 486 (parameter pCurrent) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x508),	/* type offset = 1288 */
/* 490 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 492 (parameter pTarget) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x50c),	/* type offset = 1292 */
/* 496 (parameter pTargetFormat) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x522),	/* type offset = 1314 */
/* 500 (parameter Source) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 502 (parameter pSourceFormat) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x538),	/* type offset = 1336 */
/* 506 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 508 (parameter pCurrent) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x53c),	/* type offset = 1340 */
/* 512 (parameter dwCurrentFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 514 (parameter pStop) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x540),	/* type offset = 1344 */
/* 518 (parameter dwStopFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 520 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 522 (parameter pCurrent) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x544),	/* type offset = 1348 */
/* 526 (parameter pStop) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x548),	/* type offset = 1352 */
/* 530 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 532 (parameter pEarliest) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x54c),	/* type offset = 1356 */
/* 536 (parameter pLatest) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x550),	/* type offset = 1360 */
/* 540 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 542 (parameter dRate) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0c,    /* FC_DOUBLE */
/* 544 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 546 (parameter pdRate) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x554),	/* type offset = 1364 */
/* 550 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 552 (parameter pllPreroll) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x558),	/* type offset = 1368 */
/* 556 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 558 (parameter streams) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x55c),	/* type offset = 1372 */
/* 562 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 564 (parameter index) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 566 (parameter media_type) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x564),	/* type offset = 1380 */
/* 570 (parameter flags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x568),	/* type offset = 1384 */
/* 574 (parameter lcid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x56c),	/* type offset = 1388 */
/* 578 (parameter group) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x570),	/* type offset = 1392 */
/* 582 (parameter name) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x578),	/* type offset = 1400 */
/* 586 (parameter object) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x58e),	/* type offset = 1422 */
/* 590 (parameter unknown) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5a4),	/* type offset = 1444 */
/* 594 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 596 (parameter index) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 598 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 600 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 602 (parameter cFilters) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 604 (parameter apRegFilter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5c2),	/* type offset = 1474 */
/* 608 (parameter pcFetched) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5c6),	/* type offset = 1478 */
/* 612 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 614 (parameter cFilters) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 616 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 618 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 620 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5dc),	/* type offset = 1500 */
/* 624 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 626 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 630 (parameter Name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e0),	/* type offset = 1504 */
/* 634 (parameter dwMerit) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 636 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 638 (parameter clsid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 642 (parameter Name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e4),	/* type offset = 1508 */
/* 646 (parameter MRId) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5e8),	/* type offset = 1512 */
/* 650 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 652 (parameter Filter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 656 (parameter Name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ec),	/* type offset = 1516 */
/* 660 (parameter bRendered) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 662 (parameter bOutput) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 664 (parameter bZero) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 666 (parameter bMany) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 668 (parameter ConnectsToFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 672 (parameter ConnectsToPin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f0),	/* type offset = 1520 */
/* 676 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 678 (parameter clsFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 682 (parameter strName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f4),	/* type offset = 1524 */
/* 686 (parameter clsMajorType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 690 (parameter clsSubType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 694 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 696 (parameter Filter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 700 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 702 (parameter MRId) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 706 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 708 (parameter Filter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 712 (parameter Name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f8),	/* type offset = 1528 */
/* 716 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 718 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x60e),	/* type offset = 1550 */
/* 722 (parameter dwMerit) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 724 (parameter bInputNeeded) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 726 (parameter clsInMaj) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 730 (parameter clsInSub) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 734 (parameter bRender) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 736 (parameter bOutputNeeded) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 738 (parameter clsOutMaj) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 742 (parameter clsOutSub) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8),	/* type offset = 8 */
/* 746 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 748 (parameter clsidCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x612),	/* type offset = 1554 */
/* 752 (parameter dwCategoryMerit) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 754 (parameter Description) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x616),	/* type offset = 1558 */
/* 758 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 760 (parameter pclsidCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x62c),	/* type offset = 1580 */
/* 764 (parameter szInstance) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x630),	/* type offset = 1584 */
/* 768 (parameter Filter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x634),	/* type offset = 1588 */
/* 772 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 774 (parameter clsidFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x638),	/* type offset = 1592 */
/* 778 (parameter Name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x63c),	/* type offset = 1596 */
/* 782 (parameter ppMoniker) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x652),	/* type offset = 1618 */
/* 786 (parameter pclsidCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x668),	/* type offset = 1640 */
/* 790 (parameter szInstance) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x66c),	/* type offset = 1644 */
/* 794 (parameter prf2) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7c0),	/* type offset = 1984 */
/* 798 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 800 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7d6),	/* type offset = 2006 */
/* 804 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 806 (parameter bExactMatch) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 808 (parameter dwMerit) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 810 (parameter bInputNeeded) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 812 (parameter cInputTypes) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 814 (parameter pInputTypes) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7ec),	/* type offset = 2028 */
/* 818 (parameter pMedIn) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x80a),	/* type offset = 2058 */
/* 822 (parameter pPinCategoryIn) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x820),	/* type offset = 2080 */
/* 826 (parameter bRender) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 828 (parameter bOutputNeeded) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 830 (parameter cOutputTypes) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 832 (parameter pOutputTypes) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x836),	/* type offset = 2102 */
/* 836 (parameter pMedOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x854),	/* type offset = 2132 */
/* 840 (parameter pPinCategoryOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x86a),	/* type offset = 2154 */
/* 844 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 846 (parameter ppEnum) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x880),	/* type offset = 2176 */
/* 850 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 852 (parameter pSelf) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x884),	/* type offset = 2180 */
/* 856 (parameter q) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x896),	/* type offset = 2198 */
/* 860 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 862 (parameter piqc) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8a4),	/* type offset = 2212 */
/* 866 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 868 (parameter EventCode) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 870 (parameter EventParam1) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 872 (parameter EventParam2) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 874 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 876 (parameter pszFileName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8b6),	/* type offset = 2230 */
/* 880 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8e8),	/* type offset = 2280 */
/* 884 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 886 (parameter ppszFileName) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8f0),	/* type offset = 2288 */
/* 890 (parameter pmt) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8f4),	/* type offset = 2292 */
/* 894 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 896 (parameter pszFileName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x8f8),	/* type offset = 2296 */
/* 900 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x92a),	/* type offset = 2346 */
/* 904 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 906 (parameter ppszFileName) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x932),	/* type offset = 2354 */
/* 910 (parameter pmt) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x936),	/* type offset = 2358 */
/* 914 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 916 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 918 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 920 (parameter pdwFlags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x93a),	/* type offset = 2362 */
/* 924 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 926 (parameter ppinOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x93e),	/* type offset = 2366 */
/* 930 (parameter ppinIn) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x950),	/* type offset = 2384 */
/* 934 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 936 (parameter ppinOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x962),	/* type offset = 2402 */
/* 940 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 942 (parameter lpcwstrFile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x974),	/* type offset = 2420 */
/* 946 (parameter lpcwstrPlayList) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x978),	/* type offset = 2424 */
/* 950 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 952 (parameter lpcwstrFileName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x97c),	/* type offset = 2428 */
/* 956 (parameter lpcwstrFilterName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x980),	/* type offset = 2432 */
/* 960 (parameter ppFilter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x996),	/* type offset = 2454 */
/* 964 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 966 (parameter hFile) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 968 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 970 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 972 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 974 (parameter pfg) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x99a),	/* type offset = 2458 */
/* 978 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 980 (parameter ppfg) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9be),	/* type offset = 2494 */
/* 984 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 986 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9d4),	/* type offset = 2516 */
/* 990 (parameter lpstrFile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9d8),	/* type offset = 2520 */
/* 994 (parameter ppf) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9ee),	/* type offset = 2542 */
/* 998 (parameter ppSink) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa04),	/* type offset = 2564 */
/* 1002 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1004 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa1a),	/* type offset = 2586 */
/* 1008 (parameter pf) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa1e),	/* type offset = 2590 */
/* 1012 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa42),	/* type offset = 2626 */
/* 1016 (parameter ppint) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa58),	/* type offset = 2648 */
/* 1020 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1022 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa6e),	/* type offset = 2670 */
/* 1026 (parameter pSource) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa72),	/* type offset = 2674 */
/* 1030 (parameter pfCompressor) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa84),	/* type offset = 2692 */
/* 1034 (parameter pfRenderer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa96),	/* type offset = 2710 */
/* 1038 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1040 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xaba),	/* type offset = 2746 */
/* 1044 (parameter pFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xabe),	/* type offset = 2750 */
/* 1048 (parameter pstart) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xad0),	/* type offset = 2768 */
/* 1052 (parameter pstop) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xad4),	/* type offset = 2772 */
/* 1056 (parameter wStartCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 1058 (parameter wStopCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 1060 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1062 (parameter lpstr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xad8),	/* type offset = 2776 */
/* 1066 (parameter dwlSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 1068 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1070 (parameter lpwstrOld) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xadc),	/* type offset = 2780 */
/* 1074 (parameter lpwstrNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xae0),	/* type offset = 2784 */
/* 1078 (parameter fAllowEscAbort) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1080 (parameter pCallback) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xae4),	/* type offset = 2788 */
/* 1084 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1086 (parameter iProgress) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1088 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1090 (parameter pfg) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xaf6),	/* type offset = 2806 */
/* 1094 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1096 (parameter ppfg) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb1a),	/* type offset = 2842 */
/* 1100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1102 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb30),	/* type offset = 2864 */
/* 1106 (parameter lpstrFile) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb34),	/* type offset = 2868 */
/* 1110 (parameter ppf) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb4a),	/* type offset = 2890 */
/* 1114 (parameter ppSink) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb60),	/* type offset = 2912 */
/* 1118 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1120 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb76),	/* type offset = 2934 */
/* 1124 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb8c),	/* type offset = 2956 */
/* 1128 (parameter pf) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb90),	/* type offset = 2960 */
/* 1132 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xba2),	/* type offset = 2978 */
/* 1136 (parameter ppint) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xbb8),	/* type offset = 3000 */
/* 1140 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1142 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbce),	/* type offset = 3022 */
/* 1146 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbe4),	/* type offset = 3044 */
/* 1150 (parameter pSource) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbe8),	/* type offset = 3048 */
/* 1154 (parameter pfCompressor) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbfa),	/* type offset = 3066 */
/* 1158 (parameter pfRenderer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc0c),	/* type offset = 3084 */
/* 1162 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1164 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc30),	/* type offset = 3120 */
/* 1168 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc46),	/* type offset = 3142 */
/* 1172 (parameter pFilter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc4a),	/* type offset = 3146 */
/* 1176 (parameter pstart) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc5c),	/* type offset = 3164 */
/* 1180 (parameter pstop) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc60),	/* type offset = 3168 */
/* 1184 (parameter wStartCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 1186 (parameter wStopCookie) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 1188 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1190 (parameter lpstr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc64),	/* type offset = 3172 */
/* 1194 (parameter dwlSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 1196 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1198 (parameter lpwstrOld) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc68),	/* type offset = 3176 */
/* 1202 (parameter lpwstrNew) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc6c),	/* type offset = 3180 */
/* 1206 (parameter fAllowEscAbort) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1208 (parameter pCallback) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc70),	/* type offset = 3184 */
/* 1212 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1214 (parameter pSource) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc82),	/* type offset = 3202 */
/* 1218 (parameter pindir) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 1220 (parameter pCategory) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xca6),	/* type offset = 3238 */
/* 1224 (parameter pType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xcbc),	/* type offset = 3260 */
/* 1228 (parameter fUnconnected) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1230 (parameter num) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1232 (parameter ppPin) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xcd2),	/* type offset = 3282 */
/* 1236 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1238 (parameter pMoniker) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xcd6),	/* type offset = 3286 */
/* 1242 (parameter pCtx) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xce8),	/* type offset = 3304 */
/* 1246 (parameter lpcwstrFilterName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xcfa),	/* type offset = 3322 */
/* 1250 (parameter ppFilter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd10),	/* type offset = 3344 */
/* 1254 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1256 (parameter ppin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd14),	/* type offset = 3348 */
/* 1260 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd54),	/* type offset = 3412 */
/* 1264 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1266 (parameter pPinOut) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd58),	/* type offset = 3416 */
/* 1270 (parameter dwFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1272 (parameter pvContext) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xd6a),	/* type offset = 3434 */
/* 1276 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1278 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd6e),	/* type offset = 3438 */
/* 1282 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1284 (parameter pmt) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd76),	/* type offset = 3446 */
/* 1288 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1290 (parameter piCount) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd7a),	/* type offset = 3450 */
/* 1294 (parameter piSize) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd7e),	/* type offset = 3454 */
/* 1298 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1300 (parameter iIndex) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1302 (parameter pmt) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd86),	/* type offset = 3462 */
/* 1306 (parameter pSCC) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd8a),	/* type offset = 3466 */
/* 1310 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1312 (parameter Property) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1314 (parameter pMin) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd8e),	/* type offset = 3470 */
/* 1318 (parameter pMax) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd92),	/* type offset = 3474 */
/* 1322 (parameter pSteppingDelta) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd96),	/* type offset = 3478 */
/* 1326 (parameter pDefault) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd9a),	/* type offset = 3482 */
/* 1330 (parameter pCapsFlags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd9e),	/* type offset = 3486 */
/* 1334 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1336 (parameter Property) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1338 (parameter lValue) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1340 (parameter Flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1342 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1344 (parameter Property) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1346 (parameter lValue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xda2),	/* type offset = 3490 */
/* 1350 (parameter Flags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xda6),	/* type offset = 3494 */
/* 1354 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1356 (parameter pPreferred) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xdaa),	/* type offset = 3498 */
/* 1360 (parameter pProps) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xdbc),	/* type offset = 3516 */
/* 1364 (parameter ppActual) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xdd2),	/* type offset = 3538 */
/* 1368 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1370 (parameter pSample) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xdd6),	/* type offset = 3542 */
/* 1374 (parameter dwUser) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 1376 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1378 (parameter dwTimeout) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1380 (parameter ppSample) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xdfa),	/* type offset = 3578 */
/* 1384 (parameter pdwUser) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xdfe),	/* type offset = 3582 */
/* 1388 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1390 (parameter pSample) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe02),	/* type offset = 3586 */
/* 1394 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1396 (parameter llPosition) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0b,    /* FC_HYPER */
/* 1398 (parameter lLength) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1400 (parameter pBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe14),	/* type offset = 3604 */
/* 1404 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1406 (parameter pTotal) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe22),	/* type offset = 3618 */
/* 1410 (parameter pAvailable) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe26),	/* type offset = 3622 */
/* 1414 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1416 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1418 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1420 (parameter pVersion) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe2a),	/* type offset = 3626 */
/* 1424 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1426 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1428 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1430 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1432 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1434 (parameter pName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe2e),	/* type offset = 3630 */
/* 1438 (parameter cResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1440 (parameter plToken) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe32),	/* type offset = 3634 */
/* 1444 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1446 (parameter pName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe36),	/* type offset = 3638 */
/* 1450 (parameter cResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1452 (parameter palTokens) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe3a),	/* type offset = 3642 */
/* 1456 (parameter plToken) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe48),	/* type offset = 3656 */
/* 1460 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1462 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1464 (parameter pFocusObject) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe4c),	/* type offset = 3660 */
/* 1468 (parameter pConsumer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe5e),	/* type offset = 3678 */
/* 1472 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1474 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1476 (parameter pConsumer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe70),	/* type offset = 3696 */
/* 1480 (parameter hr) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1482 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1484 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1486 (parameter pConsumer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe82),	/* type offset = 3714 */
/* 1490 (parameter bStillWant) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1492 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1494 (parameter idResource) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1496 (parameter pConsumer) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe94),	/* type offset = 3732 */
/* 1500 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1502 (parameter pFocusObject) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xea6),	/* type offset = 3750 */
/* 1506 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1508 (parameter pFocusObject) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xeb8),	/* type offset = 3768 */
/* 1512 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1514 (parameter bSupportRendering) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1516 (parameter pPin) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xeca),	/* type offset = 3786 */
/* 1520 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 8 (CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2) */
        0x5b,	/* FC_END */
/* 20 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (8) */
/* 24 (IEnumMoniker *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000102),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 42 (IEnumMoniker **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (24) */
/* 46 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 64 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 70 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (64) */
        0x5b,	/* FC_END */
/* 82 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 100 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x48),	/* offset = 72 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 110 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x1a),	/* Offset= 26 (142) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffce),	/* Offset= -50 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffca),	/* Offset= -54 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffc3),	/* Offset= -61 (70) */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffca),	/* Offset= -54 (82) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 142 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (100) */
/* 146 (const AM_MEDIA_TYPE *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffda),	/* Offset= -38 (110) */
/* 150 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 168 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x48),	/* offset = 72 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 178 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x1a),	/* Offset= 26 (210) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff8a),	/* Offset= -118 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff86),	/* Offset= -122 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff7f),	/* Offset= -129 (70) */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff86),	/* Offset= -122 (82) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 210 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (168) */
/* 214 (const AM_MEDIA_TYPE *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffda),	/* Offset= -38 (178) */
/* 218 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 236 (IPin **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (218) */
/* 240 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x48),	/* offset = 72 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 250 (AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x1a),	/* Offset= 26 (282) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff42),	/* Offset= -190 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff3e),	/* Offset= -194 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff37),	/* Offset= -201 (70) */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff3e),	/* Offset= -194 (82) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 282 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (240) */
/* 286 (AM_MEDIA_TYPE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffda),	/* Offset= -38 (250) */
/* 290 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 308 (WCHAR[128]) */
        0x1d,	/* FC_SMFARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x100),	/* 256 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 314 (PIN_INFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x110),	/* 272 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (320) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (290) */
        0x0d,	/* FC_ENUM16 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffeb),	/* Offset= -21 (308) */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 334 (PIN_INFO *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffea),	/* Offset= -22 (314) */
/* 338 (PIN_DIRECTION *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0d,	/* FC_ENUM16 */
        0x5c,	/* FC_PAD */
/* 342 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (346) */
/* 346 (LPWSTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 348 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 350 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x48),	/* offset = 72 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 360 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x1a),	/* Offset= 26 (392) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfed4),	/* Offset= -300 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfed0),	/* Offset= -304 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfec9),	/* Offset= -311 (70) */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfed0),	/* Offset= -304 (82) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 392 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (350) */
/* 396 (const AM_MEDIA_TYPE *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffda),	/* Offset= -38 (360) */
/* 400 (IEnumMediaTypes *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x89c31040),
        NdrFcShort(0x846b),
        NdrFcShort(0x11ce),
        0x97,
        0xd3,
        0x00,
        0xaa,
        0x00,
        0x55,
        0x59,
        0x5a,

/* 418 (IEnumMediaTypes **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (400) */
/* 422 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 440 (IPin **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (422) */
/* 444 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 448 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 466 (IPin **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPins, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (448) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 484 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (466) */
/* 488 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 492 (IEnumPins *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86892),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 510 (IEnumPins **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (492) */
/* 514 (AM_MEDIA_TYPE **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cMediaTypes, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfeea),	/* Offset= -278 (250) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 532 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (514) */
/* 536 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 540 (IEnumMediaTypes *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x89c31040),
        NdrFcShort(0x846b),
        NdrFcShort(0x11ce),
        0x97,
        0xd3,
        0x00,
        0xaa,
        0x00,
        0x55,
        0x59,
        0x5a,

/* 558 (IEnumMediaTypes **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (540) */
/* 562 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 580 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 582 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 584 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 602 (IEnumFilters *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86893),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 620 (IEnumFilters **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (602) */
/* 624 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 626 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 628 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 646 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (628) */
/* 650 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 668 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 686 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x48),	/* offset = 72 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 696 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x1a),	/* Offset= 26 (728) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd84),	/* Offset= -636 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd80),	/* Offset= -640 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd79),	/* Offset= -647 (70) */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd80),	/* Offset= -640 (82) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 728 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (686) */
/* 732 (const AM_MEDIA_TYPE *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffda),	/* Offset= -38 (696) */
/* 736 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 754 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 772 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 790 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (772) */
/* 794 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 798 (IEnumFilters *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86893),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 816 (IEnumFilters **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (798) */
/* 820 (FILTER_STATE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0d,	/* FC_ENUM16 */
        0x5c,	/* FC_PAD */
/* 824 (IReferenceClock *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86897),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 842 (IReferenceClock *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86897),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 860 (IReferenceClock **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (842) */
/* 864 (IEnumPins *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86892),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 882 (IEnumPins **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (864) */
/* 886 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 888 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 890 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 908 (IPin **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (890) */
/* 912 (WCHAR[128]) */
        0x1d,	/* FC_SMFARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x100),	/* 256 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 918 (IFilterGraph *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689f),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 936 (FILTER_INFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x108),	/* 264 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (942) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (912) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (918) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 954 (FILTER_INFO *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (936) */
/* 958 (IFilterGraph *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689f),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 976 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 978 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 980 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (984) */
/* 984 (LPWSTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 986 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 988 (REFERENCE_TIME *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 992 (DWORD_PTR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 996 (DWORD_PTR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1000 (ALLOCATOR_PROPERTIES) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1010 (ALLOCATOR_PROPERTIES *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1000) */
/* 1014 (ALLOCATOR_PROPERTIES *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff0),	/* Offset= -16 (1000) */
/* 1018 (ALLOCATOR_PROPERTIES *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (1000) */
/* 1022 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1040 (IMediaSample **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1022) */
/* 1044 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1048 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1052 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1070 (IMemAllocatorNotifyCallbackTemp *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x92980b30),
        NdrFcShort(0xc1de),
        NdrFcShort(0x11d2),
        0xab,
        0xf5,
        0x00,
        0xa0,
        0xc9,
        0x05,
        0xf3,
        0x75,

/* 1088 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1092 (IMemAllocator *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689c),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1110 (IMemAllocator **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1092) */
/* 1114 (IMemAllocator *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689c),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1132 (ALLOCATOR_PROPERTIES *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff7a),	/* Offset= -134 (1000) */
/* 1136 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1154 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1172 (IMediaSample **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x28,	/* Corr desc: parameter nSamples, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1154) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1190 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1172) */
/* 1194 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1198 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1202 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1206 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1212 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1206) */
        0x5b,	/* FC_END */
/* 1224 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1212) */
/* 1228 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfb78),	/* Offset= -1160 (70) */
/* 1232 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfb74),	/* Offset= -1164 (70) */
/* 1236 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1242 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1236) */
        0x5b,	/* FC_END */
/* 1254 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1242) */
/* 1258 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1264 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1258) */
        0x5b,	/* FC_END */
/* 1276 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1264) */
/* 1280 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1284 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1288 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1292 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1296 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1302 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1296) */
        0x5b,	/* FC_END */
/* 1314 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1302) */
/* 1318 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1324 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1318) */
        0x5b,	/* FC_END */
/* 1336 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1324) */
/* 1340 (LONGLONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1344 (LONGLONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1348 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1352 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1356 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1360 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1364 (double *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 1368 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 1372 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1376 (AM_MEDIA_TYPE *) */
        0x13, 0x0,		/* FC_OP */
        NdrFcShort(0xfb98),	/* Offset= -1128 (250) */
/* 1380 (AM_MEDIA_TYPE **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1376) */
/* 1384 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1388 (LCID *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1392 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1396 (WCHAR *) */
        0x13, 0xc,	/* FC_OP [allocated_on_stack] [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
/* 1400 (WCHAR **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1396) */
/* 1404 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1422 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1404) */
/* 1426 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1444 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1426) */
/* 1448 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1450 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1452 (REGFILTER) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (1466) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfa52),	/* Offset= -1454 (8) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1466 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1468 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1470 (REGFILTER *) */
        0x13, 0x0,		/* FC_OP */
        NdrFcShort(0xffec),	/* Offset= -20 (1452) */
/* 1474 (REGFILTER **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1470) */
/* 1478 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1482 (IEnumRegFilters *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a4),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1500 (IEnumRegFilters **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1482) */
/* 1504 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1506 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1508 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1510 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1512 (CLSID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfa1e),	/* Offset= -1506 (8) */
/* 1516 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1518 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1520 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1522 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1524 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1526 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1528 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1530 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1532 (IEnumRegFilters *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a4),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 1550 (IEnumRegFilters **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1532) */
/* 1554 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9f4),	/* Offset= -1548 (8) */
/* 1558 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1560 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1562 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1568 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1562) */
        0x5b,	/* FC_END */
/* 1580 (const CLSID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1568) */
/* 1584 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1586 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1588 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9d2),	/* Offset= -1582 (8) */
/* 1592 (REFCLSID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9ce),	/* Offset= -1586 (8) */
/* 1596 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1598 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1600 (IMoniker *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1618 (IMoniker **) */
        0x11, 0x10,		/* FC_RP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1600) */
/* 1622 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1628 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1622) */
        0x5b,	/* FC_END */
/* 1640 (const CLSID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1628) */
/* 1644 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1646 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1648 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1650 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1652 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1658 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1652) */
        0x5b,	/* FC_END */
/* 1670 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1676 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1670) */
        0x5b,	/* FC_END */
/* 1688 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1694 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1688) */
        0x5b,	/* FC_END */
/* 1706 (const REGPINTYPES) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1718) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1718 (const CLSID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (1676) */
/* 1722 (const CLSID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe2),	/* Offset= -30 (1694) */
/* 1726 (const REGFILTERPINS) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x38),	/* 56 */
        NdrFcShort(0x0),
        NdrFcShort(0xe),	/* Offset= 14 (1746) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1746 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1748 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1750 (const CLSID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffa2),	/* Offset= -94 (1658) */
/* 1754 (const WCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x05,	/* FC_WCHAR */
        0x5c,	/* FC_PAD */
/* 1758 (const REGPINTYPES *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffca),	/* Offset= -54 (1706) */
/* 1762 (const REGFILTERPINS *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cPins, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffce),	/* Offset= -50 (1726) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1780 (struct ) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1792) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1792 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (1762) */
/* 1796 (const REGPINTYPES) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1808) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1808 (const CLSID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff7a),	/* Offset= -134 (1676) */
/* 1812 (const CLSID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff88),	/* Offset= -120 (1694) */
/* 1816 (const REGPINTYPES *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer nMediaTypes, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1796) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1834 (const REGPINMEDIUM) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf8d8),	/* Offset= -1832 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1846 (const REGPINMEDIUM *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x19,	/* Corr desc: field pointer nMediums, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (1834) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1860 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1866 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1860) */
        0x5b,	/* FC_END */
/* 1878 (const REGFILTERPINS2) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        NdrFcShort(0x0),
        NdrFcShort(0xc),	/* Offset= 12 (1896) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1896 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffae),	/* Offset= -82 (1816) */
/* 1900 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc8),	/* Offset= -56 (1846) */
/* 1904 (const CLSID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd8),	/* Offset= -40 (1866) */
/* 1908 (const REGFILTERPINS2 *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cPins2, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd4),	/* Offset= -44 (1878) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1926 (struct ) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1938) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1938 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (1908) */
/* 1942 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x2),	/* 2 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xff56),	/* Offset= -170 (1780) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffe2),	/* Offset= -30 (1926) */
        NdrFcShort(0x0),
/* 1960 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwVersion, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffe8),	/* Offset= -24 (1942) */
/* 1968 (const REGFILTER2) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1974) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (1960) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1984 (const REGFILTER2 *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffee),	/* Offset= -18 (1968) */
/* 1988 (IEnumMoniker *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000102),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2006 (IEnumMoniker **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1988) */
/* 2010 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2016 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2010) */
        0x5b,	/* FC_END */
/* 2028 (const GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter cInputTypes, FC_ULONG */
        0x56,	/* FC_MULT_2 */
        NdrFcShort(0x30),	/* offset = 48 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (2016) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2042 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff0),	/* Offset= -16 (2028) */
/* 2046 (const REGPINMEDIUM) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf804),	/* Offset= -2044 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2058 (const REGPINMEDIUM *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2046) */
/* 2062 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2068 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2062) */
        0x5b,	/* FC_END */
/* 2080 (const CLSID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2068) */
/* 2084 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2090 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2084) */
        0x5b,	/* FC_END */
/* 2102 (const GUID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x29,	/* Corr desc: parameter cOutputTypes, FC_ULONG */
        0x56,	/* FC_MULT_2 */
        NdrFcShort(0x60),	/* offset = 96 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (2090) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2116 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff0),	/* Offset= -16 (2102) */
/* 2120 (const REGPINMEDIUM) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf7ba),	/* Offset= -2118 (8) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2132 (const REGPINMEDIUM *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2120) */
/* 2136 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2142 (const CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2136) */
        0x5b,	/* FC_END */
/* 2154 (const CLSID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2142) */
/* 2158 (ICreateDevEnum *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x29840822),
        NdrFcShort(0x5b84),
        NdrFcShort(0x11d0),
        0xbd,
        0x3b,
        0x00,
        0xa0,
        0xc9,
        0x11,
        0xce,
        0x86,

/* 2176 (ICreateDevEnum **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2158) */
/* 2180 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2198 (Quality) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (2204) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x0b,	/* FC_HYPER */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2212 (IQualityControl *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a5),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2230 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2232 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2234 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x48),	/* offset = 72 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2244 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x1a),	/* Offset= 26 (2276) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf778),	/* Offset= -2184 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf774),	/* Offset= -2188 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf76d),	/* Offset= -2195 (70) */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf774),	/* Offset= -2188 (82) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2276 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (2234) */
/* 2280 (const AM_MEDIA_TYPE *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffda),	/* Offset= -38 (2244) */
/* 2284 (LPOLESTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (2288) */
/* 2288 (LPOLESTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 2290 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2292 (AM_MEDIA_TYPE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf804),	/* Offset= -2044 (250) */
/* 2296 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2298 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2300 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x48),	/* offset = 72 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2310 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x1a),	/* Offset= 26 (2342) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf736),	/* Offset= -2250 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf732),	/* Offset= -2254 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf72b),	/* Offset= -2261 (70) */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf732),	/* Offset= -2254 (82) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2342 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (2300) */
/* 2346 (const AM_MEDIA_TYPE *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffda),	/* Offset= -38 (2310) */
/* 2350 (LPOLESTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (2354) */
/* 2354 (LPOLESTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 2356 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2358 (AM_MEDIA_TYPE *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xf7c2),	/* Offset= -2110 (250) */
/* 2362 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2366 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2384 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2402 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2420 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2422 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2424 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2426 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2428 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2430 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2432 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2434 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2436 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2454 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2436) */
/* 2458 (IGraphBuilder *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a9),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2476 (IGraphBuilder *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a9),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2494 (IGraphBuilder **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2476) */
/* 2498 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2504 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2498) */
        0x5b,	/* FC_END */
/* 2516 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2504) */
/* 2520 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2522 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2524 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2542 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2524) */
/* 2546 (IFileSinkFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa2104830),
        NdrFcShort(0x7c70),
        NdrFcShort(0x11cf),
        0x8b,
        0xce,
        0x00,
        0xaa,
        0x00,
        0xa3,
        0xf1,
        0xa6,

/* 2564 (IFileSinkFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2546) */
/* 2568 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2574 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2568) */
        0x5b,	/* FC_END */
/* 2586 (const GUID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2574) */
/* 2590 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2608 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2614 (IID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2608) */
        0x5b,	/* FC_END */
/* 2626 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2614) */
/* 2630 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2648 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2630) */
/* 2652 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2658 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2652) */
        0x5b,	/* FC_END */
/* 2670 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2658) */
/* 2674 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2692 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2710 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2728 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2734 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2728) */
        0x5b,	/* FC_END */
/* 2746 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2734) */
/* 2750 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2768 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 2772 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 2776 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2778 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2780 (LPOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2782 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2784 (LPOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2786 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2788 (IAMCopyCaptureFileProgress *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x670d1d20),
        NdrFcShort(0xa068),
        NdrFcShort(0x11d0),
        0xb3,
        0xf0,
        0x00,
        0xaa,
        0x00,
        0x37,
        0x61,
        0xc5,

/* 2806 (IGraphBuilder *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a9),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2824 (IGraphBuilder *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868a9),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2842 (IGraphBuilder **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2824) */
/* 2846 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2852 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2846) */
        0x5b,	/* FC_END */
/* 2864 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2852) */
/* 2868 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 2870 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2872 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2890 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2872) */
/* 2894 (IFileSinkFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0xa2104830),
        NdrFcShort(0x7c70),
        NdrFcShort(0x11cf),
        0x8b,
        0xce,
        0x00,
        0xaa,
        0x00,
        0xa3,
        0xf1,
        0xa6,

/* 2912 (IFileSinkFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2894) */
/* 2916 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2922 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2916) */
        0x5b,	/* FC_END */
/* 2934 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2922) */
/* 2938 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2944 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2938) */
        0x5b,	/* FC_END */
/* 2956 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2944) */
/* 2960 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 2978 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfe92),	/* Offset= -366 (2614) */
/* 2982 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3000 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2982) */
/* 3004 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3010 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3004) */
        0x5b,	/* FC_END */
/* 3022 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3010) */
/* 3026 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3032 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3026) */
        0x5b,	/* FC_END */
/* 3044 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3032) */
/* 3048 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3066 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3084 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3102 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3108 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3102) */
        0x5b,	/* FC_END */
/* 3120 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3108) */
/* 3124 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3130 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3124) */
        0x5b,	/* FC_END */
/* 3142 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3130) */
/* 3146 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3164 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 3168 (REFERENCE_TIME *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 3172 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3174 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3176 (LPOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3178 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3180 (LPOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3182 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3184 (IAMCopyCaptureFileProgress *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x670d1d20),
        NdrFcShort(0xa068),
        NdrFcShort(0x11d0),
        0xb3,
        0xf0,
        0x00,
        0xaa,
        0x00,
        0x37,
        0x61,
        0xc5,

/* 3202 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3220 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3226 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3220) */
        0x5b,	/* FC_END */
/* 3238 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3226) */
/* 3242 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 3248 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (3242) */
        0x5b,	/* FC_END */
/* 3260 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (3248) */
/* 3264 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3282 (IPin **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3264) */
/* 3286 (IMoniker *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3304 (IBindCtx *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000e),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3322 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 3324 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3326 (IBaseFilter *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86895),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3344 (IBaseFilter **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3326) */
/* 3348 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3366 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbFormat, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x48),	/* offset = 72 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 3376 (const AM_MEDIA_TYPE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x1a),	/* Offset= 26 (3408) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf30c),	/* Offset= -3316 (70) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf308),	/* Offset= -3320 (70) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf301),	/* Offset= -3327 (70) */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf308),	/* Offset= -3320 (82) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 3408 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (3366) */
/* 3412 (const AM_MEDIA_TYPE *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffda),	/* Offset= -38 (3376) */
/* 3416 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3434 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 3438 (AM_MEDIA_TYPE *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf38a),	/* Offset= -3190 (250) */
/* 3442 (AM_MEDIA_TYPE *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf386),	/* Offset= -3194 (250) */
/* 3446 (AM_MEDIA_TYPE **) */
        0x11, 0x10,		/* FC_RP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3442) */
/* 3450 (int *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3454 (int *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3458 (AM_MEDIA_TYPE *) */
        0x13, 0x0,		/* FC_OP */
        NdrFcShort(0xf376),	/* Offset= -3210 (250) */
/* 3462 (AM_MEDIA_TYPE **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3458) */
/* 3466 (BYTE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 3470 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3474 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3478 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3482 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3486 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3490 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3494 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3498 (IMemAllocator *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689c),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3516 (ALLOCATOR_PROPERTIES *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf62a),	/* Offset= -2518 (1000) */
/* 3520 (IMemAllocator *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689c),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3538 (IMemAllocator **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3520) */
/* 3542 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3560 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3578 (IMediaSample **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3560) */
/* 3582 (DWORD_PTR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 3586 (IMediaSample *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a8689a),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3604 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x28,	/* Corr desc: parameter lLength, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 3614 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (3604) */
/* 3618 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 3622 (LONGLONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x0b,	/* FC_HYPER */
        0x5c,	/* FC_PAD */
/* 3626 (LONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3630 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3632 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3634 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3638 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 3640 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3642 (LONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x28,	/* Corr desc: parameter cResource, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3652 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (3642) */
/* 3656 (LONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3660 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3678 (IResourceConsumer *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868ad),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3696 (IResourceConsumer *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868ad),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3714 (IResourceConsumer *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868ad),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3732 (IResourceConsumer *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a868ad),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

/* 3750 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3768 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3786 (IPin *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x56a86891),
        NdrFcShort(0x0ad4),
        NdrFcShort(0x11ce),
        0xb0,
        0x3a,
        0x00,
        0x20,
        0xaf,
        0x0b,
        0xa7,
        0x70,

        0x0
    }
};

static const CInterfaceProxyVtbl* const _quartz_strmif_ProxyVtblList[] =
{
    (const CInterfaceProxyVtbl*)&_IAMCopyCaptureFileProgressProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICreateDevEnumProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMemAllocatorNotifyCallbackTempProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFileSinkFilterProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumMediaTypesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAMStreamConfigProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAMStreamSelectProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAMVideoProcAmpProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMediaSeekingProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFilterGraph2ProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ISeekingPassThruProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFileSinkFilter2ProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IPinProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumPinsProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumFiltersProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IBaseFilterProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IReferenceClockProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMediaFilterProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMemAllocatorProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMemInputPinProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFilterGraphProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMediaEventSinkProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFilterMapperProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IEnumRegFiltersProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IQualityControlProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFileSourceFilterProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IGraphBuilderProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAsyncReaderProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IGraphVersionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IResourceManagerProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IResourceConsumerProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFilterMapper2ProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IFilterMapper3ProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAMovieSetupProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICaptureGraphBuilder2ProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICaptureGraphBuilderProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IMemAllocatorCallbackTempProxyVtbl,
    0
};

static const CInterfaceStubVtbl* const _quartz_strmif_StubVtblList[] =
{
    &_IAMCopyCaptureFileProgressStubVtbl,
    &_ICreateDevEnumStubVtbl,
    &_IMemAllocatorNotifyCallbackTempStubVtbl,
    &_IFileSinkFilterStubVtbl,
    &_IEnumMediaTypesStubVtbl,
    &_IAMStreamConfigStubVtbl,
    &_IAMStreamSelectStubVtbl,
    &_IAMVideoProcAmpStubVtbl,
    &_IMediaSeekingStubVtbl,
    &_IFilterGraph2StubVtbl,
    &_ISeekingPassThruStubVtbl,
    &_IFileSinkFilter2StubVtbl,
    &_IPinStubVtbl,
    &_IEnumPinsStubVtbl,
    &_IEnumFiltersStubVtbl,
    &_IBaseFilterStubVtbl,
    &_IReferenceClockStubVtbl,
    &_IMediaFilterStubVtbl,
    &_IMemAllocatorStubVtbl,
    &_IMemInputPinStubVtbl,
    &_IFilterGraphStubVtbl,
    &_IMediaEventSinkStubVtbl,
    &_IFilterMapperStubVtbl,
    &_IEnumRegFiltersStubVtbl,
    &_IQualityControlStubVtbl,
    &_IFileSourceFilterStubVtbl,
    &_IGraphBuilderStubVtbl,
    &_IAsyncReaderStubVtbl,
    &_IGraphVersionStubVtbl,
    &_IResourceManagerStubVtbl,
    &_IResourceConsumerStubVtbl,
    &_IFilterMapper2StubVtbl,
    &_IFilterMapper3StubVtbl,
    &_IAMovieSetupStubVtbl,
    &_ICaptureGraphBuilder2StubVtbl,
    &_ICaptureGraphBuilderStubVtbl,
    &_IMemAllocatorCallbackTempStubVtbl,
    0
};

static PCInterfaceName const _quartz_strmif_InterfaceNamesList[] =
{
    "IAMCopyCaptureFileProgress",
    "ICreateDevEnum",
    "IMemAllocatorNotifyCallbackTemp",
    "IFileSinkFilter",
    "IEnumMediaTypes",
    "IAMStreamConfig",
    "IAMStreamSelect",
    "IAMVideoProcAmp",
    "IMediaSeeking",
    "IFilterGraph2",
    "ISeekingPassThru",
    "IFileSinkFilter2",
    "IPin",
    "IEnumPins",
    "IEnumFilters",
    "IBaseFilter",
    "IReferenceClock",
    "IMediaFilter",
    "IMemAllocator",
    "IMemInputPin",
    "IFilterGraph",
    "IMediaEventSink",
    "IFilterMapper",
    "IEnumRegFilters",
    "IQualityControl",
    "IFileSourceFilter",
    "IGraphBuilder",
    "IAsyncReader",
    "IGraphVersion",
    "IResourceManager",
    "IResourceConsumer",
    "IFilterMapper2",
    "IFilterMapper3",
    "IAMovieSetup",
    "ICaptureGraphBuilder2",
    "ICaptureGraphBuilder",
    "IMemAllocatorCallbackTemp",
    0
};

static const IID * _quartz_strmif_BaseIIDList[] =
{
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    &IID_IPersist,  /* IBaseFilter */
    0,
    &IID_IPersist,  /* IMediaFilter */
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

static int __stdcall _quartz_strmif_IID_Lookup(const IID* pIID, int* pIndex)
{
    int low = 0, high = 36;

    while (low <= high)
    {
        int pos = (low + high) / 2;
        int res = IID_GENERIC_CHECK_IID(_quartz_strmif, pIID, pos);
        if (!res) { *pIndex = pos; return 1; }
        if (res > 0) low = pos + 1;
        else high = pos - 1;
    }
    return 0;
}

const ExtendedProxyFileInfo quartz_strmif_ProxyFileInfo DECLSPEC_HIDDEN =
{
    (const PCInterfaceProxyVtblList*)_quartz_strmif_ProxyVtblList,
    (const PCInterfaceStubVtblList*)_quartz_strmif_StubVtblList,
    _quartz_strmif_InterfaceNamesList,
    _quartz_strmif_BaseIIDList,
    _quartz_strmif_IID_Lookup,
    37,
    1,
    0,
    0,
    0,
    0
};

#endif /* _WIN64 */
