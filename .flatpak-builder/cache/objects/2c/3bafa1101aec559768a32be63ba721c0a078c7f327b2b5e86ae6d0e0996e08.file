/*** Autogenerated by WIDL 3.8 from svcctl.idl - Do not edit ***/
#include <string.h>

#include "svcctl.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif

#ifndef _WIN64

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

#define TYPE_FORMAT_STRING_SIZE 2137
#define PROC_FORMAT_STRING_SIZE 1015

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const GENERIC_BINDING_ROUTINE_PAIR BindingRoutines[] =
{
    { (GENERIC_BINDING_ROUTINE)SVCCTL_HANDLEW_bind, (GENERIC_UNBIND_ROUTINE)SVCCTL_HANDLEW_unbind },
    { (GENERIC_BINDING_ROUTINE)MACHINE_HANDLEW_bind, (GENERIC_UNBIND_ROUTINE)MACHINE_HANDLEW_unbind },
    { (GENERIC_BINDING_ROUTINE)MACHINE_HANDLEA_bind, (GENERIC_UNBIND_ROUTINE)MACHINE_HANDLEA_unbind },
};

/*****************************************************************************
 * svcctl interface
 */

static const unsigned char * const svcctl__RpcProtseqEndpoint[][2] =
{
    { (const unsigned char *)"ncacn_np", (const unsigned char *)"\\pipe\\svcctl" },
};

static const RPC_CLIENT_INTERFACE svcctl___RpcClientInterface =
{
    sizeof(RPC_CLIENT_INTERFACE),
    {{0x367abb81,0x9844,0x35f1,{0xad,0x32,0x98,0xf0,0x38,0x00,0x10,0x03}},{2,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    0,
    1,
    (PRPC_PROTSEQ_ENDPOINT)svcctl__RpcProtseqEndpoint,
    0,
    0,
    0,
};
RPC_IF_HANDLE svcctl_v2_0_c_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& svcctl___RpcClientInterface;

static const MIDL_STUB_DESC svcctl_StubDesc;

static RPC_BINDING_HANDLE svcctl__MIDL_AutoBindHandle;

struct __frame_svcctl_CloseServiceHandle
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CloseServiceHandle( struct __frame_svcctl_CloseServiceHandle *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CloseServiceHandle(
    SC_RPC_HANDLE *handle)
{
    struct __frame_svcctl_CloseServiceHandle __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CloseServiceHandle );
    if (!handle) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 0);
        if (*handle != 0)
            __frame->_Handle = NDRCContextBinding(*handle);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)*handle,
            1);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)handle,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CloseServiceHandle( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ControlService
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ControlService( struct __frame_svcctl_ControlService *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ControlService(
    SC_RPC_HANDLE hService,
    DWORD dwControl,
    SERVICE_STATUS *lpServiceStatus)
{
    struct __frame_svcctl_ControlService __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ControlService );
    if (!lpServiceStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 1);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwControl;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[6]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpServiceStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ControlService( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_DeleteService
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_DeleteService( struct __frame_svcctl_DeleteService *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_DeleteService(
    SC_RPC_HANDLE hService)
{
    struct __frame_svcctl_DeleteService __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_DeleteService );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 2);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[18]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_DeleteService( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_LockServiceDatabase
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_LockServiceDatabase( struct __frame_svcctl_LockServiceDatabase *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_LockServiceDatabase(
    SC_RPC_HANDLE hSCManager,
    SC_RPC_LOCK *phLock)
{
    struct __frame_svcctl_LockServiceDatabase __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_LockServiceDatabase );
    if (!phLock) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 3);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[24]);

        *phLock = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)phLock,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_LockServiceDatabase( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceObjectSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceObjectSecurity( struct __frame_svcctl_QueryServiceObjectSecurity *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceObjectSecurity(
    SC_RPC_HANDLE service,
    SECURITY_INFORMATION info,
    BYTE *descriptor,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceObjectSecurity __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceObjectSecurity );
    if (!descriptor) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 4);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(SECURITY_INFORMATION *)__frame->_StubMsg.Buffer = info;
        __frame->_StubMsg.Buffer += sizeof(SECURITY_INFORMATION);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[34]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&descriptor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[50],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceObjectSecurity( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_SetServiceObjectSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_SetServiceObjectSecurity( struct __frame_svcctl_SetServiceObjectSecurity *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_SetServiceObjectSecurity(
    SC_RPC_HANDLE service,
    SECURITY_INFORMATION info,
    BYTE *descriptor,
    DWORD buf_size)
{
    struct __frame_svcctl_SetServiceObjectSecurity __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_SetServiceObjectSecurity );
    if (!descriptor) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 5);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)descriptor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(SECURITY_INFORMATION *)__frame->_StubMsg.Buffer = info;
        __frame->_StubMsg.Buffer += sizeof(SECURITY_INFORMATION);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)descriptor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[52]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_SetServiceObjectSecurity( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceStatus( struct __frame_svcctl_QueryServiceStatus *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceStatus(
    SC_RPC_HANDLE service,
    SERVICE_STATUS *status)
{
    struct __frame_svcctl_QueryServiceStatus __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceStatus );
    if (!status) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 6);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[66]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceStatus( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_SetServiceStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_SetServiceStatus( struct __frame_svcctl_SetServiceStatus *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_SetServiceStatus(
    SC_RPC_HANDLE hServiceStatus,
    LPSERVICE_STATUS lpServiceStatus)
{
    struct __frame_svcctl_SetServiceStatus __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_SetServiceStatus );
    if (!lpServiceStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 7);
        if (hServiceStatus != 0)
            __frame->_Handle = NDRCContextBinding(hServiceStatus);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 56;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hServiceStatus,
            0);

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[98]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[76]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_SetServiceStatus( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_UnlockServiceDatabase
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_UnlockServiceDatabase( struct __frame_svcctl_UnlockServiceDatabase *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_UnlockServiceDatabase(
    SC_RPC_LOCK *phLock)
{
    struct __frame_svcctl_UnlockServiceDatabase __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_UnlockServiceDatabase );
    if (!phLock) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 8);
        if (*phLock != 0)
            __frame->_Handle = NDRCContextBinding(*phLock);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)*phLock,
            1);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[86]);

        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)phLock,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_UnlockServiceDatabase( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_NotifyBootConfigStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    SVCCTL_HANDLEW machinename;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_NotifyBootConfigStatus( struct __frame_svcctl_NotifyBootConfigStatus *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);

    if (__frame->_Handle)
        SVCCTL_HANDLEW_unbind(__frame->machinename, __frame->_Handle);
}

DWORD __cdecl svcctl_NotifyBootConfigStatus(
    SVCCTL_HANDLEW machinename,
    DWORD boot_acceptable)
{
    struct __frame_svcctl_NotifyBootConfigStatus __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;
    __frame->machinename = machinename;

    RpcExceptionInit( 0, __finally_svcctl_NotifyBootConfigStatus );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 9);
        __frame->_Handle = SVCCTL_HANDLEW_bind(machinename);

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)machinename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)machinename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = boot_acceptable;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[92]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_NotifyBootConfigStatus( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_SCSetServiceBitsW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_SCSetServiceBitsW( struct __frame_svcctl_SCSetServiceBitsW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_SCSetServiceBitsW(
    void)
{
    struct __frame_svcctl_SCSetServiceBitsW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_SCSetServiceBitsW );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 10);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[100]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_SCSetServiceBitsW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ChangeServiceConfigW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ChangeServiceConfigW( struct __frame_svcctl_ChangeServiceConfigW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ChangeServiceConfigW(
    SC_RPC_HANDLE hService,
    DWORD dwServiceType,
    DWORD dwStartType,
    DWORD dwErrorControl,
    LPCWSTR lpBinaryPathName,
    LPCWSTR lpLoadOrderGroupKey,
    DWORD *lpdwTagId,
    const BYTE *lpDependencies,
    DWORD dwDependenciesSize,
    LPCWSTR lpServiceStartName,
    const BYTE *lpPassword,
    DWORD dwPasswordSize,
    LPCWSTR lpDisplayName)
{
    struct __frame_svcctl_ChangeServiceConfigW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ChangeServiceConfigW );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 11);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 80;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpBinaryPathName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpLoadOrderGroupKey,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwDependenciesSize;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpDependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceStartName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwPasswordSize;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpPassword,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwServiceType;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwStartType;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwErrorControl;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpBinaryPathName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpLoadOrderGroupKey,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwDependenciesSize;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpDependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwDependenciesSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceStartName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwPasswordSize;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpPassword,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwPasswordSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[102]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ChangeServiceConfigW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_CreateServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CreateServiceW( struct __frame_svcctl_CreateServiceW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CreateServiceW(
    SC_RPC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    LPCWSTR lpDisplayName,
    DWORD dwDesiredAccess,
    DWORD dwServiceType,
    DWORD dwStartType,
    DWORD dwErrorControl,
    LPCWSTR lpBinaryPathName,
    LPCWSTR lpLoadOrderGroup,
    DWORD *lpdwTagId,
    const BYTE *lpDependencies,
    DWORD dwDependenciesSize,
    LPCWSTR lpServiceStartName,
    const BYTE *lpPassword,
    DWORD dwPasswordSize,
    SC_RPC_HANDLE *phService)
{
    struct __frame_svcctl_CreateServiceW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CreateServiceW );
    if (!lpServiceName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!lpBinaryPathName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!phService) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 12);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 88;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[184]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpBinaryPathName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpLoadOrderGroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwDependenciesSize;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpDependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[212]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceStartName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwPasswordSize;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpPassword,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[184]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwDesiredAccess;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwServiceType;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwStartType;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwErrorControl;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpBinaryPathName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpLoadOrderGroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwDependenciesSize;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpDependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[212]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwDependenciesSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceStartName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwPasswordSize;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpPassword,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwPasswordSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[146]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198],
            0);

        *phService = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)phService,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CreateServiceW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumDependentServicesW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumDependentServicesW( struct __frame_svcctl_EnumDependentServicesW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumDependentServicesW(
    SC_RPC_HANDLE service,
    DWORD state,
    BYTE *services,
    DWORD buf_size,
    DWORD *needed_size,
    DWORD *services_ret)
{
    struct __frame_svcctl_EnumDependentServicesW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumDependentServicesW );
    if (!services) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!services_ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 13);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[200]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *services_ret = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumDependentServicesW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumServicesStatusW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumServicesStatusW( struct __frame_svcctl_EnumServicesStatusW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumServicesStatusW(
    SC_RPC_HANDLE hmngr,
    DWORD type,
    DWORD state,
    BYTE *buffer,
    DWORD size,
    LPDWORD needed,
    LPDWORD returned,
    LPDWORD resume)
{
    struct __frame_svcctl_EnumServicesStatusW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumServicesStatusW );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!returned) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 14);
        if (hmngr != 0)
            __frame->_Handle = NDRCContextBinding(hmngr);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 64;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hmngr,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[294]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[222]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[272],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *returned = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[294],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumServicesStatusW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_OpenSCManagerW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    MACHINE_HANDLEW MachineName;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_OpenSCManagerW( struct __frame_svcctl_OpenSCManagerW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);

    if (__frame->_Handle)
        MACHINE_HANDLEW_unbind(__frame->MachineName, __frame->_Handle);
}

DWORD __cdecl svcctl_OpenSCManagerW(
    MACHINE_HANDLEW MachineName,
    LPCWSTR DatabaseName,
    DWORD dwAccessMask,
    SC_RPC_HANDLE *handle)
{
    struct __frame_svcctl_OpenSCManagerW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;
    __frame->MachineName = MachineName;

    RpcExceptionInit( 0, __finally_svcctl_OpenSCManagerW );
    if (!handle) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 15);
        __frame->_Handle = MACHINE_HANDLEW_bind(MachineName);

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)MachineName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[298]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)DatabaseName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)MachineName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[298]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)DatabaseName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwAccessMask;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[250]);

        *handle = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)handle,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_OpenSCManagerW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_OpenServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_OpenServiceW( struct __frame_svcctl_OpenServiceW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_OpenServiceW(
    SC_RPC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    DWORD dwDesiredAccess,
    SC_RPC_HANDLE *phService)
{
    struct __frame_svcctl_OpenServiceW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_OpenServiceW );
    if (!lpServiceName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!phService) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 16);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[320]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[320]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwDesiredAccess;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[266]);

        *phService = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)phService,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_OpenServiceW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceConfigW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceConfigW( struct __frame_svcctl_QueryServiceConfigW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceConfigW(
    SC_RPC_HANDLE hService,
    QUERY_SERVICE_CONFIGW *config,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceConfigW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceConfigW );
    if (!config) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 17);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[282]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceConfigW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceLockStatusW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceLockStatusW( struct __frame_svcctl_QueryServiceLockStatusW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceLockStatusW(
    SC_RPC_HANDLE scmanager,
    QUERY_SERVICE_LOCK_STATUSW *status,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceLockStatusW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceLockStatusW );
    if (!status) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 18);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[298]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[438],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceLockStatusW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_StartServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_StartServiceW( struct __frame_svcctl_StartServiceW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_StartServiceW(
    SC_RPC_HANDLE hService,
    DWORD dwNumServiceArgs,
    LPCWSTR *lpServiceArgVectors)
{
    struct __frame_svcctl_StartServiceW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_StartServiceW );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 19);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwNumServiceArgs;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceArgVectors,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[502]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwNumServiceArgs;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwNumServiceArgs;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceArgVectors,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[502]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[314]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_StartServiceW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetServiceDisplayNameW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_GetServiceDisplayNameW( struct __frame_svcctl_GetServiceDisplayNameW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetServiceDisplayNameW(
    SC_RPC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    WCHAR lpBuffer[],
    DWORD *cchBufSize)
{
    struct __frame_svcctl_GetServiceDisplayNameW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_GetServiceDisplayNameW );
    if (!lpServiceName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!cchBufSize) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 20);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[512]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[512]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *cchBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[326]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[514],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *cchBufSize = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetServiceDisplayNameW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetServiceKeyNameW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_GetServiceKeyNameW( struct __frame_svcctl_GetServiceKeyNameW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetServiceKeyNameW(
    SC_RPC_HANDLE hSCManager,
    LPCWSTR lpServiceDisplayName,
    WCHAR lpBuffer[],
    DWORD *cchBufSize)
{
    struct __frame_svcctl_GetServiceKeyNameW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_GetServiceKeyNameW );
    if (!lpServiceDisplayName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!cchBufSize) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 21);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[530]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[530]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *cchBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[344]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *cchBufSize = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetServiceKeyNameW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_SCSetServiceBitsA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_SCSetServiceBitsA( struct __frame_svcctl_SCSetServiceBitsA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_SCSetServiceBitsA(
    void)
{
    struct __frame_svcctl_SCSetServiceBitsA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_SCSetServiceBitsA );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 22);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[362]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_SCSetServiceBitsA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ChangeServiceConfigA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ChangeServiceConfigA( struct __frame_svcctl_ChangeServiceConfigA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ChangeServiceConfigA(
    SC_RPC_HANDLE service,
    DWORD service_type,
    DWORD start_type,
    DWORD error_control,
    LPSTR binarypath,
    LPSTR loadordergroup,
    DWORD *tagid,
    BYTE *dependencies,
    DWORD depend_size,
    LPSTR startname,
    BYTE *password,
    DWORD password_size,
    LPSTR displayname)
{
    struct __frame_svcctl_ChangeServiceConfigA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ChangeServiceConfigA );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 23);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 80;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)binarypath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[568]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)startname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[586]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = start_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = error_control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)binarypath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[568]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = depend_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)startname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[586]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = password_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[364]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ChangeServiceConfigA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_CreateServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CreateServiceA( struct __frame_svcctl_CreateServiceA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CreateServiceA(
    SC_RPC_HANDLE scmanager,
    LPCSTR servicename,
    LPCSTR displayname,
    DWORD desiredaccess,
    DWORD service_type,
    DWORD start_type,
    DWORD error_control,
    LPCSTR binarypath,
    LPCSTR loadordergroup,
    DWORD *tagid,
    const BYTE *dependencies,
    DWORD depend_size,
    LPCSTR startname,
    const BYTE *password,
    DWORD password_size,
    SC_RPC_HANDLE *service)
{
    struct __frame_svcctl_CreateServiceA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CreateServiceA );
    if (!servicename) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!binarypath) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!service) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 24);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 88;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[600]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)binarypath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[608]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[628]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)startname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[646]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[600]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = desiredaccess;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = start_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = error_control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)binarypath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[608]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[628]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = depend_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)startname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[646]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = password_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[408]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614],
            0);

        *service = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)service,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CreateServiceA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumDependentServicesA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumDependentServicesA( struct __frame_svcctl_EnumDependentServicesA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumDependentServicesA(
    SC_RPC_HANDLE service,
    DWORD state,
    BYTE *services,
    DWORD buf_size,
    DWORD *needed_size,
    DWORD *services_ret)
{
    struct __frame_svcctl_EnumDependentServicesA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumDependentServicesA );
    if (!services) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!services_ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 25);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[462]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[662],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *services_ret = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumDependentServicesA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumServicesStatusA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumServicesStatusA( struct __frame_svcctl_EnumServicesStatusA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumServicesStatusA(
    SC_RPC_HANDLE hmngr,
    DWORD type,
    DWORD state,
    BYTE *buffer,
    DWORD size,
    DWORD *needed,
    DWORD *returned,
    DWORD *resume)
{
    struct __frame_svcctl_EnumServicesStatusA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumServicesStatusA );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!returned) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 26);
        if (hmngr != 0)
            __frame->_Handle = NDRCContextBinding(hmngr);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 64;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hmngr,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[710]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[484]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[688],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *returned = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[710],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumServicesStatusA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_OpenSCManagerA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    MACHINE_HANDLEA MachineName;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_OpenSCManagerA( struct __frame_svcctl_OpenSCManagerA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);

    if (__frame->_Handle)
        MACHINE_HANDLEA_unbind(__frame->MachineName, __frame->_Handle);
}

DWORD __cdecl svcctl_OpenSCManagerA(
    MACHINE_HANDLEA MachineName,
    LPCSTR DatabaseName,
    DWORD dwAccessMask,
    SC_RPC_HANDLE *handle)
{
    struct __frame_svcctl_OpenSCManagerA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;
    __frame->MachineName = MachineName;

    RpcExceptionInit( 0, __finally_svcctl_OpenSCManagerA );
    if (!handle) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 27);
        __frame->_Handle = MACHINE_HANDLEA_bind(MachineName);

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)MachineName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[714]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)DatabaseName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)MachineName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[714]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)DatabaseName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwAccessMask;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[512]);

        *handle = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)handle,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_OpenSCManagerA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_OpenServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_OpenServiceA( struct __frame_svcctl_OpenServiceA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_OpenServiceA(
    SC_RPC_HANDLE hSCManager,
    LPCSTR lpServiceName,
    DWORD dwDesiredAccess,
    SC_RPC_HANDLE *phService)
{
    struct __frame_svcctl_OpenServiceA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_OpenServiceA );
    if (!lpServiceName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!phService) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 28);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[736]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[736]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwDesiredAccess;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[528]);

        *phService = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)phService,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_OpenServiceA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceConfigA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceConfigA( struct __frame_svcctl_QueryServiceConfigA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceConfigA(
    SC_RPC_HANDLE hService,
    QUERY_SERVICE_CONFIGA *config,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceConfigA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceConfigA );
    if (!config) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 29);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[544]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[770],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceConfigA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceLockStatusA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceLockStatusA( struct __frame_svcctl_QueryServiceLockStatusA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceLockStatusA(
    SC_RPC_HANDLE scmanager,
    QUERY_SERVICE_LOCK_STATUSA *status,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceLockStatusA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceLockStatusA );
    if (!status) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 30);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[560]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceLockStatusA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_StartServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_StartServiceA( struct __frame_svcctl_StartServiceA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_StartServiceA(
    SC_RPC_HANDLE service,
    DWORD argc,
    LPCSTR *args)
{
    struct __frame_svcctl_StartServiceA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_StartServiceA );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 31);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)argc;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)args,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[918]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = argc;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)argc;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)args,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[918]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[576]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_StartServiceA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetServiceDisplayNameA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_GetServiceDisplayNameA( struct __frame_svcctl_GetServiceDisplayNameA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetServiceDisplayNameA(
    SC_RPC_HANDLE hSCManager,
    LPCSTR servicename,
    CHAR buffer[],
    DWORD *buf_size)
{
    struct __frame_svcctl_GetServiceDisplayNameA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_GetServiceDisplayNameA );
    if (!servicename) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!buf_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 32);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[928]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[928]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[588]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[930],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetServiceDisplayNameA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetServiceKeyNameA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_GetServiceKeyNameA( struct __frame_svcctl_GetServiceKeyNameA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetServiceKeyNameA(
    SC_RPC_HANDLE hSCManager,
    LPCSTR servicename,
    CHAR buffer[],
    DWORD *buf_size)
{
    struct __frame_svcctl_GetServiceKeyNameA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_GetServiceKeyNameA );
    if (!servicename) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!buf_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 33);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[946]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[946]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[606]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[948],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetServiceKeyNameA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetCurrentGroupStateW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_GetCurrentGroupStateW( struct __frame_svcctl_GetCurrentGroupStateW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetCurrentGroupStateW(
    void)
{
    struct __frame_svcctl_GetCurrentGroupStateW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_GetCurrentGroupStateW );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 34);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[624]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetCurrentGroupStateW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumServiceGroupW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumServiceGroupW( struct __frame_svcctl_EnumServiceGroupW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumServiceGroupW(
    SC_RPC_HANDLE scmanager,
    DWORD service_type,
    DWORD service_state,
    BYTE *buffer,
    DWORD buf_size,
    DWORD *needed_size,
    DWORD *returned_size,
    DWORD *resume_index,
    LPCWSTR groupname)
{
    struct __frame_svcctl_EnumServiceGroupW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumServiceGroupW );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!returned_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 35);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 64;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[984]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[626]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[962],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *returned_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[984],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumServiceGroupW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ChangeServiceConfig2A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ChangeServiceConfig2A( struct __frame_svcctl_ChangeServiceConfig2A *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ChangeServiceConfig2A(
    SC_RPC_HANDLE service,
    SC_RPC_CONFIG_INFOA info)
{
    struct __frame_svcctl_ChangeServiceConfig2A __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ChangeServiceConfig2A );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 36);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1240]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1240]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[658]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ChangeServiceConfig2A( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ChangeServiceConfig2W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ChangeServiceConfig2W( struct __frame_svcctl_ChangeServiceConfig2W *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ChangeServiceConfig2W(
    SC_RPC_HANDLE service,
    SC_RPC_CONFIG_INFOW info)
{
    struct __frame_svcctl_ChangeServiceConfig2W __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ChangeServiceConfig2W );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 37);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[668]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ChangeServiceConfig2W( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceConfig2A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceConfig2A( struct __frame_svcctl_QueryServiceConfig2A *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceConfig2A(
    SC_RPC_HANDLE service,
    DWORD info_level,
    BYTE *buffer,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceConfig2A __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceConfig2A );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 38);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = info_level;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[678]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceConfig2A( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceConfig2W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceConfig2W( struct __frame_svcctl_QueryServiceConfig2W *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceConfig2W(
    SC_RPC_HANDLE hService,
    DWORD InfoLevel,
    BYTE lpBuffer[],
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded)
{
    struct __frame_svcctl_QueryServiceConfig2W __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceConfig2W );
    if (!pcbBytesNeeded) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 39);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = InfoLevel;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = cbBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[696]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1476],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *pcbBytesNeeded = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceConfig2W( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceStatusEx
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceStatusEx( struct __frame_svcctl_QueryServiceStatusEx *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceStatusEx(
    SC_RPC_HANDLE hService,
    SC_STATUS_TYPE InfoLevel,
    BYTE *lpBuffer,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded)
{
    struct __frame_svcctl_QueryServiceStatusEx __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceStatusEx );
    if (!lpBuffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!pcbBytesNeeded) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 40);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 38;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        NdrSimpleTypeMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&InfoLevel,
            0x0d /* FC_ENUM16 */);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = cbBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[714]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1494],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *pcbBytesNeeded = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceStatusEx( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumServicesStatusExA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumServicesStatusExA( struct __frame_svcctl_EnumServicesStatusExA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumServicesStatusExA(
    SC_RPC_HANDLE scmanager,
    SC_ENUM_TYPE info_level,
    DWORD service_type,
    DWORD service_state,
    BYTE *buffer,
    DWORD buf_size,
    DWORD *needed_size,
    DWORD *services_count,
    DWORD *resume_index,
    LPCSTR groupname)
{
    struct __frame_svcctl_EnumServicesStatusExA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumServicesStatusExA );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!services_count) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 41);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 70;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        NdrSimpleTypeMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&info_level,
            0x0d /* FC_ENUM16 */);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1538]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[732]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1516],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *services_count = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1538],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumServicesStatusExA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumServicesStatusExW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumServicesStatusExW( struct __frame_svcctl_EnumServicesStatusExW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumServicesStatusExW(
    SC_RPC_HANDLE scmanager,
    SC_ENUM_TYPE info_level,
    DWORD service_type,
    DWORD service_state,
    BYTE *buffer,
    DWORD buf_size,
    DWORD *needed_size,
    DWORD *services_count,
    DWORD *resume_index,
    LPCWSTR groupname)
{
    struct __frame_svcctl_EnumServicesStatusExW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumServicesStatusExW );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!services_count) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 42);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 70;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        NdrSimpleTypeMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&info_level,
            0x0d /* FC_ENUM16 */);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1572]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[766]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *services_count = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1572],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumServicesStatusExW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown43
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown43( struct __frame_svcctl_unknown43 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown43(
    void)
{
    struct __frame_svcctl_unknown43 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown43 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 43);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[800]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown43( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_CreateServiceWOW64A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CreateServiceWOW64A( struct __frame_svcctl_CreateServiceWOW64A *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CreateServiceWOW64A(
    SC_RPC_HANDLE scmanager,
    LPCSTR servicename,
    LPCSTR displayname,
    DWORD accessmask,
    DWORD service_type,
    DWORD start_type,
    DWORD error_control,
    LPCSTR imagepath,
    LPCSTR loadordergroup,
    DWORD *tagid,
    const BYTE *dependencies,
    DWORD depend_size,
    LPCSTR start_name,
    const BYTE *password,
    DWORD password_size,
    SC_RPC_HANDLE *service)
{
    struct __frame_svcctl_CreateServiceWOW64A __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CreateServiceWOW64A );
    if (!servicename) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!imagepath) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!service) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 44);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 88;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1586]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)imagepath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1594]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1614]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)start_name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1632]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1586]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = accessmask;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = start_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = error_control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)imagepath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1594]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1600]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1614]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = depend_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)start_name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1632]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = password_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[802]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1600],
            0);

        *service = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)service,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CreateServiceWOW64A( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_CreateServiceWOW64W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CreateServiceWOW64W( struct __frame_svcctl_CreateServiceWOW64W *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CreateServiceWOW64W(
    SC_RPC_HANDLE scmanager,
    LPCWSTR servicename,
    LPCWSTR displayname,
    DWORD accessmask,
    DWORD service_type,
    DWORD start_type,
    DWORD error_control,
    LPCWSTR imagepath,
    LPCWSTR loadordergroup,
    DWORD *tagid,
    const BYTE *dependencies,
    DWORD depend_size,
    LPCWSTR start_name,
    const BYTE *password,
    DWORD password_size,
    SC_RPC_HANDLE *service)
{
    struct __frame_svcctl_CreateServiceWOW64W __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CreateServiceWOW64W );
    if (!servicename) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!imagepath) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!service) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 45);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 88;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1650]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)imagepath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1658]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1678]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)start_name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1696]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1650]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = accessmask;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = start_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = error_control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)imagepath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1658]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1664]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1678]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = depend_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)start_name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1696]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = password_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[856]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1664],
            0);

        *service = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)service,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CreateServiceWOW64W( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown46
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown46( struct __frame_svcctl_unknown46 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown46(
    void)
{
    struct __frame_svcctl_unknown46 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown46 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 46);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[910]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown46( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_NotifyServiceStatusChange
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_NotifyServiceStatusChange( struct __frame_svcctl_NotifyServiceStatusChange *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_NotifyServiceStatusChange(
    SC_RPC_HANDLE service,
    SC_RPC_NOTIFY_PARAMS params,
    GUID *clientprocessguid,
    GUID *scmprocessguid,
    BOOL *createremotequeue,
    SC_NOTIFY_RPC_HANDLE *notify)
{
    struct __frame_svcctl_NotifyServiceStatusChange __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_NotifyServiceStatusChange );
    if (!clientprocessguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!scmprocessguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!createremotequeue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!notify) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 47);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 44;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)&params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1846]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1846]);

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)clientprocessguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1866]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[912]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&scmprocessguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1866],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *createremotequeue = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        *notify = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)notify,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_NotifyServiceStatusChange( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetNotifyResults
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_GetNotifyResults( struct __frame_svcctl_GetNotifyResults *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetNotifyResults(
    SC_NOTIFY_RPC_HANDLE notify,
    SC_RPC_NOTIFY_PARAMS_LIST **params)
{
    struct __frame_svcctl_GetNotifyResults __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_GetNotifyResults );
    if (!params) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 48);
        if (notify != 0)
            __frame->_Handle = NDRCContextBinding(notify);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)notify,
            0);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[938]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1934],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetNotifyResults( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_CloseNotifyHandle
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CloseNotifyHandle( struct __frame_svcctl_CloseNotifyHandle *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CloseNotifyHandle(
    SC_NOTIFY_RPC_HANDLE *notify,
    BOOL *apc_fired)
{
    struct __frame_svcctl_CloseNotifyHandle __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CloseNotifyHandle );
    if (!notify) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!apc_fired) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 49);
        if (*notify != 0)
            __frame->_Handle = NDRCContextBinding(*notify);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)*notify,
            1);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[948]);

        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)notify,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *apc_fired = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CloseNotifyHandle( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ControlServiceExA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ControlServiceExA( struct __frame_svcctl_ControlServiceExA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ControlServiceExA(
    SC_RPC_HANDLE service,
    DWORD control,
    DWORD info_level,
    SC_RPC_SERVICE_CONTROL_IN_PARAMSA *in_params,
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSA *out_params)
{
    struct __frame_svcctl_ControlServiceExA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ControlServiceExA );
    if (!in_params) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!out_params) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 50);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)info_level;

        NdrNonEncapsulatedUnionBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)in_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1982]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = info_level;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)info_level;

        NdrNonEncapsulatedUnionMarshall(
            &__frame->_StubMsg,
            (unsigned char *)in_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1982]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[958]);

        NdrNonEncapsulatedUnionUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2020],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ControlServiceExA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ControlServiceExW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ControlServiceExW( struct __frame_svcctl_ControlServiceExW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ControlServiceExW(
    SC_RPC_HANDLE service,
    DWORD control,
    DWORD info_level,
    SC_RPC_SERVICE_CONTROL_IN_PARAMSW *in_params,
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSW *out_params)
{
    struct __frame_svcctl_ControlServiceExW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ControlServiceExW );
    if (!in_params) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!out_params) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 51);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)info_level;

        NdrNonEncapsulatedUnionBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)in_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2076]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = info_level;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)info_level;

        NdrNonEncapsulatedUnionMarshall(
            &__frame->_StubMsg,
            (unsigned char *)in_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2076]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[976]);

        NdrNonEncapsulatedUnionUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2104],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ControlServiceExW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown52
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown52( struct __frame_svcctl_unknown52 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown52(
    void)
{
    struct __frame_svcctl_unknown52 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown52 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 52);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[994]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown52( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown53
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown53( struct __frame_svcctl_unknown53 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown53(
    void)
{
    struct __frame_svcctl_unknown53 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown53 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 53);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[996]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown53( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown54
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown54( struct __frame_svcctl_unknown54 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown54(
    void)
{
    struct __frame_svcctl_unknown54 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown54 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 54);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[998]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown54( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown55
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown55( struct __frame_svcctl_unknown55 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown55(
    void)
{
    struct __frame_svcctl_unknown55 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown55 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 55);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[1000]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown55( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceConfigEx
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceConfigEx( struct __frame_svcctl_QueryServiceConfigEx *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceConfigEx(
    SC_RPC_HANDLE service,
    DWORD info_level,
    SC_RPC_CONFIG_INFOW *info)
{
    struct __frame_svcctl_QueryServiceConfigEx __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceConfigEx );
    if (!info) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 56);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = info_level;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[1002]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceConfigEx( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

#if !defined(__RPC_WIN32__)
#error  Invalid build platform for this stub.
#endif

static const MIDL_STUB_DESC svcctl_StubDesc =
{
    (void *)& svcctl___RpcClientInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        &svcctl__MIDL_AutoBindHandle,
    },
    0,
    BindingRoutines,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};


static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 4 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa),	/* type offset = 10 */
/* 10 (parameter dwControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter lpServiceStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a),	/* type offset = 26 */
/* 16 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 18 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e),	/* type offset = 30 */
/* 22 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22),	/* type offset = 34 */
/* 28 (parameter phLock) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x26),	/* type offset = 38 */
/* 32 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2e),	/* type offset = 46 */
/* 38 (parameter info) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 40 (parameter descriptor) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x32),	/* type offset = 50 */
/* 44 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x40),	/* type offset = 64 */
/* 50 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 52 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x44),	/* type offset = 68 */
/* 56 (parameter info) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 58 (parameter descriptor) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x48),	/* type offset = 72 */
/* 62 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 64 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 66 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x56),	/* type offset = 86 */
/* 70 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5a),	/* type offset = 90 */
/* 74 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter hServiceStatus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e),	/* type offset = 94 */
/* 80 (parameter lpServiceStatus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6e),	/* type offset = 110 */
/* 84 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter phLock) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x72),	/* type offset = 114 */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter machinename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7a),	/* type offset = 122 */
/* 96 (parameter boot_acceptable) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 98 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 102 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7e),	/* type offset = 126 */
/* 106 (parameter dwServiceType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 108 (parameter dwStartType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 110 (parameter dwErrorControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 112 (parameter lpBinaryPathName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x82),	/* type offset = 130 */
/* 116 (parameter lpLoadOrderGroupKey) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x86),	/* type offset = 134 */
/* 120 (parameter lpdwTagId) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x8a),	/* type offset = 138 */
/* 124 (parameter lpDependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x98),	/* type offset = 152 */
/* 128 (parameter dwDependenciesSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter lpServiceStartName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9c),	/* type offset = 156 */
/* 134 (parameter lpPassword) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xaa),	/* type offset = 170 */
/* 138 (parameter dwPasswordSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 140 (parameter lpDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xae),	/* type offset = 174 */
/* 144 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 146 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb2),	/* type offset = 178 */
/* 150 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 154 (parameter lpDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xba),	/* type offset = 186 */
/* 158 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 160 (parameter dwServiceType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 162 (parameter dwStartType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 164 (parameter dwErrorControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 166 (parameter lpBinaryPathName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbe),	/* type offset = 190 */
/* 170 (parameter lpLoadOrderGroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc2),	/* type offset = 194 */
/* 174 (parameter lpdwTagId) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xc6),	/* type offset = 198 */
/* 178 (parameter lpDependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd4),	/* type offset = 212 */
/* 182 (parameter dwDependenciesSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 184 (parameter lpServiceStartName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd8),	/* type offset = 216 */
/* 188 (parameter lpPassword) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe6),	/* type offset = 230 */
/* 192 (parameter dwPasswordSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xea),	/* type offset = 234 */
/* 198 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 200 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf2),	/* type offset = 242 */
/* 204 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 206 (parameter services) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf6),	/* type offset = 246 */
/* 210 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 212 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x104),	/* type offset = 260 */
/* 216 (parameter services_ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x108),	/* type offset = 264 */
/* 220 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 222 (parameter hmngr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10c),	/* type offset = 268 */
/* 226 (parameter type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 228 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 230 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x110),	/* type offset = 272 */
/* 234 (parameter size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 236 (parameter needed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11e),	/* type offset = 286 */
/* 240 (parameter returned) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x122),	/* type offset = 290 */
/* 244 (parameter resume) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x126),	/* type offset = 294 */
/* 248 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 250 (parameter MachineName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12a),	/* type offset = 298 */
/* 254 (parameter DatabaseName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12e),	/* type offset = 302 */
/* 258 (parameter dwAccessMask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter handle) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x132),	/* type offset = 306 */
/* 264 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 266 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13a),	/* type offset = 314 */
/* 270 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13e),	/* type offset = 318 */
/* 274 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 276 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x142),	/* type offset = 322 */
/* 280 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 282 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x14a),	/* type offset = 330 */
/* 286 (parameter config) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a6),	/* type offset = 422 */
/* 290 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 292 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1aa),	/* type offset = 426 */
/* 296 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 298 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1ae),	/* type offset = 430 */
/* 302 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1cc),	/* type offset = 460 */
/* 306 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 308 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d0),	/* type offset = 464 */
/* 312 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 314 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1d4),	/* type offset = 468 */
/* 318 (parameter dwNumServiceArgs) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 320 (parameter lpServiceArgVectors) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f6),	/* type offset = 502 */
/* 324 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 326 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1fa),	/* type offset = 506 */
/* 330 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1fe),	/* type offset = 510 */
/* 334 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x202),	/* type offset = 514 */
/* 338 (parameter cchBufSize) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x208),	/* type offset = 520 */
/* 342 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 344 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x20c),	/* type offset = 524 */
/* 348 (parameter lpServiceDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x210),	/* type offset = 528 */
/* 352 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x214),	/* type offset = 532 */
/* 356 (parameter cchBufSize) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x21a),	/* type offset = 538 */
/* 360 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 362 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 364 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x21e),	/* type offset = 542 */
/* 368 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 370 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 372 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 374 (parameter binarypath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x222),	/* type offset = 546 */
/* 378 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x226),	/* type offset = 550 */
/* 382 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x22a),	/* type offset = 554 */
/* 386 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x238),	/* type offset = 568 */
/* 390 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 392 (parameter startname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x23c),	/* type offset = 572 */
/* 396 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x24a),	/* type offset = 586 */
/* 400 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 402 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x24e),	/* type offset = 590 */
/* 406 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 408 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x252),	/* type offset = 594 */
/* 412 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x256),	/* type offset = 598 */
/* 416 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x25a),	/* type offset = 602 */
/* 420 (parameter desiredaccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 422 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 424 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 426 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 428 (parameter binarypath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x25e),	/* type offset = 606 */
/* 432 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x262),	/* type offset = 610 */
/* 436 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x266),	/* type offset = 614 */
/* 440 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x274),	/* type offset = 628 */
/* 444 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 446 (parameter startname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x278),	/* type offset = 632 */
/* 450 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x286),	/* type offset = 646 */
/* 454 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 456 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x28a),	/* type offset = 650 */
/* 460 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 462 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x292),	/* type offset = 658 */
/* 466 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 468 (parameter services) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x296),	/* type offset = 662 */
/* 472 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 474 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2a4),	/* type offset = 676 */
/* 478 (parameter services_ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2a8),	/* type offset = 680 */
/* 482 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 484 (parameter hmngr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2ac),	/* type offset = 684 */
/* 488 (parameter type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 490 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 492 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2b0),	/* type offset = 688 */
/* 496 (parameter size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 498 (parameter needed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2be),	/* type offset = 702 */
/* 502 (parameter returned) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2c2),	/* type offset = 706 */
/* 506 (parameter resume) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x2c6),	/* type offset = 710 */
/* 510 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 512 (parameter MachineName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2ca),	/* type offset = 714 */
/* 516 (parameter DatabaseName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2ce),	/* type offset = 718 */
/* 520 (parameter dwAccessMask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 522 (parameter handle) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2d2),	/* type offset = 722 */
/* 526 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 528 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2da),	/* type offset = 730 */
/* 532 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2de),	/* type offset = 734 */
/* 536 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 538 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2e2),	/* type offset = 738 */
/* 542 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 544 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2ea),	/* type offset = 746 */
/* 548 (parameter config) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x346),	/* type offset = 838 */
/* 552 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 554 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x34a),	/* type offset = 842 */
/* 558 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 560 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x34e),	/* type offset = 846 */
/* 564 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x36c),	/* type offset = 876 */
/* 568 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 570 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x370),	/* type offset = 880 */
/* 574 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 576 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x374),	/* type offset = 884 */
/* 580 (parameter argc) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 582 (parameter args) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x396),	/* type offset = 918 */
/* 586 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 588 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x39a),	/* type offset = 922 */
/* 592 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x39e),	/* type offset = 926 */
/* 596 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3a2),	/* type offset = 930 */
/* 600 (parameter buf_size) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x3a8),	/* type offset = 936 */
/* 604 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 606 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3ac),	/* type offset = 940 */
/* 610 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3b0),	/* type offset = 944 */
/* 614 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3b4),	/* type offset = 948 */
/* 618 (parameter buf_size) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x3ba),	/* type offset = 954 */
/* 622 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 624 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 626 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3be),	/* type offset = 958 */
/* 630 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 632 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 634 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3c2),	/* type offset = 962 */
/* 638 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 640 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3d0),	/* type offset = 976 */
/* 644 (parameter returned_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3d4),	/* type offset = 980 */
/* 648 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x3d8),	/* type offset = 984 */
/* 652 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3dc),	/* type offset = 988 */
/* 656 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 658 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3e0),	/* type offset = 992 */
/* 662 (parameter info) */
        0x4d,    /* FC_IN_PARAM */
        0x02,
        NdrFcShort(0x4d8),	/* type offset = 1240 */
/* 666 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 668 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4e6),	/* type offset = 1254 */
/* 672 (parameter info) */
        0x4d,    /* FC_IN_PARAM */
        0x02,
        NdrFcShort(0x59c),	/* type offset = 1436 */
/* 676 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 678 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5aa),	/* type offset = 1450 */
/* 682 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 684 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ae),	/* type offset = 1454 */
/* 688 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 690 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5bc),	/* type offset = 1468 */
/* 694 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 696 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5c0),	/* type offset = 1472 */
/* 700 (parameter InfoLevel) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 702 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5c4),	/* type offset = 1476 */
/* 706 (parameter cbBufSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 708 (parameter pcbBytesNeeded) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ce),	/* type offset = 1486 */
/* 712 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 714 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5d2),	/* type offset = 1490 */
/* 718 (parameter InfoLevel) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 720 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5d6),	/* type offset = 1494 */
/* 724 (parameter cbBufSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 726 (parameter pcbBytesNeeded) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5e4),	/* type offset = 1508 */
/* 730 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 732 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e8),	/* type offset = 1512 */
/* 736 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 738 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 740 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 742 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ec),	/* type offset = 1516 */
/* 746 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 748 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5fa),	/* type offset = 1530 */
/* 752 (parameter services_count) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5fe),	/* type offset = 1534 */
/* 756 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x602),	/* type offset = 1538 */
/* 760 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x606),	/* type offset = 1542 */
/* 764 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 766 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x60a),	/* type offset = 1546 */
/* 770 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 772 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 774 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 776 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x60e),	/* type offset = 1550 */
/* 780 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 782 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x61c),	/* type offset = 1564 */
/* 786 (parameter services_count) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x620),	/* type offset = 1568 */
/* 790 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x624),	/* type offset = 1572 */
/* 794 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x628),	/* type offset = 1576 */
/* 798 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 800 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 802 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x62c),	/* type offset = 1580 */
/* 806 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x630),	/* type offset = 1584 */
/* 810 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x634),	/* type offset = 1588 */
/* 814 (parameter accessmask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 816 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 818 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 820 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 822 (parameter imagepath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x638),	/* type offset = 1592 */
/* 826 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x63c),	/* type offset = 1596 */
/* 830 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x640),	/* type offset = 1600 */
/* 834 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x64e),	/* type offset = 1614 */
/* 838 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 840 (parameter start_name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x652),	/* type offset = 1618 */
/* 844 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x660),	/* type offset = 1632 */
/* 848 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 850 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x664),	/* type offset = 1636 */
/* 854 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 856 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x66c),	/* type offset = 1644 */
/* 860 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x670),	/* type offset = 1648 */
/* 864 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x674),	/* type offset = 1652 */
/* 868 (parameter accessmask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 870 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 872 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 874 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 876 (parameter imagepath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x678),	/* type offset = 1656 */
/* 880 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x67c),	/* type offset = 1660 */
/* 884 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x680),	/* type offset = 1664 */
/* 888 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x68e),	/* type offset = 1678 */
/* 892 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 894 (parameter start_name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x692),	/* type offset = 1682 */
/* 898 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6a0),	/* type offset = 1696 */
/* 902 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 904 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6a4),	/* type offset = 1700 */
/* 908 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 910 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 912 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6ac),	/* type offset = 1708 */
/* 916 (parameter params) */
        0x4d,    /* FC_IN_PARAM */
        0x02,
        NdrFcShort(0x736),	/* type offset = 1846 */
/* 920 (parameter clientprocessguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x756),	/* type offset = 1878 */
/* 924 (parameter scmprocessguid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x75a),	/* type offset = 1882 */
/* 928 (parameter createremotequeue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x75e),	/* type offset = 1886 */
/* 932 (parameter notify) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x762),	/* type offset = 1890 */
/* 936 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 938 (parameter notify) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x76a),	/* type offset = 1898 */
/* 942 (parameter params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x78e),	/* type offset = 1934 */
/* 946 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 948 (parameter notify) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x792),	/* type offset = 1938 */
/* 952 (parameter apc_fired) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x79a),	/* type offset = 1946 */
/* 956 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 958 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x79e),	/* type offset = 1950 */
/* 962 (parameter control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 964 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 966 (parameter in_params) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7d2),	/* type offset = 2002 */
/* 970 (parameter out_params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7f8),	/* type offset = 2040 */
/* 974 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 976 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7fc),	/* type offset = 2044 */
/* 980 (parameter control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 982 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 984 (parameter in_params) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x830),	/* type offset = 2096 */
/* 988 (parameter out_params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x84c),	/* type offset = 2124 */
/* 992 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 994 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 996 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 998 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1000 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1002 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x850),	/* type offset = 2128 */
/* 1006 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1008 (parameter info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x854),	/* type offset = 2132 */
/* 1012 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (6) */
/*  6 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 10 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 14 (SERVICE_STATUS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x1c),	/* 28 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 26 (SERVICE_STATUS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff2),	/* Offset= -14 (14) */
/* 30 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 34 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 38 (SC_RPC_LOCK *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (42) */
/* 42 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x1,	/* rundown routine */
        0, /* FIXME: param num */
/* 46 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 50 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 60 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (50) */
/* 64 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 68 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 72 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 82 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (72) */
/* 86 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 90 (SERVICE_STATUS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffb2),	/* Offset= -78 (14) */
/* 94 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 98 (struct _SERVICE_STATUS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x1c),	/* 28 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 110 (LPSERVICE_STATUS) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (98) */
/* 114 (SC_RPC_LOCK *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (118) */
/* 118 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x1,	/* rundown routine */
        0, /* FIXME: param num */
/* 122 (SVCCTL_HANDLEW) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 124 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 126 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 130 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 132 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 134 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 136 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 138 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 142 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwDependenciesSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 152 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (142) */
/* 156 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 158 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 160 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwPasswordSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 170 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (160) */
/* 174 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 176 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 178 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 182 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 184 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 186 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 188 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 190 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 192 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 194 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 196 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 198 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 202 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwDependenciesSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 212 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (202) */
/* 216 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 218 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 220 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwPasswordSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x38),	/* offset = 56 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 230 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (220) */
/* 234 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (238) */
/* 238 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 242 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 246 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 256 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (246) */
/* 260 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 264 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 268 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 272 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 282 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (272) */
/* 286 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 290 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 294 (LPDWORD) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 298 (MACHINE_HANDLEW) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 300 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 302 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 304 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 306 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (310) */
/* 310 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 314 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 318 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 320 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 322 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (326) */
/* 326 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 330 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 334 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 336 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 338 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 340 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 342 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 344 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 346 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 348 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 350 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 352 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 354 (QUERY_SERVICE_CONFIGW) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0xc),	/* Memory offset = 12 */
        NdrFcShort(0xc),	/* Buffer offset = 12 */
/* 366 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 368 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
/* 376 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 378 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x18),	/* Memory offset = 24 */
        NdrFcShort(0x18),	/* Buffer offset = 24 */
/* 386 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 388 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x1c),	/* Memory offset = 28 */
        NdrFcShort(0x1c),	/* Buffer offset = 28 */
/* 396 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 398 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x20),	/* Memory offset = 32 */
        NdrFcShort(0x20),	/* Buffer offset = 32 */
/* 406 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 408 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 422 (QUERY_SERVICE_CONFIGW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffba),	/* Offset= -70 (354) */
/* 426 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 430 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 434 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 436 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 438 (QUERY_SERVICE_LOCK_STATUSW) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 450 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 452 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 460 (QUERY_SERVICE_LOCK_STATUSW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffe8),	/* Offset= -24 (438) */
/* 464 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 468 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 472 (LPCWSTR *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter dwNumServiceArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 494 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 496 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 502 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (472) */
/* 506 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 510 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 512 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 514 */
        0x25,	/* FC_C_WSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceDisplayNameW */
        0x0,
        NdrFcShort(0x0),
/* 520 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 524 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 528 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 530 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 532 */
        0x25,	/* FC_C_WSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceKeyNameW */
        0x0,
        NdrFcShort(0x0),
/* 538 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 542 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 546 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 548 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 550 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 552 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 554 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 558 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 568 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (558) */
/* 572 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 574 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 576 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 586 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (576) */
/* 590 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 592 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 594 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 598 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 600 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 602 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 604 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 606 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 608 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 610 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 612 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 614 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 618 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 628 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (618) */
/* 632 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 634 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 636 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x38),	/* offset = 56 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 646 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (636) */
/* 650 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (654) */
/* 654 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 658 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 662 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 672 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (662) */
/* 676 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 680 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 684 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 688 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 698 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (688) */
/* 702 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 706 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 710 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 714 (MACHINE_HANDLEA) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 716 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 718 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 720 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 722 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (726) */
/* 726 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 730 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 734 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 736 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 738 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (742) */
/* 742 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 746 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 750 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 752 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 754 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 756 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 758 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 760 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 762 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 764 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 766 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 768 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 770 (QUERY_SERVICE_CONFIGA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0xc),	/* Memory offset = 12 */
        NdrFcShort(0xc),	/* Buffer offset = 12 */
/* 782 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 784 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
/* 792 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 794 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x18),	/* Memory offset = 24 */
        NdrFcShort(0x18),	/* Buffer offset = 24 */
/* 802 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 804 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x1c),	/* Memory offset = 28 */
        NdrFcShort(0x1c),	/* Buffer offset = 28 */
/* 812 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 814 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x20),	/* Memory offset = 32 */
        NdrFcShort(0x20),	/* Buffer offset = 32 */
/* 822 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 824 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 838 (QUERY_SERVICE_CONFIGA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffba),	/* Offset= -70 (770) */
/* 842 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 846 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 850 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 852 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 854 (QUERY_SERVICE_LOCK_STATUSA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 866 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 868 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 876 (QUERY_SERVICE_LOCK_STATUSA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffe8),	/* Offset= -24 (854) */
/* 880 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 884 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 888 (LPCSTR *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter argc, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 910 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 912 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 918 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (888) */
/* 922 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 926 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 928 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 930 */
        0x22,	/* FC_C_CSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceDisplayNameA */
        0x0,
        NdrFcShort(0x0),
/* 936 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 940 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 944 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 946 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 948 */
        0x22,	/* FC_C_CSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceKeyNameA */
        0x0,
        NdrFcShort(0x0),
/* 954 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 958 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 962 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 972 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (962) */
/* 976 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 980 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 984 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 988 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 990 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 992 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 996 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 998 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1000 (SERVICE_DESCRIPTIONA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 1012 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1014 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1020 (SERVICE_DESCRIPTIONA *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1000) */
/* 1024 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1026 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1028 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1030 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1032 (SC_ACTION) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1038) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1044 (SC_ACTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cActions, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (1032) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1062 (SERVICE_FAILURE_ACTIONSA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 1074 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1076 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x8),	/* Memory offset = 8 */
        NdrFcShort(0x8),	/* Buffer offset = 8 */
/* 1084 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1086 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffcc),	/* Offset= -52 (1044) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1106 (SERVICE_FAILURE_ACTIONSA *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd2),	/* Offset= -46 (1062) */
/* 1110 (SERVICE_DELAYED_AUTO_START_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1116 (SERVICE_DELAYED_AUTO_START_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1110) */
/* 1120 (SERVICE_FAILURE_ACTIONS_FLAG) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1126 (SERVICE_FAILURE_ACTIONS_FLAG *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1120) */
/* 1130 (SERVICE_SID_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1136 (SERVICE_SID_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1130) */
/* 1140 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbRequiredPrivileges, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1150 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1140) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1170 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1150) */
/* 1174 (SERVICE_PRESHUTDOWN_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1180 (SERVICE_PRESHUTDOWN_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1174) */
/* 1184 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xff54),	/* Offset= -172 (1020) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffa4),	/* Offset= -92 (1106) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffa8),	/* Offset= -88 (1116) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffac),	/* Offset= -84 (1126) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffb0),	/* Offset= -80 (1136) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffcc),	/* Offset= -52 (1170) */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0xffd0),	/* Offset= -48 (1180) */
        NdrFcShort(0xffff),
/* 1232 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffca),	/* Offset= -54 (1184) */
/* 1240 (SC_RPC_CONFIG_INFOA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1246) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (1232) */
        0x5b,	/* FC_END */
/* 1254 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1258 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1260 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1262 (SERVICE_DESCRIPTIONW) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 1274 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1276 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1282 (SERVICE_DESCRIPTIONW *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1262) */
/* 1286 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1288 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1290 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1292 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1294 (SC_ACTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cActions, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfeec),	/* Offset= -276 (1032) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1312 (SERVICE_FAILURE_ACTIONSW) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 1324 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1326 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x8),	/* Memory offset = 8 */
        NdrFcShort(0x8),	/* Buffer offset = 8 */
/* 1334 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1336 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffcc),	/* Offset= -52 (1294) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1356 (SERVICE_FAILURE_ACTIONSW *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd2),	/* Offset= -46 (1312) */
/* 1360 (SERVICE_DELAYED_AUTO_START_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff04),	/* Offset= -252 (1110) */
/* 1364 (SERVICE_FAILURE_ACTIONS_FLAG *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff0a),	/* Offset= -246 (1120) */
/* 1368 (SERVICE_SID_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff10),	/* Offset= -240 (1130) */
/* 1372 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff20),	/* Offset= -224 (1150) */
/* 1376 (SERVICE_PRESHUTDOWN_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff34),	/* Offset= -204 (1174) */
/* 1380 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xff96),	/* Offset= -106 (1282) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffda),	/* Offset= -38 (1356) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffd8),	/* Offset= -40 (1360) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffd6),	/* Offset= -42 (1364) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffd4),	/* Offset= -44 (1368) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffd2),	/* Offset= -46 (1372) */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0xffd0),	/* Offset= -48 (1376) */
        NdrFcShort(0xffff),
/* 1428 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffca),	/* Offset= -54 (1380) */
/* 1436 (SC_RPC_CONFIG_INFOW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1442) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (1428) */
        0x5b,	/* FC_END */
/* 1450 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1454 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1464 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1454) */
/* 1468 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1472 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1476 (BYTE[]) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter cbBufSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1486 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1490 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1494 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter cbBufSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1504 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1494) */
/* 1508 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1512 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1516 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1526 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1516) */
/* 1530 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1534 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1538 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1542 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1544 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1546 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1550 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1560 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1550) */
/* 1564 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1568 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1572 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1576 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1578 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1580 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1584 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1586 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1588 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1590 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1592 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1594 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1596 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1598 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1600 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1604 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1614 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1604) */
/* 1618 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1620 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1622 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x38),	/* offset = 56 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1632 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1622) */
/* 1636 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1640) */
/* 1640 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1644 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1648 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1650 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1652 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1654 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1656 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1658 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1660 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1662 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1664 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1668 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1678 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1668) */
/* 1682 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1684 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1686 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x38),	/* offset = 56 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1696 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1686) */
/* 1700 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1704) */
/* 1704 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1708 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1712 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1718 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1724 (SERVICE_STATUS_PROCESS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1738 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_1) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x58),	/* 88 */
        0x0b,	/* FC_HYPER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1712) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1718) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe2),	/* Offset= -30 (1724) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1760 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_1 *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1738) */
/* 1764 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1770 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1776 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1778 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1780 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_2) */
        0x16,	/* FC_PSTRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x60),	/* 96 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x5c),	/* Memory offset = 92 */
        NdrFcShort(0x5c),	/* Buffer offset = 92 */
/* 1792 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1794 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x0b,	/* FC_HYPER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdb),	/* Offset= -37 (1764) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdd),	/* Offset= -35 (1770) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffab),	/* Offset= -85 (1724) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1816 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_2 *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffda),	/* Offset= -38 (1780) */
/* 1820 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x2),	/* 2 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffbc),	/* Offset= -68 (1760) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffee),	/* Offset= -18 (1816) */
        NdrFcShort(0xffff),
/* 1838 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffe8),	/* Offset= -24 (1820) */
/* 1846 (SC_RPC_NOTIFY_PARAMS) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1852) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (1838) */
        0x5b,	/* FC_END */
/* 1860 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1866 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1860) */
        0x5b,	/* FC_END */
/* 1878 (GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1866) */
/* 1882 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffee),	/* Offset= -18 (1866) */
/* 1886 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1890 (SC_NOTIFY_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1894) */
/* 1894 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1898 (SC_NOTIFY_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1902 (SC_RPC_NOTIFY_PARAMS[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x9,	/* Corr desc: field cElements, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffba),	/* Offset= -70 (1846) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1920 (SC_RPC_NOTIFY_PARAMS_LIST) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffea),	/* Offset= -22 (1902) */
        NdrFcShort(0x0),	/* Offset= 0 (1926) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1930 (SC_RPC_NOTIFY_PARAMS_LIST *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1920) */
/* 1934 (SC_RPC_NOTIFY_PARAMS_LIST **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1930) */
/* 1938 (SC_NOTIFY_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1942) */
/* 1942 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1946 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1950 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1954 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1956 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1958 (struct _SERVICE_CONTROL_STATUS_REASON_IN_PARAMSA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 1970 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1972 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1978 (PSERVICE_CONTROL_STATUS_REASON_IN_PARAMSA) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1958) */
/* 1982 (SC_RPC_SERVICE_CONTROL_IN_PARAMSA) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcShort(0x2),	/* Offset= 2 (1990) */
/* 1990 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (1978) */
        NdrFcShort(0xffff),
/* 2002 (SC_RPC_SERVICE_CONTROL_IN_PARAMSA *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffea),	/* Offset= -22 (1982) */
/* 2006 (struct _SERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfee0),	/* Offset= -288 (1724) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2016 (PSERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (2006) */
/* 2020 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSA) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcShort(0x2),	/* Offset= 2 (2028) */
/* 2028 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (2016) */
        NdrFcShort(0xffff),
/* 2040 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffea),	/* Offset= -22 (2020) */
/* 2044 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 2048 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2050 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2052 (struct _SERVICE_CONTROL_STATUS_REASON_IN_PARAMSW) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 2064 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2066 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2072 (PSERVICE_CONTROL_STATUS_REASON_IN_PARAMSW) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (2052) */
/* 2076 (SC_RPC_SERVICE_CONTROL_IN_PARAMSW) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcShort(0x2),	/* Offset= 2 (2084) */
/* 2084 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (2072) */
        NdrFcShort(0xffff),
/* 2096 (SC_RPC_SERVICE_CONTROL_IN_PARAMSW *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffea),	/* Offset= -22 (2076) */
/* 2100 (PSERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffa0),	/* Offset= -96 (2006) */
/* 2104 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSW) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcShort(0x2),	/* Offset= 2 (2112) */
/* 2112 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (2100) */
        NdrFcShort(0xffff),
/* 2124 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffea),	/* Offset= -22 (2104) */
/* 2128 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 2132 (SC_RPC_CONFIG_INFOW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfd46),	/* Offset= -698 (1436) */
        0x0
    }
};


#else /* _WIN64 */

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

#define TYPE_FORMAT_STRING_SIZE 1997
#define PROC_FORMAT_STRING_SIZE 1015

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const GENERIC_BINDING_ROUTINE_PAIR BindingRoutines[] =
{
    { (GENERIC_BINDING_ROUTINE)SVCCTL_HANDLEW_bind, (GENERIC_UNBIND_ROUTINE)SVCCTL_HANDLEW_unbind },
    { (GENERIC_BINDING_ROUTINE)MACHINE_HANDLEW_bind, (GENERIC_UNBIND_ROUTINE)MACHINE_HANDLEW_unbind },
    { (GENERIC_BINDING_ROUTINE)MACHINE_HANDLEA_bind, (GENERIC_UNBIND_ROUTINE)MACHINE_HANDLEA_unbind },
};

/*****************************************************************************
 * svcctl interface
 */

static const unsigned char * const svcctl__RpcProtseqEndpoint[][2] =
{
    { (const unsigned char *)"ncacn_np", (const unsigned char *)"\\pipe\\svcctl" },
};

static const RPC_CLIENT_INTERFACE svcctl___RpcClientInterface =
{
    sizeof(RPC_CLIENT_INTERFACE),
    {{0x367abb81,0x9844,0x35f1,{0xad,0x32,0x98,0xf0,0x38,0x00,0x10,0x03}},{2,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    0,
    1,
    (PRPC_PROTSEQ_ENDPOINT)svcctl__RpcProtseqEndpoint,
    0,
    0,
    0,
};
RPC_IF_HANDLE svcctl_v2_0_c_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& svcctl___RpcClientInterface;

static const MIDL_STUB_DESC svcctl_StubDesc;

static RPC_BINDING_HANDLE svcctl__MIDL_AutoBindHandle;

struct __frame_svcctl_CloseServiceHandle
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CloseServiceHandle( struct __frame_svcctl_CloseServiceHandle *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CloseServiceHandle(
    SC_RPC_HANDLE *handle)
{
    struct __frame_svcctl_CloseServiceHandle __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CloseServiceHandle );
    if (!handle) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 0);
        if (*handle != 0)
            __frame->_Handle = NDRCContextBinding(*handle);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)*handle,
            1);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)handle,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CloseServiceHandle( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ControlService
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ControlService( struct __frame_svcctl_ControlService *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ControlService(
    SC_RPC_HANDLE hService,
    DWORD dwControl,
    SERVICE_STATUS *lpServiceStatus)
{
    struct __frame_svcctl_ControlService __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ControlService );
    if (!lpServiceStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 1);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwControl;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[6]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpServiceStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ControlService( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_DeleteService
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_DeleteService( struct __frame_svcctl_DeleteService *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_DeleteService(
    SC_RPC_HANDLE hService)
{
    struct __frame_svcctl_DeleteService __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_DeleteService );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 2);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[18]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_DeleteService( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_LockServiceDatabase
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_LockServiceDatabase( struct __frame_svcctl_LockServiceDatabase *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_LockServiceDatabase(
    SC_RPC_HANDLE hSCManager,
    SC_RPC_LOCK *phLock)
{
    struct __frame_svcctl_LockServiceDatabase __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_LockServiceDatabase );
    if (!phLock) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 3);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[24]);

        *phLock = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)phLock,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_LockServiceDatabase( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceObjectSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceObjectSecurity( struct __frame_svcctl_QueryServiceObjectSecurity *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceObjectSecurity(
    SC_RPC_HANDLE service,
    SECURITY_INFORMATION info,
    BYTE *descriptor,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceObjectSecurity __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceObjectSecurity );
    if (!descriptor) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 4);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(SECURITY_INFORMATION *)__frame->_StubMsg.Buffer = info;
        __frame->_StubMsg.Buffer += sizeof(SECURITY_INFORMATION);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[34]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&descriptor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[50],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceObjectSecurity( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_SetServiceObjectSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_SetServiceObjectSecurity( struct __frame_svcctl_SetServiceObjectSecurity *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_SetServiceObjectSecurity(
    SC_RPC_HANDLE service,
    SECURITY_INFORMATION info,
    BYTE *descriptor,
    DWORD buf_size)
{
    struct __frame_svcctl_SetServiceObjectSecurity __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_SetServiceObjectSecurity );
    if (!descriptor) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 5);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)descriptor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(SECURITY_INFORMATION *)__frame->_StubMsg.Buffer = info;
        __frame->_StubMsg.Buffer += sizeof(SECURITY_INFORMATION);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)descriptor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[52]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_SetServiceObjectSecurity( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceStatus( struct __frame_svcctl_QueryServiceStatus *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceStatus(
    SC_RPC_HANDLE service,
    SERVICE_STATUS *status)
{
    struct __frame_svcctl_QueryServiceStatus __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceStatus );
    if (!status) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 6);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[66]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceStatus( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_SetServiceStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_SetServiceStatus( struct __frame_svcctl_SetServiceStatus *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_SetServiceStatus(
    SC_RPC_HANDLE hServiceStatus,
    LPSERVICE_STATUS lpServiceStatus)
{
    struct __frame_svcctl_SetServiceStatus __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_SetServiceStatus );
    if (!lpServiceStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 7);
        if (hServiceStatus != 0)
            __frame->_Handle = NDRCContextBinding(hServiceStatus);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 56;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hServiceStatus,
            0);

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[98]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[76]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_SetServiceStatus( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_UnlockServiceDatabase
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_UnlockServiceDatabase( struct __frame_svcctl_UnlockServiceDatabase *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_UnlockServiceDatabase(
    SC_RPC_LOCK *phLock)
{
    struct __frame_svcctl_UnlockServiceDatabase __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_UnlockServiceDatabase );
    if (!phLock) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 8);
        if (*phLock != 0)
            __frame->_Handle = NDRCContextBinding(*phLock);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)*phLock,
            1);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[86]);

        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)phLock,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_UnlockServiceDatabase( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_NotifyBootConfigStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    SVCCTL_HANDLEW machinename;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_NotifyBootConfigStatus( struct __frame_svcctl_NotifyBootConfigStatus *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);

    if (__frame->_Handle)
        SVCCTL_HANDLEW_unbind(__frame->machinename, __frame->_Handle);
}

DWORD __cdecl svcctl_NotifyBootConfigStatus(
    SVCCTL_HANDLEW machinename,
    DWORD boot_acceptable)
{
    struct __frame_svcctl_NotifyBootConfigStatus __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;
    __frame->machinename = machinename;

    RpcExceptionInit( 0, __finally_svcctl_NotifyBootConfigStatus );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 9);
        __frame->_Handle = SVCCTL_HANDLEW_bind(machinename);

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)machinename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)machinename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = boot_acceptable;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[92]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_NotifyBootConfigStatus( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_SCSetServiceBitsW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_SCSetServiceBitsW( struct __frame_svcctl_SCSetServiceBitsW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_SCSetServiceBitsW(
    void)
{
    struct __frame_svcctl_SCSetServiceBitsW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_SCSetServiceBitsW );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 10);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[100]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_SCSetServiceBitsW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ChangeServiceConfigW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ChangeServiceConfigW( struct __frame_svcctl_ChangeServiceConfigW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ChangeServiceConfigW(
    SC_RPC_HANDLE hService,
    DWORD dwServiceType,
    DWORD dwStartType,
    DWORD dwErrorControl,
    LPCWSTR lpBinaryPathName,
    LPCWSTR lpLoadOrderGroupKey,
    DWORD *lpdwTagId,
    const BYTE *lpDependencies,
    DWORD dwDependenciesSize,
    LPCWSTR lpServiceStartName,
    const BYTE *lpPassword,
    DWORD dwPasswordSize,
    LPCWSTR lpDisplayName)
{
    struct __frame_svcctl_ChangeServiceConfigW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ChangeServiceConfigW );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 11);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 80;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpBinaryPathName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpLoadOrderGroupKey,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwDependenciesSize;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpDependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceStartName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwPasswordSize;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpPassword,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwServiceType;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwStartType;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwErrorControl;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpBinaryPathName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpLoadOrderGroupKey,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwDependenciesSize;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpDependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwDependenciesSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceStartName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwPasswordSize;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpPassword,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwPasswordSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[102]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ChangeServiceConfigW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_CreateServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CreateServiceW( struct __frame_svcctl_CreateServiceW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CreateServiceW(
    SC_RPC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    LPCWSTR lpDisplayName,
    DWORD dwDesiredAccess,
    DWORD dwServiceType,
    DWORD dwStartType,
    DWORD dwErrorControl,
    LPCWSTR lpBinaryPathName,
    LPCWSTR lpLoadOrderGroup,
    DWORD *lpdwTagId,
    const BYTE *lpDependencies,
    DWORD dwDependenciesSize,
    LPCWSTR lpServiceStartName,
    const BYTE *lpPassword,
    DWORD dwPasswordSize,
    SC_RPC_HANDLE *phService)
{
    struct __frame_svcctl_CreateServiceW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CreateServiceW );
    if (!lpServiceName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!lpBinaryPathName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!phService) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 12);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 88;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[184]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpBinaryPathName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpLoadOrderGroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwDependenciesSize;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpDependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[212]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceStartName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwPasswordSize;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpPassword,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[184]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwDesiredAccess;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwServiceType;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwStartType;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwErrorControl;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpBinaryPathName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpLoadOrderGroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwDependenciesSize;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpDependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[212]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwDependenciesSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceStartName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwPasswordSize;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpPassword,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwPasswordSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[146]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198],
            0);

        *phService = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)phService,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CreateServiceW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumDependentServicesW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumDependentServicesW( struct __frame_svcctl_EnumDependentServicesW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumDependentServicesW(
    SC_RPC_HANDLE service,
    DWORD state,
    BYTE *services,
    DWORD buf_size,
    DWORD *needed_size,
    DWORD *services_ret)
{
    struct __frame_svcctl_EnumDependentServicesW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumDependentServicesW );
    if (!services) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!services_ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 13);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[200]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *services_ret = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumDependentServicesW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumServicesStatusW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumServicesStatusW( struct __frame_svcctl_EnumServicesStatusW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumServicesStatusW(
    SC_RPC_HANDLE hmngr,
    DWORD type,
    DWORD state,
    BYTE *buffer,
    DWORD size,
    LPDWORD needed,
    LPDWORD returned,
    LPDWORD resume)
{
    struct __frame_svcctl_EnumServicesStatusW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumServicesStatusW );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!returned) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 14);
        if (hmngr != 0)
            __frame->_Handle = NDRCContextBinding(hmngr);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 64;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hmngr,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[294]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[222]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[272],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *returned = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[294],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumServicesStatusW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_OpenSCManagerW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    MACHINE_HANDLEW MachineName;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_OpenSCManagerW( struct __frame_svcctl_OpenSCManagerW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);

    if (__frame->_Handle)
        MACHINE_HANDLEW_unbind(__frame->MachineName, __frame->_Handle);
}

DWORD __cdecl svcctl_OpenSCManagerW(
    MACHINE_HANDLEW MachineName,
    LPCWSTR DatabaseName,
    DWORD dwAccessMask,
    SC_RPC_HANDLE *handle)
{
    struct __frame_svcctl_OpenSCManagerW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;
    __frame->MachineName = MachineName;

    RpcExceptionInit( 0, __finally_svcctl_OpenSCManagerW );
    if (!handle) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 15);
        __frame->_Handle = MACHINE_HANDLEW_bind(MachineName);

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)MachineName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[298]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)DatabaseName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)MachineName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[298]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)DatabaseName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwAccessMask;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[250]);

        *handle = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)handle,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_OpenSCManagerW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_OpenServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_OpenServiceW( struct __frame_svcctl_OpenServiceW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_OpenServiceW(
    SC_RPC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    DWORD dwDesiredAccess,
    SC_RPC_HANDLE *phService)
{
    struct __frame_svcctl_OpenServiceW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_OpenServiceW );
    if (!lpServiceName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!phService) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 16);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[320]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[320]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwDesiredAccess;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[266]);

        *phService = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)phService,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_OpenServiceW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceConfigW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceConfigW( struct __frame_svcctl_QueryServiceConfigW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceConfigW(
    SC_RPC_HANDLE hService,
    QUERY_SERVICE_CONFIGW *config,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceConfigW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceConfigW );
    if (!config) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 17);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[282]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceConfigW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceLockStatusW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceLockStatusW( struct __frame_svcctl_QueryServiceLockStatusW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceLockStatusW(
    SC_RPC_HANDLE scmanager,
    QUERY_SERVICE_LOCK_STATUSW *status,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceLockStatusW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceLockStatusW );
    if (!status) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 18);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[298]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[410],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceLockStatusW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_StartServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_StartServiceW( struct __frame_svcctl_StartServiceW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_StartServiceW(
    SC_RPC_HANDLE hService,
    DWORD dwNumServiceArgs,
    LPCWSTR *lpServiceArgVectors)
{
    struct __frame_svcctl_StartServiceW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_StartServiceW );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 19);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwNumServiceArgs;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceArgVectors,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[458]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwNumServiceArgs;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)dwNumServiceArgs;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceArgVectors,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[458]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[314]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_StartServiceW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetServiceDisplayNameW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_GetServiceDisplayNameW( struct __frame_svcctl_GetServiceDisplayNameW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetServiceDisplayNameW(
    SC_RPC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    WCHAR lpBuffer[],
    DWORD *cchBufSize)
{
    struct __frame_svcctl_GetServiceDisplayNameW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_GetServiceDisplayNameW );
    if (!lpServiceName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!cchBufSize) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 20);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[468]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[468]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *cchBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[326]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[470],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *cchBufSize = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetServiceDisplayNameW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetServiceKeyNameW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_GetServiceKeyNameW( struct __frame_svcctl_GetServiceKeyNameW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetServiceKeyNameW(
    SC_RPC_HANDLE hSCManager,
    LPCWSTR lpServiceDisplayName,
    WCHAR lpBuffer[],
    DWORD *cchBufSize)
{
    struct __frame_svcctl_GetServiceKeyNameW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_GetServiceKeyNameW );
    if (!lpServiceDisplayName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!cchBufSize) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 21);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[486]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceDisplayName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[486]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *cchBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[344]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *cchBufSize = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetServiceKeyNameW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_SCSetServiceBitsA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_SCSetServiceBitsA( struct __frame_svcctl_SCSetServiceBitsA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_SCSetServiceBitsA(
    void)
{
    struct __frame_svcctl_SCSetServiceBitsA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_SCSetServiceBitsA );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 22);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[362]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_SCSetServiceBitsA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ChangeServiceConfigA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ChangeServiceConfigA( struct __frame_svcctl_ChangeServiceConfigA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ChangeServiceConfigA(
    SC_RPC_HANDLE service,
    DWORD service_type,
    DWORD start_type,
    DWORD error_control,
    LPSTR binarypath,
    LPSTR loadordergroup,
    DWORD *tagid,
    BYTE *dependencies,
    DWORD depend_size,
    LPSTR startname,
    BYTE *password,
    DWORD password_size,
    LPSTR displayname)
{
    struct __frame_svcctl_ChangeServiceConfigA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ChangeServiceConfigA );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 23);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 80;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)binarypath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[524]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)startname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[542]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = start_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = error_control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)binarypath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[510]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[524]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = depend_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)startname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[542]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = password_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[364]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[510],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ChangeServiceConfigA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_CreateServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CreateServiceA( struct __frame_svcctl_CreateServiceA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CreateServiceA(
    SC_RPC_HANDLE scmanager,
    LPCSTR servicename,
    LPCSTR displayname,
    DWORD desiredaccess,
    DWORD service_type,
    DWORD start_type,
    DWORD error_control,
    LPCSTR binarypath,
    LPCSTR loadordergroup,
    DWORD *tagid,
    const BYTE *dependencies,
    DWORD depend_size,
    LPCSTR startname,
    const BYTE *password,
    DWORD password_size,
    SC_RPC_HANDLE *service)
{
    struct __frame_svcctl_CreateServiceA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CreateServiceA );
    if (!servicename) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!binarypath) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!service) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 24);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 88;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[556]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)binarypath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[564]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[584]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)startname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[602]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[556]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = desiredaccess;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = start_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = error_control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)binarypath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[564]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[570]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[584]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = depend_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)startname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[602]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = password_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[408]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[570],
            0);

        *service = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)service,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CreateServiceA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumDependentServicesA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumDependentServicesA( struct __frame_svcctl_EnumDependentServicesA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumDependentServicesA(
    SC_RPC_HANDLE service,
    DWORD state,
    BYTE *services,
    DWORD buf_size,
    DWORD *needed_size,
    DWORD *services_ret)
{
    struct __frame_svcctl_EnumDependentServicesA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumDependentServicesA );
    if (!services) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!services_ret) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 25);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[462]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[618],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *services_ret = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumDependentServicesA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumServicesStatusA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumServicesStatusA( struct __frame_svcctl_EnumServicesStatusA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumServicesStatusA(
    SC_RPC_HANDLE hmngr,
    DWORD type,
    DWORD state,
    BYTE *buffer,
    DWORD size,
    DWORD *needed,
    DWORD *returned,
    DWORD *resume)
{
    struct __frame_svcctl_EnumServicesStatusA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumServicesStatusA );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!returned) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 26);
        if (hmngr != 0)
            __frame->_Handle = NDRCContextBinding(hmngr);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 64;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hmngr,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[666]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[484]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[644],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *returned = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[666],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumServicesStatusA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_OpenSCManagerA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    MACHINE_HANDLEA MachineName;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_OpenSCManagerA( struct __frame_svcctl_OpenSCManagerA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);

    if (__frame->_Handle)
        MACHINE_HANDLEA_unbind(__frame->MachineName, __frame->_Handle);
}

DWORD __cdecl svcctl_OpenSCManagerA(
    MACHINE_HANDLEA MachineName,
    LPCSTR DatabaseName,
    DWORD dwAccessMask,
    SC_RPC_HANDLE *handle)
{
    struct __frame_svcctl_OpenSCManagerA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;
    __frame->MachineName = MachineName;

    RpcExceptionInit( 0, __finally_svcctl_OpenSCManagerA );
    if (!handle) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 27);
        __frame->_Handle = MACHINE_HANDLEA_bind(MachineName);

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)MachineName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[670]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)DatabaseName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)MachineName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[670]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)DatabaseName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwAccessMask;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[512]);

        *handle = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)handle,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_OpenSCManagerA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_OpenServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_OpenServiceA( struct __frame_svcctl_OpenServiceA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_OpenServiceA(
    SC_RPC_HANDLE hSCManager,
    LPCSTR lpServiceName,
    DWORD dwDesiredAccess,
    SC_RPC_HANDLE *phService)
{
    struct __frame_svcctl_OpenServiceA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_OpenServiceA );
    if (!lpServiceName) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!phService) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 28);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[692]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)lpServiceName,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[692]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = dwDesiredAccess;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[528]);

        *phService = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)phService,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_OpenServiceA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceConfigA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceConfigA( struct __frame_svcctl_QueryServiceConfigA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceConfigA(
    SC_RPC_HANDLE hService,
    QUERY_SERVICE_CONFIGA *config,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceConfigA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceConfigA );
    if (!config) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 29);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[544]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[726],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceConfigA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceLockStatusA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceLockStatusA( struct __frame_svcctl_QueryServiceLockStatusA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceLockStatusA(
    SC_RPC_HANDLE scmanager,
    QUERY_SERVICE_LOCK_STATUSA *status,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceLockStatusA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceLockStatusA );
    if (!status) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 30);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[560]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[782],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceLockStatusA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_StartServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_StartServiceA( struct __frame_svcctl_StartServiceA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_StartServiceA(
    SC_RPC_HANDLE service,
    DWORD argc,
    LPCSTR *args)
{
    struct __frame_svcctl_StartServiceA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_StartServiceA );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 31);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)argc;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)args,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[830]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = argc;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)argc;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)args,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[830]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[576]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_StartServiceA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetServiceDisplayNameA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_GetServiceDisplayNameA( struct __frame_svcctl_GetServiceDisplayNameA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetServiceDisplayNameA(
    SC_RPC_HANDLE hSCManager,
    LPCSTR servicename,
    CHAR buffer[],
    DWORD *buf_size)
{
    struct __frame_svcctl_GetServiceDisplayNameA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_GetServiceDisplayNameA );
    if (!servicename) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!buf_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 32);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[840]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[840]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[588]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[842],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetServiceDisplayNameA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetServiceKeyNameA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_GetServiceKeyNameA( struct __frame_svcctl_GetServiceKeyNameA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetServiceKeyNameA(
    SC_RPC_HANDLE hSCManager,
    LPCSTR servicename,
    CHAR buffer[],
    DWORD *buf_size)
{
    struct __frame_svcctl_GetServiceKeyNameA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_GetServiceKeyNameA );
    if (!servicename) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!buf_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 33);
        if (hSCManager != 0)
            __frame->_Handle = NDRCContextBinding(hSCManager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[858]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hSCManager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[858]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[606]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[860],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetServiceKeyNameA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetCurrentGroupStateW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_GetCurrentGroupStateW( struct __frame_svcctl_GetCurrentGroupStateW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetCurrentGroupStateW(
    void)
{
    struct __frame_svcctl_GetCurrentGroupStateW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_GetCurrentGroupStateW );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 34);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[624]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetCurrentGroupStateW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumServiceGroupW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumServiceGroupW( struct __frame_svcctl_EnumServiceGroupW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumServiceGroupW(
    SC_RPC_HANDLE scmanager,
    DWORD service_type,
    DWORD service_state,
    BYTE *buffer,
    DWORD buf_size,
    DWORD *needed_size,
    DWORD *returned_size,
    DWORD *resume_index,
    LPCWSTR groupname)
{
    struct __frame_svcctl_EnumServiceGroupW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumServiceGroupW );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!returned_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 35);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 64;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[896]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[626]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[874],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *returned_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[896],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumServiceGroupW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ChangeServiceConfig2A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ChangeServiceConfig2A( struct __frame_svcctl_ChangeServiceConfig2A *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ChangeServiceConfig2A(
    SC_RPC_HANDLE service,
    SC_RPC_CONFIG_INFOA info)
{
    struct __frame_svcctl_ChangeServiceConfig2A __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ChangeServiceConfig2A );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 36);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1126]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1126]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[658]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ChangeServiceConfig2A( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ChangeServiceConfig2W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ChangeServiceConfig2W( struct __frame_svcctl_ChangeServiceConfig2W *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ChangeServiceConfig2W(
    SC_RPC_HANDLE service,
    SC_RPC_CONFIG_INFOW info)
{
    struct __frame_svcctl_ChangeServiceConfig2W __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ChangeServiceConfig2W );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 37);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1302]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1302]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[668]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ChangeServiceConfig2W( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceConfig2A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceConfig2A( struct __frame_svcctl_QueryServiceConfig2A *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceConfig2A(
    SC_RPC_HANDLE service,
    DWORD info_level,
    BYTE *buffer,
    DWORD buf_size,
    DWORD *needed_size)
{
    struct __frame_svcctl_QueryServiceConfig2A __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceConfig2A );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 38);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = info_level;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[678]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1322],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceConfig2A( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceConfig2W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceConfig2W( struct __frame_svcctl_QueryServiceConfig2W *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceConfig2W(
    SC_RPC_HANDLE hService,
    DWORD InfoLevel,
    BYTE lpBuffer[],
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded)
{
    struct __frame_svcctl_QueryServiceConfig2W __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceConfig2W );
    if (!pcbBytesNeeded) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 39);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = InfoLevel;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = cbBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[696]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1344],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *pcbBytesNeeded = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceConfig2W( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceStatusEx
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceStatusEx( struct __frame_svcctl_QueryServiceStatusEx *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceStatusEx(
    SC_RPC_HANDLE hService,
    SC_STATUS_TYPE InfoLevel,
    BYTE *lpBuffer,
    DWORD cbBufSize,
    LPDWORD pcbBytesNeeded)
{
    struct __frame_svcctl_QueryServiceStatusEx __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceStatusEx );
    if (!lpBuffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!pcbBytesNeeded) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 40);
        if (hService != 0)
            __frame->_Handle = NDRCContextBinding(hService);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 38;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)hService,
            0);

        NdrSimpleTypeMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&InfoLevel,
            0x0d /* FC_ENUM16 */);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = cbBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[714]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1362],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *pcbBytesNeeded = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceStatusEx( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumServicesStatusExA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumServicesStatusExA( struct __frame_svcctl_EnumServicesStatusExA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumServicesStatusExA(
    SC_RPC_HANDLE scmanager,
    SC_ENUM_TYPE info_level,
    DWORD service_type,
    DWORD service_state,
    BYTE *buffer,
    DWORD buf_size,
    DWORD *needed_size,
    DWORD *services_count,
    DWORD *resume_index,
    LPCSTR groupname)
{
    struct __frame_svcctl_EnumServicesStatusExA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumServicesStatusExA );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!services_count) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 41);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 70;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        NdrSimpleTypeMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&info_level,
            0x0d /* FC_ENUM16 */);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1406]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[732]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1384],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *services_count = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1406],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumServicesStatusExA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_EnumServicesStatusExW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_EnumServicesStatusExW( struct __frame_svcctl_EnumServicesStatusExW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_EnumServicesStatusExW(
    SC_RPC_HANDLE scmanager,
    SC_ENUM_TYPE info_level,
    DWORD service_type,
    DWORD service_state,
    BYTE *buffer,
    DWORD buf_size,
    DWORD *needed_size,
    DWORD *services_count,
    DWORD *resume_index,
    LPCWSTR groupname)
{
    struct __frame_svcctl_EnumServicesStatusExW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_EnumServicesStatusExW );
    if (!buffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!needed_size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!services_count) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 42);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 70;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        NdrSimpleTypeMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&info_level,
            0x0d /* FC_ENUM16 */);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_state;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1440]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)groupname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[766]);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1418],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *needed_size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *services_count = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1440],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_EnumServicesStatusExW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown43
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown43( struct __frame_svcctl_unknown43 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown43(
    void)
{
    struct __frame_svcctl_unknown43 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown43 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 43);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[800]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown43( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_CreateServiceWOW64A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CreateServiceWOW64A( struct __frame_svcctl_CreateServiceWOW64A *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CreateServiceWOW64A(
    SC_RPC_HANDLE scmanager,
    LPCSTR servicename,
    LPCSTR displayname,
    DWORD accessmask,
    DWORD service_type,
    DWORD start_type,
    DWORD error_control,
    LPCSTR imagepath,
    LPCSTR loadordergroup,
    DWORD *tagid,
    const BYTE *dependencies,
    DWORD depend_size,
    LPCSTR start_name,
    const BYTE *password,
    DWORD password_size,
    SC_RPC_HANDLE *service)
{
    struct __frame_svcctl_CreateServiceWOW64A __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CreateServiceWOW64A );
    if (!servicename) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!imagepath) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!service) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 44);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 88;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)imagepath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1462]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1482]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)start_name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = accessmask;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = start_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = error_control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)imagepath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1462]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1468]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1482]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = depend_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)start_name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = password_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[802]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1468],
            0);

        *service = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)service,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CreateServiceWOW64A( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_CreateServiceWOW64W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CreateServiceWOW64W( struct __frame_svcctl_CreateServiceWOW64W *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CreateServiceWOW64W(
    SC_RPC_HANDLE scmanager,
    LPCWSTR servicename,
    LPCWSTR displayname,
    DWORD accessmask,
    DWORD service_type,
    DWORD start_type,
    DWORD error_control,
    LPCWSTR imagepath,
    LPCWSTR loadordergroup,
    DWORD *tagid,
    const BYTE *dependencies,
    DWORD depend_size,
    LPCWSTR start_name,
    const BYTE *password,
    DWORD password_size,
    SC_RPC_HANDLE *service)
{
    struct __frame_svcctl_CreateServiceWOW64W __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CreateServiceWOW64W );
    if (!servicename) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!imagepath) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!service) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 45);
        if (scmanager != 0)
            __frame->_Handle = NDRCContextBinding(scmanager);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 88;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)imagepath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1526]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1546]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)start_name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1564]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)scmanager,
            0);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)servicename,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)displayname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = accessmask;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = service_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = start_type;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = error_control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)imagepath,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1526]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)loadordergroup,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)depend_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)dependencies,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1546]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = depend_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)start_name,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)password_size;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)password,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1564]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = password_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[856]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532],
            0);

        *service = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)service,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CreateServiceWOW64W( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown46
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown46( struct __frame_svcctl_unknown46 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown46(
    void)
{
    struct __frame_svcctl_unknown46 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown46 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 46);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[910]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown46( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_NotifyServiceStatusChange
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_NotifyServiceStatusChange( struct __frame_svcctl_NotifyServiceStatusChange *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_NotifyServiceStatusChange(
    SC_RPC_HANDLE service,
    SC_RPC_NOTIFY_PARAMS params,
    GUID *clientprocessguid,
    GUID *scmprocessguid,
    BOOL *createremotequeue,
    SC_NOTIFY_RPC_HANDLE *notify)
{
    struct __frame_svcctl_NotifyServiceStatusChange __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_NotifyServiceStatusChange );
    if (!clientprocessguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!scmprocessguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!createremotequeue) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!notify) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 47);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 44;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)&params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)&params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710]);

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)clientprocessguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1732]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[912]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&scmprocessguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1732],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *createremotequeue = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        *notify = 0;
        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)notify,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_NotifyServiceStatusChange( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_GetNotifyResults
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_GetNotifyResults( struct __frame_svcctl_GetNotifyResults *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_GetNotifyResults(
    SC_NOTIFY_RPC_HANDLE notify,
    SC_RPC_NOTIFY_PARAMS_LIST **params)
{
    struct __frame_svcctl_GetNotifyResults __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_GetNotifyResults );
    if (!params) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 48);
        if (notify != 0)
            __frame->_Handle = NDRCContextBinding(notify);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)notify,
            0);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[938]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1802],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_GetNotifyResults( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_CloseNotifyHandle
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_CloseNotifyHandle( struct __frame_svcctl_CloseNotifyHandle *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_CloseNotifyHandle(
    SC_NOTIFY_RPC_HANDLE *notify,
    BOOL *apc_fired)
{
    struct __frame_svcctl_CloseNotifyHandle __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_CloseNotifyHandle );
    if (!notify) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!apc_fired) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 49);
        if (*notify != 0)
            __frame->_Handle = NDRCContextBinding(*notify);

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)*notify,
            1);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[948]);

        NdrClientContextUnmarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT *)notify,
            __frame->_Handle);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *apc_fired = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_CloseNotifyHandle( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ControlServiceExA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ControlServiceExA( struct __frame_svcctl_ControlServiceExA *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ControlServiceExA(
    SC_RPC_HANDLE service,
    DWORD control,
    DWORD info_level,
    SC_RPC_SERVICE_CONTROL_IN_PARAMSA *in_params,
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSA *out_params)
{
    struct __frame_svcctl_ControlServiceExA __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ControlServiceExA );
    if (!in_params) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!out_params) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 50);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)info_level;

        NdrNonEncapsulatedUnionBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)in_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1846]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = info_level;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)info_level;

        NdrNonEncapsulatedUnionMarshall(
            &__frame->_StubMsg,
            (unsigned char *)in_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1846]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[958]);

        NdrNonEncapsulatedUnionUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1884],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ControlServiceExA( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_ControlServiceExW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_ControlServiceExW( struct __frame_svcctl_ControlServiceExW *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_ControlServiceExW(
    SC_RPC_HANDLE service,
    DWORD control,
    DWORD info_level,
    SC_RPC_SERVICE_CONTROL_IN_PARAMSW *in_params,
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSW *out_params)
{
    struct __frame_svcctl_ControlServiceExW __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_ControlServiceExW );
    if (!in_params) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!out_params) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 51);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)info_level;

        NdrNonEncapsulatedUnionBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)in_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1936]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = control;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = info_level;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)info_level;

        NdrNonEncapsulatedUnionMarshall(
            &__frame->_StubMsg,
            (unsigned char *)in_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1936]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[976]);

        NdrNonEncapsulatedUnionUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1964],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_ControlServiceExW( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown52
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown52( struct __frame_svcctl_unknown52 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown52(
    void)
{
    struct __frame_svcctl_unknown52 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown52 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 52);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[994]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown52( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown53
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown53( struct __frame_svcctl_unknown53 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown53(
    void)
{
    struct __frame_svcctl_unknown53 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown53 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 53);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[996]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown53( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown54
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown54( struct __frame_svcctl_unknown54 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown54(
    void)
{
    struct __frame_svcctl_unknown54 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown54 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 54);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[998]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown54( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_unknown55
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static void __finally_svcctl_unknown55( struct __frame_svcctl_unknown55 *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_unknown55(
    void)
{
    struct __frame_svcctl_unknown55 __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( 0, __finally_svcctl_unknown55 );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 55);
        __frame->_StubMsg.BufferLength = 0;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, svcctl__MIDL_AutoBindHandle);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[1000]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_unknown55( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_svcctl_QueryServiceConfigEx
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_svcctl_QueryServiceConfigEx( struct __frame_svcctl_QueryServiceConfigEx *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

DWORD __cdecl svcctl_QueryServiceConfigEx(
    SC_RPC_HANDLE service,
    DWORD info_level,
    SC_RPC_CONFIG_INFOW *info)
{
    struct __frame_svcctl_QueryServiceConfigEx __f, * const __frame = &__f;
    DWORD _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_svcctl_QueryServiceConfigEx );
    if (!info) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &svcctl_StubDesc, 56);
        if (service != 0)
            __frame->_Handle = NDRCContextBinding(service);
        else
            RpcRaiseException(RPC_X_SS_IN_NULL_CONTEXT);

        __frame->_StubMsg.BufferLength = 32;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrClientContextMarshall(
            &__frame->_StubMsg,
            (NDR_CCONTEXT)service,
            0);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = info_level;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[1002]);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1302],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_QueryServiceConfigEx( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

#if !defined(__RPC_WIN64__)
#error  Invalid build platform for this stub.
#endif

static const MIDL_STUB_DESC svcctl_StubDesc =
{
    (void *)& svcctl___RpcClientInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        &svcctl__MIDL_AutoBindHandle,
    },
    0,
    BindingRoutines,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};


static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 4 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa),	/* type offset = 10 */
/* 10 (parameter dwControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter lpServiceStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a),	/* type offset = 26 */
/* 16 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 18 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e),	/* type offset = 30 */
/* 22 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22),	/* type offset = 34 */
/* 28 (parameter phLock) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x26),	/* type offset = 38 */
/* 32 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2e),	/* type offset = 46 */
/* 38 (parameter info) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 40 (parameter descriptor) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x32),	/* type offset = 50 */
/* 44 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x40),	/* type offset = 64 */
/* 50 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 52 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x44),	/* type offset = 68 */
/* 56 (parameter info) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 58 (parameter descriptor) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x48),	/* type offset = 72 */
/* 62 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 64 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 66 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x56),	/* type offset = 86 */
/* 70 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5a),	/* type offset = 90 */
/* 74 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter hServiceStatus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e),	/* type offset = 94 */
/* 80 (parameter lpServiceStatus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6e),	/* type offset = 110 */
/* 84 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter phLock) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x72),	/* type offset = 114 */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter machinename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7a),	/* type offset = 122 */
/* 96 (parameter boot_acceptable) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 98 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 102 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7e),	/* type offset = 126 */
/* 106 (parameter dwServiceType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 108 (parameter dwStartType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 110 (parameter dwErrorControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 112 (parameter lpBinaryPathName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x82),	/* type offset = 130 */
/* 116 (parameter lpLoadOrderGroupKey) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x86),	/* type offset = 134 */
/* 120 (parameter lpdwTagId) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x8a),	/* type offset = 138 */
/* 124 (parameter lpDependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x98),	/* type offset = 152 */
/* 128 (parameter dwDependenciesSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter lpServiceStartName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9c),	/* type offset = 156 */
/* 134 (parameter lpPassword) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xaa),	/* type offset = 170 */
/* 138 (parameter dwPasswordSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 140 (parameter lpDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xae),	/* type offset = 174 */
/* 144 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 146 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb2),	/* type offset = 178 */
/* 150 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 154 (parameter lpDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xba),	/* type offset = 186 */
/* 158 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 160 (parameter dwServiceType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 162 (parameter dwStartType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 164 (parameter dwErrorControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 166 (parameter lpBinaryPathName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbe),	/* type offset = 190 */
/* 170 (parameter lpLoadOrderGroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc2),	/* type offset = 194 */
/* 174 (parameter lpdwTagId) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xc6),	/* type offset = 198 */
/* 178 (parameter lpDependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd4),	/* type offset = 212 */
/* 182 (parameter dwDependenciesSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 184 (parameter lpServiceStartName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd8),	/* type offset = 216 */
/* 188 (parameter lpPassword) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe6),	/* type offset = 230 */
/* 192 (parameter dwPasswordSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xea),	/* type offset = 234 */
/* 198 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 200 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf2),	/* type offset = 242 */
/* 204 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 206 (parameter services) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf6),	/* type offset = 246 */
/* 210 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 212 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x104),	/* type offset = 260 */
/* 216 (parameter services_ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x108),	/* type offset = 264 */
/* 220 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 222 (parameter hmngr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10c),	/* type offset = 268 */
/* 226 (parameter type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 228 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 230 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x110),	/* type offset = 272 */
/* 234 (parameter size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 236 (parameter needed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11e),	/* type offset = 286 */
/* 240 (parameter returned) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x122),	/* type offset = 290 */
/* 244 (parameter resume) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x126),	/* type offset = 294 */
/* 248 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 250 (parameter MachineName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12a),	/* type offset = 298 */
/* 254 (parameter DatabaseName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12e),	/* type offset = 302 */
/* 258 (parameter dwAccessMask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter handle) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x132),	/* type offset = 306 */
/* 264 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 266 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13a),	/* type offset = 314 */
/* 270 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13e),	/* type offset = 318 */
/* 274 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 276 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x142),	/* type offset = 322 */
/* 280 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 282 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x14a),	/* type offset = 330 */
/* 286 (parameter config) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18a),	/* type offset = 394 */
/* 290 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 292 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18e),	/* type offset = 398 */
/* 296 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 298 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x192),	/* type offset = 402 */
/* 302 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1ac),	/* type offset = 428 */
/* 306 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 308 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1b0),	/* type offset = 432 */
/* 312 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 314 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1b4),	/* type offset = 436 */
/* 318 (parameter dwNumServiceArgs) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 320 (parameter lpServiceArgVectors) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1ca),	/* type offset = 458 */
/* 324 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 326 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1ce),	/* type offset = 462 */
/* 330 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1d2),	/* type offset = 466 */
/* 334 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d6),	/* type offset = 470 */
/* 338 (parameter cchBufSize) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1dc),	/* type offset = 476 */
/* 342 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 344 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e0),	/* type offset = 480 */
/* 348 (parameter lpServiceDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e4),	/* type offset = 484 */
/* 352 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1e8),	/* type offset = 488 */
/* 356 (parameter cchBufSize) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1ee),	/* type offset = 494 */
/* 360 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 362 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 364 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f2),	/* type offset = 498 */
/* 368 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 370 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 372 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 374 (parameter binarypath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f6),	/* type offset = 502 */
/* 378 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1fa),	/* type offset = 506 */
/* 382 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1fe),	/* type offset = 510 */
/* 386 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x20c),	/* type offset = 524 */
/* 390 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 392 (parameter startname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x210),	/* type offset = 528 */
/* 396 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x21e),	/* type offset = 542 */
/* 400 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 402 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x222),	/* type offset = 546 */
/* 406 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 408 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x226),	/* type offset = 550 */
/* 412 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22a),	/* type offset = 554 */
/* 416 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22e),	/* type offset = 558 */
/* 420 (parameter desiredaccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 422 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 424 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 426 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 428 (parameter binarypath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x232),	/* type offset = 562 */
/* 432 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x236),	/* type offset = 566 */
/* 436 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x23a),	/* type offset = 570 */
/* 440 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x248),	/* type offset = 584 */
/* 444 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 446 (parameter startname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x24c),	/* type offset = 588 */
/* 450 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x25a),	/* type offset = 602 */
/* 454 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 456 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x25e),	/* type offset = 606 */
/* 460 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 462 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x266),	/* type offset = 614 */
/* 466 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 468 (parameter services) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x26a),	/* type offset = 618 */
/* 472 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 474 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x278),	/* type offset = 632 */
/* 478 (parameter services_ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x27c),	/* type offset = 636 */
/* 482 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 484 (parameter hmngr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x280),	/* type offset = 640 */
/* 488 (parameter type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 490 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 492 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x284),	/* type offset = 644 */
/* 496 (parameter size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 498 (parameter needed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x292),	/* type offset = 658 */
/* 502 (parameter returned) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x296),	/* type offset = 662 */
/* 506 (parameter resume) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x29a),	/* type offset = 666 */
/* 510 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 512 (parameter MachineName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x29e),	/* type offset = 670 */
/* 516 (parameter DatabaseName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2a2),	/* type offset = 674 */
/* 520 (parameter dwAccessMask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 522 (parameter handle) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2a6),	/* type offset = 678 */
/* 526 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 528 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2ae),	/* type offset = 686 */
/* 532 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2b2),	/* type offset = 690 */
/* 536 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 538 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2b6),	/* type offset = 694 */
/* 542 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 544 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2be),	/* type offset = 702 */
/* 548 (parameter config) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2fe),	/* type offset = 766 */
/* 552 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 554 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x302),	/* type offset = 770 */
/* 558 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 560 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x306),	/* type offset = 774 */
/* 564 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x320),	/* type offset = 800 */
/* 568 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 570 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x324),	/* type offset = 804 */
/* 574 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 576 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x328),	/* type offset = 808 */
/* 580 (parameter argc) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 582 (parameter args) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x33e),	/* type offset = 830 */
/* 586 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 588 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x342),	/* type offset = 834 */
/* 592 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x346),	/* type offset = 838 */
/* 596 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x34a),	/* type offset = 842 */
/* 600 (parameter buf_size) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x350),	/* type offset = 848 */
/* 604 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 606 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x354),	/* type offset = 852 */
/* 610 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x358),	/* type offset = 856 */
/* 614 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x35c),	/* type offset = 860 */
/* 618 (parameter buf_size) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x362),	/* type offset = 866 */
/* 622 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 624 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 626 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x366),	/* type offset = 870 */
/* 630 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 632 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 634 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x36a),	/* type offset = 874 */
/* 638 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 640 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x378),	/* type offset = 888 */
/* 644 (parameter returned_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x37c),	/* type offset = 892 */
/* 648 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x380),	/* type offset = 896 */
/* 652 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x384),	/* type offset = 900 */
/* 656 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 658 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x388),	/* type offset = 904 */
/* 662 (parameter info) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x466),	/* type offset = 1126 */
/* 666 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 668 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x476),	/* type offset = 1142 */
/* 672 (parameter info) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x516),	/* type offset = 1302 */
/* 676 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 678 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x526),	/* type offset = 1318 */
/* 682 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 684 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x52a),	/* type offset = 1322 */
/* 688 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 690 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x538),	/* type offset = 1336 */
/* 694 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 696 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x53c),	/* type offset = 1340 */
/* 700 (parameter InfoLevel) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 702 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x540),	/* type offset = 1344 */
/* 706 (parameter cbBufSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 708 (parameter pcbBytesNeeded) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x54a),	/* type offset = 1354 */
/* 712 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 714 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x54e),	/* type offset = 1358 */
/* 718 (parameter InfoLevel) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 720 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x552),	/* type offset = 1362 */
/* 724 (parameter cbBufSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 726 (parameter pcbBytesNeeded) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x560),	/* type offset = 1376 */
/* 730 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 732 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x564),	/* type offset = 1380 */
/* 736 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 738 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 740 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 742 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x568),	/* type offset = 1384 */
/* 746 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 748 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x576),	/* type offset = 1398 */
/* 752 (parameter services_count) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x57a),	/* type offset = 1402 */
/* 756 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x57e),	/* type offset = 1406 */
/* 760 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x582),	/* type offset = 1410 */
/* 764 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 766 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x586),	/* type offset = 1414 */
/* 770 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 772 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 774 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 776 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x58a),	/* type offset = 1418 */
/* 780 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 782 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x598),	/* type offset = 1432 */
/* 786 (parameter services_count) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x59c),	/* type offset = 1436 */
/* 790 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x5a0),	/* type offset = 1440 */
/* 794 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5a4),	/* type offset = 1444 */
/* 798 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 800 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 802 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5a8),	/* type offset = 1448 */
/* 806 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ac),	/* type offset = 1452 */
/* 810 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5b0),	/* type offset = 1456 */
/* 814 (parameter accessmask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 816 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 818 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 820 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 822 (parameter imagepath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5b4),	/* type offset = 1460 */
/* 826 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5b8),	/* type offset = 1464 */
/* 830 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x5bc),	/* type offset = 1468 */
/* 834 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ca),	/* type offset = 1482 */
/* 838 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 840 (parameter start_name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ce),	/* type offset = 1486 */
/* 844 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5dc),	/* type offset = 1500 */
/* 848 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 850 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5e0),	/* type offset = 1504 */
/* 854 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 856 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e8),	/* type offset = 1512 */
/* 860 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ec),	/* type offset = 1516 */
/* 864 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f0),	/* type offset = 1520 */
/* 868 (parameter accessmask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 870 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 872 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 874 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 876 (parameter imagepath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f4),	/* type offset = 1524 */
/* 880 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f8),	/* type offset = 1528 */
/* 884 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x5fc),	/* type offset = 1532 */
/* 888 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x60a),	/* type offset = 1546 */
/* 892 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 894 (parameter start_name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x60e),	/* type offset = 1550 */
/* 898 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x61c),	/* type offset = 1564 */
/* 902 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 904 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x620),	/* type offset = 1568 */
/* 908 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 910 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 912 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x628),	/* type offset = 1576 */
/* 916 (parameter params) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6ae),	/* type offset = 1710 */
/* 920 (parameter clientprocessguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6d0),	/* type offset = 1744 */
/* 924 (parameter scmprocessguid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6d4),	/* type offset = 1748 */
/* 928 (parameter createremotequeue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6d8),	/* type offset = 1752 */
/* 932 (parameter notify) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6dc),	/* type offset = 1756 */
/* 936 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 938 (parameter notify) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6e4),	/* type offset = 1764 */
/* 942 (parameter params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x70a),	/* type offset = 1802 */
/* 946 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 948 (parameter notify) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x70e),	/* type offset = 1806 */
/* 952 (parameter apc_fired) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x716),	/* type offset = 1814 */
/* 956 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 958 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x71a),	/* type offset = 1818 */
/* 962 (parameter control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 964 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 966 (parameter in_params) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x74a),	/* type offset = 1866 */
/* 970 (parameter out_params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x770),	/* type offset = 1904 */
/* 974 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 976 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x774),	/* type offset = 1908 */
/* 980 (parameter control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 982 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 984 (parameter in_params) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7a4),	/* type offset = 1956 */
/* 988 (parameter out_params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7c0),	/* type offset = 1984 */
/* 992 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 994 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 996 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 998 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1000 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1002 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7c4),	/* type offset = 1988 */
/* 1006 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1008 (parameter info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7c8),	/* type offset = 1992 */
/* 1012 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (6) */
/*  6 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 10 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 14 (SERVICE_STATUS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x1c),	/* 28 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 26 (SERVICE_STATUS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff2),	/* Offset= -14 (14) */
/* 30 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 34 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 38 (SC_RPC_LOCK *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (42) */
/* 42 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x1,	/* rundown routine */
        0, /* FIXME: param num */
/* 46 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 50 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 60 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (50) */
/* 64 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 68 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 72 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 82 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (72) */
/* 86 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 90 (SERVICE_STATUS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffb2),	/* Offset= -78 (14) */
/* 94 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 98 (struct _SERVICE_STATUS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x1c),	/* 28 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 110 (LPSERVICE_STATUS) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (98) */
/* 114 (SC_RPC_LOCK *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (118) */
/* 118 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x1,	/* rundown routine */
        0, /* FIXME: param num */
/* 122 (SVCCTL_HANDLEW) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 124 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 126 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 130 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 132 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 134 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 136 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 138 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 142 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwDependenciesSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 152 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (142) */
/* 156 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 158 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 160 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwPasswordSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 170 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (160) */
/* 174 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 176 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 178 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 182 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 184 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 186 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 188 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 190 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 192 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 194 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 196 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 198 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 202 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwDependenciesSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 212 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (202) */
/* 216 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 218 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 220 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwPasswordSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x70),	/* offset = 112 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 230 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (220) */
/* 234 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (238) */
/* 238 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 242 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 246 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 256 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (246) */
/* 260 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 264 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 268 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 272 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 282 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (272) */
/* 286 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 290 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 294 (LPDWORD) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 298 (MACHINE_HANDLEW) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 300 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 302 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 304 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 306 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (310) */
/* 310 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 314 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 318 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 320 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 322 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (326) */
/* 326 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 330 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 334 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 336 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 338 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 340 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 342 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 344 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 346 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 348 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 350 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 352 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 354 (QUERY_SERVICE_CONFIGW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x40),	/* 64 */
        NdrFcShort(0x0),
        NdrFcShort(0xe),	/* Offset= 14 (374) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 374 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 376 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 378 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 380 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 382 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 384 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 386 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 388 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 390 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 392 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 394 (QUERY_SERVICE_CONFIGW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffd6),	/* Offset= -42 (354) */
/* 398 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 402 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 406 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 408 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 410 (QUERY_SERVICE_LOCK_STATUSW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (424) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 424 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 426 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 428 (QUERY_SERVICE_LOCK_STATUSW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (410) */
/* 432 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 436 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 440 (LPCWSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter dwNumServiceArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
/* 452 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 454 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 458 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (440) */
/* 462 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 466 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 468 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 470 */
        0x25,	/* FC_C_WSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceDisplayNameW */
        0x0,
        NdrFcShort(0x0),
/* 476 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 480 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 484 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 486 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 488 */
        0x25,	/* FC_C_WSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceKeyNameW */
        0x0,
        NdrFcShort(0x0),
/* 494 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 498 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 502 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 504 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 506 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 508 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 510 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 514 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 524 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (514) */
/* 528 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 530 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 532 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 542 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (532) */
/* 546 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 548 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 550 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 554 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 556 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 558 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 560 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 562 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 564 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 566 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 568 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 570 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 574 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 584 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (574) */
/* 588 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 590 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 592 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x70),	/* offset = 112 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 602 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (592) */
/* 606 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (610) */
/* 610 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 614 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 618 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 628 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (618) */
/* 632 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 636 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 640 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 644 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 654 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (644) */
/* 658 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 662 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 666 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 670 (MACHINE_HANDLEA) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 672 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 674 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 676 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 678 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (682) */
/* 682 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 686 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 690 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 692 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 694 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (698) */
/* 698 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 702 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 706 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 708 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 710 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 712 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 714 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 716 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 718 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 720 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 722 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 724 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 726 (QUERY_SERVICE_CONFIGA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x40),	/* 64 */
        NdrFcShort(0x0),
        NdrFcShort(0xe),	/* Offset= 14 (746) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 746 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 748 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 750 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 752 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 754 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 756 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 758 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 760 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 762 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 764 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 766 (QUERY_SERVICE_CONFIGA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffd6),	/* Offset= -42 (726) */
/* 770 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 774 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 778 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 780 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 782 (QUERY_SERVICE_LOCK_STATUSA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (796) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 796 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 798 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 800 (QUERY_SERVICE_LOCK_STATUSA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (782) */
/* 804 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 808 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 812 (LPCSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter argc, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
/* 824 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 826 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 830 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (812) */
/* 834 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 838 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 840 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 842 */
        0x22,	/* FC_C_CSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceDisplayNameA */
        0x0,
        NdrFcShort(0x0),
/* 848 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 852 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 856 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 858 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 860 */
        0x22,	/* FC_C_CSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceKeyNameA */
        0x0,
        NdrFcShort(0x0),
/* 866 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 870 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 874 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 884 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (874) */
/* 888 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 892 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 896 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 900 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 902 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 904 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 908 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 910 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 912 (SERVICE_DESCRIPTIONA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x4),	/* Offset= 4 (922) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 922 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 924 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 926 (SERVICE_DESCRIPTIONA *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (912) */
/* 930 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 932 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 934 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 936 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 938 (SC_ACTION) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (944) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 950 (SC_ACTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cActions, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (938) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 968 (SERVICE_FAILURE_ACTIONSA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x28),	/* 40 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (984) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 984 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 986 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 988 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 990 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 992 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (950) */
/* 996 (SERVICE_FAILURE_ACTIONSA *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe2),	/* Offset= -30 (968) */
/* 1000 (SERVICE_DELAYED_AUTO_START_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1006 (SERVICE_DELAYED_AUTO_START_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1000) */
/* 1010 (SERVICE_FAILURE_ACTIONS_FLAG) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1016 (SERVICE_FAILURE_ACTIONS_FLAG *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1010) */
/* 1020 (SERVICE_SID_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1026 (SERVICE_SID_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1020) */
/* 1030 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbRequiredPrivileges, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1040 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1052) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1052 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1030) */
/* 1056 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (1040) */
/* 1060 (SERVICE_PRESHUTDOWN_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1066 (SERVICE_PRESHUTDOWN_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1060) */
/* 1070 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xff68),	/* Offset= -152 (926) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffa8),	/* Offset= -88 (996) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffac),	/* Offset= -84 (1006) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffb0),	/* Offset= -80 (1016) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffb4),	/* Offset= -76 (1026) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffcc),	/* Offset= -52 (1056) */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0xffd0),	/* Offset= -48 (1066) */
        NdrFcShort(0xffff),
/* 1118 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffca),	/* Offset= -54 (1070) */
/* 1126 (SC_RPC_CONFIG_INFOA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1132) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (1118) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1142 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1146 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1148 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1150 (SERVICE_DESCRIPTIONW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x4),	/* Offset= 4 (1160) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1160 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1162 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1164 (SERVICE_DESCRIPTIONW *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (1150) */
/* 1168 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1170 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1172 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1174 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1176 (SC_ACTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cActions, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff04),	/* Offset= -252 (938) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1194 (SERVICE_FAILURE_ACTIONSW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x28),	/* 40 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (1210) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1210 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1212 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1214 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1216 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1218 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (1176) */
/* 1222 (SERVICE_FAILURE_ACTIONSW *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe2),	/* Offset= -30 (1194) */
/* 1226 (SERVICE_DELAYED_AUTO_START_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff1c),	/* Offset= -228 (1000) */
/* 1230 (SERVICE_FAILURE_ACTIONS_FLAG *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff22),	/* Offset= -222 (1010) */
/* 1234 (SERVICE_SID_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff28),	/* Offset= -216 (1020) */
/* 1238 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff38),	/* Offset= -200 (1040) */
/* 1242 (SERVICE_PRESHUTDOWN_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff48),	/* Offset= -184 (1060) */
/* 1246 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffa6),	/* Offset= -90 (1164) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffda),	/* Offset= -38 (1222) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffd8),	/* Offset= -40 (1226) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffd6),	/* Offset= -42 (1230) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffd4),	/* Offset= -44 (1234) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffd2),	/* Offset= -46 (1238) */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0xffd0),	/* Offset= -48 (1242) */
        NdrFcShort(0xffff),
/* 1294 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffca),	/* Offset= -54 (1246) */
/* 1302 (SC_RPC_CONFIG_INFOW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1308) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (1294) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1318 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1322 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1332 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1322) */
/* 1336 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1340 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1344 (BYTE[]) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter cbBufSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1354 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1358 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1362 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter cbBufSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1372 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1362) */
/* 1376 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1380 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1384 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1394 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1384) */
/* 1398 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1402 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1406 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1410 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1412 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1414 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1418 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1428 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1418) */
/* 1432 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1436 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1440 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1444 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1446 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1448 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1452 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1454 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1456 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1458 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1460 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1462 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1464 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1466 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1468 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1472 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1482 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1472) */
/* 1486 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1488 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1490 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x70),	/* offset = 112 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1500 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1490) */
/* 1504 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1508) */
/* 1508 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1512 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1516 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1518 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1520 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1522 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1524 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1526 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1528 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1530 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1532 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1536 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1546 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1536) */
/* 1550 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1552 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1554 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x70),	/* offset = 112 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1564 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1554) */
/* 1568 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1572) */
/* 1572 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1576 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1580 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1586 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1592 (SERVICE_STATUS_PROCESS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1606 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_1) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x58),	/* 88 */
        0x0b,	/* FC_HYPER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1580) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1586) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe2),	/* Offset= -30 (1592) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1628 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_1 *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1606) */
/* 1632 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1638 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1644 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1646 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1648 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_2) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x68),	/* 104 */
        NdrFcShort(0x0),
        NdrFcShort(0x16),	/* Offset= 22 (1676) */
        0x0b,	/* FC_HYPER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe4),	/* Offset= -28 (1632) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (1638) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffb4),	/* Offset= -76 (1592) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1676 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1678 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1680 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_2 *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (1648) */
/* 1684 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x2),	/* 2 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffc0),	/* Offset= -64 (1628) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffee),	/* Offset= -18 (1680) */
        NdrFcShort(0xffff),
/* 1702 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffe8),	/* Offset= -24 (1684) */
/* 1710 (SC_RPC_NOTIFY_PARAMS) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1716) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (1702) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1726 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1732 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1726) */
        0x5b,	/* FC_END */
/* 1744 (GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1732) */
/* 1748 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffee),	/* Offset= -18 (1732) */
/* 1752 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1756 (SC_NOTIFY_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1760) */
/* 1760 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1764 (SC_NOTIFY_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1768 (SC_RPC_NOTIFY_PARAMS[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x9,	/* Corr desc: field cElements, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffb8),	/* Offset= -72 (1710) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1786 (SC_RPC_NOTIFY_PARAMS_LIST) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xffea),	/* Offset= -22 (1768) */
        NdrFcShort(0x0),	/* Offset= 0 (1792) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1798 (SC_RPC_NOTIFY_PARAMS_LIST *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1786) */
/* 1802 (SC_RPC_NOTIFY_PARAMS_LIST **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1798) */
/* 1806 (SC_NOTIFY_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1810) */
/* 1810 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1814 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1818 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1822 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1824 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1826 (struct _SERVICE_CONTROL_STATUS_REASON_IN_PARAMSA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1838) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1838 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1840 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1842 (PSERVICE_CONTROL_STATUS_REASON_IN_PARAMSA) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (1826) */
/* 1846 (SC_RPC_SERVICE_CONTROL_IN_PARAMSA) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0x2),	/* Offset= 2 (1854) */
/* 1854 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (1842) */
        NdrFcShort(0xffff),
/* 1866 (SC_RPC_SERVICE_CONTROL_IN_PARAMSA *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffea),	/* Offset= -22 (1846) */
/* 1870 (struct _SERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfee4),	/* Offset= -284 (1592) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1880 (PSERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1870) */
/* 1884 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSA) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0x2),	/* Offset= 2 (1892) */
/* 1892 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (1880) */
        NdrFcShort(0xffff),
/* 1904 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffea),	/* Offset= -22 (1884) */
/* 1908 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1912 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1914 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1916 (struct _SERVICE_CONTROL_STATUS_REASON_IN_PARAMSW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1928) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1928 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1930 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1932 (PSERVICE_CONTROL_STATUS_REASON_IN_PARAMSW) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (1916) */
/* 1936 (SC_RPC_SERVICE_CONTROL_IN_PARAMSW) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0x2),	/* Offset= 2 (1944) */
/* 1944 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (1932) */
        NdrFcShort(0xffff),
/* 1956 (SC_RPC_SERVICE_CONTROL_IN_PARAMSW *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffea),	/* Offset= -22 (1936) */
/* 1960 (PSERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffa4),	/* Offset= -92 (1870) */
/* 1964 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSW) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0x2),	/* Offset= 2 (1972) */
/* 1972 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (1960) */
        NdrFcShort(0xffff),
/* 1984 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffea),	/* Offset= -22 (1964) */
/* 1988 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1992 (SC_RPC_CONFIG_INFOW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfd4c),	/* Offset= -692 (1302) */
        0x0
    }
};


#endif /* _WIN64 */
