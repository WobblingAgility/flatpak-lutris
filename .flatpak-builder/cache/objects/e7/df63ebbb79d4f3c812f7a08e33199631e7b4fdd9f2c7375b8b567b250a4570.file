/*** Autogenerated by WIDL 3.8 from epm.idl - Do not edit ***/
#include <string.h>

#include "epm.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif

#ifndef _WIN64

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __server_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static int __server_filter( struct __server_frame *__frame )
{
    return (__frame->code == STATUS_ACCESS_VIOLATION) ||
           (__frame->code == STATUS_DATATYPE_MISALIGNMENT) ||
           (__frame->code == RPC_X_BAD_STUB_DATA) ||
           (__frame->code == RPC_S_INVALID_BOUND);
}

#define TYPE_FORMAT_STRING_SIZE 259
#define PROC_FORMAT_STRING_SIZE 137

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const NDR_RUNDOWN RundownRoutines[] =
{
    ept_lookup_handle_t_rundown
};

/*****************************************************************************
 * epm interface
 */

static RPC_DISPATCH_TABLE epm_v3_0_DispatchTable;
static const MIDL_SERVER_INFO epm_ServerInfo;

static const RPC_SERVER_INTERFACE epm___RpcServerInterface =
{
    sizeof(RPC_SERVER_INTERFACE),
    {{0xe1af8308,0x5d1f,0x11c9,{0x91,0xa4,0x08,0x00,0x2b,0x14,0xa0,0xfa}},{3,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    &epm_v3_0_DispatchTable,
    0,
    0,
    0,
    &epm_ServerInfo,
    0,
};
RPC_IF_HANDLE epm_v3_0_s_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& epm___RpcServerInterface;

static const MIDL_STUB_DESC epm_StubDesc;

struct __frame_epm_ept_insert
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    unsigned32 num_ents;
    ept_entry_t (*entries)[];
    boolean32 replace;
    error_status_t _W0;
    error_status_t * status;
};

static void __finally_epm_ept_insert( struct __frame_epm_ept_insert *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->num_ents;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->entries,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[64]);
    if (__frame->entries)
        __frame->_StubMsg.pfnFree(__frame->entries);



}

void __RPC_STUB epm_ept_insert( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_insert __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_insert );
    __frame->entries = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->num_ents = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->entries,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[64],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(boolean32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->replace = *(boolean32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(boolean32);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        __frame->_W0 = 0;

        ept_insert(
            __frame->h,
            __frame->num_ents,
            *__frame->entries,
            __frame->replace,
            __frame->status);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_insert( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_delete
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    unsigned32 num_ents;
    ept_entry_t (*entries)[];
    error_status_t _W0;
    error_status_t * status;
};

static void __finally_epm_ept_delete( struct __frame_epm_ept_delete *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->num_ents;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->entries,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[86]);
    if (__frame->entries)
        __frame->_StubMsg.pfnFree(__frame->entries);


}

void __RPC_STUB epm_ept_delete( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_delete __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_delete );
    __frame->entries = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[16]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->num_ents = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->entries,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[86],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        __frame->_W0 = 0;

        ept_delete(
            __frame->h,
            __frame->num_ents,
            *__frame->entries,
            __frame->status);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_delete( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_lookup
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    unsigned32 inquiry_type;
    uuid_p_t object;
    rpc_if_id_p_t interface_id;
    unsigned32 vers_option;
    NDR_SCONTEXT entry_handle;
    unsigned32 max_ents;
    unsigned32 _W0;
    unsigned32 * num_ents;
    ept_entry_t (*entries)[];
    error_status_t _W1;
    error_status_t * status;
};

static void __finally_epm_ept_lookup( struct __frame_epm_ept_lookup *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->interface_id,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[124]);





    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_ents;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_ents;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->entries,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);
    if (__frame->entries)
        __frame->_StubMsg.pfnFree(__frame->entries);


    NdrFullPointerXlatFree(__frame->_StubMsg.FullPtrXlatTables);

}

void __RPC_STUB epm_ept_lookup( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_lookup __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_lookup );
    __frame->object = 0;
    __frame->interface_id = 0;
    __frame->entry_handle = 0;
    __frame->num_ents = 0;
    __frame->entries = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            __frame->_StubMsg.FullPtrXlatTables = NdrFullPointerXlatInit(0,XLAT_SERVER);

            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[30]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->inquiry_type = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->object,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->interface_id,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[124],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->vers_option = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            __frame->entry_handle = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[128]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->max_ents = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->num_ents = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->entries = NdrAllocate(&__frame->_StubMsg, __frame->max_ents * 84);
        memset(__frame->entries, 0, __frame->max_ents * 84);
        __frame->status = &__frame->_W1;
        __frame->_W1 = 0;

        ept_lookup(
            __frame->h,
            __frame->inquiry_type,
            __frame->object,
            __frame->interface_id,
            __frame->vers_option,
            (ept_lookup_handle_t *)NDRSContextValue(__frame->entry_handle),
            __frame->max_ents,
            __frame->num_ents,
            *__frame->entries,
            __frame->status);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_ents;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_ents;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->entries,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->entry_handle,
            (NDR_RUNDOWN)ept_lookup_handle_t_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[128]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(unsigned32 *)__frame->_StubMsg.Buffer = *__frame->num_ents;
        __frame->_StubMsg.Buffer += sizeof(unsigned32);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_ents;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_ents;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->entries,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_lookup( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_map
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    uuid_p_t object;
    twr_p_t map_tower;
    NDR_SCONTEXT entry_handle;
    unsigned32 max_towers;
    unsigned32 _W0;
    unsigned32 * num_towers;
    twr_p_t * towers;
    error_status_t _W1;
    error_status_t * status;
};

static void __finally_epm_ept_map( struct __frame_epm_ept_map *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->map_tower,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);




    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_towers;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_towers;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->towers,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[218]);


    NdrFullPointerXlatFree(__frame->_StubMsg.FullPtrXlatTables);

}

void __RPC_STUB epm_ept_map( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_map __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_map );
    __frame->object = 0;
    __frame->map_tower = 0;
    __frame->entry_handle = 0;
    __frame->num_towers = 0;
    __frame->towers = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            __frame->_StubMsg.FullPtrXlatTables = NdrFullPointerXlatInit(0,XLAT_SERVER);

            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[64]);


            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->object,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->map_tower,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250],
                0);

            __frame->entry_handle = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->max_towers = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->num_towers = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->towers = NdrAllocate(&__frame->_StubMsg, __frame->max_towers * 4);
        memset(__frame->towers, 0, __frame->max_towers * 4);
        __frame->status = &__frame->_W1;
        __frame->_W1 = 0;

        ept_map(
            __frame->h,
            __frame->object,
            __frame->map_tower,
            (ept_lookup_handle_t *)NDRSContextValue(__frame->entry_handle),
            __frame->max_towers,
            __frame->num_towers,
            __frame->towers,
            __frame->status);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_towers;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_towers;

        NdrConformantVaryingArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->towers,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[182]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->entry_handle,
            (NDR_RUNDOWN)ept_lookup_handle_t_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(unsigned32 *)__frame->_StubMsg.Buffer = *__frame->num_towers;
        __frame->_StubMsg.Buffer += sizeof(unsigned32);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_towers;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_towers;

        NdrConformantVaryingArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->towers,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[182]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_map( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_lookup_handle_free
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    NDR_SCONTEXT entry_handle;
    error_status_t _W0;
    error_status_t * status;
};

static void __finally_epm_ept_lookup_handle_free( struct __frame_epm_ept_lookup_handle_free *__frame )
{



}

void __RPC_STUB epm_ept_lookup_handle_free( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_lookup_handle_free __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_lookup_handle_free );
    __frame->entry_handle = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[94]);


            __frame->entry_handle = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[226]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        __frame->_W0 = 0;

        ept_lookup_handle_free(
            __frame->h,
            (ept_lookup_handle_t *)NDRSContextValue(__frame->entry_handle),
            __frame->status);
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->entry_handle,
            (NDR_RUNDOWN)ept_lookup_handle_t_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[226]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_lookup_handle_free( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_inq_object
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    GUID _W0;
    GUID * ept_object;
    error_status_t _W1;
    error_status_t * status;
};

static void __finally_epm_ept_inq_object( struct __frame_epm_ept_inq_object *__frame )
{



}

void __RPC_STUB epm_ept_inq_object( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_inq_object __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_inq_object );
    __frame->ept_object = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[106]);


            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->ept_object = &__frame->_W0;
        __frame->status = &__frame->_W1;
        __frame->_W1 = 0;

        ept_inq_object(
            __frame->h,
            __frame->ept_object,
            __frame->status);
        __frame->_StubMsg.BufferLength = 28;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ept_object,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_inq_object( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_mgmt_delete
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    boolean32 object_speced;
    uuid_p_t object;
    twr_p_t tower;
    error_status_t _W0;
    error_status_t * status;
};

static void __finally_epm_ept_mgmt_delete( struct __frame_epm_ept_mgmt_delete *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->tower,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);


    NdrFullPointerXlatFree(__frame->_StubMsg.FullPtrXlatTables);

}

void __RPC_STUB epm_ept_mgmt_delete( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_mgmt_delete __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_mgmt_delete );
    __frame->object = 0;
    __frame->tower = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            __frame->_StubMsg.FullPtrXlatTables = NdrFullPointerXlatInit(0,XLAT_SERVER);

            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[118]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(boolean32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->object_speced = *(boolean32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(boolean32);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->object,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->tower,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        __frame->_W0 = 0;

        ept_mgmt_delete(
            __frame->h,
            __frame->object_speced,
            __frame->object,
            __frame->tower,
            __frame->status);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_mgmt_delete( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

#if !defined(__RPC_WIN32__)
#error  Invalid build platform for this stub.
#endif

static const unsigned short epm_FormatStringOffsetTable[] =
{
    0,  /* ept_insert */
    16,  /* ept_delete */
    30,  /* ept_lookup */
    64,  /* ept_map */
    94,  /* ept_lookup_handle_free */
    106,  /* ept_inq_object */
    118,  /* ept_mgmt_delete */
};

static const MIDL_STUB_DESC epm_StubDesc =
{
    (void *)& epm___RpcServerInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        0,
    },
    RundownRoutines,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

static RPC_DISPATCH_FUNCTION epm_table[] =
{
    epm_ept_insert,
    epm_ept_delete,
    epm_ept_lookup,
    epm_ept_map,
    epm_ept_lookup_handle_free,
    epm_ept_inq_object,
    epm_ept_mgmt_delete,
    0
};
static RPC_DISPATCH_TABLE epm_v3_0_DispatchTable =
{
    7,
    epm_table
};

static const SERVER_ROUTINE epm_ServerRoutineTable[] =
{
    (SERVER_ROUTINE)ept_insert,
    (SERVER_ROUTINE)ept_delete,
    (SERVER_ROUTINE)ept_lookup,
    (SERVER_ROUTINE)ept_map,
    (SERVER_ROUTINE)ept_lookup_handle_free,
    (SERVER_ROUTINE)ept_inq_object,
    (SERVER_ROUTINE)ept_mgmt_delete,
};

static const MIDL_SERVER_INFO epm_ServerInfo =
{
    &epm_StubDesc,
    epm_ServerRoutineTable,
    __MIDL_ProcFormatString.Format,
    epm_FormatStringOffsetTable,
    0,
    0,
    0,
    0
};

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 2 (parameter num_ents) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 4 (parameter entries) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x40),	/* type offset = 64 */
/* 8 (parameter replace) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 10 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x52),	/* type offset = 82 */
/* 14 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 16 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 18 (parameter num_ents) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 20 (parameter entries) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x56),	/* type offset = 86 */
/* 24 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x68),	/* type offset = 104 */
/* 28 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 30 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 32 (parameter inquiry_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter object) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6c),	/* type offset = 108 */
/* 38 (parameter interface_id) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7c),	/* type offset = 124 */
/* 42 (parameter vers_option) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 44 (parameter entry_handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x80),	/* type offset = 128 */
/* 48 (parameter max_ents) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 50 (parameter num_ents) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x88),	/* type offset = 136 */
/* 54 (parameter entries) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8c),	/* type offset = 140 */
/* 58 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9e),	/* type offset = 158 */
/* 62 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 64 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 66 (parameter object) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa2),	/* type offset = 162 */
/* 70 (parameter map_tower) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa6),	/* type offset = 166 */
/* 74 (parameter entry_handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xaa),	/* type offset = 170 */
/* 78 (parameter max_towers) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 80 (parameter num_towers) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb2),	/* type offset = 178 */
/* 84 (parameter towers) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 88 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xde),	/* type offset = 222 */
/* 92 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 94 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 96 (parameter entry_handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xe2),	/* type offset = 226 */
/* 100 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xea),	/* type offset = 234 */
/* 104 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 106 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 108 (parameter ept_object) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xee),	/* type offset = 238 */
/* 112 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf2),	/* type offset = 242 */
/* 116 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 118 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 120 (parameter object_speced) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 122 (parameter object) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf6),	/* type offset = 246 */
/* 126 (parameter tower) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfa),	/* type offset = 250 */
/* 130 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xfe),	/* type offset = 254 */
/* 134 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 8 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2) */
        0x5b,	/* FC_END */
/* 20 (byte[]) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x9,	/* Corr desc: field tower_length, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 30 (twr_t) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xfff2),	/* Offset= -14 (20) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 38 */
        0x26,	/* FC_CSTRING */
        0x5c,	/* FC_PAD */
        NdrFcShort(0x40),	/* 64 */
/* 42 (ept_entry_t) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x54),	/* 84 */
        NdrFcShort(0x0),
        NdrFcShort(0xc),	/* Offset= 12 (60) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd4),	/* Offset= -44 (8) */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (38) */
        0x5b,	/* FC_END */
/* 60 (twr_t *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (30) */
/* 64 (ept_entry_t[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter num_ents, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (42) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 82 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 86 (ept_entry_t[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter num_ents, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffc6),	/* Offset= -58 (42) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 104 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 108 (uuid_p_t) */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff9a),	/* Offset= -102 (8) */
/* 112 (rpc_if_id_t) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff92),	/* Offset= -110 (8) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 124 (rpc_if_id_p_t) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (112) */
/* 128 (ept_lookup_handle_t *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (132) */
/* 132 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 136 (unsigned32 *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 140 (ept_entry_t[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter max_ents, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x29,	/* Corr desc: parameter num_ents, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x1c),	/* offset = 28 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff90),	/* Offset= -112 (42) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 158 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 162 (uuid_p_t) */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff64),	/* Offset= -156 (8) */
/* 166 (twr_p_t) */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff76),	/* Offset= -138 (30) */
/* 170 (ept_lookup_handle_t *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (174) */
/* 174 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 178 (unsigned32 *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 182 (twr_p_t *) */
        0x1c,	/* FC_CVARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter max_towers, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x29,	/* Corr desc: parameter num_towers, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x14),	/* offset = 20 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x4a, /* FC_VARIABLE_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff4c),	/* Offset= -180 (30) */
        0x5b,	/* FC_END */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff47),	/* Offset= -185 (30) */
        0x5b,	/* FC_END */
/* 218 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffda),	/* Offset= -38 (182) */
/* 222 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 226 (ept_lookup_handle_t *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (230) */
/* 230 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 234 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 238 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff18),	/* Offset= -232 (8) */
/* 242 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 246 (uuid_p_t) */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff10),	/* Offset= -240 (8) */
/* 250 (twr_p_t) */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff22),	/* Offset= -222 (30) */
/* 254 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
        0x0
    }
};


#else /* _WIN64 */

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __server_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static int __server_filter( struct __server_frame *__frame )
{
    return (__frame->code == STATUS_ACCESS_VIOLATION) ||
           (__frame->code == STATUS_DATATYPE_MISALIGNMENT) ||
           (__frame->code == RPC_X_BAD_STUB_DATA) ||
           (__frame->code == RPC_S_INVALID_BOUND);
}

#define TYPE_FORMAT_STRING_SIZE 241
#define PROC_FORMAT_STRING_SIZE 137

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const NDR_RUNDOWN RundownRoutines[] =
{
    ept_lookup_handle_t_rundown
};

/*****************************************************************************
 * epm interface
 */

static RPC_DISPATCH_TABLE epm_v3_0_DispatchTable;
static const MIDL_SERVER_INFO epm_ServerInfo;

static const RPC_SERVER_INTERFACE epm___RpcServerInterface =
{
    sizeof(RPC_SERVER_INTERFACE),
    {{0xe1af8308,0x5d1f,0x11c9,{0x91,0xa4,0x08,0x00,0x2b,0x14,0xa0,0xfa}},{3,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    &epm_v3_0_DispatchTable,
    0,
    0,
    0,
    &epm_ServerInfo,
    0,
};
RPC_IF_HANDLE epm_v3_0_s_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& epm___RpcServerInterface;

static const MIDL_STUB_DESC epm_StubDesc;

struct __frame_epm_ept_insert
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    unsigned32 num_ents;
    ept_entry_t (*entries)[];
    boolean32 replace;
    error_status_t _W0;
    error_status_t * status;
};

static void __finally_epm_ept_insert( struct __frame_epm_ept_insert *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->num_ents;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->entries,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[64]);
    if (__frame->entries)
        __frame->_StubMsg.pfnFree(__frame->entries);



}

void __RPC_STUB epm_ept_insert( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_insert __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_insert );
    __frame->entries = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->num_ents = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->entries,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[64],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(boolean32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->replace = *(boolean32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(boolean32);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        __frame->_W0 = 0;

        ept_insert(
            __frame->h,
            __frame->num_ents,
            *__frame->entries,
            __frame->replace,
            __frame->status);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_insert( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_delete
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    unsigned32 num_ents;
    ept_entry_t (*entries)[];
    error_status_t _W0;
    error_status_t * status;
};

static void __finally_epm_ept_delete( struct __frame_epm_ept_delete *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->num_ents;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->entries,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[86]);
    if (__frame->entries)
        __frame->_StubMsg.pfnFree(__frame->entries);


}

void __RPC_STUB epm_ept_delete( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_delete __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_delete );
    __frame->entries = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[16]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->num_ents = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->entries,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[86],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        __frame->_W0 = 0;

        ept_delete(
            __frame->h,
            __frame->num_ents,
            *__frame->entries,
            __frame->status);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_delete( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_lookup
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    unsigned32 inquiry_type;
    uuid_p_t object;
    rpc_if_id_p_t interface_id;
    unsigned32 vers_option;
    NDR_SCONTEXT entry_handle;
    unsigned32 max_ents;
    unsigned32 _W0;
    unsigned32 * num_ents;
    ept_entry_t (*entries)[];
    error_status_t _W1;
    error_status_t * status;
};

static void __finally_epm_ept_lookup( struct __frame_epm_ept_lookup *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[228]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->interface_id,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[124]);





    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_ents;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_ents;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->entries,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);
    if (__frame->entries)
        __frame->_StubMsg.pfnFree(__frame->entries);


    NdrFullPointerXlatFree(__frame->_StubMsg.FullPtrXlatTables);

}

void __RPC_STUB epm_ept_lookup( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_lookup __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_lookup );
    __frame->object = 0;
    __frame->interface_id = 0;
    __frame->entry_handle = 0;
    __frame->num_ents = 0;
    __frame->entries = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            __frame->_StubMsg.FullPtrXlatTables = NdrFullPointerXlatInit(0,XLAT_SERVER);

            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[30]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->inquiry_type = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->object,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[228],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->interface_id,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[124],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->vers_option = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            __frame->entry_handle = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[128]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->max_ents = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->num_ents = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->entries = NdrAllocate(&__frame->_StubMsg, __frame->max_ents * 88);
        memset(__frame->entries, 0, __frame->max_ents * 88);
        __frame->status = &__frame->_W1;
        __frame->_W1 = 0;

        ept_lookup(
            __frame->h,
            __frame->inquiry_type,
            __frame->object,
            __frame->interface_id,
            __frame->vers_option,
            (ept_lookup_handle_t *)NDRSContextValue(__frame->entry_handle),
            __frame->max_ents,
            __frame->num_ents,
            *__frame->entries,
            __frame->status);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_ents;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_ents;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->entries,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->entry_handle,
            (NDR_RUNDOWN)ept_lookup_handle_t_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[128]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(unsigned32 *)__frame->_StubMsg.Buffer = *__frame->num_ents;
        __frame->_StubMsg.Buffer += sizeof(unsigned32);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_ents;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_ents;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->entries,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_lookup( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_map
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    uuid_p_t object;
    twr_p_t map_tower;
    NDR_SCONTEXT entry_handle;
    unsigned32 max_towers;
    unsigned32 _W0;
    unsigned32 * num_towers;
    twr_p_t * towers;
    error_status_t _W1;
    error_status_t * status;
};

static void __finally_epm_ept_map( struct __frame_epm_ept_map *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[228]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->map_tower,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);




    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_towers;

    __frame->_StubMsg.Offset = 0;
    __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_towers;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->towers,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[200]);


    NdrFullPointerXlatFree(__frame->_StubMsg.FullPtrXlatTables);

}

void __RPC_STUB epm_ept_map( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_map __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_map );
    __frame->object = 0;
    __frame->map_tower = 0;
    __frame->entry_handle = 0;
    __frame->num_towers = 0;
    __frame->towers = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            __frame->_StubMsg.FullPtrXlatTables = NdrFullPointerXlatInit(0,XLAT_SERVER);

            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[64]);


            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->object,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[228],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->map_tower,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232],
                0);

            __frame->entry_handle = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(unsigned32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->max_towers = *(unsigned32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(unsigned32);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->num_towers = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->towers = NdrAllocate(&__frame->_StubMsg, __frame->max_towers * 8);
        memset(__frame->towers, 0, __frame->max_towers * 8);
        __frame->status = &__frame->_W1;
        __frame->_W1 = 0;

        ept_map(
            __frame->h,
            __frame->object,
            __frame->map_tower,
            (ept_lookup_handle_t *)NDRSContextValue(__frame->entry_handle),
            __frame->max_towers,
            __frame->num_towers,
            __frame->towers,
            __frame->status);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_towers;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_towers;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->towers,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[182]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->entry_handle,
            (NDR_RUNDOWN)ept_lookup_handle_t_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(unsigned32 *)__frame->_StubMsg.Buffer = *__frame->num_towers;
        __frame->_StubMsg.Buffer += sizeof(unsigned32);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->max_towers;

        __frame->_StubMsg.Offset = 0;
        __frame->_StubMsg.ActualCount = (ULONG_PTR)*__frame->num_towers;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->towers,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[182]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_map( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_lookup_handle_free
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    NDR_SCONTEXT entry_handle;
    error_status_t _W0;
    error_status_t * status;
};

static void __finally_epm_ept_lookup_handle_free( struct __frame_epm_ept_lookup_handle_free *__frame )
{



}

void __RPC_STUB epm_ept_lookup_handle_free( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_lookup_handle_free __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_lookup_handle_free );
    __frame->entry_handle = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[94]);


            __frame->entry_handle = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        __frame->_W0 = 0;

        ept_lookup_handle_free(
            __frame->h,
            (ept_lookup_handle_t *)NDRSContextValue(__frame->entry_handle),
            __frame->status);
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->entry_handle,
            (NDR_RUNDOWN)ept_lookup_handle_t_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[208]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_lookup_handle_free( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_inq_object
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    GUID _W0;
    GUID * ept_object;
    error_status_t _W1;
    error_status_t * status;
};

static void __finally_epm_ept_inq_object( struct __frame_epm_ept_inq_object *__frame )
{



}

void __RPC_STUB epm_ept_inq_object( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_inq_object __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_inq_object );
    __frame->ept_object = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[106]);


            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->ept_object = &__frame->_W0;
        __frame->status = &__frame->_W1;
        __frame->_W1 = 0;

        ept_inq_object(
            __frame->h,
            __frame->ept_object,
            __frame->status);
        __frame->_StubMsg.BufferLength = 28;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ept_object,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_inq_object( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_epm_ept_mgmt_delete
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    handle_t h;
    boolean32 object_speced;
    uuid_p_t object;
    twr_p_t tower;
    error_status_t _W0;
    error_status_t * status;
};

static void __finally_epm_ept_mgmt_delete( struct __frame_epm_ept_mgmt_delete *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->object,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[228]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->tower,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);


    NdrFullPointerXlatFree(__frame->_StubMsg.FullPtrXlatTables);

}

void __RPC_STUB epm_ept_mgmt_delete( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_epm_ept_mgmt_delete __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &epm_StubDesc);

    RpcExceptionInit( __server_filter, __finally_epm_ept_mgmt_delete );
    __frame->object = 0;
    __frame->tower = 0;
    __frame->status = 0;

    __frame->h = _pRpcMessage->Handle;

    RpcTryFinally
    {
        RpcTryExcept
        {
            __frame->_StubMsg.FullPtrXlatTables = NdrFullPointerXlatInit(0,XLAT_SERVER);

            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[118]);


            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(boolean32) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->object_speced = *(boolean32 *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(boolean32);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->object,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[228],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->tower,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        __frame->_W0 = 0;

        ept_mgmt_delete(
            __frame->h,
            __frame->object_speced,
            __frame->object,
            __frame->tower,
            __frame->status);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(error_status_t *)__frame->_StubMsg.Buffer = *__frame->status;
        __frame->_StubMsg.Buffer += sizeof(error_status_t);

    }
    RpcFinally
    {
        __finally_epm_ept_mgmt_delete( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

#if !defined(__RPC_WIN64__)
#error  Invalid build platform for this stub.
#endif

static const unsigned short epm_FormatStringOffsetTable[] =
{
    0,  /* ept_insert */
    16,  /* ept_delete */
    30,  /* ept_lookup */
    64,  /* ept_map */
    94,  /* ept_lookup_handle_free */
    106,  /* ept_inq_object */
    118,  /* ept_mgmt_delete */
};

static const MIDL_STUB_DESC epm_StubDesc =
{
    (void *)& epm___RpcServerInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        0,
    },
    RundownRoutines,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

static RPC_DISPATCH_FUNCTION epm_table[] =
{
    epm_ept_insert,
    epm_ept_delete,
    epm_ept_lookup,
    epm_ept_map,
    epm_ept_lookup_handle_free,
    epm_ept_inq_object,
    epm_ept_mgmt_delete,
    0
};
static RPC_DISPATCH_TABLE epm_v3_0_DispatchTable =
{
    7,
    epm_table
};

static const SERVER_ROUTINE epm_ServerRoutineTable[] =
{
    (SERVER_ROUTINE)ept_insert,
    (SERVER_ROUTINE)ept_delete,
    (SERVER_ROUTINE)ept_lookup,
    (SERVER_ROUTINE)ept_map,
    (SERVER_ROUTINE)ept_lookup_handle_free,
    (SERVER_ROUTINE)ept_inq_object,
    (SERVER_ROUTINE)ept_mgmt_delete,
};

static const MIDL_SERVER_INFO epm_ServerInfo =
{
    &epm_StubDesc,
    epm_ServerRoutineTable,
    __MIDL_ProcFormatString.Format,
    epm_FormatStringOffsetTable,
    0,
    0,
    0,
    0
};

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 2 (parameter num_ents) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 4 (parameter entries) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x40),	/* type offset = 64 */
/* 8 (parameter replace) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 10 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x52),	/* type offset = 82 */
/* 14 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 16 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 18 (parameter num_ents) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 20 (parameter entries) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x56),	/* type offset = 86 */
/* 24 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x68),	/* type offset = 104 */
/* 28 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 30 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 32 (parameter inquiry_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter object) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6c),	/* type offset = 108 */
/* 38 (parameter interface_id) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7c),	/* type offset = 124 */
/* 42 (parameter vers_option) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 44 (parameter entry_handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x80),	/* type offset = 128 */
/* 48 (parameter max_ents) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 50 (parameter num_ents) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x88),	/* type offset = 136 */
/* 54 (parameter entries) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8c),	/* type offset = 140 */
/* 58 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9e),	/* type offset = 158 */
/* 62 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 64 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 66 (parameter object) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa2),	/* type offset = 162 */
/* 70 (parameter map_tower) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa6),	/* type offset = 166 */
/* 74 (parameter entry_handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xaa),	/* type offset = 170 */
/* 78 (parameter max_towers) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 80 (parameter num_towers) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb2),	/* type offset = 178 */
/* 84 (parameter towers) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 88 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xcc),	/* type offset = 204 */
/* 92 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 94 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 96 (parameter entry_handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xd0),	/* type offset = 208 */
/* 100 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd8),	/* type offset = 216 */
/* 104 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 106 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 108 (parameter ept_object) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xdc),	/* type offset = 220 */
/* 112 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe0),	/* type offset = 224 */
/* 116 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
/* 118 (parameter h) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0f,    /* FC_IGNORE */
/* 120 (parameter object_speced) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 122 (parameter object) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe4),	/* type offset = 228 */
/* 126 (parameter tower) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe8),	/* type offset = 232 */
/* 130 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xec),	/* type offset = 236 */
/* 134 (void) */
        0x5b,	/* FC_END */
        0x5c,	/* FC_PAD */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 8 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2) */
        0x5b,	/* FC_END */
/* 20 (byte[]) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x9,	/* Corr desc: field tower_length, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 30 (twr_t) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xfff2),	/* Offset= -14 (20) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 38 */
        0x26,	/* FC_CSTRING */
        0x5c,	/* FC_PAD */
        NdrFcShort(0x40),	/* 64 */
/* 42 (ept_entry_t) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0xc),	/* Offset= 12 (60) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd4),	/* Offset= -44 (8) */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (38) */
        0x5b,	/* FC_END */
/* 60 (twr_t *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (30) */
/* 64 (ept_entry_t[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter num_ents, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (42) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 82 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 86 (ept_entry_t[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter num_ents, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffc6),	/* Offset= -58 (42) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 104 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 108 (uuid_p_t) */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff9a),	/* Offset= -102 (8) */
/* 112 (rpc_if_id_t) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff92),	/* Offset= -110 (8) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 124 (rpc_if_id_p_t) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (112) */
/* 128 (ept_lookup_handle_t *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (132) */
/* 132 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 136 (unsigned32 *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 140 (ept_entry_t[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter max_ents, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x30),	/* offset = 48 */
        0x29,	/* Corr desc: parameter num_ents, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x38),	/* offset = 56 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff90),	/* Offset= -112 (42) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 158 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 162 (uuid_p_t) */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff64),	/* Offset= -156 (8) */
/* 166 (twr_p_t) */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff76),	/* Offset= -138 (30) */
/* 170 (ept_lookup_handle_t *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (174) */
/* 174 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 178 (unsigned32 *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 182 (twr_p_t *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter max_towers, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x29,	/* Corr desc: parameter num_towers, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x28),	/* offset = 40 */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff5a),	/* Offset= -166 (30) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 200 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (182) */
/* 204 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 208 (ept_lookup_handle_t *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (212) */
/* 212 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 216 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 220 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff2a),	/* Offset= -214 (8) */
/* 224 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
/* 228 (uuid_p_t) */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff22),	/* Offset= -222 (8) */
/* 232 (twr_p_t) */
        0x14, 0x0,		/* FC_FP */
        NdrFcShort(0xff34),	/* Offset= -204 (30) */
/* 236 (error_status_t *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x10,	/* FC_ERROR_STATUS_T */
        0x5c,	/* FC_PAD */
        0x0
    }
};


#endif /* _WIN64 */
