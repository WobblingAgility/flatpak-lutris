/*** Autogenerated by WIDL 3.8 from svcctl.idl - Do not edit ***/
#include <string.h>

#include "svcctl.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif

#ifndef _WIN64

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __server_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static int __server_filter( struct __server_frame *__frame )
{
    return (__frame->code == STATUS_ACCESS_VIOLATION) ||
           (__frame->code == STATUS_DATATYPE_MISALIGNMENT) ||
           (__frame->code == RPC_X_BAD_STUB_DATA) ||
           (__frame->code == RPC_S_INVALID_BOUND);
}

#define TYPE_FORMAT_STRING_SIZE 2137
#define PROC_FORMAT_STRING_SIZE 1015

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const NDR_RUNDOWN RundownRoutines[] =
{
    SC_RPC_HANDLE_rundown,
    SC_RPC_LOCK_rundown,
    SC_NOTIFY_RPC_HANDLE_rundown
};

/*****************************************************************************
 * svcctl interface
 */

static const unsigned char * const svcctl__RpcProtseqEndpoint[][2] =
{
    { (const unsigned char *)"ncacn_np", (const unsigned char *)"\\pipe\\svcctl" },
};

static RPC_DISPATCH_TABLE svcctl_v2_0_DispatchTable;
static const MIDL_SERVER_INFO svcctl_ServerInfo;

static const RPC_SERVER_INTERFACE svcctl___RpcServerInterface =
{
    sizeof(RPC_SERVER_INTERFACE),
    {{0x367abb81,0x9844,0x35f1,{0xad,0x32,0x98,0xf0,0x38,0x00,0x10,0x03}},{2,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    &svcctl_v2_0_DispatchTable,
    1,
    (PRPC_PROTSEQ_ENDPOINT)svcctl__RpcProtseqEndpoint,
    0,
    &svcctl_ServerInfo,
    0,
};
RPC_IF_HANDLE svcctl_v2_0_s_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& svcctl___RpcServerInterface;

static const MIDL_STUB_DESC svcctl_StubDesc;

struct __frame_svcctl_svcctl_CloseServiceHandle
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT handle;
};

static void __finally_svcctl_svcctl_CloseServiceHandle( struct __frame_svcctl_svcctl_CloseServiceHandle *__frame )
{


}

void __RPC_STUB svcctl_svcctl_CloseServiceHandle( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CloseServiceHandle __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CloseServiceHandle );
    __frame->handle = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

            __frame->handle = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_CloseServiceHandle(
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->handle));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->handle,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CloseServiceHandle( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ControlService
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    DWORD dwControl;
    SERVICE_STATUS _W0;
    SERVICE_STATUS * lpServiceStatus;
};

static void __finally_svcctl_svcctl_ControlService( struct __frame_svcctl_svcctl_ControlService *__frame )
{




}

void __RPC_STUB svcctl_svcctl_ControlService( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ControlService __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ControlService );
    __frame->hService = 0;
    __frame->lpServiceStatus = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[6]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[10]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwControl = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->lpServiceStatus = &__frame->_W0;

        __frame->_RetVal = svcctl_ControlService(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->dwControl,
            __frame->lpServiceStatus);
        __frame->_StubMsg.BufferLength = 40;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpServiceStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ControlService( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_DeleteService
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
};

static void __finally_svcctl_svcctl_DeleteService( struct __frame_svcctl_svcctl_DeleteService *__frame )
{


}

void __RPC_STUB svcctl_svcctl_DeleteService( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_DeleteService __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_DeleteService );
    __frame->hService = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[18]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[30]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_DeleteService(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService));
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_DeleteService( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_LockServiceDatabase
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    NDR_SCONTEXT phLock;
};

static void __finally_svcctl_svcctl_LockServiceDatabase( struct __frame_svcctl_svcctl_LockServiceDatabase *__frame )
{



}

void __RPC_STUB svcctl_svcctl_LockServiceDatabase( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_LockServiceDatabase __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_LockServiceDatabase );
    __frame->hSCManager = 0;
    __frame->phLock = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[24]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[34]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->phLock = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[38]);

        __frame->_RetVal = svcctl_LockServiceDatabase(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            (SC_RPC_LOCK *)NDRSContextValue(__frame->phLock));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->phLock,
            (NDR_RUNDOWN)SC_RPC_LOCK_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[38]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_LockServiceDatabase( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceObjectSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SECURITY_INFORMATION info;
    BYTE * descriptor;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceObjectSecurity( struct __frame_svcctl_svcctl_QueryServiceObjectSecurity *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->descriptor,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[60]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceObjectSecurity( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceObjectSecurity __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceObjectSecurity );
    __frame->service = 0;
    __frame->descriptor = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[34]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(SECURITY_INFORMATION) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info = *(SECURITY_INFORMATION *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(SECURITY_INFORMATION);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->descriptor = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->descriptor, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_QueryServiceObjectSecurity(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info,
            __frame->descriptor,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->descriptor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[50]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->descriptor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[50]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceObjectSecurity( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_SetServiceObjectSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SECURITY_INFORMATION info;
    BYTE * descriptor;
    DWORD buf_size;
};

static void __finally_svcctl_svcctl_SetServiceObjectSecurity( struct __frame_svcctl_svcctl_SetServiceObjectSecurity *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->descriptor,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);



}

void __RPC_STUB svcctl_svcctl_SetServiceObjectSecurity( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_SetServiceObjectSecurity __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_SetServiceObjectSecurity );
    __frame->service = 0;
    __frame->descriptor = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[52]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[68]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(SECURITY_INFORMATION) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info = *(SECURITY_INFORMATION *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(SECURITY_INFORMATION);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->descriptor,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_SetServiceObjectSecurity(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info,
            __frame->descriptor,
            __frame->buf_size);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_SetServiceObjectSecurity( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SERVICE_STATUS _W0;
    SERVICE_STATUS * status;
};

static void __finally_svcctl_svcctl_QueryServiceStatus( struct __frame_svcctl_svcctl_QueryServiceStatus *__frame )
{



}

void __RPC_STUB svcctl_svcctl_QueryServiceStatus( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceStatus __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceStatus );
    __frame->service = 0;
    __frame->status = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[66]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[86]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;

        __frame->_RetVal = svcctl_QueryServiceStatus(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->status);
        __frame->_StubMsg.BufferLength = 40;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceStatus( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_SetServiceStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hServiceStatus;
    LPSERVICE_STATUS lpServiceStatus;
};

static void __finally_svcctl_svcctl_SetServiceStatus( struct __frame_svcctl_svcctl_SetServiceStatus *__frame )
{



}

void __RPC_STUB svcctl_svcctl_SetServiceStatus( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_SetServiceStatus __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_SetServiceStatus );
    __frame->hServiceStatus = 0;
    __frame->lpServiceStatus = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[76]);

            __frame->hServiceStatus = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[94]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[98],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_SetServiceStatus(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hServiceStatus),
            __frame->lpServiceStatus);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_SetServiceStatus( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_UnlockServiceDatabase
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT phLock;
};

static void __finally_svcctl_svcctl_UnlockServiceDatabase( struct __frame_svcctl_svcctl_UnlockServiceDatabase *__frame )
{


}

void __RPC_STUB svcctl_svcctl_UnlockServiceDatabase( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_UnlockServiceDatabase __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_UnlockServiceDatabase );
    __frame->phLock = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[86]);

            __frame->phLock = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[114]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_UnlockServiceDatabase(
            (SC_RPC_LOCK *)NDRSContextValue(__frame->phLock));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->phLock,
            (NDR_RUNDOWN)SC_RPC_LOCK_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[114]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_UnlockServiceDatabase( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_NotifyBootConfigStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    SVCCTL_HANDLEW machinename;
    DWORD boot_acceptable;
};

static void __finally_svcctl_svcctl_NotifyBootConfigStatus( struct __frame_svcctl_svcctl_NotifyBootConfigStatus *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->machinename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122]);



}

void __RPC_STUB svcctl_svcctl_NotifyBootConfigStatus( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_NotifyBootConfigStatus __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_NotifyBootConfigStatus );
    __frame->machinename = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[92]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->machinename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->boot_acceptable = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_NotifyBootConfigStatus(
            __frame->machinename,
            __frame->boot_acceptable);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_NotifyBootConfigStatus( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_SCSetServiceBitsW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_SCSetServiceBitsW( struct __frame_svcctl_svcctl_SCSetServiceBitsW *__frame )
{

}

void __RPC_STUB svcctl_svcctl_SCSetServiceBitsW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_SCSetServiceBitsW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_SCSetServiceBitsW );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_SCSetServiceBitsW();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_SCSetServiceBitsW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ChangeServiceConfigW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPCWSTR lpBinaryPathName;
    LPCWSTR lpLoadOrderGroupKey;
    DWORD * lpdwTagId;
    const BYTE * lpDependencies;
    DWORD dwDependenciesSize;
    LPCWSTR lpServiceStartName;
    const BYTE * lpPassword;
    DWORD dwPasswordSize;
    LPCWSTR lpDisplayName;
};

static void __finally_svcctl_svcctl_ChangeServiceConfigW( struct __frame_svcctl_svcctl_ChangeServiceConfigW *__frame )
{




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpBinaryPathName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpLoadOrderGroupKey,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpdwTagId,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->dwDependenciesSize;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpDependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceStartName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->dwPasswordSize;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpPassword,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpDisplayName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);


}

void __RPC_STUB svcctl_svcctl_ChangeServiceConfigW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ChangeServiceConfigW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ChangeServiceConfigW );
    __frame->hService = 0;
    __frame->lpBinaryPathName = 0;
    __frame->lpLoadOrderGroupKey = 0;
    __frame->lpdwTagId = 0;
    __frame->lpDependencies = 0;
    __frame->lpServiceStartName = 0;
    __frame->lpPassword = 0;
    __frame->lpDisplayName = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[102]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[126]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwServiceType = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwStartType = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwErrorControl = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpBinaryPathName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpLoadOrderGroupKey,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpdwTagId,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpDependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwDependenciesSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceStartName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpPassword,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwPasswordSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpDisplayName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_ChangeServiceConfigW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->dwServiceType,
            __frame->dwStartType,
            __frame->dwErrorControl,
            __frame->lpBinaryPathName,
            __frame->lpLoadOrderGroupKey,
            __frame->lpdwTagId,
            __frame->lpDependencies,
            __frame->dwDependenciesSize,
            __frame->lpServiceStartName,
            __frame->lpPassword,
            __frame->dwPasswordSize,
            __frame->lpDisplayName);
        __frame->_StubMsg.BufferLength = 24;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ChangeServiceConfigW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_CreateServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCWSTR lpServiceName;
    LPCWSTR lpDisplayName;
    DWORD dwDesiredAccess;
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPCWSTR lpBinaryPathName;
    LPCWSTR lpLoadOrderGroup;
    DWORD * lpdwTagId;
    const BYTE * lpDependencies;
    DWORD dwDependenciesSize;
    LPCWSTR lpServiceStartName;
    const BYTE * lpPassword;
    DWORD dwPasswordSize;
    NDR_SCONTEXT phService;
};

static void __finally_svcctl_svcctl_CreateServiceW( struct __frame_svcctl_svcctl_CreateServiceW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[182]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpDisplayName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpBinaryPathName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[190]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpLoadOrderGroup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpdwTagId,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->dwDependenciesSize;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpDependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[212]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceStartName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->dwPasswordSize;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpPassword,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);




}

void __RPC_STUB svcctl_svcctl_CreateServiceW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CreateServiceW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CreateServiceW );
    __frame->hSCManager = 0;
    __frame->lpServiceName = 0;
    __frame->lpDisplayName = 0;
    __frame->lpBinaryPathName = 0;
    __frame->lpLoadOrderGroup = 0;
    __frame->lpdwTagId = 0;
    __frame->lpDependencies = 0;
    __frame->lpServiceStartName = 0;
    __frame->lpPassword = 0;
    __frame->phService = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[146]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[178]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[184],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpDisplayName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwDesiredAccess = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwServiceType = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwStartType = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwErrorControl = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpBinaryPathName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpLoadOrderGroup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpdwTagId,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpDependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[212],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwDependenciesSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceStartName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpPassword,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwPasswordSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->phService = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234]);

        __frame->_RetVal = svcctl_CreateServiceW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->lpServiceName,
            __frame->lpDisplayName,
            __frame->dwDesiredAccess,
            __frame->dwServiceType,
            __frame->dwStartType,
            __frame->dwErrorControl,
            __frame->lpBinaryPathName,
            __frame->lpLoadOrderGroup,
            __frame->lpdwTagId,
            __frame->lpDependencies,
            __frame->dwDependenciesSize,
            __frame->lpServiceStartName,
            __frame->lpPassword,
            __frame->dwPasswordSize,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->phService));
        __frame->_StubMsg.BufferLength = 48;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->phService,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CreateServiceW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumDependentServicesW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD state;
    BYTE * services;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
    DWORD _W1;
    DWORD * services_ret;
};

static void __finally_svcctl_svcctl_EnumDependentServicesW( struct __frame_svcctl_svcctl_EnumDependentServicesW *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->services,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[256]);





}

void __RPC_STUB svcctl_svcctl_EnumDependentServicesW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumDependentServicesW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumDependentServicesW );
    __frame->service = 0;
    __frame->services = 0;
    __frame->needed_size = 0;
    __frame->services_ret = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[200]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[242]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->services = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->services, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->services_ret = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumDependentServicesW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->state,
            __frame->services,
            __frame->buf_size,
            __frame->needed_size,
            __frame->services_ret);
        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->services_ret;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumDependentServicesW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumServicesStatusW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hmngr;
    DWORD type;
    DWORD state;
    BYTE * buffer;
    DWORD size;
    DWORD _W0;
    LPDWORD needed;
    DWORD _W1;
    LPDWORD returned;
    LPDWORD resume;
};

static void __finally_svcctl_svcctl_EnumServicesStatusW( struct __frame_svcctl_svcctl_EnumServicesStatusW *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[282]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->resume,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[294]);


}

void __RPC_STUB svcctl_svcctl_EnumServicesStatusW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumServicesStatusW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumServicesStatusW );
    __frame->hmngr = 0;
    __frame->buffer = 0;
    __frame->needed = 0;
    __frame->returned = 0;
    __frame->resume = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[222]);

            __frame->hmngr = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[268]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->resume,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[294],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->size * 1);
        memset(__frame->buffer, 0, __frame->size * 1);
        __frame->needed = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->returned = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumServicesStatusW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hmngr),
            __frame->type,
            __frame->state,
            __frame->buffer,
            __frame->size,
            __frame->needed,
            __frame->returned,
            __frame->resume);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[272]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[272]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->returned;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[294]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumServicesStatusW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_OpenSCManagerW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    MACHINE_HANDLEW MachineName;
    LPCWSTR DatabaseName;
    DWORD dwAccessMask;
    NDR_SCONTEXT handle;
};

static void __finally_svcctl_svcctl_OpenSCManagerW( struct __frame_svcctl_svcctl_OpenSCManagerW *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->MachineName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[298]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->DatabaseName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);




}

void __RPC_STUB svcctl_svcctl_OpenSCManagerW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_OpenSCManagerW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_OpenSCManagerW );
    __frame->MachineName = 0;
    __frame->DatabaseName = 0;
    __frame->handle = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[250]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->MachineName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[298],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->DatabaseName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwAccessMask = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->handle = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[306]);

        __frame->_RetVal = svcctl_OpenSCManagerW(
            __frame->MachineName,
            __frame->DatabaseName,
            __frame->dwAccessMask,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->handle));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->handle,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[306]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_OpenSCManagerW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_OpenServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCWSTR lpServiceName;
    DWORD dwDesiredAccess;
    NDR_SCONTEXT phService;
};

static void __finally_svcctl_svcctl_OpenServiceW( struct __frame_svcctl_svcctl_OpenServiceW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[318]);




}

void __RPC_STUB svcctl_svcctl_OpenServiceW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_OpenServiceW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_OpenServiceW );
    __frame->hSCManager = 0;
    __frame->lpServiceName = 0;
    __frame->phService = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[266]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[314]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[320],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwDesiredAccess = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->phService = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322]);

        __frame->_RetVal = svcctl_OpenServiceW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->lpServiceName,
            __frame->dwDesiredAccess,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->phService));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->phService,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_OpenServiceW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceConfigW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    QUERY_SERVICE_CONFIGW _W0;
    QUERY_SERVICE_CONFIGW * config;
    DWORD buf_size;
    DWORD _W1;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceConfigW( struct __frame_svcctl_svcctl_QueryServiceConfigW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->config,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[422]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceConfigW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceConfigW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceConfigW );
    __frame->hService = 0;
    __frame->config = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[282]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[330]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->config = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->needed_size = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_QueryServiceConfigW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->config,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        NdrSimpleStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceConfigW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceLockStatusW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    QUERY_SERVICE_LOCK_STATUSW _W0;
    QUERY_SERVICE_LOCK_STATUSW * status;
    DWORD buf_size;
    DWORD _W1;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceLockStatusW( struct __frame_svcctl_svcctl_QueryServiceLockStatusW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->status,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[460]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceLockStatusW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceLockStatusW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceLockStatusW );
    __frame->scmanager = 0;
    __frame->status = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[298]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[430]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->needed_size = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_QueryServiceLockStatusW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->status,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        NdrSimpleStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[438]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[438]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceLockStatusW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_StartServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    DWORD dwNumServiceArgs;
    LPCWSTR * lpServiceArgVectors;
};

static void __finally_svcctl_svcctl_StartServiceW( struct __frame_svcctl_svcctl_StartServiceW *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->dwNumServiceArgs;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceArgVectors,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[502]);


}

void __RPC_STUB svcctl_svcctl_StartServiceW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_StartServiceW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_StartServiceW );
    __frame->hService = 0;
    __frame->lpServiceArgVectors = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[314]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[468]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwNumServiceArgs = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceArgVectors,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[502],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_StartServiceW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->dwNumServiceArgs,
            __frame->lpServiceArgVectors);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_StartServiceW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetServiceDisplayNameW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCWSTR lpServiceName;
    WCHAR (*lpBuffer)[];
    DWORD * cchBufSize;
};

static void __finally_svcctl_svcctl_GetServiceDisplayNameW( struct __frame_svcctl_svcctl_GetServiceDisplayNameW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[510]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

    if (__frame->lpBuffer)
        __frame->_StubMsg.pfnFree(__frame->lpBuffer);



}

void __RPC_STUB svcctl_svcctl_GetServiceDisplayNameW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetServiceDisplayNameW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetServiceDisplayNameW );
    __frame->hSCManager = 0;
    __frame->lpServiceName = 0;
    __frame->lpBuffer = 0;
    __frame->cchBufSize = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[326]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[506]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[512],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cchBufSize = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->lpBuffer = NdrAllocate(&__frame->_StubMsg, (*__frame->cchBufSize + 1) * 2);
        memset(__frame->lpBuffer, 0, (*__frame->cchBufSize + 1) * 2);

        __frame->_RetVal = svcctl_GetServiceDisplayNameW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->lpServiceName,
            *__frame->lpBuffer,
            __frame->cchBufSize);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[514]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[514]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->cchBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetServiceDisplayNameW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetServiceKeyNameW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCWSTR lpServiceDisplayName;
    WCHAR (*lpBuffer)[];
    DWORD * cchBufSize;
};

static void __finally_svcctl_svcctl_GetServiceKeyNameW( struct __frame_svcctl_svcctl_GetServiceKeyNameW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceDisplayName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[528]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

    if (__frame->lpBuffer)
        __frame->_StubMsg.pfnFree(__frame->lpBuffer);



}

void __RPC_STUB svcctl_svcctl_GetServiceKeyNameW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetServiceKeyNameW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetServiceKeyNameW );
    __frame->hSCManager = 0;
    __frame->lpServiceDisplayName = 0;
    __frame->lpBuffer = 0;
    __frame->cchBufSize = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[344]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[524]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceDisplayName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[530],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cchBufSize = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->lpBuffer = NdrAllocate(&__frame->_StubMsg, (*__frame->cchBufSize + 1) * 2);
        memset(__frame->lpBuffer, 0, (*__frame->cchBufSize + 1) * 2);

        __frame->_RetVal = svcctl_GetServiceKeyNameW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->lpServiceDisplayName,
            *__frame->lpBuffer,
            __frame->cchBufSize);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[532]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->cchBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetServiceKeyNameW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_SCSetServiceBitsA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_SCSetServiceBitsA( struct __frame_svcctl_svcctl_SCSetServiceBitsA *__frame )
{

}

void __RPC_STUB svcctl_svcctl_SCSetServiceBitsA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_SCSetServiceBitsA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_SCSetServiceBitsA );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_SCSetServiceBitsA();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_SCSetServiceBitsA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ChangeServiceConfigA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD service_type;
    DWORD start_type;
    DWORD error_control;
    LPSTR binarypath;
    LPSTR loadordergroup;
    DWORD * tagid;
    BYTE * dependencies;
    DWORD depend_size;
    LPSTR startname;
    BYTE * password;
    DWORD password_size;
    LPSTR displayname;
};

static void __finally_svcctl_svcctl_ChangeServiceConfigA( struct __frame_svcctl_svcctl_ChangeServiceConfigA *__frame )
{




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->binarypath,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->loadordergroup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->tagid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->depend_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->dependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[568]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->startname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->password_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->password,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[586]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->displayname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970]);


}

void __RPC_STUB svcctl_svcctl_ChangeServiceConfigA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ChangeServiceConfigA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ChangeServiceConfigA );
    __frame->service = 0;
    __frame->binarypath = 0;
    __frame->loadordergroup = 0;
    __frame->tagid = 0;
    __frame->dependencies = 0;
    __frame->startname = 0;
    __frame->password = 0;
    __frame->displayname = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[364]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[542]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->error_control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->binarypath,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->loadordergroup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->tagid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->dependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[568],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->depend_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->startname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->password,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[586],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->password_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->displayname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1970],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_ChangeServiceConfigA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->service_type,
            __frame->start_type,
            __frame->error_control,
            __frame->binarypath,
            __frame->loadordergroup,
            __frame->tagid,
            __frame->dependencies,
            __frame->depend_size,
            __frame->startname,
            __frame->password,
            __frame->password_size,
            __frame->displayname);
        __frame->_StubMsg.BufferLength = 24;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ChangeServiceConfigA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_CreateServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    LPCSTR servicename;
    LPCSTR displayname;
    DWORD desiredaccess;
    DWORD service_type;
    DWORD start_type;
    DWORD error_control;
    LPCSTR binarypath;
    LPCSTR loadordergroup;
    DWORD * tagid;
    const BYTE * dependencies;
    DWORD depend_size;
    LPCSTR startname;
    const BYTE * password;
    DWORD password_size;
    NDR_SCONTEXT service;
};

static void __finally_svcctl_svcctl_CreateServiceA( struct __frame_svcctl_svcctl_CreateServiceA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->servicename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[598]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->displayname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->binarypath,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[606]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->loadordergroup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->tagid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->depend_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->dependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[628]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->startname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->password_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->password,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[646]);




}

void __RPC_STUB svcctl_svcctl_CreateServiceA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CreateServiceA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CreateServiceA );
    __frame->scmanager = 0;
    __frame->servicename = 0;
    __frame->displayname = 0;
    __frame->binarypath = 0;
    __frame->loadordergroup = 0;
    __frame->tagid = 0;
    __frame->dependencies = 0;
    __frame->startname = 0;
    __frame->password = 0;
    __frame->service = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[408]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[594]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->servicename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[600],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->displayname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->desiredaccess = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->error_control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->binarypath,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[608],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->loadordergroup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->tagid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->dependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[628],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->depend_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->startname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->password,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[646],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->password_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->service = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[650]);

        __frame->_RetVal = svcctl_CreateServiceA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->servicename,
            __frame->displayname,
            __frame->desiredaccess,
            __frame->service_type,
            __frame->start_type,
            __frame->error_control,
            __frame->binarypath,
            __frame->loadordergroup,
            __frame->tagid,
            __frame->dependencies,
            __frame->depend_size,
            __frame->startname,
            __frame->password,
            __frame->password_size,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->service));
        __frame->_StubMsg.BufferLength = 48;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614]);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->service,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[650]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CreateServiceA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumDependentServicesA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD state;
    BYTE * services;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
    DWORD _W1;
    DWORD * services_ret;
};

static void __finally_svcctl_svcctl_EnumDependentServicesA( struct __frame_svcctl_svcctl_EnumDependentServicesA *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->services,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[672]);





}

void __RPC_STUB svcctl_svcctl_EnumDependentServicesA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumDependentServicesA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumDependentServicesA );
    __frame->service = 0;
    __frame->services = 0;
    __frame->needed_size = 0;
    __frame->services_ret = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[462]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[658]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->services = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->services, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->services_ret = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumDependentServicesA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->state,
            __frame->services,
            __frame->buf_size,
            __frame->needed_size,
            __frame->services_ret);
        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[662]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[662]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->services_ret;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumDependentServicesA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumServicesStatusA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hmngr;
    DWORD type;
    DWORD state;
    BYTE * buffer;
    DWORD size;
    DWORD _W0;
    DWORD * needed;
    DWORD _W1;
    DWORD * returned;
    DWORD * resume;
};

static void __finally_svcctl_svcctl_EnumServicesStatusA( struct __frame_svcctl_svcctl_EnumServicesStatusA *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[698]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->resume,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[710]);


}

void __RPC_STUB svcctl_svcctl_EnumServicesStatusA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumServicesStatusA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumServicesStatusA );
    __frame->hmngr = 0;
    __frame->buffer = 0;
    __frame->needed = 0;
    __frame->returned = 0;
    __frame->resume = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[484]);

            __frame->hmngr = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[684]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->resume,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[710],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->size * 1);
        memset(__frame->buffer, 0, __frame->size * 1);
        __frame->needed = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->returned = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumServicesStatusA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hmngr),
            __frame->type,
            __frame->state,
            __frame->buffer,
            __frame->size,
            __frame->needed,
            __frame->returned,
            __frame->resume);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[688]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[688]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->returned;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[710]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumServicesStatusA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_OpenSCManagerA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    MACHINE_HANDLEA MachineName;
    LPCSTR DatabaseName;
    DWORD dwAccessMask;
    NDR_SCONTEXT handle;
};

static void __finally_svcctl_svcctl_OpenSCManagerA( struct __frame_svcctl_svcctl_OpenSCManagerA *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->MachineName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[714]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->DatabaseName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);




}

void __RPC_STUB svcctl_svcctl_OpenSCManagerA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_OpenSCManagerA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_OpenSCManagerA );
    __frame->MachineName = 0;
    __frame->DatabaseName = 0;
    __frame->handle = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[512]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->MachineName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[714],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->DatabaseName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwAccessMask = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->handle = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[722]);

        __frame->_RetVal = svcctl_OpenSCManagerA(
            __frame->MachineName,
            __frame->DatabaseName,
            __frame->dwAccessMask,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->handle));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->handle,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[722]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_OpenSCManagerA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_OpenServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCSTR lpServiceName;
    DWORD dwDesiredAccess;
    NDR_SCONTEXT phService;
};

static void __finally_svcctl_svcctl_OpenServiceA( struct __frame_svcctl_svcctl_OpenServiceA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[734]);




}

void __RPC_STUB svcctl_svcctl_OpenServiceA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_OpenServiceA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_OpenServiceA );
    __frame->hSCManager = 0;
    __frame->lpServiceName = 0;
    __frame->phService = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[528]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[730]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[736],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwDesiredAccess = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->phService = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[738]);

        __frame->_RetVal = svcctl_OpenServiceA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->lpServiceName,
            __frame->dwDesiredAccess,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->phService));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->phService,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[738]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_OpenServiceA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceConfigA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    QUERY_SERVICE_CONFIGA _W0;
    QUERY_SERVICE_CONFIGA * config;
    DWORD buf_size;
    DWORD _W1;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceConfigA( struct __frame_svcctl_svcctl_QueryServiceConfigA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->config,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[838]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceConfigA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceConfigA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceConfigA );
    __frame->hService = 0;
    __frame->config = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[544]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[746]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->config = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->needed_size = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_QueryServiceConfigA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->config,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        NdrSimpleStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[770]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[770]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceConfigA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceLockStatusA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    QUERY_SERVICE_LOCK_STATUSA _W0;
    QUERY_SERVICE_LOCK_STATUSA * status;
    DWORD buf_size;
    DWORD _W1;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceLockStatusA( struct __frame_svcctl_svcctl_QueryServiceLockStatusA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->status,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[876]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceLockStatusA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceLockStatusA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceLockStatusA );
    __frame->scmanager = 0;
    __frame->status = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[560]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[846]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->needed_size = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_QueryServiceLockStatusA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->status,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        NdrSimpleStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[854]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceLockStatusA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_StartServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD argc;
    LPCSTR * args;
};

static void __finally_svcctl_svcctl_StartServiceA( struct __frame_svcctl_svcctl_StartServiceA *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->argc;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->args,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[918]);


}

void __RPC_STUB svcctl_svcctl_StartServiceA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_StartServiceA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_StartServiceA );
    __frame->service = 0;
    __frame->args = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[576]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[884]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->argc = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->args,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[918],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_StartServiceA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->argc,
            __frame->args);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_StartServiceA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetServiceDisplayNameA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCSTR servicename;
    CHAR (*buffer)[];
    DWORD * buf_size;
};

static void __finally_svcctl_svcctl_GetServiceDisplayNameA( struct __frame_svcctl_svcctl_GetServiceDisplayNameA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->servicename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[926]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

    if (__frame->buffer)
        __frame->_StubMsg.pfnFree(__frame->buffer);



}

void __RPC_STUB svcctl_svcctl_GetServiceDisplayNameA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetServiceDisplayNameA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetServiceDisplayNameA );
    __frame->hSCManager = 0;
    __frame->servicename = 0;
    __frame->buffer = 0;
    __frame->buf_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[588]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[922]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->servicename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[928],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, (*__frame->buf_size + 1) * 1);
        memset(__frame->buffer, 0, (*__frame->buf_size + 1) * 1);

        __frame->_RetVal = svcctl_GetServiceDisplayNameA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->servicename,
            *__frame->buffer,
            __frame->buf_size);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[930]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[930]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetServiceDisplayNameA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetServiceKeyNameA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCSTR servicename;
    CHAR (*buffer)[];
    DWORD * buf_size;
};

static void __finally_svcctl_svcctl_GetServiceKeyNameA( struct __frame_svcctl_svcctl_GetServiceKeyNameA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->servicename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[944]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

    if (__frame->buffer)
        __frame->_StubMsg.pfnFree(__frame->buffer);



}

void __RPC_STUB svcctl_svcctl_GetServiceKeyNameA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetServiceKeyNameA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetServiceKeyNameA );
    __frame->hSCManager = 0;
    __frame->servicename = 0;
    __frame->buffer = 0;
    __frame->buf_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[606]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[940]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->servicename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[946],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, (*__frame->buf_size + 1) * 1);
        memset(__frame->buffer, 0, (*__frame->buf_size + 1) * 1);

        __frame->_RetVal = svcctl_GetServiceKeyNameA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->servicename,
            *__frame->buffer,
            __frame->buf_size);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[948]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[948]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetServiceKeyNameA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetCurrentGroupStateW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_GetCurrentGroupStateW( struct __frame_svcctl_svcctl_GetCurrentGroupStateW *__frame )
{

}

void __RPC_STUB svcctl_svcctl_GetCurrentGroupStateW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetCurrentGroupStateW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetCurrentGroupStateW );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_GetCurrentGroupStateW();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetCurrentGroupStateW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumServiceGroupW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    DWORD service_type;
    DWORD service_state;
    BYTE * buffer;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
    DWORD _W1;
    DWORD * returned_size;
    DWORD * resume_index;
    LPCWSTR groupname;
};

static void __finally_svcctl_svcctl_EnumServiceGroupW( struct __frame_svcctl_svcctl_EnumServiceGroupW *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[972]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->resume_index,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[984]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->groupname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);


}

void __RPC_STUB svcctl_svcctl_EnumServiceGroupW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumServiceGroupW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumServiceGroupW );
    __frame->scmanager = 0;
    __frame->buffer = 0;
    __frame->needed_size = 0;
    __frame->returned_size = 0;
    __frame->resume_index = 0;
    __frame->groupname = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[626]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[958]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->resume_index,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[984],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->groupname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->buffer, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->returned_size = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumServiceGroupW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->service_type,
            __frame->service_state,
            __frame->buffer,
            __frame->buf_size,
            __frame->needed_size,
            __frame->returned_size,
            __frame->resume_index,
            __frame->groupname);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[962]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[962]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->returned_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[984]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumServiceGroupW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ChangeServiceConfig2A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SC_RPC_CONFIG_INFOA info;
    void *_p_info;
};

static void __finally_svcctl_svcctl_ChangeServiceConfig2A( struct __frame_svcctl_svcctl_ChangeServiceConfig2A *__frame )
{

    NdrComplexStructFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->info,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1240]);


}

void __RPC_STUB svcctl_svcctl_ChangeServiceConfig2A( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ChangeServiceConfig2A __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ChangeServiceConfig2A );
    __frame->service = 0;
    MIDL_memset(&__frame->info, 0, sizeof(__frame->info));
    __frame->_p_info = &__frame->info;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[658]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[992]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->_p_info,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1240],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_ChangeServiceConfig2A(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ChangeServiceConfig2A( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ChangeServiceConfig2W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SC_RPC_CONFIG_INFOW info;
    void *_p_info;
};

static void __finally_svcctl_svcctl_ChangeServiceConfig2W( struct __frame_svcctl_svcctl_ChangeServiceConfig2W *__frame )
{

    NdrComplexStructFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->info,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436]);


}

void __RPC_STUB svcctl_svcctl_ChangeServiceConfig2W( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ChangeServiceConfig2W __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ChangeServiceConfig2W );
    __frame->service = 0;
    MIDL_memset(&__frame->info, 0, sizeof(__frame->info));
    __frame->_p_info = &__frame->info;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[668]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1254]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->_p_info,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_ChangeServiceConfig2W(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ChangeServiceConfig2W( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceConfig2A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD info_level;
    BYTE * buffer;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceConfig2A( struct __frame_svcctl_svcctl_QueryServiceConfig2A *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1464]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceConfig2A( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceConfig2A __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceConfig2A );
    __frame->service = 0;
    __frame->buffer = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[678]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1450]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info_level = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->buffer, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_QueryServiceConfig2A(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info_level,
            __frame->buffer,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceConfig2A( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceConfig2W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    DWORD InfoLevel;
    BYTE (*lpBuffer)[];
    DWORD cbBufSize;
    DWORD _W0;
    LPDWORD pcbBytesNeeded;
};

static void __finally_svcctl_svcctl_QueryServiceConfig2W( struct __frame_svcctl_svcctl_QueryServiceConfig2W *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1476]);
    if (__frame->lpBuffer)
        __frame->_StubMsg.pfnFree(__frame->lpBuffer);




}

void __RPC_STUB svcctl_svcctl_QueryServiceConfig2W( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceConfig2W __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceConfig2W );
    __frame->hService = 0;
    __frame->lpBuffer = 0;
    __frame->pcbBytesNeeded = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[696]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1472]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->InfoLevel = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cbBufSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->lpBuffer = NdrAllocate(&__frame->_StubMsg, __frame->cbBufSize * 1);
        memset(__frame->lpBuffer, 0, __frame->cbBufSize * 1);
        __frame->pcbBytesNeeded = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_QueryServiceConfig2W(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->InfoLevel,
            *__frame->lpBuffer,
            __frame->cbBufSize,
            __frame->pcbBytesNeeded);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1476]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1476]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pcbBytesNeeded;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceConfig2W( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceStatusEx
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    SC_STATUS_TYPE InfoLevel;
    BYTE * lpBuffer;
    DWORD cbBufSize;
    DWORD _W0;
    LPDWORD pcbBytesNeeded;
};

static void __finally_svcctl_svcctl_QueryServiceStatusEx( struct __frame_svcctl_svcctl_QueryServiceStatusEx *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1504]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceStatusEx( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceStatusEx __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceStatusEx );
    __frame->hService = 0;
    __frame->lpBuffer = 0;
    __frame->pcbBytesNeeded = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[714]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1490]);

            NdrSimpleTypeUnmarshall(
                &__frame->_StubMsg,
                (unsigned char *)&__frame->InfoLevel,
                0x0d /* FC_ENUM16 */);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cbBufSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->lpBuffer = NdrAllocate(&__frame->_StubMsg, __frame->cbBufSize * 1);
        memset(__frame->lpBuffer, 0, __frame->cbBufSize * 1);
        __frame->pcbBytesNeeded = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_QueryServiceStatusEx(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->InfoLevel,
            __frame->lpBuffer,
            __frame->cbBufSize,
            __frame->pcbBytesNeeded);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1494]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1494]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pcbBytesNeeded;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceStatusEx( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumServicesStatusExA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    SC_ENUM_TYPE info_level;
    DWORD service_type;
    DWORD service_state;
    BYTE * buffer;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
    DWORD _W1;
    DWORD * services_count;
    DWORD * resume_index;
    LPCSTR groupname;
};

static void __finally_svcctl_svcctl_EnumServicesStatusExA( struct __frame_svcctl_svcctl_EnumServicesStatusExA *__frame )
{




    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1526]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->resume_index,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1538]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->groupname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);


}

void __RPC_STUB svcctl_svcctl_EnumServicesStatusExA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumServicesStatusExA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumServicesStatusExA );
    __frame->scmanager = 0;
    __frame->buffer = 0;
    __frame->needed_size = 0;
    __frame->services_count = 0;
    __frame->resume_index = 0;
    __frame->groupname = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[732]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1512]);

            NdrSimpleTypeUnmarshall(
                &__frame->_StubMsg,
                (unsigned char *)&__frame->info_level,
                0x0d /* FC_ENUM16 */);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->resume_index,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1538],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->groupname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->buffer, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->services_count = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumServicesStatusExA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->info_level,
            __frame->service_type,
            __frame->service_state,
            __frame->buffer,
            __frame->buf_size,
            __frame->needed_size,
            __frame->services_count,
            __frame->resume_index,
            __frame->groupname);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1516]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1516]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->services_count;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1538]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumServicesStatusExA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumServicesStatusExW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    SC_ENUM_TYPE info_level;
    DWORD service_type;
    DWORD service_state;
    BYTE * buffer;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
    DWORD _W1;
    DWORD * services_count;
    DWORD * resume_index;
    LPCWSTR groupname;
};

static void __finally_svcctl_svcctl_EnumServicesStatusExW( struct __frame_svcctl_svcctl_EnumServicesStatusExW *__frame )
{




    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1560]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->resume_index,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1572]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->groupname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);


}

void __RPC_STUB svcctl_svcctl_EnumServicesStatusExW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumServicesStatusExW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumServicesStatusExW );
    __frame->scmanager = 0;
    __frame->buffer = 0;
    __frame->needed_size = 0;
    __frame->services_count = 0;
    __frame->resume_index = 0;
    __frame->groupname = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[766]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1546]);

            NdrSimpleTypeUnmarshall(
                &__frame->_StubMsg,
                (unsigned char *)&__frame->info_level,
                0x0d /* FC_ENUM16 */);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->resume_index,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1572],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->groupname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->buffer, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->services_count = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumServicesStatusExW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->info_level,
            __frame->service_type,
            __frame->service_state,
            __frame->buffer,
            __frame->buf_size,
            __frame->needed_size,
            __frame->services_count,
            __frame->resume_index,
            __frame->groupname);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->services_count;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1572]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumServicesStatusExW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown43
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown43( struct __frame_svcctl_svcctl_unknown43 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown43( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown43 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown43 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown43();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown43( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_CreateServiceWOW64A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    LPCSTR servicename;
    LPCSTR displayname;
    DWORD accessmask;
    DWORD service_type;
    DWORD start_type;
    DWORD error_control;
    LPCSTR imagepath;
    LPCSTR loadordergroup;
    DWORD * tagid;
    const BYTE * dependencies;
    DWORD depend_size;
    LPCSTR start_name;
    const BYTE * password;
    DWORD password_size;
    NDR_SCONTEXT service;
};

static void __finally_svcctl_svcctl_CreateServiceWOW64A( struct __frame_svcctl_svcctl_CreateServiceWOW64A *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->servicename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1584]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->displayname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->imagepath,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1592]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->loadordergroup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->tagid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1600]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->depend_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->dependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1614]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->start_name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->password_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->password,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1632]);




}

void __RPC_STUB svcctl_svcctl_CreateServiceWOW64A( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CreateServiceWOW64A __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CreateServiceWOW64A );
    __frame->scmanager = 0;
    __frame->servicename = 0;
    __frame->displayname = 0;
    __frame->imagepath = 0;
    __frame->loadordergroup = 0;
    __frame->tagid = 0;
    __frame->dependencies = 0;
    __frame->start_name = 0;
    __frame->password = 0;
    __frame->service = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[802]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1580]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->servicename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1586],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->displayname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->accessmask = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->error_control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->imagepath,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1594],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->loadordergroup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->tagid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1600],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->dependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1614],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->depend_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->start_name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1618],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->password,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1632],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->password_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->service = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1636]);

        __frame->_RetVal = svcctl_CreateServiceWOW64A(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->servicename,
            __frame->displayname,
            __frame->accessmask,
            __frame->service_type,
            __frame->start_type,
            __frame->error_control,
            __frame->imagepath,
            __frame->loadordergroup,
            __frame->tagid,
            __frame->dependencies,
            __frame->depend_size,
            __frame->start_name,
            __frame->password,
            __frame->password_size,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->service));
        __frame->_StubMsg.BufferLength = 48;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1600]);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->service,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1636]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CreateServiceWOW64A( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_CreateServiceWOW64W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    LPCWSTR servicename;
    LPCWSTR displayname;
    DWORD accessmask;
    DWORD service_type;
    DWORD start_type;
    DWORD error_control;
    LPCWSTR imagepath;
    LPCWSTR loadordergroup;
    DWORD * tagid;
    const BYTE * dependencies;
    DWORD depend_size;
    LPCWSTR start_name;
    const BYTE * password;
    DWORD password_size;
    NDR_SCONTEXT service;
};

static void __finally_svcctl_svcctl_CreateServiceWOW64W( struct __frame_svcctl_svcctl_CreateServiceWOW64W *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->servicename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1648]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->displayname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->imagepath,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1656]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->loadordergroup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->tagid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1664]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->depend_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->dependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1678]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->start_name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->password_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->password,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1696]);




}

void __RPC_STUB svcctl_svcctl_CreateServiceWOW64W( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CreateServiceWOW64W __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CreateServiceWOW64W );
    __frame->scmanager = 0;
    __frame->servicename = 0;
    __frame->displayname = 0;
    __frame->imagepath = 0;
    __frame->loadordergroup = 0;
    __frame->tagid = 0;
    __frame->dependencies = 0;
    __frame->start_name = 0;
    __frame->password = 0;
    __frame->service = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[856]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1644]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->servicename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1650],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->displayname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->accessmask = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->error_control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->imagepath,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1658],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->loadordergroup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->tagid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1664],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->dependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1678],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->depend_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->start_name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1682],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->password,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1696],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->password_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->service = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1700]);

        __frame->_RetVal = svcctl_CreateServiceWOW64W(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->servicename,
            __frame->displayname,
            __frame->accessmask,
            __frame->service_type,
            __frame->start_type,
            __frame->error_control,
            __frame->imagepath,
            __frame->loadordergroup,
            __frame->tagid,
            __frame->dependencies,
            __frame->depend_size,
            __frame->start_name,
            __frame->password,
            __frame->password_size,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->service));
        __frame->_StubMsg.BufferLength = 48;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1664]);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->service,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1700]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CreateServiceWOW64W( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown46
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown46( struct __frame_svcctl_svcctl_unknown46 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown46( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown46 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown46 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown46();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown46( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_NotifyServiceStatusChange
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SC_RPC_NOTIFY_PARAMS params;
    void *_p_params;
    GUID * clientprocessguid;
    GUID _W0;
    GUID * scmprocessguid;
    BOOL _W1;
    BOOL * createremotequeue;
    NDR_SCONTEXT notify;
};

static void __finally_svcctl_svcctl_NotifyServiceStatusChange( struct __frame_svcctl_svcctl_NotifyServiceStatusChange *__frame )
{

    NdrComplexStructFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1846]);






}

void __RPC_STUB svcctl_svcctl_NotifyServiceStatusChange( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_NotifyServiceStatusChange __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_NotifyServiceStatusChange );
    __frame->service = 0;
    MIDL_memset(&__frame->params, 0, sizeof(__frame->params));
    __frame->_p_params = &__frame->params;
    __frame->clientprocessguid = 0;
    __frame->scmprocessguid = 0;
    __frame->createremotequeue = 0;
    __frame->notify = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[912]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1708]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->_p_params,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1846],
                0);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->clientprocessguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1866],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->scmprocessguid = &__frame->_W0;
        __frame->createremotequeue = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->notify = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1890]);

        __frame->_RetVal = svcctl_NotifyServiceStatusChange(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->params,
            __frame->clientprocessguid,
            __frame->scmprocessguid,
            __frame->createremotequeue,
            (SC_NOTIFY_RPC_HANDLE *)NDRSContextValue(__frame->notify));
        __frame->_StubMsg.BufferLength = 60;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->scmprocessguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1866]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->createremotequeue;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->notify,
            (NDR_RUNDOWN)SC_NOTIFY_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1890]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_NotifyServiceStatusChange( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetNotifyResults
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT notify;
    SC_RPC_NOTIFY_PARAMS_LIST *_W0;
    SC_RPC_NOTIFY_PARAMS_LIST ** params;
};

static void __finally_svcctl_svcctl_GetNotifyResults( struct __frame_svcctl_svcctl_GetNotifyResults *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1934]);


}

void __RPC_STUB svcctl_svcctl_GetNotifyResults( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetNotifyResults __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetNotifyResults );
    __frame->notify = 0;
    __frame->params = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[938]);

            __frame->notify = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1898]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->params = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_GetNotifyResults(
            (SC_NOTIFY_RPC_HANDLE)*NDRSContextValue(__frame->notify),
            __frame->params);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1934]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1934]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetNotifyResults( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_CloseNotifyHandle
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT notify;
    BOOL _W0;
    BOOL * apc_fired;
};

static void __finally_svcctl_svcctl_CloseNotifyHandle( struct __frame_svcctl_svcctl_CloseNotifyHandle *__frame )
{



}

void __RPC_STUB svcctl_svcctl_CloseNotifyHandle( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CloseNotifyHandle __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CloseNotifyHandle );
    __frame->notify = 0;
    __frame->apc_fired = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[948]);

            __frame->notify = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1938]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->apc_fired = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_CloseNotifyHandle(
            (SC_NOTIFY_RPC_HANDLE *)NDRSContextValue(__frame->notify),
            __frame->apc_fired);
        __frame->_StubMsg.BufferLength = 40;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->notify,
            (NDR_RUNDOWN)SC_NOTIFY_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1938]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->apc_fired;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CloseNotifyHandle( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ControlServiceExA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD control;
    DWORD info_level;
    SC_RPC_SERVICE_CONTROL_IN_PARAMSA * in_params;
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSA _W0;
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSA * out_params;
};

static void __finally_svcctl_svcctl_ControlServiceExA( struct __frame_svcctl_svcctl_ControlServiceExA *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->in_params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2002]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->out_params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2040]);


}

void __RPC_STUB svcctl_svcctl_ControlServiceExA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ControlServiceExA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ControlServiceExA );
    __frame->service = 0;
    __frame->in_params = 0;
    __frame->out_params = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[958]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1950]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info_level = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrNonEncapsulatedUnionUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->in_params,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1982],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->out_params = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        __frame->_RetVal = svcctl_ControlServiceExA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->control,
            __frame->info_level,
            __frame->in_params,
            __frame->out_params);
        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

        NdrNonEncapsulatedUnionBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2020]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

        NdrNonEncapsulatedUnionMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2020]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ControlServiceExA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ControlServiceExW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD control;
    DWORD info_level;
    SC_RPC_SERVICE_CONTROL_IN_PARAMSW * in_params;
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSW _W0;
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSW * out_params;
};

static void __finally_svcctl_svcctl_ControlServiceExW( struct __frame_svcctl_svcctl_ControlServiceExW *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->in_params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2096]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->out_params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2124]);


}

void __RPC_STUB svcctl_svcctl_ControlServiceExW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ControlServiceExW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ControlServiceExW );
    __frame->service = 0;
    __frame->in_params = 0;
    __frame->out_params = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[976]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2044]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info_level = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrNonEncapsulatedUnionUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->in_params,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2076],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->out_params = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        __frame->_RetVal = svcctl_ControlServiceExW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->control,
            __frame->info_level,
            __frame->in_params,
            __frame->out_params);
        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

        NdrNonEncapsulatedUnionBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2104]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

        NdrNonEncapsulatedUnionMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2104]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ControlServiceExW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown52
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown52( struct __frame_svcctl_svcctl_unknown52 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown52( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown52 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown52 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown52();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown52( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown53
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown53( struct __frame_svcctl_svcctl_unknown53 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown53( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown53 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown53 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown53();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown53( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown54
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown54( struct __frame_svcctl_svcctl_unknown54 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown54( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown54 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown54 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown54();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown54( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown55
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown55( struct __frame_svcctl_svcctl_unknown55 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown55( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown55 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown55 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown55();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown55( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceConfigEx
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD info_level;
    SC_RPC_CONFIG_INFOW _W0;
    SC_RPC_CONFIG_INFOW * info;
};

static void __finally_svcctl_svcctl_QueryServiceConfigEx( struct __frame_svcctl_svcctl_QueryServiceConfigEx *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->info,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2132]);


}

void __RPC_STUB svcctl_svcctl_QueryServiceConfigEx( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceConfigEx __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceConfigEx );
    __frame->service = 0;
    __frame->info = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[1002]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2128]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info_level = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->info = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        __frame->_RetVal = svcctl_QueryServiceConfigEx(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info_level,
            __frame->info);
        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1436]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceConfigEx( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

#if !defined(__RPC_WIN32__)
#error  Invalid build platform for this stub.
#endif

static const unsigned short svcctl_FormatStringOffsetTable[] =
{
    0,  /* svcctl_CloseServiceHandle */
    6,  /* svcctl_ControlService */
    18,  /* svcctl_DeleteService */
    24,  /* svcctl_LockServiceDatabase */
    34,  /* svcctl_QueryServiceObjectSecurity */
    52,  /* svcctl_SetServiceObjectSecurity */
    66,  /* svcctl_QueryServiceStatus */
    76,  /* svcctl_SetServiceStatus */
    86,  /* svcctl_UnlockServiceDatabase */
    92,  /* svcctl_NotifyBootConfigStatus */
    100,  /* svcctl_SCSetServiceBitsW */
    102,  /* svcctl_ChangeServiceConfigW */
    146,  /* svcctl_CreateServiceW */
    200,  /* svcctl_EnumDependentServicesW */
    222,  /* svcctl_EnumServicesStatusW */
    250,  /* svcctl_OpenSCManagerW */
    266,  /* svcctl_OpenServiceW */
    282,  /* svcctl_QueryServiceConfigW */
    298,  /* svcctl_QueryServiceLockStatusW */
    314,  /* svcctl_StartServiceW */
    326,  /* svcctl_GetServiceDisplayNameW */
    344,  /* svcctl_GetServiceKeyNameW */
    362,  /* svcctl_SCSetServiceBitsA */
    364,  /* svcctl_ChangeServiceConfigA */
    408,  /* svcctl_CreateServiceA */
    462,  /* svcctl_EnumDependentServicesA */
    484,  /* svcctl_EnumServicesStatusA */
    512,  /* svcctl_OpenSCManagerA */
    528,  /* svcctl_OpenServiceA */
    544,  /* svcctl_QueryServiceConfigA */
    560,  /* svcctl_QueryServiceLockStatusA */
    576,  /* svcctl_StartServiceA */
    588,  /* svcctl_GetServiceDisplayNameA */
    606,  /* svcctl_GetServiceKeyNameA */
    624,  /* svcctl_GetCurrentGroupStateW */
    626,  /* svcctl_EnumServiceGroupW */
    658,  /* svcctl_ChangeServiceConfig2A */
    668,  /* svcctl_ChangeServiceConfig2W */
    678,  /* svcctl_QueryServiceConfig2A */
    696,  /* svcctl_QueryServiceConfig2W */
    714,  /* svcctl_QueryServiceStatusEx */
    732,  /* svcctl_EnumServicesStatusExA */
    766,  /* svcctl_EnumServicesStatusExW */
    800,  /* svcctl_unknown43 */
    802,  /* svcctl_CreateServiceWOW64A */
    856,  /* svcctl_CreateServiceWOW64W */
    910,  /* svcctl_unknown46 */
    912,  /* svcctl_NotifyServiceStatusChange */
    938,  /* svcctl_GetNotifyResults */
    948,  /* svcctl_CloseNotifyHandle */
    958,  /* svcctl_ControlServiceExA */
    976,  /* svcctl_ControlServiceExW */
    994,  /* svcctl_unknown52 */
    996,  /* svcctl_unknown53 */
    998,  /* svcctl_unknown54 */
    1000,  /* svcctl_unknown55 */
    1002,  /* svcctl_QueryServiceConfigEx */
};

static const MIDL_STUB_DESC svcctl_StubDesc =
{
    (void *)& svcctl___RpcServerInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        0,
    },
    RundownRoutines,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

static RPC_DISPATCH_FUNCTION svcctl_table[] =
{
    svcctl_svcctl_CloseServiceHandle,
    svcctl_svcctl_ControlService,
    svcctl_svcctl_DeleteService,
    svcctl_svcctl_LockServiceDatabase,
    svcctl_svcctl_QueryServiceObjectSecurity,
    svcctl_svcctl_SetServiceObjectSecurity,
    svcctl_svcctl_QueryServiceStatus,
    svcctl_svcctl_SetServiceStatus,
    svcctl_svcctl_UnlockServiceDatabase,
    svcctl_svcctl_NotifyBootConfigStatus,
    svcctl_svcctl_SCSetServiceBitsW,
    svcctl_svcctl_ChangeServiceConfigW,
    svcctl_svcctl_CreateServiceW,
    svcctl_svcctl_EnumDependentServicesW,
    svcctl_svcctl_EnumServicesStatusW,
    svcctl_svcctl_OpenSCManagerW,
    svcctl_svcctl_OpenServiceW,
    svcctl_svcctl_QueryServiceConfigW,
    svcctl_svcctl_QueryServiceLockStatusW,
    svcctl_svcctl_StartServiceW,
    svcctl_svcctl_GetServiceDisplayNameW,
    svcctl_svcctl_GetServiceKeyNameW,
    svcctl_svcctl_SCSetServiceBitsA,
    svcctl_svcctl_ChangeServiceConfigA,
    svcctl_svcctl_CreateServiceA,
    svcctl_svcctl_EnumDependentServicesA,
    svcctl_svcctl_EnumServicesStatusA,
    svcctl_svcctl_OpenSCManagerA,
    svcctl_svcctl_OpenServiceA,
    svcctl_svcctl_QueryServiceConfigA,
    svcctl_svcctl_QueryServiceLockStatusA,
    svcctl_svcctl_StartServiceA,
    svcctl_svcctl_GetServiceDisplayNameA,
    svcctl_svcctl_GetServiceKeyNameA,
    svcctl_svcctl_GetCurrentGroupStateW,
    svcctl_svcctl_EnumServiceGroupW,
    svcctl_svcctl_ChangeServiceConfig2A,
    svcctl_svcctl_ChangeServiceConfig2W,
    svcctl_svcctl_QueryServiceConfig2A,
    svcctl_svcctl_QueryServiceConfig2W,
    svcctl_svcctl_QueryServiceStatusEx,
    svcctl_svcctl_EnumServicesStatusExA,
    svcctl_svcctl_EnumServicesStatusExW,
    svcctl_svcctl_unknown43,
    svcctl_svcctl_CreateServiceWOW64A,
    svcctl_svcctl_CreateServiceWOW64W,
    svcctl_svcctl_unknown46,
    svcctl_svcctl_NotifyServiceStatusChange,
    svcctl_svcctl_GetNotifyResults,
    svcctl_svcctl_CloseNotifyHandle,
    svcctl_svcctl_ControlServiceExA,
    svcctl_svcctl_ControlServiceExW,
    svcctl_svcctl_unknown52,
    svcctl_svcctl_unknown53,
    svcctl_svcctl_unknown54,
    svcctl_svcctl_unknown55,
    svcctl_svcctl_QueryServiceConfigEx,
    0
};
static RPC_DISPATCH_TABLE svcctl_v2_0_DispatchTable =
{
    57,
    svcctl_table
};

static const SERVER_ROUTINE svcctl_ServerRoutineTable[] =
{
    (SERVER_ROUTINE)svcctl_CloseServiceHandle,
    (SERVER_ROUTINE)svcctl_ControlService,
    (SERVER_ROUTINE)svcctl_DeleteService,
    (SERVER_ROUTINE)svcctl_LockServiceDatabase,
    (SERVER_ROUTINE)svcctl_QueryServiceObjectSecurity,
    (SERVER_ROUTINE)svcctl_SetServiceObjectSecurity,
    (SERVER_ROUTINE)svcctl_QueryServiceStatus,
    (SERVER_ROUTINE)svcctl_SetServiceStatus,
    (SERVER_ROUTINE)svcctl_UnlockServiceDatabase,
    (SERVER_ROUTINE)svcctl_NotifyBootConfigStatus,
    (SERVER_ROUTINE)svcctl_SCSetServiceBitsW,
    (SERVER_ROUTINE)svcctl_ChangeServiceConfigW,
    (SERVER_ROUTINE)svcctl_CreateServiceW,
    (SERVER_ROUTINE)svcctl_EnumDependentServicesW,
    (SERVER_ROUTINE)svcctl_EnumServicesStatusW,
    (SERVER_ROUTINE)svcctl_OpenSCManagerW,
    (SERVER_ROUTINE)svcctl_OpenServiceW,
    (SERVER_ROUTINE)svcctl_QueryServiceConfigW,
    (SERVER_ROUTINE)svcctl_QueryServiceLockStatusW,
    (SERVER_ROUTINE)svcctl_StartServiceW,
    (SERVER_ROUTINE)svcctl_GetServiceDisplayNameW,
    (SERVER_ROUTINE)svcctl_GetServiceKeyNameW,
    (SERVER_ROUTINE)svcctl_SCSetServiceBitsA,
    (SERVER_ROUTINE)svcctl_ChangeServiceConfigA,
    (SERVER_ROUTINE)svcctl_CreateServiceA,
    (SERVER_ROUTINE)svcctl_EnumDependentServicesA,
    (SERVER_ROUTINE)svcctl_EnumServicesStatusA,
    (SERVER_ROUTINE)svcctl_OpenSCManagerA,
    (SERVER_ROUTINE)svcctl_OpenServiceA,
    (SERVER_ROUTINE)svcctl_QueryServiceConfigA,
    (SERVER_ROUTINE)svcctl_QueryServiceLockStatusA,
    (SERVER_ROUTINE)svcctl_StartServiceA,
    (SERVER_ROUTINE)svcctl_GetServiceDisplayNameA,
    (SERVER_ROUTINE)svcctl_GetServiceKeyNameA,
    (SERVER_ROUTINE)svcctl_GetCurrentGroupStateW,
    (SERVER_ROUTINE)svcctl_EnumServiceGroupW,
    (SERVER_ROUTINE)svcctl_ChangeServiceConfig2A,
    (SERVER_ROUTINE)svcctl_ChangeServiceConfig2W,
    (SERVER_ROUTINE)svcctl_QueryServiceConfig2A,
    (SERVER_ROUTINE)svcctl_QueryServiceConfig2W,
    (SERVER_ROUTINE)svcctl_QueryServiceStatusEx,
    (SERVER_ROUTINE)svcctl_EnumServicesStatusExA,
    (SERVER_ROUTINE)svcctl_EnumServicesStatusExW,
    (SERVER_ROUTINE)svcctl_unknown43,
    (SERVER_ROUTINE)svcctl_CreateServiceWOW64A,
    (SERVER_ROUTINE)svcctl_CreateServiceWOW64W,
    (SERVER_ROUTINE)svcctl_unknown46,
    (SERVER_ROUTINE)svcctl_NotifyServiceStatusChange,
    (SERVER_ROUTINE)svcctl_GetNotifyResults,
    (SERVER_ROUTINE)svcctl_CloseNotifyHandle,
    (SERVER_ROUTINE)svcctl_ControlServiceExA,
    (SERVER_ROUTINE)svcctl_ControlServiceExW,
    (SERVER_ROUTINE)svcctl_unknown52,
    (SERVER_ROUTINE)svcctl_unknown53,
    (SERVER_ROUTINE)svcctl_unknown54,
    (SERVER_ROUTINE)svcctl_unknown55,
    (SERVER_ROUTINE)svcctl_QueryServiceConfigEx,
};

static const MIDL_SERVER_INFO svcctl_ServerInfo =
{
    &svcctl_StubDesc,
    svcctl_ServerRoutineTable,
    __MIDL_ProcFormatString.Format,
    svcctl_FormatStringOffsetTable,
    0,
    0,
    0,
    0
};

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 4 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa),	/* type offset = 10 */
/* 10 (parameter dwControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter lpServiceStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a),	/* type offset = 26 */
/* 16 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 18 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e),	/* type offset = 30 */
/* 22 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22),	/* type offset = 34 */
/* 28 (parameter phLock) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x26),	/* type offset = 38 */
/* 32 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2e),	/* type offset = 46 */
/* 38 (parameter info) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 40 (parameter descriptor) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x32),	/* type offset = 50 */
/* 44 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x40),	/* type offset = 64 */
/* 50 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 52 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x44),	/* type offset = 68 */
/* 56 (parameter info) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 58 (parameter descriptor) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x48),	/* type offset = 72 */
/* 62 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 64 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 66 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x56),	/* type offset = 86 */
/* 70 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5a),	/* type offset = 90 */
/* 74 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter hServiceStatus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e),	/* type offset = 94 */
/* 80 (parameter lpServiceStatus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6e),	/* type offset = 110 */
/* 84 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter phLock) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x72),	/* type offset = 114 */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter machinename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7a),	/* type offset = 122 */
/* 96 (parameter boot_acceptable) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 98 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 102 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7e),	/* type offset = 126 */
/* 106 (parameter dwServiceType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 108 (parameter dwStartType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 110 (parameter dwErrorControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 112 (parameter lpBinaryPathName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x82),	/* type offset = 130 */
/* 116 (parameter lpLoadOrderGroupKey) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x86),	/* type offset = 134 */
/* 120 (parameter lpdwTagId) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x8a),	/* type offset = 138 */
/* 124 (parameter lpDependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x98),	/* type offset = 152 */
/* 128 (parameter dwDependenciesSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter lpServiceStartName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9c),	/* type offset = 156 */
/* 134 (parameter lpPassword) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xaa),	/* type offset = 170 */
/* 138 (parameter dwPasswordSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 140 (parameter lpDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xae),	/* type offset = 174 */
/* 144 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 146 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb2),	/* type offset = 178 */
/* 150 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 154 (parameter lpDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xba),	/* type offset = 186 */
/* 158 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 160 (parameter dwServiceType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 162 (parameter dwStartType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 164 (parameter dwErrorControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 166 (parameter lpBinaryPathName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbe),	/* type offset = 190 */
/* 170 (parameter lpLoadOrderGroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc2),	/* type offset = 194 */
/* 174 (parameter lpdwTagId) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xc6),	/* type offset = 198 */
/* 178 (parameter lpDependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd4),	/* type offset = 212 */
/* 182 (parameter dwDependenciesSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 184 (parameter lpServiceStartName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd8),	/* type offset = 216 */
/* 188 (parameter lpPassword) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe6),	/* type offset = 230 */
/* 192 (parameter dwPasswordSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xea),	/* type offset = 234 */
/* 198 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 200 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf2),	/* type offset = 242 */
/* 204 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 206 (parameter services) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf6),	/* type offset = 246 */
/* 210 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 212 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x104),	/* type offset = 260 */
/* 216 (parameter services_ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x108),	/* type offset = 264 */
/* 220 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 222 (parameter hmngr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10c),	/* type offset = 268 */
/* 226 (parameter type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 228 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 230 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x110),	/* type offset = 272 */
/* 234 (parameter size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 236 (parameter needed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11e),	/* type offset = 286 */
/* 240 (parameter returned) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x122),	/* type offset = 290 */
/* 244 (parameter resume) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x126),	/* type offset = 294 */
/* 248 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 250 (parameter MachineName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12a),	/* type offset = 298 */
/* 254 (parameter DatabaseName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12e),	/* type offset = 302 */
/* 258 (parameter dwAccessMask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter handle) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x132),	/* type offset = 306 */
/* 264 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 266 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13a),	/* type offset = 314 */
/* 270 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13e),	/* type offset = 318 */
/* 274 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 276 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x142),	/* type offset = 322 */
/* 280 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 282 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x14a),	/* type offset = 330 */
/* 286 (parameter config) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a6),	/* type offset = 422 */
/* 290 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 292 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1aa),	/* type offset = 426 */
/* 296 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 298 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1ae),	/* type offset = 430 */
/* 302 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1cc),	/* type offset = 460 */
/* 306 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 308 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d0),	/* type offset = 464 */
/* 312 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 314 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1d4),	/* type offset = 468 */
/* 318 (parameter dwNumServiceArgs) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 320 (parameter lpServiceArgVectors) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f6),	/* type offset = 502 */
/* 324 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 326 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1fa),	/* type offset = 506 */
/* 330 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1fe),	/* type offset = 510 */
/* 334 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x202),	/* type offset = 514 */
/* 338 (parameter cchBufSize) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x208),	/* type offset = 520 */
/* 342 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 344 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x20c),	/* type offset = 524 */
/* 348 (parameter lpServiceDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x210),	/* type offset = 528 */
/* 352 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x214),	/* type offset = 532 */
/* 356 (parameter cchBufSize) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x21a),	/* type offset = 538 */
/* 360 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 362 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 364 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x21e),	/* type offset = 542 */
/* 368 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 370 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 372 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 374 (parameter binarypath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x222),	/* type offset = 546 */
/* 378 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x226),	/* type offset = 550 */
/* 382 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x22a),	/* type offset = 554 */
/* 386 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x238),	/* type offset = 568 */
/* 390 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 392 (parameter startname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x23c),	/* type offset = 572 */
/* 396 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x24a),	/* type offset = 586 */
/* 400 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 402 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x24e),	/* type offset = 590 */
/* 406 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 408 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x252),	/* type offset = 594 */
/* 412 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x256),	/* type offset = 598 */
/* 416 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x25a),	/* type offset = 602 */
/* 420 (parameter desiredaccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 422 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 424 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 426 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 428 (parameter binarypath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x25e),	/* type offset = 606 */
/* 432 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x262),	/* type offset = 610 */
/* 436 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x266),	/* type offset = 614 */
/* 440 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x274),	/* type offset = 628 */
/* 444 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 446 (parameter startname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x278),	/* type offset = 632 */
/* 450 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x286),	/* type offset = 646 */
/* 454 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 456 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x28a),	/* type offset = 650 */
/* 460 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 462 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x292),	/* type offset = 658 */
/* 466 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 468 (parameter services) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x296),	/* type offset = 662 */
/* 472 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 474 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2a4),	/* type offset = 676 */
/* 478 (parameter services_ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2a8),	/* type offset = 680 */
/* 482 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 484 (parameter hmngr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2ac),	/* type offset = 684 */
/* 488 (parameter type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 490 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 492 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2b0),	/* type offset = 688 */
/* 496 (parameter size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 498 (parameter needed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2be),	/* type offset = 702 */
/* 502 (parameter returned) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2c2),	/* type offset = 706 */
/* 506 (parameter resume) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x2c6),	/* type offset = 710 */
/* 510 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 512 (parameter MachineName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2ca),	/* type offset = 714 */
/* 516 (parameter DatabaseName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2ce),	/* type offset = 718 */
/* 520 (parameter dwAccessMask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 522 (parameter handle) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2d2),	/* type offset = 722 */
/* 526 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 528 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2da),	/* type offset = 730 */
/* 532 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2de),	/* type offset = 734 */
/* 536 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 538 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2e2),	/* type offset = 738 */
/* 542 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 544 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2ea),	/* type offset = 746 */
/* 548 (parameter config) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x346),	/* type offset = 838 */
/* 552 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 554 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x34a),	/* type offset = 842 */
/* 558 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 560 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x34e),	/* type offset = 846 */
/* 564 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x36c),	/* type offset = 876 */
/* 568 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 570 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x370),	/* type offset = 880 */
/* 574 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 576 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x374),	/* type offset = 884 */
/* 580 (parameter argc) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 582 (parameter args) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x396),	/* type offset = 918 */
/* 586 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 588 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x39a),	/* type offset = 922 */
/* 592 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x39e),	/* type offset = 926 */
/* 596 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3a2),	/* type offset = 930 */
/* 600 (parameter buf_size) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x3a8),	/* type offset = 936 */
/* 604 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 606 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3ac),	/* type offset = 940 */
/* 610 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3b0),	/* type offset = 944 */
/* 614 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3b4),	/* type offset = 948 */
/* 618 (parameter buf_size) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x3ba),	/* type offset = 954 */
/* 622 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 624 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 626 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3be),	/* type offset = 958 */
/* 630 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 632 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 634 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3c2),	/* type offset = 962 */
/* 638 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 640 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3d0),	/* type offset = 976 */
/* 644 (parameter returned_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x3d4),	/* type offset = 980 */
/* 648 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x3d8),	/* type offset = 984 */
/* 652 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3dc),	/* type offset = 988 */
/* 656 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 658 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x3e0),	/* type offset = 992 */
/* 662 (parameter info) */
        0x4d,    /* FC_IN_PARAM */
        0x02,
        NdrFcShort(0x4d8),	/* type offset = 1240 */
/* 666 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 668 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x4e6),	/* type offset = 1254 */
/* 672 (parameter info) */
        0x4d,    /* FC_IN_PARAM */
        0x02,
        NdrFcShort(0x59c),	/* type offset = 1436 */
/* 676 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 678 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5aa),	/* type offset = 1450 */
/* 682 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 684 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ae),	/* type offset = 1454 */
/* 688 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 690 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5bc),	/* type offset = 1468 */
/* 694 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 696 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5c0),	/* type offset = 1472 */
/* 700 (parameter InfoLevel) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 702 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5c4),	/* type offset = 1476 */
/* 706 (parameter cbBufSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 708 (parameter pcbBytesNeeded) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ce),	/* type offset = 1486 */
/* 712 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 714 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5d2),	/* type offset = 1490 */
/* 718 (parameter InfoLevel) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 720 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5d6),	/* type offset = 1494 */
/* 724 (parameter cbBufSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 726 (parameter pcbBytesNeeded) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5e4),	/* type offset = 1508 */
/* 730 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 732 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e8),	/* type offset = 1512 */
/* 736 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 738 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 740 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 742 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ec),	/* type offset = 1516 */
/* 746 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 748 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5fa),	/* type offset = 1530 */
/* 752 (parameter services_count) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5fe),	/* type offset = 1534 */
/* 756 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x602),	/* type offset = 1538 */
/* 760 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x606),	/* type offset = 1542 */
/* 764 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 766 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x60a),	/* type offset = 1546 */
/* 770 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 772 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 774 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 776 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x60e),	/* type offset = 1550 */
/* 780 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 782 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x61c),	/* type offset = 1564 */
/* 786 (parameter services_count) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x620),	/* type offset = 1568 */
/* 790 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x624),	/* type offset = 1572 */
/* 794 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x628),	/* type offset = 1576 */
/* 798 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 800 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 802 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x62c),	/* type offset = 1580 */
/* 806 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x630),	/* type offset = 1584 */
/* 810 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x634),	/* type offset = 1588 */
/* 814 (parameter accessmask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 816 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 818 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 820 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 822 (parameter imagepath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x638),	/* type offset = 1592 */
/* 826 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x63c),	/* type offset = 1596 */
/* 830 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x640),	/* type offset = 1600 */
/* 834 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x64e),	/* type offset = 1614 */
/* 838 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 840 (parameter start_name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x652),	/* type offset = 1618 */
/* 844 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x660),	/* type offset = 1632 */
/* 848 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 850 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x664),	/* type offset = 1636 */
/* 854 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 856 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x66c),	/* type offset = 1644 */
/* 860 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x670),	/* type offset = 1648 */
/* 864 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x674),	/* type offset = 1652 */
/* 868 (parameter accessmask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 870 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 872 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 874 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 876 (parameter imagepath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x678),	/* type offset = 1656 */
/* 880 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x67c),	/* type offset = 1660 */
/* 884 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x680),	/* type offset = 1664 */
/* 888 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x68e),	/* type offset = 1678 */
/* 892 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 894 (parameter start_name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x692),	/* type offset = 1682 */
/* 898 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6a0),	/* type offset = 1696 */
/* 902 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 904 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6a4),	/* type offset = 1700 */
/* 908 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 910 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 912 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6ac),	/* type offset = 1708 */
/* 916 (parameter params) */
        0x4d,    /* FC_IN_PARAM */
        0x02,
        NdrFcShort(0x736),	/* type offset = 1846 */
/* 920 (parameter clientprocessguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x756),	/* type offset = 1878 */
/* 924 (parameter scmprocessguid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x75a),	/* type offset = 1882 */
/* 928 (parameter createremotequeue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x75e),	/* type offset = 1886 */
/* 932 (parameter notify) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x762),	/* type offset = 1890 */
/* 936 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 938 (parameter notify) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x76a),	/* type offset = 1898 */
/* 942 (parameter params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x78e),	/* type offset = 1934 */
/* 946 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 948 (parameter notify) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x792),	/* type offset = 1938 */
/* 952 (parameter apc_fired) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x79a),	/* type offset = 1946 */
/* 956 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 958 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x79e),	/* type offset = 1950 */
/* 962 (parameter control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 964 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 966 (parameter in_params) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7d2),	/* type offset = 2002 */
/* 970 (parameter out_params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7f8),	/* type offset = 2040 */
/* 974 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 976 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7fc),	/* type offset = 2044 */
/* 980 (parameter control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 982 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 984 (parameter in_params) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x830),	/* type offset = 2096 */
/* 988 (parameter out_params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x84c),	/* type offset = 2124 */
/* 992 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 994 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 996 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 998 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1000 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1002 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x850),	/* type offset = 2128 */
/* 1006 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1008 (parameter info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x854),	/* type offset = 2132 */
/* 1012 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (6) */
/*  6 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 10 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 14 (SERVICE_STATUS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x1c),	/* 28 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 26 (SERVICE_STATUS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff2),	/* Offset= -14 (14) */
/* 30 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 34 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 38 (SC_RPC_LOCK *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (42) */
/* 42 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x1,	/* rundown routine */
        0, /* FIXME: param num */
/* 46 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 50 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 60 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (50) */
/* 64 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 68 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 72 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 82 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (72) */
/* 86 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 90 (SERVICE_STATUS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffb2),	/* Offset= -78 (14) */
/* 94 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 98 (struct _SERVICE_STATUS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x1c),	/* 28 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 110 (LPSERVICE_STATUS) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (98) */
/* 114 (SC_RPC_LOCK *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (118) */
/* 118 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x1,	/* rundown routine */
        0, /* FIXME: param num */
/* 122 (SVCCTL_HANDLEW) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 124 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 126 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 130 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 132 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 134 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 136 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 138 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 142 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwDependenciesSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 152 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (142) */
/* 156 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 158 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 160 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwPasswordSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 170 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (160) */
/* 174 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 176 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 178 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 182 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 184 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 186 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 188 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 190 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 192 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 194 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 196 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 198 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 202 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwDependenciesSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 212 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (202) */
/* 216 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 218 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 220 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwPasswordSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x38),	/* offset = 56 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 230 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (220) */
/* 234 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (238) */
/* 238 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 242 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 246 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 256 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (246) */
/* 260 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 264 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 268 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 272 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 282 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (272) */
/* 286 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 290 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 294 (LPDWORD) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 298 (MACHINE_HANDLEW) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 300 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 302 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 304 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 306 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (310) */
/* 310 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 314 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 318 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 320 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 322 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (326) */
/* 326 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 330 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 334 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 336 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 338 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 340 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 342 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 344 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 346 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 348 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 350 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 352 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 354 (QUERY_SERVICE_CONFIGW) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0xc),	/* Memory offset = 12 */
        NdrFcShort(0xc),	/* Buffer offset = 12 */
/* 366 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 368 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
/* 376 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 378 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x18),	/* Memory offset = 24 */
        NdrFcShort(0x18),	/* Buffer offset = 24 */
/* 386 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 388 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x1c),	/* Memory offset = 28 */
        NdrFcShort(0x1c),	/* Buffer offset = 28 */
/* 396 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 398 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x20),	/* Memory offset = 32 */
        NdrFcShort(0x20),	/* Buffer offset = 32 */
/* 406 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 408 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 422 (QUERY_SERVICE_CONFIGW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffba),	/* Offset= -70 (354) */
/* 426 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 430 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 434 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 436 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 438 (QUERY_SERVICE_LOCK_STATUSW) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 450 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 452 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 460 (QUERY_SERVICE_LOCK_STATUSW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffe8),	/* Offset= -24 (438) */
/* 464 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 468 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 472 (LPCWSTR *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter dwNumServiceArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 494 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 496 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 502 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (472) */
/* 506 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 510 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 512 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 514 */
        0x25,	/* FC_C_WSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceDisplayNameW */
        0x0,
        NdrFcShort(0x0),
/* 520 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 524 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 528 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 530 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 532 */
        0x25,	/* FC_C_WSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceKeyNameW */
        0x0,
        NdrFcShort(0x0),
/* 538 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 542 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 546 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 548 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 550 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 552 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 554 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 558 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 568 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (558) */
/* 572 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 574 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 576 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 586 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (576) */
/* 590 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 592 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 594 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 598 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 600 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 602 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 604 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 606 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 608 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 610 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 612 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 614 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 618 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 628 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (618) */
/* 632 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 634 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 636 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x38),	/* offset = 56 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 646 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (636) */
/* 650 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (654) */
/* 654 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 658 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 662 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 672 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (662) */
/* 676 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 680 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 684 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 688 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 698 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (688) */
/* 702 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 706 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 710 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 714 (MACHINE_HANDLEA) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 716 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 718 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 720 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 722 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (726) */
/* 726 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 730 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 734 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 736 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 738 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (742) */
/* 742 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 746 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 750 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 752 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 754 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 756 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 758 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 760 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 762 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 764 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 766 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 768 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 770 (QUERY_SERVICE_CONFIGA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0xc),	/* Memory offset = 12 */
        NdrFcShort(0xc),	/* Buffer offset = 12 */
/* 782 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 784 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
/* 792 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 794 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x18),	/* Memory offset = 24 */
        NdrFcShort(0x18),	/* Buffer offset = 24 */
/* 802 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 804 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x1c),	/* Memory offset = 28 */
        NdrFcShort(0x1c),	/* Buffer offset = 28 */
/* 812 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 814 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x20),	/* Memory offset = 32 */
        NdrFcShort(0x20),	/* Buffer offset = 32 */
/* 822 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 824 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 838 (QUERY_SERVICE_CONFIGA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffba),	/* Offset= -70 (770) */
/* 842 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 846 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 850 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 852 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 854 (QUERY_SERVICE_LOCK_STATUSA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 866 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 868 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 876 (QUERY_SERVICE_LOCK_STATUSA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffe8),	/* Offset= -24 (854) */
/* 880 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 884 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 888 (LPCSTR *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter argc, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 910 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 912 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 918 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (888) */
/* 922 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 926 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 928 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 930 */
        0x22,	/* FC_C_CSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceDisplayNameA */
        0x0,
        NdrFcShort(0x0),
/* 936 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 940 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 944 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 946 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 948 */
        0x22,	/* FC_C_CSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceKeyNameA */
        0x0,
        NdrFcShort(0x0),
/* 954 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 958 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 962 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 972 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (962) */
/* 976 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 980 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 984 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 988 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 990 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 992 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 996 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 998 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1000 (SERVICE_DESCRIPTIONA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 1012 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1014 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1020 (SERVICE_DESCRIPTIONA *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1000) */
/* 1024 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1026 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1028 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1030 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1032 (SC_ACTION) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1038) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1044 (SC_ACTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cActions, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (1032) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1062 (SERVICE_FAILURE_ACTIONSA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 1074 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1076 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x8),	/* Memory offset = 8 */
        NdrFcShort(0x8),	/* Buffer offset = 8 */
/* 1084 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1086 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffcc),	/* Offset= -52 (1044) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1106 (SERVICE_FAILURE_ACTIONSA *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd2),	/* Offset= -46 (1062) */
/* 1110 (SERVICE_DELAYED_AUTO_START_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1116 (SERVICE_DELAYED_AUTO_START_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1110) */
/* 1120 (SERVICE_FAILURE_ACTIONS_FLAG) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1126 (SERVICE_FAILURE_ACTIONS_FLAG *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1120) */
/* 1130 (SERVICE_SID_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1136 (SERVICE_SID_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1130) */
/* 1140 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbRequiredPrivileges, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1150 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1140) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1170 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1150) */
/* 1174 (SERVICE_PRESHUTDOWN_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1180 (SERVICE_PRESHUTDOWN_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1174) */
/* 1184 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xff54),	/* Offset= -172 (1020) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffa4),	/* Offset= -92 (1106) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffa8),	/* Offset= -88 (1116) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffac),	/* Offset= -84 (1126) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffb0),	/* Offset= -80 (1136) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffcc),	/* Offset= -52 (1170) */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0xffd0),	/* Offset= -48 (1180) */
        NdrFcShort(0xffff),
/* 1232 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffca),	/* Offset= -54 (1184) */
/* 1240 (SC_RPC_CONFIG_INFOA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1246) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (1232) */
        0x5b,	/* FC_END */
/* 1254 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1258 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1260 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1262 (SERVICE_DESCRIPTIONW) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 1274 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1276 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1282 (SERVICE_DESCRIPTIONW *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1262) */
/* 1286 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1288 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1290 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1292 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1294 (SC_ACTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cActions, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfeec),	/* Offset= -276 (1032) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1312 (SERVICE_FAILURE_ACTIONSW) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 1324 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1326 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x8),	/* Memory offset = 8 */
        NdrFcShort(0x8),	/* Buffer offset = 8 */
/* 1334 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1336 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x10),	/* Memory offset = 16 */
        NdrFcShort(0x10),	/* Buffer offset = 16 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffcc),	/* Offset= -52 (1294) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1356 (SERVICE_FAILURE_ACTIONSW *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd2),	/* Offset= -46 (1312) */
/* 1360 (SERVICE_DELAYED_AUTO_START_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff04),	/* Offset= -252 (1110) */
/* 1364 (SERVICE_FAILURE_ACTIONS_FLAG *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff0a),	/* Offset= -246 (1120) */
/* 1368 (SERVICE_SID_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff10),	/* Offset= -240 (1130) */
/* 1372 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff20),	/* Offset= -224 (1150) */
/* 1376 (SERVICE_PRESHUTDOWN_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff34),	/* Offset= -204 (1174) */
/* 1380 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xff96),	/* Offset= -106 (1282) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffda),	/* Offset= -38 (1356) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffd8),	/* Offset= -40 (1360) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffd6),	/* Offset= -42 (1364) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffd4),	/* Offset= -44 (1368) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffd2),	/* Offset= -46 (1372) */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0xffd0),	/* Offset= -48 (1376) */
        NdrFcShort(0xffff),
/* 1428 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffca),	/* Offset= -54 (1380) */
/* 1436 (SC_RPC_CONFIG_INFOW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1442) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (1428) */
        0x5b,	/* FC_END */
/* 1450 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1454 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1464 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1454) */
/* 1468 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1472 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1476 (BYTE[]) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter cbBufSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1486 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1490 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1494 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter cbBufSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1504 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1494) */
/* 1508 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1512 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1516 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1526 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1516) */
/* 1530 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1534 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1538 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1542 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1544 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1546 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1550 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1560 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1550) */
/* 1564 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1568 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1572 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1576 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1578 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1580 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1584 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1586 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1588 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1590 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1592 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1594 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1596 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1598 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1600 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1604 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1614 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1604) */
/* 1618 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1620 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1622 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x38),	/* offset = 56 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1632 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1622) */
/* 1636 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1640) */
/* 1640 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1644 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1648 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1650 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1652 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1654 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1656 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1658 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1660 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1662 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1664 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1668 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x2c),	/* offset = 44 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1678 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1668) */
/* 1682 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1684 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1686 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x38),	/* offset = 56 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1696 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1686) */
/* 1700 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1704) */
/* 1704 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1708 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1712 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1718 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1724 (SERVICE_STATUS_PROCESS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1738 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_1) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x58),	/* 88 */
        0x0b,	/* FC_HYPER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1712) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1718) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe2),	/* Offset= -30 (1724) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1760 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_1 *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1738) */
/* 1764 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1770 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1776 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1778 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1780 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_2) */
        0x16,	/* FC_PSTRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x60),	/* 96 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x5c),	/* Memory offset = 92 */
        NdrFcShort(0x5c),	/* Buffer offset = 92 */
/* 1792 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1794 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x0b,	/* FC_HYPER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdb),	/* Offset= -37 (1764) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdd),	/* Offset= -35 (1770) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffab),	/* Offset= -85 (1724) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1816 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_2 *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffda),	/* Offset= -38 (1780) */
/* 1820 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x2),	/* 2 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffbc),	/* Offset= -68 (1760) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffee),	/* Offset= -18 (1816) */
        NdrFcShort(0xffff),
/* 1838 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffe8),	/* Offset= -24 (1820) */
/* 1846 (SC_RPC_NOTIFY_PARAMS) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1852) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (1838) */
        0x5b,	/* FC_END */
/* 1860 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1866 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1860) */
        0x5b,	/* FC_END */
/* 1878 (GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1866) */
/* 1882 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffee),	/* Offset= -18 (1866) */
/* 1886 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1890 (SC_NOTIFY_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1894) */
/* 1894 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1898 (SC_NOTIFY_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1902 (SC_RPC_NOTIFY_PARAMS[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x9,	/* Corr desc: field cElements, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffba),	/* Offset= -70 (1846) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1920 (SC_RPC_NOTIFY_PARAMS_LIST) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffea),	/* Offset= -22 (1902) */
        NdrFcShort(0x0),	/* Offset= 0 (1926) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1930 (SC_RPC_NOTIFY_PARAMS_LIST *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1920) */
/* 1934 (SC_RPC_NOTIFY_PARAMS_LIST **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1930) */
/* 1938 (SC_NOTIFY_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1942) */
/* 1942 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1946 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1950 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1954 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1956 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1958 (struct _SERVICE_CONTROL_STATUS_REASON_IN_PARAMSA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 1970 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1972 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1978 (PSERVICE_CONTROL_STATUS_REASON_IN_PARAMSA) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1958) */
/* 1982 (SC_RPC_SERVICE_CONTROL_IN_PARAMSA) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcShort(0x2),	/* Offset= 2 (1990) */
/* 1990 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (1978) */
        NdrFcShort(0xffff),
/* 2002 (SC_RPC_SERVICE_CONTROL_IN_PARAMSA *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffea),	/* Offset= -22 (1982) */
/* 2006 (struct _SERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfee0),	/* Offset= -288 (1724) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2016 (PSERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (2006) */
/* 2020 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSA) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcShort(0x2),	/* Offset= 2 (2028) */
/* 2028 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (2016) */
        NdrFcShort(0xffff),
/* 2040 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffea),	/* Offset= -22 (2020) */
/* 2044 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 2048 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2050 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2052 (struct _SERVICE_CONTROL_STATUS_REASON_IN_PARAMSW) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
/* 2064 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2066 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2072 (PSERVICE_CONTROL_STATUS_REASON_IN_PARAMSW) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (2052) */
/* 2076 (SC_RPC_SERVICE_CONTROL_IN_PARAMSW) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcShort(0x2),	/* Offset= 2 (2084) */
/* 2084 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (2072) */
        NdrFcShort(0xffff),
/* 2096 (SC_RPC_SERVICE_CONTROL_IN_PARAMSW *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffea),	/* Offset= -22 (2076) */
/* 2100 (PSERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffa0),	/* Offset= -96 (2006) */
/* 2104 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSW) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcShort(0x2),	/* Offset= 2 (2112) */
/* 2112 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (2100) */
        NdrFcShort(0xffff),
/* 2124 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffea),	/* Offset= -22 (2104) */
/* 2128 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 2132 (SC_RPC_CONFIG_INFOW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfd46),	/* Offset= -698 (1436) */
        0x0
    }
};


#else /* _WIN64 */

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __server_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
};

static int __server_filter( struct __server_frame *__frame )
{
    return (__frame->code == STATUS_ACCESS_VIOLATION) ||
           (__frame->code == STATUS_DATATYPE_MISALIGNMENT) ||
           (__frame->code == RPC_X_BAD_STUB_DATA) ||
           (__frame->code == RPC_S_INVALID_BOUND);
}

#define TYPE_FORMAT_STRING_SIZE 1997
#define PROC_FORMAT_STRING_SIZE 1015

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const NDR_RUNDOWN RundownRoutines[] =
{
    SC_RPC_HANDLE_rundown,
    SC_RPC_LOCK_rundown,
    SC_NOTIFY_RPC_HANDLE_rundown
};

/*****************************************************************************
 * svcctl interface
 */

static const unsigned char * const svcctl__RpcProtseqEndpoint[][2] =
{
    { (const unsigned char *)"ncacn_np", (const unsigned char *)"\\pipe\\svcctl" },
};

static RPC_DISPATCH_TABLE svcctl_v2_0_DispatchTable;
static const MIDL_SERVER_INFO svcctl_ServerInfo;

static const RPC_SERVER_INTERFACE svcctl___RpcServerInterface =
{
    sizeof(RPC_SERVER_INTERFACE),
    {{0x367abb81,0x9844,0x35f1,{0xad,0x32,0x98,0xf0,0x38,0x00,0x10,0x03}},{2,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    &svcctl_v2_0_DispatchTable,
    1,
    (PRPC_PROTSEQ_ENDPOINT)svcctl__RpcProtseqEndpoint,
    0,
    &svcctl_ServerInfo,
    0,
};
RPC_IF_HANDLE svcctl_v2_0_s_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& svcctl___RpcServerInterface;

static const MIDL_STUB_DESC svcctl_StubDesc;

struct __frame_svcctl_svcctl_CloseServiceHandle
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT handle;
};

static void __finally_svcctl_svcctl_CloseServiceHandle( struct __frame_svcctl_svcctl_CloseServiceHandle *__frame )
{


}

void __RPC_STUB svcctl_svcctl_CloseServiceHandle( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CloseServiceHandle __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CloseServiceHandle );
    __frame->handle = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

            __frame->handle = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_CloseServiceHandle(
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->handle));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->handle,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CloseServiceHandle( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ControlService
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    DWORD dwControl;
    SERVICE_STATUS _W0;
    SERVICE_STATUS * lpServiceStatus;
};

static void __finally_svcctl_svcctl_ControlService( struct __frame_svcctl_svcctl_ControlService *__frame )
{




}

void __RPC_STUB svcctl_svcctl_ControlService( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ControlService __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ControlService );
    __frame->hService = 0;
    __frame->lpServiceStatus = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[6]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[10]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwControl = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->lpServiceStatus = &__frame->_W0;

        __frame->_RetVal = svcctl_ControlService(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->dwControl,
            __frame->lpServiceStatus);
        __frame->_StubMsg.BufferLength = 40;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpServiceStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ControlService( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_DeleteService
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
};

static void __finally_svcctl_svcctl_DeleteService( struct __frame_svcctl_svcctl_DeleteService *__frame )
{


}

void __RPC_STUB svcctl_svcctl_DeleteService( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_DeleteService __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_DeleteService );
    __frame->hService = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[18]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[30]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_DeleteService(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService));
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_DeleteService( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_LockServiceDatabase
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    NDR_SCONTEXT phLock;
};

static void __finally_svcctl_svcctl_LockServiceDatabase( struct __frame_svcctl_svcctl_LockServiceDatabase *__frame )
{



}

void __RPC_STUB svcctl_svcctl_LockServiceDatabase( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_LockServiceDatabase __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_LockServiceDatabase );
    __frame->hSCManager = 0;
    __frame->phLock = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[24]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[34]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->phLock = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[38]);

        __frame->_RetVal = svcctl_LockServiceDatabase(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            (SC_RPC_LOCK *)NDRSContextValue(__frame->phLock));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->phLock,
            (NDR_RUNDOWN)SC_RPC_LOCK_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[38]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_LockServiceDatabase( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceObjectSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SECURITY_INFORMATION info;
    BYTE * descriptor;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceObjectSecurity( struct __frame_svcctl_svcctl_QueryServiceObjectSecurity *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->descriptor,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[60]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceObjectSecurity( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceObjectSecurity __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceObjectSecurity );
    __frame->service = 0;
    __frame->descriptor = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[34]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[46]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(SECURITY_INFORMATION) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info = *(SECURITY_INFORMATION *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(SECURITY_INFORMATION);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->descriptor = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->descriptor, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_QueryServiceObjectSecurity(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info,
            __frame->descriptor,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->descriptor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[50]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->descriptor,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[50]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceObjectSecurity( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_SetServiceObjectSecurity
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SECURITY_INFORMATION info;
    BYTE * descriptor;
    DWORD buf_size;
};

static void __finally_svcctl_svcctl_SetServiceObjectSecurity( struct __frame_svcctl_svcctl_SetServiceObjectSecurity *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->descriptor,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72]);



}

void __RPC_STUB svcctl_svcctl_SetServiceObjectSecurity( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_SetServiceObjectSecurity __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_SetServiceObjectSecurity );
    __frame->service = 0;
    __frame->descriptor = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[52]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[68]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(SECURITY_INFORMATION) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info = *(SECURITY_INFORMATION *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(SECURITY_INFORMATION);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->descriptor,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[72],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_SetServiceObjectSecurity(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info,
            __frame->descriptor,
            __frame->buf_size);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_SetServiceObjectSecurity( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SERVICE_STATUS _W0;
    SERVICE_STATUS * status;
};

static void __finally_svcctl_svcctl_QueryServiceStatus( struct __frame_svcctl_svcctl_QueryServiceStatus *__frame )
{



}

void __RPC_STUB svcctl_svcctl_QueryServiceStatus( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceStatus __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceStatus );
    __frame->service = 0;
    __frame->status = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[66]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[86]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;

        __frame->_RetVal = svcctl_QueryServiceStatus(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->status);
        __frame->_StubMsg.BufferLength = 40;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[14]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceStatus( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_SetServiceStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hServiceStatus;
    LPSERVICE_STATUS lpServiceStatus;
};

static void __finally_svcctl_svcctl_SetServiceStatus( struct __frame_svcctl_svcctl_SetServiceStatus *__frame )
{



}

void __RPC_STUB svcctl_svcctl_SetServiceStatus( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_SetServiceStatus __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_SetServiceStatus );
    __frame->hServiceStatus = 0;
    __frame->lpServiceStatus = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[76]);

            __frame->hServiceStatus = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[94]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[98],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_SetServiceStatus(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hServiceStatus),
            __frame->lpServiceStatus);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_SetServiceStatus( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_UnlockServiceDatabase
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT phLock;
};

static void __finally_svcctl_svcctl_UnlockServiceDatabase( struct __frame_svcctl_svcctl_UnlockServiceDatabase *__frame )
{


}

void __RPC_STUB svcctl_svcctl_UnlockServiceDatabase( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_UnlockServiceDatabase __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_UnlockServiceDatabase );
    __frame->phLock = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[86]);

            __frame->phLock = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[114]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_UnlockServiceDatabase(
            (SC_RPC_LOCK *)NDRSContextValue(__frame->phLock));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->phLock,
            (NDR_RUNDOWN)SC_RPC_LOCK_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[114]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_UnlockServiceDatabase( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_NotifyBootConfigStatus
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    SVCCTL_HANDLEW machinename;
    DWORD boot_acceptable;
};

static void __finally_svcctl_svcctl_NotifyBootConfigStatus( struct __frame_svcctl_svcctl_NotifyBootConfigStatus *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->machinename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122]);



}

void __RPC_STUB svcctl_svcctl_NotifyBootConfigStatus( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_NotifyBootConfigStatus __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_NotifyBootConfigStatus );
    __frame->machinename = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[92]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->machinename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[122],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->boot_acceptable = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_NotifyBootConfigStatus(
            __frame->machinename,
            __frame->boot_acceptable);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_NotifyBootConfigStatus( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_SCSetServiceBitsW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_SCSetServiceBitsW( struct __frame_svcctl_svcctl_SCSetServiceBitsW *__frame )
{

}

void __RPC_STUB svcctl_svcctl_SCSetServiceBitsW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_SCSetServiceBitsW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_SCSetServiceBitsW );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_SCSetServiceBitsW();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_SCSetServiceBitsW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ChangeServiceConfigW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPCWSTR lpBinaryPathName;
    LPCWSTR lpLoadOrderGroupKey;
    DWORD * lpdwTagId;
    const BYTE * lpDependencies;
    DWORD dwDependenciesSize;
    LPCWSTR lpServiceStartName;
    const BYTE * lpPassword;
    DWORD dwPasswordSize;
    LPCWSTR lpDisplayName;
};

static void __finally_svcctl_svcctl_ChangeServiceConfigW( struct __frame_svcctl_svcctl_ChangeServiceConfigW *__frame )
{




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpBinaryPathName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpLoadOrderGroupKey,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpdwTagId,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->dwDependenciesSize;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpDependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceStartName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->dwPasswordSize;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpPassword,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpDisplayName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);


}

void __RPC_STUB svcctl_svcctl_ChangeServiceConfigW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ChangeServiceConfigW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ChangeServiceConfigW );
    __frame->hService = 0;
    __frame->lpBinaryPathName = 0;
    __frame->lpLoadOrderGroupKey = 0;
    __frame->lpdwTagId = 0;
    __frame->lpDependencies = 0;
    __frame->lpServiceStartName = 0;
    __frame->lpPassword = 0;
    __frame->lpDisplayName = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[102]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[126]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwServiceType = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwStartType = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwErrorControl = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpBinaryPathName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpLoadOrderGroupKey,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpdwTagId,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpDependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[152],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwDependenciesSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceStartName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpPassword,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[170],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwPasswordSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpDisplayName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_ChangeServiceConfigW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->dwServiceType,
            __frame->dwStartType,
            __frame->dwErrorControl,
            __frame->lpBinaryPathName,
            __frame->lpLoadOrderGroupKey,
            __frame->lpdwTagId,
            __frame->lpDependencies,
            __frame->dwDependenciesSize,
            __frame->lpServiceStartName,
            __frame->lpPassword,
            __frame->dwPasswordSize,
            __frame->lpDisplayName);
        __frame->_StubMsg.BufferLength = 24;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[138]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ChangeServiceConfigW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_CreateServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCWSTR lpServiceName;
    LPCWSTR lpDisplayName;
    DWORD dwDesiredAccess;
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPCWSTR lpBinaryPathName;
    LPCWSTR lpLoadOrderGroup;
    DWORD * lpdwTagId;
    const BYTE * lpDependencies;
    DWORD dwDependenciesSize;
    LPCWSTR lpServiceStartName;
    const BYTE * lpPassword;
    DWORD dwPasswordSize;
    NDR_SCONTEXT phService;
};

static void __finally_svcctl_svcctl_CreateServiceW( struct __frame_svcctl_svcctl_CreateServiceW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[182]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpDisplayName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpBinaryPathName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[190]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpLoadOrderGroup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpdwTagId,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->dwDependenciesSize;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpDependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[212]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceStartName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->dwPasswordSize;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpPassword,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230]);




}

void __RPC_STUB svcctl_svcctl_CreateServiceW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CreateServiceW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CreateServiceW );
    __frame->hSCManager = 0;
    __frame->lpServiceName = 0;
    __frame->lpDisplayName = 0;
    __frame->lpBinaryPathName = 0;
    __frame->lpLoadOrderGroup = 0;
    __frame->lpdwTagId = 0;
    __frame->lpDependencies = 0;
    __frame->lpServiceStartName = 0;
    __frame->lpPassword = 0;
    __frame->phService = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[146]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[178]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[184],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpDisplayName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwDesiredAccess = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwServiceType = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwStartType = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwErrorControl = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpBinaryPathName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpLoadOrderGroup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpdwTagId,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpDependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[212],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwDependenciesSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceStartName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpPassword,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[230],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwPasswordSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->phService = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234]);

        __frame->_RetVal = svcctl_CreateServiceW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->lpServiceName,
            __frame->lpDisplayName,
            __frame->dwDesiredAccess,
            __frame->dwServiceType,
            __frame->dwStartType,
            __frame->dwErrorControl,
            __frame->lpBinaryPathName,
            __frame->lpLoadOrderGroup,
            __frame->lpdwTagId,
            __frame->lpDependencies,
            __frame->dwDependenciesSize,
            __frame->lpServiceStartName,
            __frame->lpPassword,
            __frame->dwPasswordSize,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->phService));
        __frame->_StubMsg.BufferLength = 48;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpdwTagId,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->phService,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CreateServiceW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumDependentServicesW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD state;
    BYTE * services;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
    DWORD _W1;
    DWORD * services_ret;
};

static void __finally_svcctl_svcctl_EnumDependentServicesW( struct __frame_svcctl_svcctl_EnumDependentServicesW *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->services,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[256]);





}

void __RPC_STUB svcctl_svcctl_EnumDependentServicesW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumDependentServicesW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumDependentServicesW );
    __frame->service = 0;
    __frame->services = 0;
    __frame->needed_size = 0;
    __frame->services_ret = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[200]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[242]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->services = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->services, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->services_ret = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumDependentServicesW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->state,
            __frame->services,
            __frame->buf_size,
            __frame->needed_size,
            __frame->services_ret);
        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[246]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->services_ret;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumDependentServicesW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumServicesStatusW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hmngr;
    DWORD type;
    DWORD state;
    BYTE * buffer;
    DWORD size;
    DWORD _W0;
    LPDWORD needed;
    DWORD _W1;
    LPDWORD returned;
    LPDWORD resume;
};

static void __finally_svcctl_svcctl_EnumServicesStatusW( struct __frame_svcctl_svcctl_EnumServicesStatusW *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[282]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->resume,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[294]);


}

void __RPC_STUB svcctl_svcctl_EnumServicesStatusW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumServicesStatusW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumServicesStatusW );
    __frame->hmngr = 0;
    __frame->buffer = 0;
    __frame->needed = 0;
    __frame->returned = 0;
    __frame->resume = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[222]);

            __frame->hmngr = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[268]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->resume,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[294],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->size * 1);
        memset(__frame->buffer, 0, __frame->size * 1);
        __frame->needed = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->returned = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumServicesStatusW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hmngr),
            __frame->type,
            __frame->state,
            __frame->buffer,
            __frame->size,
            __frame->needed,
            __frame->returned,
            __frame->resume);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[272]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[272]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->returned;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[294]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumServicesStatusW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_OpenSCManagerW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    MACHINE_HANDLEW MachineName;
    LPCWSTR DatabaseName;
    DWORD dwAccessMask;
    NDR_SCONTEXT handle;
};

static void __finally_svcctl_svcctl_OpenSCManagerW( struct __frame_svcctl_svcctl_OpenSCManagerW *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->MachineName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[298]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->DatabaseName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);




}

void __RPC_STUB svcctl_svcctl_OpenSCManagerW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_OpenSCManagerW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_OpenSCManagerW );
    __frame->MachineName = 0;
    __frame->DatabaseName = 0;
    __frame->handle = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[250]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->MachineName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[298],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->DatabaseName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwAccessMask = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->handle = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[306]);

        __frame->_RetVal = svcctl_OpenSCManagerW(
            __frame->MachineName,
            __frame->DatabaseName,
            __frame->dwAccessMask,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->handle));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->handle,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[306]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_OpenSCManagerW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_OpenServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCWSTR lpServiceName;
    DWORD dwDesiredAccess;
    NDR_SCONTEXT phService;
};

static void __finally_svcctl_svcctl_OpenServiceW( struct __frame_svcctl_svcctl_OpenServiceW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[318]);




}

void __RPC_STUB svcctl_svcctl_OpenServiceW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_OpenServiceW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_OpenServiceW );
    __frame->hSCManager = 0;
    __frame->lpServiceName = 0;
    __frame->phService = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[266]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[314]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[320],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwDesiredAccess = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->phService = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322]);

        __frame->_RetVal = svcctl_OpenServiceW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->lpServiceName,
            __frame->dwDesiredAccess,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->phService));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->phService,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[322]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_OpenServiceW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceConfigW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    QUERY_SERVICE_CONFIGW _W0;
    QUERY_SERVICE_CONFIGW * config;
    DWORD buf_size;
    DWORD _W1;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceConfigW( struct __frame_svcctl_svcctl_QueryServiceConfigW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->config,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[394]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceConfigW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceConfigW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceConfigW );
    __frame->hService = 0;
    __frame->config = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[282]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[330]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->config = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->needed_size = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_QueryServiceConfigW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->config,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceConfigW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceLockStatusW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    QUERY_SERVICE_LOCK_STATUSW _W0;
    QUERY_SERVICE_LOCK_STATUSW * status;
    DWORD buf_size;
    DWORD _W1;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceLockStatusW( struct __frame_svcctl_svcctl_QueryServiceLockStatusW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->status,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[428]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceLockStatusW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceLockStatusW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceLockStatusW );
    __frame->scmanager = 0;
    __frame->status = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[298]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[402]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->needed_size = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_QueryServiceLockStatusW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->status,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[410]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[410]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceLockStatusW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_StartServiceW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    DWORD dwNumServiceArgs;
    LPCWSTR * lpServiceArgVectors;
};

static void __finally_svcctl_svcctl_StartServiceW( struct __frame_svcctl_svcctl_StartServiceW *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->dwNumServiceArgs;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceArgVectors,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[458]);


}

void __RPC_STUB svcctl_svcctl_StartServiceW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_StartServiceW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_StartServiceW );
    __frame->hService = 0;
    __frame->lpServiceArgVectors = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[314]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[436]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwNumServiceArgs = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceArgVectors,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[458],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_StartServiceW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->dwNumServiceArgs,
            __frame->lpServiceArgVectors);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_StartServiceW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetServiceDisplayNameW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCWSTR lpServiceName;
    WCHAR (*lpBuffer)[];
    DWORD * cchBufSize;
};

static void __finally_svcctl_svcctl_GetServiceDisplayNameW( struct __frame_svcctl_svcctl_GetServiceDisplayNameW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[466]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

    if (__frame->lpBuffer)
        __frame->_StubMsg.pfnFree(__frame->lpBuffer);



}

void __RPC_STUB svcctl_svcctl_GetServiceDisplayNameW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetServiceDisplayNameW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetServiceDisplayNameW );
    __frame->hSCManager = 0;
    __frame->lpServiceName = 0;
    __frame->lpBuffer = 0;
    __frame->cchBufSize = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[326]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[462]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[468],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cchBufSize = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->lpBuffer = NdrAllocate(&__frame->_StubMsg, (*__frame->cchBufSize + 1) * 2);
        memset(__frame->lpBuffer, 0, (*__frame->cchBufSize + 1) * 2);

        __frame->_RetVal = svcctl_GetServiceDisplayNameW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->lpServiceName,
            *__frame->lpBuffer,
            __frame->cchBufSize);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[470]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[470]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->cchBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetServiceDisplayNameW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetServiceKeyNameW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCWSTR lpServiceDisplayName;
    WCHAR (*lpBuffer)[];
    DWORD * cchBufSize;
};

static void __finally_svcctl_svcctl_GetServiceKeyNameW( struct __frame_svcctl_svcctl_GetServiceKeyNameW *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceDisplayName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[484]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

    if (__frame->lpBuffer)
        __frame->_StubMsg.pfnFree(__frame->lpBuffer);



}

void __RPC_STUB svcctl_svcctl_GetServiceKeyNameW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetServiceKeyNameW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetServiceKeyNameW );
    __frame->hSCManager = 0;
    __frame->lpServiceDisplayName = 0;
    __frame->lpBuffer = 0;
    __frame->cchBufSize = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[344]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[480]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceDisplayName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[486],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cchBufSize = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->lpBuffer = NdrAllocate(&__frame->_StubMsg, (*__frame->cchBufSize + 1) * 2);
        memset(__frame->lpBuffer, 0, (*__frame->cchBufSize + 1) * 2);

        __frame->_RetVal = svcctl_GetServiceKeyNameW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->lpServiceDisplayName,
            *__frame->lpBuffer,
            __frame->cchBufSize);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->cchBufSize + 1);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[488]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->cchBufSize;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetServiceKeyNameW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_SCSetServiceBitsA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_SCSetServiceBitsA( struct __frame_svcctl_svcctl_SCSetServiceBitsA *__frame )
{

}

void __RPC_STUB svcctl_svcctl_SCSetServiceBitsA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_SCSetServiceBitsA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_SCSetServiceBitsA );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_SCSetServiceBitsA();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_SCSetServiceBitsA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ChangeServiceConfigA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD service_type;
    DWORD start_type;
    DWORD error_control;
    LPSTR binarypath;
    LPSTR loadordergroup;
    DWORD * tagid;
    BYTE * dependencies;
    DWORD depend_size;
    LPSTR startname;
    BYTE * password;
    DWORD password_size;
    LPSTR displayname;
};

static void __finally_svcctl_svcctl_ChangeServiceConfigA( struct __frame_svcctl_svcctl_ChangeServiceConfigA *__frame )
{




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->binarypath,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->loadordergroup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->tagid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[510]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->depend_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->dependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[524]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->startname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->password_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->password,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[542]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->displayname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838]);


}

void __RPC_STUB svcctl_svcctl_ChangeServiceConfigA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ChangeServiceConfigA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ChangeServiceConfigA );
    __frame->service = 0;
    __frame->binarypath = 0;
    __frame->loadordergroup = 0;
    __frame->tagid = 0;
    __frame->dependencies = 0;
    __frame->startname = 0;
    __frame->password = 0;
    __frame->displayname = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[364]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[498]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->error_control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->binarypath,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->loadordergroup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->tagid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[510],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->dependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[524],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->depend_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->startname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->password,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[542],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->password_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->displayname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1838],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_ChangeServiceConfigA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->service_type,
            __frame->start_type,
            __frame->error_control,
            __frame->binarypath,
            __frame->loadordergroup,
            __frame->tagid,
            __frame->dependencies,
            __frame->depend_size,
            __frame->startname,
            __frame->password,
            __frame->password_size,
            __frame->displayname);
        __frame->_StubMsg.BufferLength = 24;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[510]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ChangeServiceConfigA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_CreateServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    LPCSTR servicename;
    LPCSTR displayname;
    DWORD desiredaccess;
    DWORD service_type;
    DWORD start_type;
    DWORD error_control;
    LPCSTR binarypath;
    LPCSTR loadordergroup;
    DWORD * tagid;
    const BYTE * dependencies;
    DWORD depend_size;
    LPCSTR startname;
    const BYTE * password;
    DWORD password_size;
    NDR_SCONTEXT service;
};

static void __finally_svcctl_svcctl_CreateServiceA( struct __frame_svcctl_svcctl_CreateServiceA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->servicename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[554]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->displayname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->binarypath,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[562]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->loadordergroup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->tagid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[570]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->depend_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->dependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[584]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->startname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->password_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->password,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[602]);




}

void __RPC_STUB svcctl_svcctl_CreateServiceA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CreateServiceA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CreateServiceA );
    __frame->scmanager = 0;
    __frame->servicename = 0;
    __frame->displayname = 0;
    __frame->binarypath = 0;
    __frame->loadordergroup = 0;
    __frame->tagid = 0;
    __frame->dependencies = 0;
    __frame->startname = 0;
    __frame->password = 0;
    __frame->service = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[408]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[550]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->servicename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[556],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->displayname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->desiredaccess = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->error_control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->binarypath,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[564],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->loadordergroup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->tagid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[570],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->dependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[584],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->depend_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->startname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->password,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[602],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->password_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->service = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[606]);

        __frame->_RetVal = svcctl_CreateServiceA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->servicename,
            __frame->displayname,
            __frame->desiredaccess,
            __frame->service_type,
            __frame->start_type,
            __frame->error_control,
            __frame->binarypath,
            __frame->loadordergroup,
            __frame->tagid,
            __frame->dependencies,
            __frame->depend_size,
            __frame->startname,
            __frame->password,
            __frame->password_size,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->service));
        __frame->_StubMsg.BufferLength = 48;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[570]);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->service,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[606]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CreateServiceA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumDependentServicesA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD state;
    BYTE * services;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
    DWORD _W1;
    DWORD * services_ret;
};

static void __finally_svcctl_svcctl_EnumDependentServicesA( struct __frame_svcctl_svcctl_EnumDependentServicesA *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->services,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[628]);





}

void __RPC_STUB svcctl_svcctl_EnumDependentServicesA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumDependentServicesA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumDependentServicesA );
    __frame->service = 0;
    __frame->services = 0;
    __frame->needed_size = 0;
    __frame->services_ret = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[462]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[614]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->services = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->services, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->services_ret = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumDependentServicesA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->state,
            __frame->services,
            __frame->buf_size,
            __frame->needed_size,
            __frame->services_ret);
        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[618]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->services,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[618]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->services_ret;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumDependentServicesA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumServicesStatusA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hmngr;
    DWORD type;
    DWORD state;
    BYTE * buffer;
    DWORD size;
    DWORD _W0;
    DWORD * needed;
    DWORD _W1;
    DWORD * returned;
    DWORD * resume;
};

static void __finally_svcctl_svcctl_EnumServicesStatusA( struct __frame_svcctl_svcctl_EnumServicesStatusA *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[654]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->resume,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[666]);


}

void __RPC_STUB svcctl_svcctl_EnumServicesStatusA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumServicesStatusA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumServicesStatusA );
    __frame->hmngr = 0;
    __frame->buffer = 0;
    __frame->needed = 0;
    __frame->returned = 0;
    __frame->resume = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[484]);

            __frame->hmngr = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[640]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->resume,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[666],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->size * 1);
        memset(__frame->buffer, 0, __frame->size * 1);
        __frame->needed = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->returned = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumServicesStatusA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hmngr),
            __frame->type,
            __frame->state,
            __frame->buffer,
            __frame->size,
            __frame->needed,
            __frame->returned,
            __frame->resume);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[644]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[644]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->returned;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->resume,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[666]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumServicesStatusA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_OpenSCManagerA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    MACHINE_HANDLEA MachineName;
    LPCSTR DatabaseName;
    DWORD dwAccessMask;
    NDR_SCONTEXT handle;
};

static void __finally_svcctl_svcctl_OpenSCManagerA( struct __frame_svcctl_svcctl_OpenSCManagerA *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->MachineName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[670]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->DatabaseName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);




}

void __RPC_STUB svcctl_svcctl_OpenSCManagerA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_OpenSCManagerA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_OpenSCManagerA );
    __frame->MachineName = 0;
    __frame->DatabaseName = 0;
    __frame->handle = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[512]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->MachineName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[670],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->DatabaseName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwAccessMask = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->handle = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[678]);

        __frame->_RetVal = svcctl_OpenSCManagerA(
            __frame->MachineName,
            __frame->DatabaseName,
            __frame->dwAccessMask,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->handle));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->handle,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[678]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_OpenSCManagerA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_OpenServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCSTR lpServiceName;
    DWORD dwDesiredAccess;
    NDR_SCONTEXT phService;
};

static void __finally_svcctl_svcctl_OpenServiceA( struct __frame_svcctl_svcctl_OpenServiceA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpServiceName,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[690]);




}

void __RPC_STUB svcctl_svcctl_OpenServiceA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_OpenServiceA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_OpenServiceA );
    __frame->hSCManager = 0;
    __frame->lpServiceName = 0;
    __frame->phService = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[528]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[686]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->lpServiceName,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[692],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->dwDesiredAccess = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->phService = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[694]);

        __frame->_RetVal = svcctl_OpenServiceA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->lpServiceName,
            __frame->dwDesiredAccess,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->phService));
        __frame->_StubMsg.BufferLength = 32;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->phService,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[694]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_OpenServiceA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceConfigA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    QUERY_SERVICE_CONFIGA _W0;
    QUERY_SERVICE_CONFIGA * config;
    DWORD buf_size;
    DWORD _W1;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceConfigA( struct __frame_svcctl_svcctl_QueryServiceConfigA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->config,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[766]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceConfigA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceConfigA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceConfigA );
    __frame->hService = 0;
    __frame->config = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[544]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[702]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->config = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->needed_size = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_QueryServiceConfigA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->config,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[726]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->config,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[726]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceConfigA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceLockStatusA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    QUERY_SERVICE_LOCK_STATUSA _W0;
    QUERY_SERVICE_LOCK_STATUSA * status;
    DWORD buf_size;
    DWORD _W1;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceLockStatusA( struct __frame_svcctl_svcctl_QueryServiceLockStatusA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->status,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[800]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceLockStatusA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceLockStatusA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceLockStatusA );
    __frame->scmanager = 0;
    __frame->status = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[560]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[774]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->status = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->needed_size = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_QueryServiceLockStatusA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->status,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[782]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[782]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceLockStatusA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_StartServiceA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD argc;
    LPCSTR * args;
};

static void __finally_svcctl_svcctl_StartServiceA( struct __frame_svcctl_svcctl_StartServiceA *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->argc;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->args,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[830]);


}

void __RPC_STUB svcctl_svcctl_StartServiceA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_StartServiceA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_StartServiceA );
    __frame->service = 0;
    __frame->args = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[576]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[808]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->argc = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->args,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[830],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_StartServiceA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->argc,
            __frame->args);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_StartServiceA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetServiceDisplayNameA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCSTR servicename;
    CHAR (*buffer)[];
    DWORD * buf_size;
};

static void __finally_svcctl_svcctl_GetServiceDisplayNameA( struct __frame_svcctl_svcctl_GetServiceDisplayNameA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->servicename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[838]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

    if (__frame->buffer)
        __frame->_StubMsg.pfnFree(__frame->buffer);



}

void __RPC_STUB svcctl_svcctl_GetServiceDisplayNameA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetServiceDisplayNameA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetServiceDisplayNameA );
    __frame->hSCManager = 0;
    __frame->servicename = 0;
    __frame->buffer = 0;
    __frame->buf_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[588]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[834]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->servicename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[840],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, (*__frame->buf_size + 1) * 1);
        memset(__frame->buffer, 0, (*__frame->buf_size + 1) * 1);

        __frame->_RetVal = svcctl_GetServiceDisplayNameA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->servicename,
            *__frame->buffer,
            __frame->buf_size);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[842]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[842]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetServiceDisplayNameA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetServiceKeyNameA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hSCManager;
    LPCSTR servicename;
    CHAR (*buffer)[];
    DWORD * buf_size;
};

static void __finally_svcctl_svcctl_GetServiceKeyNameA( struct __frame_svcctl_svcctl_GetServiceKeyNameA *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->servicename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[856]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

    if (__frame->buffer)
        __frame->_StubMsg.pfnFree(__frame->buffer);



}

void __RPC_STUB svcctl_svcctl_GetServiceKeyNameA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetServiceKeyNameA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetServiceKeyNameA );
    __frame->hSCManager = 0;
    __frame->servicename = 0;
    __frame->buffer = 0;
    __frame->buf_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[606]);

            __frame->hSCManager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[852]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->servicename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[858],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = (DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, (*__frame->buf_size + 1) * 1);
        memset(__frame->buffer, 0, (*__frame->buf_size + 1) * 1);

        __frame->_RetVal = svcctl_GetServiceKeyNameA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hSCManager),
            __frame->servicename,
            *__frame->buffer,
            __frame->buf_size);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[860]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(*__frame->buf_size + 1);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[860]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->buf_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetServiceKeyNameA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetCurrentGroupStateW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_GetCurrentGroupStateW( struct __frame_svcctl_svcctl_GetCurrentGroupStateW *__frame )
{

}

void __RPC_STUB svcctl_svcctl_GetCurrentGroupStateW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetCurrentGroupStateW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetCurrentGroupStateW );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_GetCurrentGroupStateW();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetCurrentGroupStateW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumServiceGroupW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    DWORD service_type;
    DWORD service_state;
    BYTE * buffer;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
    DWORD _W1;
    DWORD * returned_size;
    DWORD * resume_index;
    LPCWSTR groupname;
};

static void __finally_svcctl_svcctl_EnumServiceGroupW( struct __frame_svcctl_svcctl_EnumServiceGroupW *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[884]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->resume_index,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[896]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->groupname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);


}

void __RPC_STUB svcctl_svcctl_EnumServiceGroupW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumServiceGroupW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumServiceGroupW );
    __frame->scmanager = 0;
    __frame->buffer = 0;
    __frame->needed_size = 0;
    __frame->returned_size = 0;
    __frame->resume_index = 0;
    __frame->groupname = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[626]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[870]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->resume_index,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[896],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->groupname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->buffer, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->returned_size = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumServiceGroupW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->service_type,
            __frame->service_state,
            __frame->buffer,
            __frame->buf_size,
            __frame->needed_size,
            __frame->returned_size,
            __frame->resume_index,
            __frame->groupname);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[874]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[874]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->returned_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[896]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumServiceGroupW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ChangeServiceConfig2A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SC_RPC_CONFIG_INFOA info;
    void *_p_info;
};

static void __finally_svcctl_svcctl_ChangeServiceConfig2A( struct __frame_svcctl_svcctl_ChangeServiceConfig2A *__frame )
{

    NdrComplexStructFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->info,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1126]);


}

void __RPC_STUB svcctl_svcctl_ChangeServiceConfig2A( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ChangeServiceConfig2A __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ChangeServiceConfig2A );
    __frame->service = 0;
    MIDL_memset(&__frame->info, 0, sizeof(__frame->info));
    __frame->_p_info = &__frame->info;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[658]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[904]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->_p_info,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1126],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_ChangeServiceConfig2A(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ChangeServiceConfig2A( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ChangeServiceConfig2W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SC_RPC_CONFIG_INFOW info;
    void *_p_info;
};

static void __finally_svcctl_svcctl_ChangeServiceConfig2W( struct __frame_svcctl_svcctl_ChangeServiceConfig2W *__frame )
{

    NdrComplexStructFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->info,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1302]);


}

void __RPC_STUB svcctl_svcctl_ChangeServiceConfig2W( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ChangeServiceConfig2W __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ChangeServiceConfig2W );
    __frame->service = 0;
    MIDL_memset(&__frame->info, 0, sizeof(__frame->info));
    __frame->_p_info = &__frame->info;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[668]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1142]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->_p_info,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1302],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_ChangeServiceConfig2W(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info);
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ChangeServiceConfig2W( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceConfig2A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD info_level;
    BYTE * buffer;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
};

static void __finally_svcctl_svcctl_QueryServiceConfig2A( struct __frame_svcctl_svcctl_QueryServiceConfig2A *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1332]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceConfig2A( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceConfig2A __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceConfig2A );
    __frame->service = 0;
    __frame->buffer = 0;
    __frame->needed_size = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[678]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1318]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info_level = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->buffer, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_QueryServiceConfig2A(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info_level,
            __frame->buffer,
            __frame->buf_size,
            __frame->needed_size);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1322]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1322]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceConfig2A( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceConfig2W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    DWORD InfoLevel;
    BYTE (*lpBuffer)[];
    DWORD cbBufSize;
    DWORD _W0;
    LPDWORD pcbBytesNeeded;
};

static void __finally_svcctl_svcctl_QueryServiceConfig2W( struct __frame_svcctl_svcctl_QueryServiceConfig2W *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1344]);
    if (__frame->lpBuffer)
        __frame->_StubMsg.pfnFree(__frame->lpBuffer);




}

void __RPC_STUB svcctl_svcctl_QueryServiceConfig2W( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceConfig2W __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceConfig2W );
    __frame->hService = 0;
    __frame->lpBuffer = 0;
    __frame->pcbBytesNeeded = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[696]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1340]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->InfoLevel = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cbBufSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->lpBuffer = NdrAllocate(&__frame->_StubMsg, __frame->cbBufSize * 1);
        memset(__frame->lpBuffer, 0, __frame->cbBufSize * 1);
        __frame->pcbBytesNeeded = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_QueryServiceConfig2W(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->InfoLevel,
            *__frame->lpBuffer,
            __frame->cbBufSize,
            __frame->pcbBytesNeeded);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1344]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1344]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pcbBytesNeeded;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceConfig2W( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceStatusEx
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT hService;
    SC_STATUS_TYPE InfoLevel;
    BYTE * lpBuffer;
    DWORD cbBufSize;
    DWORD _W0;
    LPDWORD pcbBytesNeeded;
};

static void __finally_svcctl_svcctl_QueryServiceStatusEx( struct __frame_svcctl_svcctl_QueryServiceStatusEx *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->lpBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1372]);




}

void __RPC_STUB svcctl_svcctl_QueryServiceStatusEx( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceStatusEx __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceStatusEx );
    __frame->hService = 0;
    __frame->lpBuffer = 0;
    __frame->pcbBytesNeeded = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[714]);

            __frame->hService = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1358]);

            NdrSimpleTypeUnmarshall(
                &__frame->_StubMsg,
                (unsigned char *)&__frame->InfoLevel,
                0x0d /* FC_ENUM16 */);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->cbBufSize = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->lpBuffer = NdrAllocate(&__frame->_StubMsg, __frame->cbBufSize * 1);
        memset(__frame->lpBuffer, 0, __frame->cbBufSize * 1);
        __frame->pcbBytesNeeded = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_QueryServiceStatusEx(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->hService),
            __frame->InfoLevel,
            __frame->lpBuffer,
            __frame->cbBufSize,
            __frame->pcbBytesNeeded);
        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1362]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cbBufSize;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->lpBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1362]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->pcbBytesNeeded;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceStatusEx( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumServicesStatusExA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    SC_ENUM_TYPE info_level;
    DWORD service_type;
    DWORD service_state;
    BYTE * buffer;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
    DWORD _W1;
    DWORD * services_count;
    DWORD * resume_index;
    LPCSTR groupname;
};

static void __finally_svcctl_svcctl_EnumServicesStatusExA( struct __frame_svcctl_svcctl_EnumServicesStatusExA *__frame )
{




    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1394]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->resume_index,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1406]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->groupname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);


}

void __RPC_STUB svcctl_svcctl_EnumServicesStatusExA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumServicesStatusExA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumServicesStatusExA );
    __frame->scmanager = 0;
    __frame->buffer = 0;
    __frame->needed_size = 0;
    __frame->services_count = 0;
    __frame->resume_index = 0;
    __frame->groupname = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[732]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1380]);

            NdrSimpleTypeUnmarshall(
                &__frame->_StubMsg,
                (unsigned char *)&__frame->info_level,
                0x0d /* FC_ENUM16 */);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->resume_index,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1406],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->groupname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->buffer, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->services_count = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumServicesStatusExA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->info_level,
            __frame->service_type,
            __frame->service_state,
            __frame->buffer,
            __frame->buf_size,
            __frame->needed_size,
            __frame->services_count,
            __frame->resume_index,
            __frame->groupname);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1384]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1384]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->services_count;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1406]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumServicesStatusExA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_EnumServicesStatusExW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    SC_ENUM_TYPE info_level;
    DWORD service_type;
    DWORD service_state;
    BYTE * buffer;
    DWORD buf_size;
    DWORD _W0;
    DWORD * needed_size;
    DWORD _W1;
    DWORD * services_count;
    DWORD * resume_index;
    LPCWSTR groupname;
};

static void __finally_svcctl_svcctl_EnumServicesStatusExW( struct __frame_svcctl_svcctl_EnumServicesStatusExW *__frame )
{




    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->buffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1428]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->resume_index,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1440]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->groupname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);


}

void __RPC_STUB svcctl_svcctl_EnumServicesStatusExW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_EnumServicesStatusExW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_EnumServicesStatusExW );
    __frame->scmanager = 0;
    __frame->buffer = 0;
    __frame->needed_size = 0;
    __frame->services_count = 0;
    __frame->resume_index = 0;
    __frame->groupname = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[766]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1414]);

            NdrSimpleTypeUnmarshall(
                &__frame->_StubMsg,
                (unsigned char *)&__frame->info_level,
                0x0d /* FC_ENUM16 */);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_state = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->buf_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->resume_index,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1440],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->groupname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->buffer = NdrAllocate(&__frame->_StubMsg, __frame->buf_size * 1);
        memset(__frame->buffer, 0, __frame->buf_size * 1);
        __frame->needed_size = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->services_count = &__frame->_W1;
        __frame->_W1 = 0;

        __frame->_RetVal = svcctl_EnumServicesStatusExW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->info_level,
            __frame->service_type,
            __frame->service_state,
            __frame->buffer,
            __frame->buf_size,
            __frame->needed_size,
            __frame->services_count,
            __frame->resume_index,
            __frame->groupname);
        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1418]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->buf_size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->buffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1418]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->needed_size;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = *__frame->services_count;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->resume_index,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1440]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_EnumServicesStatusExW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown43
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown43( struct __frame_svcctl_svcctl_unknown43 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown43( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown43 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown43 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown43();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown43( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_CreateServiceWOW64A
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    LPCSTR servicename;
    LPCSTR displayname;
    DWORD accessmask;
    DWORD service_type;
    DWORD start_type;
    DWORD error_control;
    LPCSTR imagepath;
    LPCSTR loadordergroup;
    DWORD * tagid;
    const BYTE * dependencies;
    DWORD depend_size;
    LPCSTR start_name;
    const BYTE * password;
    DWORD password_size;
    NDR_SCONTEXT service;
};

static void __finally_svcctl_svcctl_CreateServiceWOW64A( struct __frame_svcctl_svcctl_CreateServiceWOW64A *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->servicename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1452]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->displayname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->imagepath,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1460]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->loadordergroup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->tagid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1468]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->depend_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->dependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1482]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->start_name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->password_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->password,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);




}

void __RPC_STUB svcctl_svcctl_CreateServiceWOW64A( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CreateServiceWOW64A __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CreateServiceWOW64A );
    __frame->scmanager = 0;
    __frame->servicename = 0;
    __frame->displayname = 0;
    __frame->imagepath = 0;
    __frame->loadordergroup = 0;
    __frame->tagid = 0;
    __frame->dependencies = 0;
    __frame->start_name = 0;
    __frame->password = 0;
    __frame->service = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[802]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1448]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->servicename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->displayname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->accessmask = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->error_control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->imagepath,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1462],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->loadordergroup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->tagid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1468],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->dependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1482],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->depend_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->start_name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1486],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->password,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->password_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->service = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1504]);

        __frame->_RetVal = svcctl_CreateServiceWOW64A(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->servicename,
            __frame->displayname,
            __frame->accessmask,
            __frame->service_type,
            __frame->start_type,
            __frame->error_control,
            __frame->imagepath,
            __frame->loadordergroup,
            __frame->tagid,
            __frame->dependencies,
            __frame->depend_size,
            __frame->start_name,
            __frame->password,
            __frame->password_size,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->service));
        __frame->_StubMsg.BufferLength = 48;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1468]);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->service,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1504]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CreateServiceWOW64A( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_CreateServiceWOW64W
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT scmanager;
    LPCWSTR servicename;
    LPCWSTR displayname;
    DWORD accessmask;
    DWORD service_type;
    DWORD start_type;
    DWORD error_control;
    LPCWSTR imagepath;
    LPCWSTR loadordergroup;
    DWORD * tagid;
    const BYTE * dependencies;
    DWORD depend_size;
    LPCWSTR start_name;
    const BYTE * password;
    DWORD password_size;
    NDR_SCONTEXT service;
};

static void __finally_svcctl_svcctl_CreateServiceWOW64W( struct __frame_svcctl_svcctl_CreateServiceWOW64W *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->servicename,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1516]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->displayname,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->imagepath,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1524]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->loadordergroup,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->tagid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->depend_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->dependencies,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1546]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->start_name,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->password_size;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->password,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1564]);




}

void __RPC_STUB svcctl_svcctl_CreateServiceWOW64W( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CreateServiceWOW64W __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CreateServiceWOW64W );
    __frame->scmanager = 0;
    __frame->servicename = 0;
    __frame->displayname = 0;
    __frame->imagepath = 0;
    __frame->loadordergroup = 0;
    __frame->tagid = 0;
    __frame->dependencies = 0;
    __frame->start_name = 0;
    __frame->password = 0;
    __frame->service = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[856]);

            __frame->scmanager = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1512]);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->servicename,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->displayname,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->accessmask = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->service_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->start_type = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->error_control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrConformantStringUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->imagepath,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1526],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->loadordergroup,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->tagid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->dependencies,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1546],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->depend_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->start_name,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1550],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->password,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1564],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->password_size = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->service = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1568]);

        __frame->_RetVal = svcctl_CreateServiceWOW64W(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->scmanager),
            __frame->servicename,
            __frame->displayname,
            __frame->accessmask,
            __frame->service_type,
            __frame->start_type,
            __frame->error_control,
            __frame->imagepath,
            __frame->loadordergroup,
            __frame->tagid,
            __frame->dependencies,
            __frame->depend_size,
            __frame->start_name,
            __frame->password,
            __frame->password_size,
            (SC_RPC_HANDLE *)NDRSContextValue(__frame->service));
        __frame->_StubMsg.BufferLength = 48;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->tagid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532]);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->service,
            (NDR_RUNDOWN)SC_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1568]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CreateServiceWOW64W( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown46
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown46( struct __frame_svcctl_svcctl_unknown46 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown46( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown46 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown46 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown46();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown46( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_NotifyServiceStatusChange
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    SC_RPC_NOTIFY_PARAMS params;
    void *_p_params;
    GUID * clientprocessguid;
    GUID _W0;
    GUID * scmprocessguid;
    BOOL _W1;
    BOOL * createremotequeue;
    NDR_SCONTEXT notify;
};

static void __finally_svcctl_svcctl_NotifyServiceStatusChange( struct __frame_svcctl_svcctl_NotifyServiceStatusChange *__frame )
{

    NdrComplexStructFree(
        &__frame->_StubMsg,
        (unsigned char *)&__frame->params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710]);






}

void __RPC_STUB svcctl_svcctl_NotifyServiceStatusChange( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_NotifyServiceStatusChange __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_NotifyServiceStatusChange );
    __frame->service = 0;
    MIDL_memset(&__frame->params, 0, sizeof(__frame->params));
    __frame->_p_params = &__frame->params;
    __frame->clientprocessguid = 0;
    __frame->scmprocessguid = 0;
    __frame->createremotequeue = 0;
    __frame->notify = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[912]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1576]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->_p_params,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710],
                0);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->clientprocessguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1732],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->scmprocessguid = &__frame->_W0;
        __frame->createremotequeue = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->notify = NdrContextHandleInitialize(
            &__frame->_StubMsg,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1756]);

        __frame->_RetVal = svcctl_NotifyServiceStatusChange(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->params,
            __frame->clientprocessguid,
            __frame->scmprocessguid,
            __frame->createremotequeue,
            (SC_NOTIFY_RPC_HANDLE *)NDRSContextValue(__frame->notify));
        __frame->_StubMsg.BufferLength = 60;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->scmprocessguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1732]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->createremotequeue;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->notify,
            (NDR_RUNDOWN)SC_NOTIFY_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1756]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_NotifyServiceStatusChange( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_GetNotifyResults
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT notify;
    SC_RPC_NOTIFY_PARAMS_LIST *_W0;
    SC_RPC_NOTIFY_PARAMS_LIST ** params;
};

static void __finally_svcctl_svcctl_GetNotifyResults( struct __frame_svcctl_svcctl_GetNotifyResults *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1802]);


}

void __RPC_STUB svcctl_svcctl_GetNotifyResults( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_GetNotifyResults __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_GetNotifyResults );
    __frame->notify = 0;
    __frame->params = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[938]);

            __frame->notify = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1764]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->params = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_GetNotifyResults(
            (SC_NOTIFY_RPC_HANDLE)*NDRSContextValue(__frame->notify),
            __frame->params);
        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1802]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1802]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_GetNotifyResults( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_CloseNotifyHandle
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT notify;
    BOOL _W0;
    BOOL * apc_fired;
};

static void __finally_svcctl_svcctl_CloseNotifyHandle( struct __frame_svcctl_svcctl_CloseNotifyHandle *__frame )
{



}

void __RPC_STUB svcctl_svcctl_CloseNotifyHandle( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_CloseNotifyHandle __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_CloseNotifyHandle );
    __frame->notify = 0;
    __frame->apc_fired = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[948]);

            __frame->notify = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1806]);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->apc_fired = &__frame->_W0;
        __frame->_W0 = 0;

        __frame->_RetVal = svcctl_CloseNotifyHandle(
            (SC_NOTIFY_RPC_HANDLE *)NDRSContextValue(__frame->notify),
            __frame->apc_fired);
        __frame->_StubMsg.BufferLength = 40;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrServerContextNewMarshall(
            &__frame->_StubMsg,
            (NDR_SCONTEXT)__frame->notify,
            (NDR_RUNDOWN)SC_NOTIFY_RPC_HANDLE_rundown,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1806]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = *__frame->apc_fired;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_CloseNotifyHandle( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ControlServiceExA
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD control;
    DWORD info_level;
    SC_RPC_SERVICE_CONTROL_IN_PARAMSA * in_params;
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSA _W0;
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSA * out_params;
};

static void __finally_svcctl_svcctl_ControlServiceExA( struct __frame_svcctl_svcctl_ControlServiceExA *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->in_params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1866]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->out_params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1904]);


}

void __RPC_STUB svcctl_svcctl_ControlServiceExA( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ControlServiceExA __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ControlServiceExA );
    __frame->service = 0;
    __frame->in_params = 0;
    __frame->out_params = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[958]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1818]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info_level = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrNonEncapsulatedUnionUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->in_params,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1846],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->out_params = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        __frame->_RetVal = svcctl_ControlServiceExA(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->control,
            __frame->info_level,
            __frame->in_params,
            __frame->out_params);
        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

        NdrNonEncapsulatedUnionBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1884]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

        NdrNonEncapsulatedUnionMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1884]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ControlServiceExA( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_ControlServiceExW
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD control;
    DWORD info_level;
    SC_RPC_SERVICE_CONTROL_IN_PARAMSW * in_params;
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSW _W0;
    SC_RPC_SERVICE_CONTROL_OUT_PARAMSW * out_params;
};

static void __finally_svcctl_svcctl_ControlServiceExW( struct __frame_svcctl_svcctl_ControlServiceExW *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->in_params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1956]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->out_params,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1984]);


}

void __RPC_STUB svcctl_svcctl_ControlServiceExW( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_ControlServiceExW __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_ControlServiceExW );
    __frame->service = 0;
    __frame->in_params = 0;
    __frame->out_params = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[976]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1908]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->control = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info_level = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrNonEncapsulatedUnionUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&__frame->in_params,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1936],
                0);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->out_params = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        __frame->_RetVal = svcctl_ControlServiceExW(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->control,
            __frame->info_level,
            __frame->in_params,
            __frame->out_params);
        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

        NdrNonEncapsulatedUnionBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1964]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->info_level;

        NdrNonEncapsulatedUnionMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_params,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1964]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_ControlServiceExW( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown52
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown52( struct __frame_svcctl_svcctl_unknown52 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown52( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown52 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown52 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown52();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown52( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown53
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown53( struct __frame_svcctl_svcctl_unknown53 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown53( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown53 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown53 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown53();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown53( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown54
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown54( struct __frame_svcctl_svcctl_unknown54 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown54( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown54 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown54 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown54();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown54( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_unknown55
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
};

static void __finally_svcctl_svcctl_unknown55( struct __frame_svcctl_svcctl_unknown55 *__frame )
{

}

void __RPC_STUB svcctl_svcctl_unknown55( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_unknown55 __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_unknown55 );
    RpcTryFinally
    {
        RpcTryExcept
        {
            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->_RetVal = svcctl_unknown55();
        __frame->_StubMsg.BufferLength = 8;
        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_unknown55( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

struct __frame_svcctl_svcctl_QueryServiceConfigEx
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    DWORD _RetVal;
    NDR_SCONTEXT service;
    DWORD info_level;
    SC_RPC_CONFIG_INFOW _W0;
    SC_RPC_CONFIG_INFOW * info;
};

static void __finally_svcctl_svcctl_QueryServiceConfigEx( struct __frame_svcctl_svcctl_QueryServiceConfigEx *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->info,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1992]);


}

void __RPC_STUB svcctl_svcctl_QueryServiceConfigEx( PRPC_MESSAGE _pRpcMessage )
{
    struct __frame_svcctl_svcctl_QueryServiceConfigEx __f, * const __frame = &__f;
    RPC_STATUS _Status;

    NdrServerInitializeNew(
        _pRpcMessage,
        &__frame->_StubMsg,
        &svcctl_StubDesc);

    RpcExceptionInit( __server_filter, __finally_svcctl_svcctl_QueryServiceConfigEx );
    __frame->service = 0;
    __frame->info = 0;

    RpcTryFinally
    {
        RpcTryExcept
        {
            if ((_pRpcMessage->DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[1002]);

            __frame->service = NdrServerContextNewUnmarshall(
                &__frame->_StubMsg,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1988]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            __frame->info_level = *(DWORD *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            if (__frame->_StubMsg.Buffer > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
        }
        RpcExcept(RPC_BAD_STUB_DATA_EXCEPTION_FILTER)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        RpcEndExcept

        __frame->info = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));

        __frame->_RetVal = svcctl_QueryServiceConfigEx(
            (SC_RPC_HANDLE)*NDRSContextValue(__frame->service),
            __frame->info_level,
            __frame->info);
        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1302]);

        _pRpcMessage->BufferLength = __frame->_StubMsg.BufferLength;

        _Status = I_RpcGetBuffer(_pRpcMessage);
        if (_Status)
            RpcRaiseException(_Status);

        __frame->_StubMsg.Buffer = _pRpcMessage->Buffer;

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->info,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1302]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

    }
    RpcFinally
    {
        __finally_svcctl_svcctl_QueryServiceConfigEx( __frame );
    }
    RpcEndFinally

    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

#if !defined(__RPC_WIN64__)
#error  Invalid build platform for this stub.
#endif

static const unsigned short svcctl_FormatStringOffsetTable[] =
{
    0,  /* svcctl_CloseServiceHandle */
    6,  /* svcctl_ControlService */
    18,  /* svcctl_DeleteService */
    24,  /* svcctl_LockServiceDatabase */
    34,  /* svcctl_QueryServiceObjectSecurity */
    52,  /* svcctl_SetServiceObjectSecurity */
    66,  /* svcctl_QueryServiceStatus */
    76,  /* svcctl_SetServiceStatus */
    86,  /* svcctl_UnlockServiceDatabase */
    92,  /* svcctl_NotifyBootConfigStatus */
    100,  /* svcctl_SCSetServiceBitsW */
    102,  /* svcctl_ChangeServiceConfigW */
    146,  /* svcctl_CreateServiceW */
    200,  /* svcctl_EnumDependentServicesW */
    222,  /* svcctl_EnumServicesStatusW */
    250,  /* svcctl_OpenSCManagerW */
    266,  /* svcctl_OpenServiceW */
    282,  /* svcctl_QueryServiceConfigW */
    298,  /* svcctl_QueryServiceLockStatusW */
    314,  /* svcctl_StartServiceW */
    326,  /* svcctl_GetServiceDisplayNameW */
    344,  /* svcctl_GetServiceKeyNameW */
    362,  /* svcctl_SCSetServiceBitsA */
    364,  /* svcctl_ChangeServiceConfigA */
    408,  /* svcctl_CreateServiceA */
    462,  /* svcctl_EnumDependentServicesA */
    484,  /* svcctl_EnumServicesStatusA */
    512,  /* svcctl_OpenSCManagerA */
    528,  /* svcctl_OpenServiceA */
    544,  /* svcctl_QueryServiceConfigA */
    560,  /* svcctl_QueryServiceLockStatusA */
    576,  /* svcctl_StartServiceA */
    588,  /* svcctl_GetServiceDisplayNameA */
    606,  /* svcctl_GetServiceKeyNameA */
    624,  /* svcctl_GetCurrentGroupStateW */
    626,  /* svcctl_EnumServiceGroupW */
    658,  /* svcctl_ChangeServiceConfig2A */
    668,  /* svcctl_ChangeServiceConfig2W */
    678,  /* svcctl_QueryServiceConfig2A */
    696,  /* svcctl_QueryServiceConfig2W */
    714,  /* svcctl_QueryServiceStatusEx */
    732,  /* svcctl_EnumServicesStatusExA */
    766,  /* svcctl_EnumServicesStatusExW */
    800,  /* svcctl_unknown43 */
    802,  /* svcctl_CreateServiceWOW64A */
    856,  /* svcctl_CreateServiceWOW64W */
    910,  /* svcctl_unknown46 */
    912,  /* svcctl_NotifyServiceStatusChange */
    938,  /* svcctl_GetNotifyResults */
    948,  /* svcctl_CloseNotifyHandle */
    958,  /* svcctl_ControlServiceExA */
    976,  /* svcctl_ControlServiceExW */
    994,  /* svcctl_unknown52 */
    996,  /* svcctl_unknown53 */
    998,  /* svcctl_unknown54 */
    1000,  /* svcctl_unknown55 */
    1002,  /* svcctl_QueryServiceConfigEx */
};

static const MIDL_STUB_DESC svcctl_StubDesc =
{
    (void *)& svcctl___RpcServerInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        0,
    },
    RundownRoutines,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

static RPC_DISPATCH_FUNCTION svcctl_table[] =
{
    svcctl_svcctl_CloseServiceHandle,
    svcctl_svcctl_ControlService,
    svcctl_svcctl_DeleteService,
    svcctl_svcctl_LockServiceDatabase,
    svcctl_svcctl_QueryServiceObjectSecurity,
    svcctl_svcctl_SetServiceObjectSecurity,
    svcctl_svcctl_QueryServiceStatus,
    svcctl_svcctl_SetServiceStatus,
    svcctl_svcctl_UnlockServiceDatabase,
    svcctl_svcctl_NotifyBootConfigStatus,
    svcctl_svcctl_SCSetServiceBitsW,
    svcctl_svcctl_ChangeServiceConfigW,
    svcctl_svcctl_CreateServiceW,
    svcctl_svcctl_EnumDependentServicesW,
    svcctl_svcctl_EnumServicesStatusW,
    svcctl_svcctl_OpenSCManagerW,
    svcctl_svcctl_OpenServiceW,
    svcctl_svcctl_QueryServiceConfigW,
    svcctl_svcctl_QueryServiceLockStatusW,
    svcctl_svcctl_StartServiceW,
    svcctl_svcctl_GetServiceDisplayNameW,
    svcctl_svcctl_GetServiceKeyNameW,
    svcctl_svcctl_SCSetServiceBitsA,
    svcctl_svcctl_ChangeServiceConfigA,
    svcctl_svcctl_CreateServiceA,
    svcctl_svcctl_EnumDependentServicesA,
    svcctl_svcctl_EnumServicesStatusA,
    svcctl_svcctl_OpenSCManagerA,
    svcctl_svcctl_OpenServiceA,
    svcctl_svcctl_QueryServiceConfigA,
    svcctl_svcctl_QueryServiceLockStatusA,
    svcctl_svcctl_StartServiceA,
    svcctl_svcctl_GetServiceDisplayNameA,
    svcctl_svcctl_GetServiceKeyNameA,
    svcctl_svcctl_GetCurrentGroupStateW,
    svcctl_svcctl_EnumServiceGroupW,
    svcctl_svcctl_ChangeServiceConfig2A,
    svcctl_svcctl_ChangeServiceConfig2W,
    svcctl_svcctl_QueryServiceConfig2A,
    svcctl_svcctl_QueryServiceConfig2W,
    svcctl_svcctl_QueryServiceStatusEx,
    svcctl_svcctl_EnumServicesStatusExA,
    svcctl_svcctl_EnumServicesStatusExW,
    svcctl_svcctl_unknown43,
    svcctl_svcctl_CreateServiceWOW64A,
    svcctl_svcctl_CreateServiceWOW64W,
    svcctl_svcctl_unknown46,
    svcctl_svcctl_NotifyServiceStatusChange,
    svcctl_svcctl_GetNotifyResults,
    svcctl_svcctl_CloseNotifyHandle,
    svcctl_svcctl_ControlServiceExA,
    svcctl_svcctl_ControlServiceExW,
    svcctl_svcctl_unknown52,
    svcctl_svcctl_unknown53,
    svcctl_svcctl_unknown54,
    svcctl_svcctl_unknown55,
    svcctl_svcctl_QueryServiceConfigEx,
    0
};
static RPC_DISPATCH_TABLE svcctl_v2_0_DispatchTable =
{
    57,
    svcctl_table
};

static const SERVER_ROUTINE svcctl_ServerRoutineTable[] =
{
    (SERVER_ROUTINE)svcctl_CloseServiceHandle,
    (SERVER_ROUTINE)svcctl_ControlService,
    (SERVER_ROUTINE)svcctl_DeleteService,
    (SERVER_ROUTINE)svcctl_LockServiceDatabase,
    (SERVER_ROUTINE)svcctl_QueryServiceObjectSecurity,
    (SERVER_ROUTINE)svcctl_SetServiceObjectSecurity,
    (SERVER_ROUTINE)svcctl_QueryServiceStatus,
    (SERVER_ROUTINE)svcctl_SetServiceStatus,
    (SERVER_ROUTINE)svcctl_UnlockServiceDatabase,
    (SERVER_ROUTINE)svcctl_NotifyBootConfigStatus,
    (SERVER_ROUTINE)svcctl_SCSetServiceBitsW,
    (SERVER_ROUTINE)svcctl_ChangeServiceConfigW,
    (SERVER_ROUTINE)svcctl_CreateServiceW,
    (SERVER_ROUTINE)svcctl_EnumDependentServicesW,
    (SERVER_ROUTINE)svcctl_EnumServicesStatusW,
    (SERVER_ROUTINE)svcctl_OpenSCManagerW,
    (SERVER_ROUTINE)svcctl_OpenServiceW,
    (SERVER_ROUTINE)svcctl_QueryServiceConfigW,
    (SERVER_ROUTINE)svcctl_QueryServiceLockStatusW,
    (SERVER_ROUTINE)svcctl_StartServiceW,
    (SERVER_ROUTINE)svcctl_GetServiceDisplayNameW,
    (SERVER_ROUTINE)svcctl_GetServiceKeyNameW,
    (SERVER_ROUTINE)svcctl_SCSetServiceBitsA,
    (SERVER_ROUTINE)svcctl_ChangeServiceConfigA,
    (SERVER_ROUTINE)svcctl_CreateServiceA,
    (SERVER_ROUTINE)svcctl_EnumDependentServicesA,
    (SERVER_ROUTINE)svcctl_EnumServicesStatusA,
    (SERVER_ROUTINE)svcctl_OpenSCManagerA,
    (SERVER_ROUTINE)svcctl_OpenServiceA,
    (SERVER_ROUTINE)svcctl_QueryServiceConfigA,
    (SERVER_ROUTINE)svcctl_QueryServiceLockStatusA,
    (SERVER_ROUTINE)svcctl_StartServiceA,
    (SERVER_ROUTINE)svcctl_GetServiceDisplayNameA,
    (SERVER_ROUTINE)svcctl_GetServiceKeyNameA,
    (SERVER_ROUTINE)svcctl_GetCurrentGroupStateW,
    (SERVER_ROUTINE)svcctl_EnumServiceGroupW,
    (SERVER_ROUTINE)svcctl_ChangeServiceConfig2A,
    (SERVER_ROUTINE)svcctl_ChangeServiceConfig2W,
    (SERVER_ROUTINE)svcctl_QueryServiceConfig2A,
    (SERVER_ROUTINE)svcctl_QueryServiceConfig2W,
    (SERVER_ROUTINE)svcctl_QueryServiceStatusEx,
    (SERVER_ROUTINE)svcctl_EnumServicesStatusExA,
    (SERVER_ROUTINE)svcctl_EnumServicesStatusExW,
    (SERVER_ROUTINE)svcctl_unknown43,
    (SERVER_ROUTINE)svcctl_CreateServiceWOW64A,
    (SERVER_ROUTINE)svcctl_CreateServiceWOW64W,
    (SERVER_ROUTINE)svcctl_unknown46,
    (SERVER_ROUTINE)svcctl_NotifyServiceStatusChange,
    (SERVER_ROUTINE)svcctl_GetNotifyResults,
    (SERVER_ROUTINE)svcctl_CloseNotifyHandle,
    (SERVER_ROUTINE)svcctl_ControlServiceExA,
    (SERVER_ROUTINE)svcctl_ControlServiceExW,
    (SERVER_ROUTINE)svcctl_unknown52,
    (SERVER_ROUTINE)svcctl_unknown53,
    (SERVER_ROUTINE)svcctl_unknown54,
    (SERVER_ROUTINE)svcctl_unknown55,
    (SERVER_ROUTINE)svcctl_QueryServiceConfigEx,
};

static const MIDL_SERVER_INFO svcctl_ServerInfo =
{
    &svcctl_StubDesc,
    svcctl_ServerRoutineTable,
    __MIDL_ProcFormatString.Format,
    svcctl_FormatStringOffsetTable,
    0,
    0,
    0,
    0
};

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter handle) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 4 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa),	/* type offset = 10 */
/* 10 (parameter dwControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter lpServiceStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a),	/* type offset = 26 */
/* 16 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 18 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e),	/* type offset = 30 */
/* 22 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22),	/* type offset = 34 */
/* 28 (parameter phLock) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x26),	/* type offset = 38 */
/* 32 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2e),	/* type offset = 46 */
/* 38 (parameter info) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 40 (parameter descriptor) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x32),	/* type offset = 50 */
/* 44 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x40),	/* type offset = 64 */
/* 50 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 52 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x44),	/* type offset = 68 */
/* 56 (parameter info) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 58 (parameter descriptor) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x48),	/* type offset = 72 */
/* 62 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 64 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 66 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x56),	/* type offset = 86 */
/* 70 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5a),	/* type offset = 90 */
/* 74 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter hServiceStatus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e),	/* type offset = 94 */
/* 80 (parameter lpServiceStatus) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6e),	/* type offset = 110 */
/* 84 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter phLock) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x72),	/* type offset = 114 */
/* 90 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter machinename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7a),	/* type offset = 122 */
/* 96 (parameter boot_acceptable) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 98 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 100 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 102 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7e),	/* type offset = 126 */
/* 106 (parameter dwServiceType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 108 (parameter dwStartType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 110 (parameter dwErrorControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 112 (parameter lpBinaryPathName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x82),	/* type offset = 130 */
/* 116 (parameter lpLoadOrderGroupKey) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x86),	/* type offset = 134 */
/* 120 (parameter lpdwTagId) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x8a),	/* type offset = 138 */
/* 124 (parameter lpDependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x98),	/* type offset = 152 */
/* 128 (parameter dwDependenciesSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter lpServiceStartName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9c),	/* type offset = 156 */
/* 134 (parameter lpPassword) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xaa),	/* type offset = 170 */
/* 138 (parameter dwPasswordSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 140 (parameter lpDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xae),	/* type offset = 174 */
/* 144 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 146 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb2),	/* type offset = 178 */
/* 150 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 154 (parameter lpDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xba),	/* type offset = 186 */
/* 158 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 160 (parameter dwServiceType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 162 (parameter dwStartType) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 164 (parameter dwErrorControl) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 166 (parameter lpBinaryPathName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbe),	/* type offset = 190 */
/* 170 (parameter lpLoadOrderGroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc2),	/* type offset = 194 */
/* 174 (parameter lpdwTagId) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xc6),	/* type offset = 198 */
/* 178 (parameter lpDependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd4),	/* type offset = 212 */
/* 182 (parameter dwDependenciesSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 184 (parameter lpServiceStartName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd8),	/* type offset = 216 */
/* 188 (parameter lpPassword) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe6),	/* type offset = 230 */
/* 192 (parameter dwPasswordSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xea),	/* type offset = 234 */
/* 198 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 200 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf2),	/* type offset = 242 */
/* 204 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 206 (parameter services) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf6),	/* type offset = 246 */
/* 210 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 212 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x104),	/* type offset = 260 */
/* 216 (parameter services_ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x108),	/* type offset = 264 */
/* 220 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 222 (parameter hmngr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10c),	/* type offset = 268 */
/* 226 (parameter type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 228 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 230 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x110),	/* type offset = 272 */
/* 234 (parameter size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 236 (parameter needed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11e),	/* type offset = 286 */
/* 240 (parameter returned) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x122),	/* type offset = 290 */
/* 244 (parameter resume) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x126),	/* type offset = 294 */
/* 248 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 250 (parameter MachineName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12a),	/* type offset = 298 */
/* 254 (parameter DatabaseName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12e),	/* type offset = 302 */
/* 258 (parameter dwAccessMask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter handle) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x132),	/* type offset = 306 */
/* 264 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 266 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13a),	/* type offset = 314 */
/* 270 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13e),	/* type offset = 318 */
/* 274 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 276 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x142),	/* type offset = 322 */
/* 280 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 282 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x14a),	/* type offset = 330 */
/* 286 (parameter config) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18a),	/* type offset = 394 */
/* 290 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 292 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18e),	/* type offset = 398 */
/* 296 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 298 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x192),	/* type offset = 402 */
/* 302 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1ac),	/* type offset = 428 */
/* 306 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 308 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1b0),	/* type offset = 432 */
/* 312 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 314 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1b4),	/* type offset = 436 */
/* 318 (parameter dwNumServiceArgs) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 320 (parameter lpServiceArgVectors) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1ca),	/* type offset = 458 */
/* 324 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 326 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1ce),	/* type offset = 462 */
/* 330 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1d2),	/* type offset = 466 */
/* 334 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1d6),	/* type offset = 470 */
/* 338 (parameter cchBufSize) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1dc),	/* type offset = 476 */
/* 342 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 344 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e0),	/* type offset = 480 */
/* 348 (parameter lpServiceDisplayName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1e4),	/* type offset = 484 */
/* 352 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1e8),	/* type offset = 488 */
/* 356 (parameter cchBufSize) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1ee),	/* type offset = 494 */
/* 360 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 362 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 364 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f2),	/* type offset = 498 */
/* 368 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 370 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 372 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 374 (parameter binarypath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1f6),	/* type offset = 502 */
/* 378 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1fa),	/* type offset = 506 */
/* 382 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1fe),	/* type offset = 510 */
/* 386 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x20c),	/* type offset = 524 */
/* 390 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 392 (parameter startname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x210),	/* type offset = 528 */
/* 396 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x21e),	/* type offset = 542 */
/* 400 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 402 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x222),	/* type offset = 546 */
/* 406 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 408 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x226),	/* type offset = 550 */
/* 412 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22a),	/* type offset = 554 */
/* 416 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x22e),	/* type offset = 558 */
/* 420 (parameter desiredaccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 422 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 424 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 426 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 428 (parameter binarypath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x232),	/* type offset = 562 */
/* 432 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x236),	/* type offset = 566 */
/* 436 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x23a),	/* type offset = 570 */
/* 440 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x248),	/* type offset = 584 */
/* 444 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 446 (parameter startname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x24c),	/* type offset = 588 */
/* 450 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x25a),	/* type offset = 602 */
/* 454 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 456 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x25e),	/* type offset = 606 */
/* 460 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 462 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x266),	/* type offset = 614 */
/* 466 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 468 (parameter services) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x26a),	/* type offset = 618 */
/* 472 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 474 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x278),	/* type offset = 632 */
/* 478 (parameter services_ret) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x27c),	/* type offset = 636 */
/* 482 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 484 (parameter hmngr) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x280),	/* type offset = 640 */
/* 488 (parameter type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 490 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 492 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x284),	/* type offset = 644 */
/* 496 (parameter size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 498 (parameter needed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x292),	/* type offset = 658 */
/* 502 (parameter returned) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x296),	/* type offset = 662 */
/* 506 (parameter resume) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x29a),	/* type offset = 666 */
/* 510 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 512 (parameter MachineName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x29e),	/* type offset = 670 */
/* 516 (parameter DatabaseName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2a2),	/* type offset = 674 */
/* 520 (parameter dwAccessMask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 522 (parameter handle) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2a6),	/* type offset = 678 */
/* 526 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 528 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2ae),	/* type offset = 686 */
/* 532 (parameter lpServiceName) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2b2),	/* type offset = 690 */
/* 536 (parameter dwDesiredAccess) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 538 (parameter phService) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2b6),	/* type offset = 694 */
/* 542 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 544 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x2be),	/* type offset = 702 */
/* 548 (parameter config) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x2fe),	/* type offset = 766 */
/* 552 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 554 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x302),	/* type offset = 770 */
/* 558 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 560 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x306),	/* type offset = 774 */
/* 564 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x320),	/* type offset = 800 */
/* 568 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 570 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x324),	/* type offset = 804 */
/* 574 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 576 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x328),	/* type offset = 808 */
/* 580 (parameter argc) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 582 (parameter args) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x33e),	/* type offset = 830 */
/* 586 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 588 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x342),	/* type offset = 834 */
/* 592 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x346),	/* type offset = 838 */
/* 596 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x34a),	/* type offset = 842 */
/* 600 (parameter buf_size) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x350),	/* type offset = 848 */
/* 604 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 606 (parameter hSCManager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x354),	/* type offset = 852 */
/* 610 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x358),	/* type offset = 856 */
/* 614 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x35c),	/* type offset = 860 */
/* 618 (parameter buf_size) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x362),	/* type offset = 866 */
/* 622 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 624 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 626 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x366),	/* type offset = 870 */
/* 630 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 632 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 634 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x36a),	/* type offset = 874 */
/* 638 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 640 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x378),	/* type offset = 888 */
/* 644 (parameter returned_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x37c),	/* type offset = 892 */
/* 648 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x380),	/* type offset = 896 */
/* 652 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x384),	/* type offset = 900 */
/* 656 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 658 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x388),	/* type offset = 904 */
/* 662 (parameter info) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x466),	/* type offset = 1126 */
/* 666 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 668 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x476),	/* type offset = 1142 */
/* 672 (parameter info) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x516),	/* type offset = 1302 */
/* 676 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 678 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x526),	/* type offset = 1318 */
/* 682 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 684 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x52a),	/* type offset = 1322 */
/* 688 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 690 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x538),	/* type offset = 1336 */
/* 694 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 696 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x53c),	/* type offset = 1340 */
/* 700 (parameter InfoLevel) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 702 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x540),	/* type offset = 1344 */
/* 706 (parameter cbBufSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 708 (parameter pcbBytesNeeded) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x54a),	/* type offset = 1354 */
/* 712 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 714 (parameter hService) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x54e),	/* type offset = 1358 */
/* 718 (parameter InfoLevel) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 720 (parameter lpBuffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x552),	/* type offset = 1362 */
/* 724 (parameter cbBufSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 726 (parameter pcbBytesNeeded) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x560),	/* type offset = 1376 */
/* 730 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 732 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x564),	/* type offset = 1380 */
/* 736 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 738 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 740 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 742 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x568),	/* type offset = 1384 */
/* 746 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 748 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x576),	/* type offset = 1398 */
/* 752 (parameter services_count) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x57a),	/* type offset = 1402 */
/* 756 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x57e),	/* type offset = 1406 */
/* 760 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x582),	/* type offset = 1410 */
/* 764 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 766 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x586),	/* type offset = 1414 */
/* 770 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x0d,    /* FC_ENUM16 */
/* 772 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 774 (parameter service_state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 776 (parameter buffer) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x58a),	/* type offset = 1418 */
/* 780 (parameter buf_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 782 (parameter needed_size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x598),	/* type offset = 1432 */
/* 786 (parameter services_count) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x59c),	/* type offset = 1436 */
/* 790 (parameter resume_index) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x5a0),	/* type offset = 1440 */
/* 794 (parameter groupname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5a4),	/* type offset = 1444 */
/* 798 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 800 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 802 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5a8),	/* type offset = 1448 */
/* 806 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ac),	/* type offset = 1452 */
/* 810 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5b0),	/* type offset = 1456 */
/* 814 (parameter accessmask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 816 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 818 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 820 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 822 (parameter imagepath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5b4),	/* type offset = 1460 */
/* 826 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5b8),	/* type offset = 1464 */
/* 830 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x5bc),	/* type offset = 1468 */
/* 834 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ca),	/* type offset = 1482 */
/* 838 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 840 (parameter start_name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ce),	/* type offset = 1486 */
/* 844 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5dc),	/* type offset = 1500 */
/* 848 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 850 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5e0),	/* type offset = 1504 */
/* 854 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 856 (parameter scmanager) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e8),	/* type offset = 1512 */
/* 860 (parameter servicename) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5ec),	/* type offset = 1516 */
/* 864 (parameter displayname) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f0),	/* type offset = 1520 */
/* 868 (parameter accessmask) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 870 (parameter service_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 872 (parameter start_type) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 874 (parameter error_control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 876 (parameter imagepath) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f4),	/* type offset = 1524 */
/* 880 (parameter loadordergroup) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5f8),	/* type offset = 1528 */
/* 884 (parameter tagid) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x5fc),	/* type offset = 1532 */
/* 888 (parameter dependencies) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x60a),	/* type offset = 1546 */
/* 892 (parameter depend_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 894 (parameter start_name) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x60e),	/* type offset = 1550 */
/* 898 (parameter password) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x61c),	/* type offset = 1564 */
/* 902 (parameter password_size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 904 (parameter service) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x620),	/* type offset = 1568 */
/* 908 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 910 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 912 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x628),	/* type offset = 1576 */
/* 916 (parameter params) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6ae),	/* type offset = 1710 */
/* 920 (parameter clientprocessguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6d0),	/* type offset = 1744 */
/* 924 (parameter scmprocessguid) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6d4),	/* type offset = 1748 */
/* 928 (parameter createremotequeue) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6d8),	/* type offset = 1752 */
/* 932 (parameter notify) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6dc),	/* type offset = 1756 */
/* 936 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 938 (parameter notify) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6e4),	/* type offset = 1764 */
/* 942 (parameter params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x70a),	/* type offset = 1802 */
/* 946 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 948 (parameter notify) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x70e),	/* type offset = 1806 */
/* 952 (parameter apc_fired) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x716),	/* type offset = 1814 */
/* 956 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 958 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x71a),	/* type offset = 1818 */
/* 962 (parameter control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 964 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 966 (parameter in_params) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x74a),	/* type offset = 1866 */
/* 970 (parameter out_params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x770),	/* type offset = 1904 */
/* 974 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 976 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x774),	/* type offset = 1908 */
/* 980 (parameter control) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 982 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 984 (parameter in_params) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7a4),	/* type offset = 1956 */
/* 988 (parameter out_params) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7c0),	/* type offset = 1984 */
/* 992 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 994 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 996 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 998 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1000 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1002 (parameter service) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7c4),	/* type offset = 1988 */
/* 1006 (parameter info_level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 1008 (parameter info) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7c8),	/* type offset = 1992 */
/* 1012 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (6) */
/*  6 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 10 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 14 (SERVICE_STATUS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x1c),	/* 28 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 26 (SERVICE_STATUS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfff2),	/* Offset= -14 (14) */
/* 30 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 34 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 38 (SC_RPC_LOCK *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (42) */
/* 42 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x1,	/* rundown routine */
        0, /* FIXME: param num */
/* 46 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 50 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 60 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (50) */
/* 64 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 68 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 72 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 82 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (72) */
/* 86 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 90 (SERVICE_STATUS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffb2),	/* Offset= -78 (14) */
/* 94 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 98 (struct _SERVICE_STATUS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x1c),	/* 28 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 110 (LPSERVICE_STATUS) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (98) */
/* 114 (SC_RPC_LOCK *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (118) */
/* 118 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x1,	/* rundown routine */
        0, /* FIXME: param num */
/* 122 (SVCCTL_HANDLEW) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 124 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 126 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 130 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 132 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 134 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 136 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 138 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 142 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwDependenciesSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 152 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (142) */
/* 156 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 158 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 160 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwPasswordSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 170 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (160) */
/* 174 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 176 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 178 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 182 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 184 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 186 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 188 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 190 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 192 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 194 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 196 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 198 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 202 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwDependenciesSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 212 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (202) */
/* 216 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 218 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 220 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter dwPasswordSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x70),	/* offset = 112 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 230 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (220) */
/* 234 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (238) */
/* 238 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 242 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 246 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 256 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (246) */
/* 260 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 264 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 268 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 272 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 282 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (272) */
/* 286 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 290 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 294 (LPDWORD) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 298 (MACHINE_HANDLEW) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 300 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 302 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 304 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 306 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (310) */
/* 310 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 314 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 318 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 320 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 322 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (326) */
/* 326 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 330 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 334 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 336 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 338 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 340 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 342 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 344 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 346 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 348 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 350 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 352 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 354 (QUERY_SERVICE_CONFIGW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x40),	/* 64 */
        NdrFcShort(0x0),
        NdrFcShort(0xe),	/* Offset= 14 (374) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 374 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 376 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 378 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 380 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 382 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 384 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 386 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 388 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 390 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 392 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 394 (QUERY_SERVICE_CONFIGW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffd6),	/* Offset= -42 (354) */
/* 398 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 402 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 406 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 408 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 410 (QUERY_SERVICE_LOCK_STATUSW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (424) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 424 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 426 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 428 (QUERY_SERVICE_LOCK_STATUSW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (410) */
/* 432 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 436 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 440 (LPCWSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter dwNumServiceArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
/* 452 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 454 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 458 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (440) */
/* 462 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 466 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 468 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 470 */
        0x25,	/* FC_C_WSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceDisplayNameW */
        0x0,
        NdrFcShort(0x0),
/* 476 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 480 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 484 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 486 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 488 */
        0x25,	/* FC_C_WSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceKeyNameW */
        0x0,
        NdrFcShort(0x0),
/* 494 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 498 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 502 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 504 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 506 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 508 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 510 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 514 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 524 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (514) */
/* 528 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 530 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 532 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 542 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (532) */
/* 546 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 548 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 550 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 554 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 556 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 558 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 560 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 562 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 564 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 566 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 568 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 570 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 574 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 584 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (574) */
/* 588 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 590 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 592 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x70),	/* offset = 112 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 602 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (592) */
/* 606 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (610) */
/* 610 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 614 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 618 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 628 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (618) */
/* 632 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 636 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 640 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 644 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 654 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (644) */
/* 658 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 662 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 666 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 670 (MACHINE_HANDLEA) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 672 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 674 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 676 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 678 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (682) */
/* 682 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 686 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 690 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 692 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 694 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (698) */
/* 698 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 702 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 706 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 708 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 710 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 712 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 714 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 716 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 718 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 720 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 722 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 724 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 726 (QUERY_SERVICE_CONFIGA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x40),	/* 64 */
        NdrFcShort(0x0),
        NdrFcShort(0xe),	/* Offset= 14 (746) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 746 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 748 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 750 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 752 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 754 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 756 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 758 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 760 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 762 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 764 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 766 (QUERY_SERVICE_CONFIGA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffd6),	/* Offset= -42 (726) */
/* 770 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 774 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 778 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 780 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 782 (QUERY_SERVICE_LOCK_STATUSA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (796) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 796 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 798 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 800 (QUERY_SERVICE_LOCK_STATUSA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffec),	/* Offset= -20 (782) */
/* 804 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 808 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 812 (LPCSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter argc, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
/* 824 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 826 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 830 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (812) */
/* 834 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 838 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 840 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 842 */
        0x22,	/* FC_C_CSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceDisplayNameA */
        0x0,
        NdrFcShort(0x0),
/* 848 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 852 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 856 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 858 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 860 */
        0x22,	/* FC_C_CSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x20,	/* Corr desc: unused for svcctl_GetServiceKeyNameA */
        0x0,
        NdrFcShort(0x0),
/* 866 (DWORD *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 870 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 874 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 884 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (874) */
/* 888 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 892 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 896 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 900 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 902 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 904 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 908 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 910 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 912 (SERVICE_DESCRIPTIONA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x4),	/* Offset= 4 (922) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 922 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 924 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 926 (SERVICE_DESCRIPTIONA *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (912) */
/* 930 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 932 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 934 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 936 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 938 (SC_ACTION) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (944) */
        0x0d,	/* FC_ENUM16 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 950 (SC_ACTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cActions, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (938) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 968 (SERVICE_FAILURE_ACTIONSA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x28),	/* 40 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (984) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 984 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 986 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 988 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 990 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 992 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (950) */
/* 996 (SERVICE_FAILURE_ACTIONSA *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe2),	/* Offset= -30 (968) */
/* 1000 (SERVICE_DELAYED_AUTO_START_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1006 (SERVICE_DELAYED_AUTO_START_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1000) */
/* 1010 (SERVICE_FAILURE_ACTIONS_FLAG) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1016 (SERVICE_FAILURE_ACTIONS_FLAG *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1010) */
/* 1020 (SERVICE_SID_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1026 (SERVICE_SID_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1020) */
/* 1030 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbRequiredPrivileges, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1040 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1052) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1052 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1030) */
/* 1056 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (1040) */
/* 1060 (SERVICE_PRESHUTDOWN_INFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1066 (SERVICE_PRESHUTDOWN_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff8),	/* Offset= -8 (1060) */
/* 1070 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xff68),	/* Offset= -152 (926) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffa8),	/* Offset= -88 (996) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffac),	/* Offset= -84 (1006) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffb0),	/* Offset= -80 (1016) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffb4),	/* Offset= -76 (1026) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffcc),	/* Offset= -52 (1056) */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0xffd0),	/* Offset= -48 (1066) */
        NdrFcShort(0xffff),
/* 1118 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffca),	/* Offset= -54 (1070) */
/* 1126 (SC_RPC_CONFIG_INFOA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1132) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (1118) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1142 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1146 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1148 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1150 (SERVICE_DESCRIPTIONW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x4),	/* Offset= 4 (1160) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1160 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1162 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1164 (SERVICE_DESCRIPTIONW *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (1150) */
/* 1168 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1170 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1172 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1174 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1176 (SC_ACTION *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cActions, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff04),	/* Offset= -252 (938) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1194 (SERVICE_FAILURE_ACTIONSW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x28),	/* 40 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (1210) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1210 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1212 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1214 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1216 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1218 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (1176) */
/* 1222 (SERVICE_FAILURE_ACTIONSW *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe2),	/* Offset= -30 (1194) */
/* 1226 (SERVICE_DELAYED_AUTO_START_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff1c),	/* Offset= -228 (1000) */
/* 1230 (SERVICE_FAILURE_ACTIONS_FLAG *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff22),	/* Offset= -222 (1010) */
/* 1234 (SERVICE_SID_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff28),	/* Offset= -216 (1020) */
/* 1238 (SERVICE_RPC_REQUIRED_PRIVILEGES_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff38),	/* Offset= -200 (1040) */
/* 1242 (SERVICE_PRESHUTDOWN_INFO *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff48),	/* Offset= -184 (1060) */
/* 1246 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffa6),	/* Offset= -90 (1164) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffda),	/* Offset= -38 (1222) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffd8),	/* Offset= -40 (1226) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffd6),	/* Offset= -42 (1230) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffd4),	/* Offset= -44 (1234) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffd2),	/* Offset= -46 (1238) */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0xffd0),	/* Offset= -48 (1242) */
        NdrFcShort(0xffff),
/* 1294 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffca),	/* Offset= -54 (1246) */
/* 1302 (SC_RPC_CONFIG_INFOW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1308) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (1294) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1318 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1322 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1332 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1322) */
/* 1336 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1340 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1344 (BYTE[]) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter cbBufSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1354 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1358 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1362 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter cbBufSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1372 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1362) */
/* 1376 (LPDWORD) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1380 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1384 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1394 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1384) */
/* 1398 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1402 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1406 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1410 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1412 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1414 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1418 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter buf_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1428 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1418) */
/* 1432 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1436 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1440 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1444 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1446 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1448 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1452 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1454 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1456 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1458 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1460 (LPCSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1462 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1464 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1466 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1468 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1472 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1482 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1472) */
/* 1486 (LPCSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1488 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1490 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x70),	/* offset = 112 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1500 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1490) */
/* 1504 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1508) */
/* 1508 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1512 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1516 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1518 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1520 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1522 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1524 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 1526 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1528 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1530 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1532 (DWORD *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1536 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter depend_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1546 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1536) */
/* 1550 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1552 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1554 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter password_size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x70),	/* offset = 112 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1564 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1554) */
/* 1568 (SC_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1572) */
/* 1572 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1576 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1580 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1586 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1592 (SERVICE_STATUS_PROCESS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1606 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_1) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x58),	/* 88 */
        0x0b,	/* FC_HYPER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1580) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1586) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe2),	/* Offset= -30 (1592) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1628 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_1 *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1606) */
/* 1632 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1638 (UCHAR[16]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x10),	/* 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1644 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1646 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1648 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_2) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x68),	/* 104 */
        NdrFcShort(0x0),
        NdrFcShort(0x16),	/* Offset= 22 (1676) */
        0x0b,	/* FC_HYPER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe4),	/* Offset= -28 (1632) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (1638) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffb4),	/* Offset= -76 (1592) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1676 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1678 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1680 (SERVICE_NOTIFY_STATUS_CHANGE_PARAMS_2 *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (1648) */
/* 1684 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x2),	/* 2 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffc0),	/* Offset= -64 (1628) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffee),	/* Offset= -18 (1680) */
        NdrFcShort(0xffff),
/* 1702 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field dwInfoLevel, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffe8),	/* Offset= -24 (1684) */
/* 1710 (SC_RPC_NOTIFY_PARAMS) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1716) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (1702) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1726 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1732 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1726) */
        0x5b,	/* FC_END */
/* 1744 (GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1732) */
/* 1748 (GUID *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffee),	/* Offset= -18 (1732) */
/* 1752 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1756 (SC_NOTIFY_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1760) */
/* 1760 */
        0x30,	/* FC_BIND_CONTEXT */
        0xa0,	/* Context flags: out, via ptr, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1764 (SC_NOTIFY_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1768 (SC_RPC_NOTIFY_PARAMS[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x9,	/* Corr desc: field cElements, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffb8),	/* Offset= -72 (1710) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1786 (SC_RPC_NOTIFY_PARAMS_LIST) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xffea),	/* Offset= -22 (1768) */
        NdrFcShort(0x0),	/* Offset= 0 (1792) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1798 (SC_RPC_NOTIFY_PARAMS_LIST *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1786) */
/* 1802 (SC_RPC_NOTIFY_PARAMS_LIST **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1798) */
/* 1806 (SC_NOTIFY_RPC_HANDLE *) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),	 /* Offset= 2 (1810) */
/* 1810 */
        0x30,	/* FC_BIND_CONTEXT */
        0xe0,	/* Context flags: out, in, via ptr, */
        0x2,	/* rundown routine */
        0, /* FIXME: param num */
/* 1814 (BOOL *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1818 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1822 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1824 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1826 (struct _SERVICE_CONTROL_STATUS_REASON_IN_PARAMSA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1838) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1838 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1840 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 1842 (PSERVICE_CONTROL_STATUS_REASON_IN_PARAMSA) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (1826) */
/* 1846 (SC_RPC_SERVICE_CONTROL_IN_PARAMSA) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0x2),	/* Offset= 2 (1854) */
/* 1854 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (1842) */
        NdrFcShort(0xffff),
/* 1866 (SC_RPC_SERVICE_CONTROL_IN_PARAMSA *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffea),	/* Offset= -22 (1846) */
/* 1870 (struct _SERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x24),	/* 36 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfee4),	/* Offset= -284 (1592) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1880 (PSERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1870) */
/* 1884 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSA) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0x2),	/* Offset= 2 (1892) */
/* 1892 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (1880) */
        NdrFcShort(0xffff),
/* 1904 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSA *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffea),	/* Offset= -22 (1884) */
/* 1908 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1912 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1914 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1916 (struct _SERVICE_CONTROL_STATUS_REASON_IN_PARAMSW) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1928) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 1928 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 1930 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 1932 (PSERVICE_CONTROL_STATUS_REASON_IN_PARAMSW) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (1916) */
/* 1936 (SC_RPC_SERVICE_CONTROL_IN_PARAMSW) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0x2),	/* Offset= 2 (1944) */
/* 1944 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (1932) */
        NdrFcShort(0xffff),
/* 1956 (SC_RPC_SERVICE_CONTROL_IN_PARAMSW *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffea),	/* Offset= -22 (1936) */
/* 1960 (PSERVICE_CONTROL_STATUS_REASON_OUT_PARAMS) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffa4),	/* Offset= -92 (1870) */
/* 1964 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSW) */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x9,	/* Switch type= FC_ULONG */
        0x29,	/* Corr desc: parameter info_level, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0x2),	/* Offset= 2 (1972) */
/* 1972 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x1),	/* 1 */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffec),	/* Offset= -20 (1960) */
        NdrFcShort(0xffff),
/* 1984 (SC_RPC_SERVICE_CONTROL_OUT_PARAMSW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xffea),	/* Offset= -22 (1964) */
/* 1988 (SC_RPC_HANDLE) */
        0x30,	/* FC_BIND_CONTEXT */
        0x41,	/* Context flags: can't be null, in, */
        0x0,	/* rundown routine */
        0, /* FIXME: param num */
/* 1992 (SC_RPC_CONFIG_INFOW *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xfd4c),	/* Offset= -692 (1302) */
        0x0
    }
};


#endif /* _WIN64 */
