/*** Autogenerated by WIDL 3.8 from row_server.idl - Do not edit ***/

#define __midl_proxy
#include "objbase.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif


#ifndef _WIN64

#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 440
#endif

#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error This code needs a newer version of rpcproxy.h
#endif /* __RPCPROXY_H_VERSION__ */

#include "row_server.h"

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __proxy_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    void             *This;
};

static int __proxy_filter( struct __proxy_frame *__frame )
{
    return (__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE);
}

#define TYPE_FORMAT_STRING_SIZE 2185
#define PROC_FORMAT_STRING_SIZE 309

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const MIDL_STUB_DESC Object_StubDesc;

/*****************************************************************************
 * IWineRowServer interface
 */
static void __finally_IWineRowServer_GetColumns_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetColumns_Proxy(
    IWineRowServer* This,
    DBORDINAL num_cols,
    wine_getcolumns_in *in_data,
    wine_getcolumns_out *out_cols)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetColumns_Proxy );
    __frame->This = This;
    if (out_cols) MIDL_memset( out_cols, 0, sizeof( *out_cols ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!in_data) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!out_cols) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)in_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBORDINAL *)__frame->_StubMsg.Buffer = num_cols;
            __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)in_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&out_cols,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1330],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetColumns_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1348], (void *)out_cols );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetColumns_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBORDINAL num_cols;
    wine_getcolumns_in * in_data;
    wine_getcolumns_out * out_cols;
};

static void __finally_IWineRowServer_GetColumns_Stub( struct __frame_IWineRowServer_GetColumns_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->in_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[194]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->out_cols,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1348]);

}

void __RPC_STUB IWineRowServer_GetColumns_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetColumns_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetColumns_Stub );
    __frame->in_data = 0;
    __frame->out_cols = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBORDINAL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->num_cols = *(DBORDINAL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->in_data,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176],
            0);


        __frame->out_cols = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->num_cols * 24);
        memset(__frame->out_cols, 0, (ULONG)__frame->num_cols * 24);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetColumns(__frame->_This, __frame->num_cols, __frame->in_data, __frame->out_cols);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_cols,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1330]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_cols,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1330]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetColumns_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetSourceRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetSourceRowset_Proxy(
    IWineRowServer* This,
    REFIID riid,
    IUnknown **ppRowset,
    HROW *phRow)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetSourceRowset_Proxy );
    __frame->This = This;
    if (ppRowset) MIDL_memset( ppRowset, 0, sizeof( *ppRowset ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppRowset) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!phRow) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[612]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1362],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HROW) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *phRow = *(HROW *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HROW);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetSourceRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1362], (void *)ppRowset );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1366], (void *)phRow );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetSourceRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppRowset;
    HROW _W1;
    HROW * phRow;
};

static void __finally_IWineRowServer_GetSourceRowset_Stub( struct __frame_IWineRowServer_GetSourceRowset_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1362]);


}

void __RPC_STUB IWineRowServer_GetSourceRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetSourceRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetSourceRowset_Stub );
    __frame->riid = 0;
    __frame->ppRowset = 0;
    __frame->phRow = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[612],
            0);


        __frame->ppRowset = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->phRow = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSourceRowset(__frame->_This, __frame->riid, __frame->ppRowset, __frame->phRow);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1362]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1362]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HROW *)__frame->_StubMsg.Buffer = *__frame->phRow;
        __frame->_StubMsg.Buffer += sizeof(HROW);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetSourceRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_Open_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_Open_Proxy(
    IWineRowServer* This,
    IUnknown *pUnkOuter,
    DBID *pColumnID,
    REFGUID rguidColumnType,
    DWORD dwBindFlags,
    REFIID riid,
    IUnknown **ppUnk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_Open_Proxy );
    __frame->This = This;
    if (ppUnk) MIDL_memset( ppUnk, 0, sizeof( *ppUnk ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pColumnID) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rguidColumnType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppUnk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pColumnID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370]);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pColumnID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguidColumnType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwBindFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[612]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[26]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppUnk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1406],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_Open_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1406], (void *)ppUnk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_Open_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    DBID * pColumnID;
    REFGUID rguidColumnType;
    DWORD dwBindFlags;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppUnk;
};

static void __finally_IWineRowServer_Open_Stub( struct __frame_IWineRowServer_Open_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pColumnID,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1388]);




    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppUnk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1406]);

}

void __RPC_STUB IWineRowServer_Open_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_Open_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_Open_Stub );
    __frame->pUnkOuter = 0;
    __frame->pColumnID = 0;
    __frame->rguidColumnType = 0;
    __frame->riid = 0;
    __frame->ppUnk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[26]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1370],
            0);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pColumnID,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguidColumnType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwBindFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[612],
            0);


        __frame->ppUnk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Open(__frame->_This, __frame->pUnkOuter, __frame->pColumnID, __frame->rguidColumnType, __frame->dwBindFlags, __frame->riid, __frame->ppUnk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1406]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1406]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_Open_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_SetColumns_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_SetColumns_Proxy(
    IWineRowServer* This,
    DBORDINAL num_cols,
    wine_setcolumns_in *in_data,
    DBSTATUS *status)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_SetColumns_Proxy );
    __frame->This = This;
    if (status) MIDL_memset( status, 0, sizeof( *status ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!in_data) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!status) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)in_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1434]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBORDINAL *)__frame->_StubMsg.Buffer = num_cols;
            __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)in_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1434]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[50]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&status,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1456],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_SetColumns_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1466], (void *)status );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_SetColumns_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBORDINAL num_cols;
    wine_setcolumns_in * in_data;
    DBSTATUS * status;
};

static void __finally_IWineRowServer_SetColumns_Stub( struct __frame_IWineRowServer_SetColumns_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->in_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1452]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->status,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1466]);

}

void __RPC_STUB IWineRowServer_SetColumns_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_SetColumns_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_SetColumns_Stub );
    __frame->in_data = 0;
    __frame->status = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[50]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBORDINAL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->num_cols = *(DBORDINAL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->in_data,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1434],
            0);


        __frame->status = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->num_cols * 4);
        memset(__frame->status, 0, (ULONG)__frame->num_cols * 4);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetColumns(__frame->_This, __frame->num_cols, __frame->in_data, __frame->status);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1456]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1456]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_SetColumns_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_AddRefRows_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_AddRefRows_Proxy(
    IWineRowServer* This,
    DBCOUNTITEM cRows,
    const HROW rghRows[],
    DBREFCOUNT rgRefCounts[],
    DBROWSTATUS rgRowStatus[])
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_AddRefRows_Proxy );
    __frame->This = This;
    if (rgRefCounts) MIDL_memset( rgRefCounts, 0, sizeof( *rgRefCounts ));
    if (rgRowStatus) MIDL_memset( rgRowStatus, 0, sizeof( *rgRowStatus ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1470]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = cRows;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1470]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[62]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgRefCounts,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1480],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgRowStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1490],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_AddRefRows_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1480], (void *)rgRefCounts );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1490], (void *)rgRowStatus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_AddRefRows_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBCOUNTITEM cRows;
    const HROW (*rghRows)[];
    DBREFCOUNT (*rgRefCounts)[];
    DBROWSTATUS (*rgRowStatus)[];
};

static void __finally_IWineRowServer_AddRefRows_Stub( struct __frame_IWineRowServer_AddRefRows_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rghRows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1470]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRefCounts,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1480]);
    if (__frame->rgRefCounts)
        __frame->_StubMsg.pfnFree(__frame->rgRefCounts);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRowStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1490]);
    if (__frame->rgRowStatus)
        __frame->_StubMsg.pfnFree(__frame->rgRowStatus);

}

void __RPC_STUB IWineRowServer_AddRefRows_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_AddRefRows_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_AddRefRows_Stub );
    __frame->rghRows = 0;
    __frame->rgRefCounts = 0;
    __frame->rgRowStatus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[62]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cRows = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1470],
            0);


        __frame->rgRefCounts = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 4);
        memset(__frame->rgRefCounts, 0, (ULONG)__frame->cRows * 4);
        __frame->rgRowStatus = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 4);
        memset(__frame->rgRowStatus, 0, (ULONG)__frame->cRows * 4);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AddRefRows(__frame->_This, __frame->cRows, *__frame->rghRows, *__frame->rgRefCounts, *__frame->rgRowStatus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRefCounts,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1480]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1490]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRefCounts,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1480]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1490]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_AddRefRows_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetData_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetData_Proxy(
    IWineRowServer* This,
    HROW hRow,
    HACCESSOR hAccessor,
    BYTE *pData,
    DWORD size)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetData_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!pData) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)size;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pData,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HROW *)__frame->_StubMsg.Buffer = hRow;
            __frame->_StubMsg.Buffer += sizeof(HROW);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HACCESSOR *)__frame->_StubMsg.Buffer = hAccessor;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)size;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pData,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = size;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[78]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pData,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetData_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)size;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1510], (void *)pData );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetData_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HROW hRow;
    HACCESSOR hAccessor;
    BYTE * pData;
    DWORD size;
};

static void __finally_IWineRowServer_GetData_Stub( struct __frame_IWineRowServer_GetData_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pData,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);


}

void __RPC_STUB IWineRowServer_GetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetData_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetData_Stub );
    __frame->pData = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[78]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HROW) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hRow = *(HROW *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HROW);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pData,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetData(__frame->_This, __frame->hRow, __frame->hAccessor, __frame->pData, __frame->size);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pData,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pData,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1500]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetData_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetNextRows_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetNextRows_Proxy(
    IWineRowServer* This,
    HCHAPTER hReserved,
    DBROWOFFSET lRowsOffset,
    DBROWCOUNT cRows,
    DBCOUNTITEM *pcRowObtained,
    HROW **prghRows)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetNextRows_Proxy );
    __frame->This = This;
    if (prghRows) MIDL_memset( prghRows, 0, sizeof( *prghRows ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pcRowObtained) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prghRows) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = hReserved;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBROWOFFSET *)__frame->_StubMsg.Buffer = lRowsOffset;
            __frame->_StubMsg.Buffer += sizeof(DBROWOFFSET);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBROWCOUNT *)__frame->_StubMsg.Buffer = cRows;
            __frame->_StubMsg.Buffer += sizeof(DBROWCOUNT);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[90]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcRowObtained = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetNextRows_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1514], (void *)pcRowObtained );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1532], (void *)prghRows );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetNextRows_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HCHAPTER hReserved;
    DBROWOFFSET lRowsOffset;
    DBROWCOUNT cRows;
    DBCOUNTITEM _W0;
    DBCOUNTITEM * pcRowObtained;
    HROW *_W1;
    HROW ** prghRows;
};

static void __finally_IWineRowServer_GetNextRows_Stub( struct __frame_IWineRowServer_GetNextRows_Stub *__frame )
{




    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prghRows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532]);

}

void __RPC_STUB IWineRowServer_GetNextRows_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetNextRows_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetNextRows_Stub );
    __frame->pcRowObtained = 0;
    __frame->prghRows = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[90]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hReserved = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBROWOFFSET) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lRowsOffset = *(DBROWOFFSET *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBROWOFFSET);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBROWCOUNT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cRows = *(DBROWCOUNT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBROWCOUNT);


        __frame->pcRowObtained = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prghRows = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetNextRows(__frame->_This, __frame->hReserved, __frame->lRowsOffset, __frame->cRows, __frame->pcRowObtained, __frame->prghRows);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *__frame->pcRowObtained;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetNextRows_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_ReleaseRows_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_ReleaseRows_Proxy(
    IWineRowServer* This,
    DBCOUNTITEM cRows,
    const HROW rghRows[],
    DBROWOPTIONS rgRowOptions[],
    DBREFCOUNT rgRefCounts[],
    DBROWSTATUS rgRowStatus[])
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_ReleaseRows_Proxy );
    __frame->This = This;
    if (rgRefCounts) MIDL_memset( rgRefCounts, 0, sizeof( *rgRefCounts ));
    if (rgRowStatus) MIDL_memset( rgRowStatus, 0, sizeof( *rgRowStatus ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1536]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgRowOptions,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1546]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = cRows;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1536]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgRowOptions,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1546]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[106]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgRefCounts,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1556],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgRowStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1566],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_ReleaseRows_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1556], (void *)rgRefCounts );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1566], (void *)rgRowStatus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_ReleaseRows_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBCOUNTITEM cRows;
    const HROW (*rghRows)[];
    DBROWOPTIONS (*rgRowOptions)[];
    DBREFCOUNT (*rgRefCounts)[];
    DBROWSTATUS (*rgRowStatus)[];
};

static void __finally_IWineRowServer_ReleaseRows_Stub( struct __frame_IWineRowServer_ReleaseRows_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rghRows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1536]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRowOptions,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1546]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRefCounts,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1556]);
    if (__frame->rgRefCounts)
        __frame->_StubMsg.pfnFree(__frame->rgRefCounts);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRowStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1566]);
    if (__frame->rgRowStatus)
        __frame->_StubMsg.pfnFree(__frame->rgRowStatus);

}

void __RPC_STUB IWineRowServer_ReleaseRows_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_ReleaseRows_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_ReleaseRows_Stub );
    __frame->rghRows = 0;
    __frame->rgRowOptions = 0;
    __frame->rgRefCounts = 0;
    __frame->rgRowStatus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[106]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cRows = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1536],
            0);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgRowOptions,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1546],
            0);


        __frame->rgRefCounts = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 4);
        memset(__frame->rgRefCounts, 0, (ULONG)__frame->cRows * 4);
        __frame->rgRowStatus = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 4);
        memset(__frame->rgRowStatus, 0, (ULONG)__frame->cRows * 4);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseRows(__frame->_This, __frame->cRows, *__frame->rghRows, *__frame->rgRowOptions, *__frame->rgRefCounts, *__frame->rgRowStatus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRefCounts,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1556]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1566]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRefCounts,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1556]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1566]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_ReleaseRows_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_RestartPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_RestartPosition_Proxy(
    IWineRowServer* This,
    HCHAPTER hReserved)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_RestartPosition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = hReserved;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[126]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_RestartPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_RestartPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HCHAPTER hReserved;
};

static void __finally_IWineRowServer_RestartPosition_Stub( struct __frame_IWineRowServer_RestartPosition_Stub *__frame )
{

}

void __RPC_STUB IWineRowServer_RestartPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_RestartPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_RestartPosition_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[126]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hReserved = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RestartPosition(__frame->_This, __frame->hReserved);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_RestartPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_Compare_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_Compare_Proxy(
    IWineRowServer* This,
    HCHAPTER hReserved,
    DBBKMARK cbBookmark1,
    const BYTE *pBookmark1,
    DBBKMARK cbBookmark2,
    const BYTE *pBookmark2,
    DBCOMPARE *pComparison)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_Compare_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!pBookmark1) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pBookmark2) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pComparison) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark1;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark1,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1576]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark2;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark2,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1590]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = hReserved;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBBKMARK *)__frame->_StubMsg.Buffer = cbBookmark1;
            __frame->_StubMsg.Buffer += sizeof(DBBKMARK);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark1;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark1,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1576]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBBKMARK *)__frame->_StubMsg.Buffer = cbBookmark2;
            __frame->_StubMsg.Buffer += sizeof(DBBKMARK);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark2;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark2,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1590]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOMPARE) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pComparison = *(DBCOMPARE *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOMPARE);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_Compare_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1604], (void *)pComparison );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_Compare_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HCHAPTER hReserved;
    DBBKMARK cbBookmark1;
    const BYTE * pBookmark1;
    DBBKMARK cbBookmark2;
    const BYTE * pBookmark2;
    DBCOMPARE _W0;
    DBCOMPARE * pComparison;
};

static void __finally_IWineRowServer_Compare_Stub( struct __frame_IWineRowServer_Compare_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cbBookmark1;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pBookmark1,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1576]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cbBookmark2;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pBookmark2,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1590]);


}

void __RPC_STUB IWineRowServer_Compare_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_Compare_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_Compare_Stub );
    __frame->pBookmark1 = 0;
    __frame->pBookmark2 = 0;
    __frame->pComparison = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hReserved = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBBKMARK) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cbBookmark1 = *(DBBKMARK *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBBKMARK);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pBookmark1,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1576],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBBKMARK) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cbBookmark2 = *(DBBKMARK *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBBKMARK);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pBookmark2,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1590],
            0);


        __frame->pComparison = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Compare(__frame->_This, __frame->hReserved, __frame->cbBookmark1, __frame->pBookmark1, __frame->cbBookmark2, __frame->pBookmark2, __frame->pComparison);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOMPARE *)__frame->_StubMsg.Buffer = *__frame->pComparison;
        __frame->_StubMsg.Buffer += sizeof(DBCOMPARE);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_Compare_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetRowsAt_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetRowsAt_Proxy(
    IWineRowServer* This,
    HWATCHREGION hReserved1,
    HCHAPTER hReserved2,
    DBBKMARK cbBookmark,
    const BYTE *pBookmark,
    DBROWOFFSET lRowsOffset,
    DBROWCOUNT cRows,
    DBCOUNTITEM *pcRowsObtained,
    HROW **prghRows)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetRowsAt_Proxy );
    __frame->This = This;
    if (prghRows) MIDL_memset( prghRows, 0, sizeof( *prghRows ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        if (!pBookmark) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcRowsObtained) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prghRows) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1608]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HWATCHREGION *)__frame->_StubMsg.Buffer = hReserved1;
            __frame->_StubMsg.Buffer += sizeof(HWATCHREGION);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = hReserved2;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBBKMARK *)__frame->_StubMsg.Buffer = cbBookmark;
            __frame->_StubMsg.Buffer += sizeof(DBBKMARK);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1608]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBROWOFFSET *)__frame->_StubMsg.Buffer = lRowsOffset;
            __frame->_StubMsg.Buffer += sizeof(DBROWOFFSET);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBROWCOUNT *)__frame->_StubMsg.Buffer = cRows;
            __frame->_StubMsg.Buffer += sizeof(DBROWCOUNT);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcRowsObtained = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1640],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetRowsAt_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1622], (void *)pcRowsObtained );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1640], (void *)prghRows );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetRowsAt_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HWATCHREGION hReserved1;
    HCHAPTER hReserved2;
    DBBKMARK cbBookmark;
    const BYTE * pBookmark;
    DBROWOFFSET lRowsOffset;
    DBROWCOUNT cRows;
    DBCOUNTITEM _W0;
    DBCOUNTITEM * pcRowsObtained;
    HROW *_W1;
    HROW ** prghRows;
};

static void __finally_IWineRowServer_GetRowsAt_Stub( struct __frame_IWineRowServer_GetRowsAt_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cbBookmark;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pBookmark,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1608]);




    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prghRows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1640]);

}

void __RPC_STUB IWineRowServer_GetRowsAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetRowsAt_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetRowsAt_Stub );
    __frame->pBookmark = 0;
    __frame->pcRowsObtained = 0;
    __frame->prghRows = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HWATCHREGION) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hReserved1 = *(HWATCHREGION *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HWATCHREGION);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hReserved2 = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBBKMARK) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cbBookmark = *(DBBKMARK *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBBKMARK);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pBookmark,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1608],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBROWOFFSET) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lRowsOffset = *(DBROWOFFSET *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBROWOFFSET);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBROWCOUNT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cRows = *(DBROWCOUNT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBROWCOUNT);


        __frame->pcRowsObtained = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prghRows = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRowsAt(__frame->_This, __frame->hReserved1, __frame->hReserved2, __frame->cbBookmark, __frame->pBookmark, __frame->lRowsOffset, __frame->cRows, __frame->pcRowsObtained, __frame->prghRows);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1640]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *__frame->pcRowsObtained;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1640]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetRowsAt_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetRowsByBookmark_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetRowsByBookmark_Proxy(
    IWineRowServer* This,
    HCHAPTER hReserved,
    DBCOUNTITEM cRows,
    const DBBKMARK rgcbBookmarks[],
    const BYTE * rgpBookmarks[],
    HROW rghRows[],
    DBROWSTATUS rgRowStatus[])
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetRowsByBookmark_Proxy );
    __frame->This = This;
    if (rghRows) MIDL_memset( rghRows, 0, sizeof( *rghRows ));
    if (rgRowStatus) MIDL_memset( rgRowStatus, 0, sizeof( *rgRowStatus ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgcbBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1644]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgpBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1654]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = hReserved;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = cRows;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgcbBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1644]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgpBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1654]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[174]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1686],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgRowStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1696],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetRowsByBookmark_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1686], (void *)rghRows );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1696], (void *)rgRowStatus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetRowsByBookmark_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HCHAPTER hReserved;
    DBCOUNTITEM cRows;
    const DBBKMARK (*rgcbBookmarks)[];
    const BYTE * (*rgpBookmarks)[];
    HROW (*rghRows)[];
    DBROWSTATUS (*rgRowStatus)[];
};

static void __finally_IWineRowServer_GetRowsByBookmark_Stub( struct __frame_IWineRowServer_GetRowsByBookmark_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgcbBookmarks,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1644]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgpBookmarks,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1654]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rghRows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1686]);
    if (__frame->rghRows)
        __frame->_StubMsg.pfnFree(__frame->rghRows);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRowStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1696]);
    if (__frame->rgRowStatus)
        __frame->_StubMsg.pfnFree(__frame->rgRowStatus);

}

void __RPC_STUB IWineRowServer_GetRowsByBookmark_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetRowsByBookmark_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetRowsByBookmark_Stub );
    __frame->rgcbBookmarks = 0;
    __frame->rgpBookmarks = 0;
    __frame->rghRows = 0;
    __frame->rgRowStatus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[174]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hReserved = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cRows = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgcbBookmarks,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1644],
            0);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgpBookmarks,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1654],
            0);


        __frame->rghRows = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 4);
        memset(__frame->rghRows, 0, (ULONG)__frame->cRows * 4);
        __frame->rgRowStatus = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 4);
        memset(__frame->rgRowStatus, 0, (ULONG)__frame->cRows * 4);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRowsByBookmark(__frame->_This, __frame->hReserved, __frame->cRows, *__frame->rgcbBookmarks, *__frame->rgpBookmarks, *__frame->rghRows, *__frame->rgRowStatus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1686]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1696]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1686]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1696]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetRowsByBookmark_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_Hash_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_Hash_Proxy(
    IWineRowServer* This,
    HCHAPTER hReserved,
    DBBKMARK cBookmarks,
    const DBBKMARK rgcbBookmarks[],
    const BYTE * rgpBookmarks[],
    DBHASHVALUE rgHashedValues[],
    DBROWSTATUS rgBookmarkStatus[])
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_Hash_Proxy );
    __frame->This = This;
    if (rgHashedValues) MIDL_memset( rgHashedValues, 0, sizeof( *rgHashedValues ));
    if (rgBookmarkStatus) MIDL_memset( rgBookmarkStatus, 0, sizeof( *rgBookmarkStatus ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgcbBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1706]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgpBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1716]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = hReserved;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBBKMARK *)__frame->_StubMsg.Buffer = cBookmarks;
            __frame->_StubMsg.Buffer += sizeof(DBBKMARK);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgcbBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1706]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgpBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1716]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[196]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgHashedValues,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1748],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgBookmarkStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1758],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_Hash_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1748], (void *)rgHashedValues );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1758], (void *)rgBookmarkStatus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_Hash_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HCHAPTER hReserved;
    DBBKMARK cBookmarks;
    const DBBKMARK (*rgcbBookmarks)[];
    const BYTE * (*rgpBookmarks)[];
    DBHASHVALUE (*rgHashedValues)[];
    DBROWSTATUS (*rgBookmarkStatus)[];
};

static void __finally_IWineRowServer_Hash_Stub( struct __frame_IWineRowServer_Hash_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgcbBookmarks,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1706]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgpBookmarks,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1716]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgHashedValues,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1748]);
    if (__frame->rgHashedValues)
        __frame->_StubMsg.pfnFree(__frame->rgHashedValues);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgBookmarkStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1758]);
    if (__frame->rgBookmarkStatus)
        __frame->_StubMsg.pfnFree(__frame->rgBookmarkStatus);

}

void __RPC_STUB IWineRowServer_Hash_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_Hash_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_Hash_Stub );
    __frame->rgcbBookmarks = 0;
    __frame->rgpBookmarks = 0;
    __frame->rgHashedValues = 0;
    __frame->rgBookmarkStatus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[196]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hReserved = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBBKMARK) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cBookmarks = *(DBBKMARK *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBBKMARK);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgcbBookmarks,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1706],
            0);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgpBookmarks,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1716],
            0);


        __frame->rgHashedValues = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cBookmarks * 4);
        memset(__frame->rgHashedValues, 0, (ULONG)__frame->cBookmarks * 4);
        __frame->rgBookmarkStatus = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cBookmarks * 4);
        memset(__frame->rgBookmarkStatus, 0, (ULONG)__frame->cBookmarks * 4);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Hash(__frame->_This, __frame->hReserved, __frame->cBookmarks, *__frame->rgcbBookmarks, *__frame->rgpBookmarks, *__frame->rgHashedValues, *__frame->rgBookmarkStatus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgHashedValues,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1748]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgBookmarkStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1758]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgHashedValues,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1748]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgBookmarkStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1758]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_Hash_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetProperties_Proxy(
    IWineRowServer* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertySets,
    DBPROPSET **prgPropertySets)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetProperties_Proxy );
    __frame->This = This;
    if (prgPropertySets) MIDL_memset( prgPropertySets, 0, sizeof( *prgPropertySets ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 18);
        if (!pcPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1834]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1834]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[218]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1940],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1838], (void *)pcPropertySets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertySets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1940], (void *)prgPropertySets );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertySets;
    DBPROPSET *_W0;
    DBPROPSET ** prgPropertySets;
};

static void __finally_IWineRowServer_GetProperties_Stub( struct __frame_IWineRowServer_GetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1834]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1940]);

}

void __RPC_STUB IWineRowServer_GetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetProperties_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertySets = 0;
    __frame->prgPropertySets = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[218]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1834],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertySets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->prgPropertySets = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetProperties(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertySets, __frame->prgPropertySets);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1940]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertySets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1940]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetReferencedRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetReferencedRowset_Proxy(
    IWineRowServer* This,
    DBORDINAL iOrdinal,
    REFIID riid,
    IUnknown **ppReferencedRowset)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetReferencedRowset_Proxy );
    __frame->This = This;
    if (ppReferencedRowset) MIDL_memset( ppReferencedRowset, 0, sizeof( *ppReferencedRowset ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 19);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppReferencedRowset) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBORDINAL *)__frame->_StubMsg.Buffer = iOrdinal;
            __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[612]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[234]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppReferencedRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1954],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetReferencedRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1954], (void *)ppReferencedRowset );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetReferencedRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBORDINAL iOrdinal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppReferencedRowset;
};

static void __finally_IWineRowServer_GetReferencedRowset_Stub( struct __frame_IWineRowServer_GetReferencedRowset_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppReferencedRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1954]);

}

void __RPC_STUB IWineRowServer_GetReferencedRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetReferencedRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetReferencedRowset_Stub );
    __frame->riid = 0;
    __frame->ppReferencedRowset = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[234]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBORDINAL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->iOrdinal = *(DBORDINAL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[612],
            0);


        __frame->ppReferencedRowset = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetReferencedRowset(__frame->_This, __frame->iOrdinal, __frame->riid, __frame->ppReferencedRowset);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppReferencedRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1954]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppReferencedRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1954]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetReferencedRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetSpecification_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetSpecification_Proxy(
    IWineRowServer* This,
    REFIID riid,
    IUnknown **ppSpecification)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetSpecification_Proxy );
    __frame->This = This;
    if (ppSpecification) MIDL_memset( ppSpecification, 0, sizeof( *ppSpecification ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 20);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSpecification) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[612]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[246]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSpecification,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1968],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetSpecification_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1968], (void *)ppSpecification );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetSpecification_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppSpecification;
};

static void __finally_IWineRowServer_GetSpecification_Stub( struct __frame_IWineRowServer_GetSpecification_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSpecification,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1968]);

}

void __RPC_STUB IWineRowServer_GetSpecification_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetSpecification_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetSpecification_Stub );
    __frame->riid = 0;
    __frame->ppSpecification = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[246]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[612],
            0);


        __frame->ppSpecification = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSpecification(__frame->_This, __frame->riid, __frame->ppSpecification);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSpecification,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1968]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSpecification,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1968]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetSpecification_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_AddRefAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_AddRefAccessor_Proxy(
    IWineRowServer* This,
    HACCESSOR hAccessor,
    DBREFCOUNT *pcRefCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_AddRefAccessor_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 21);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HACCESSOR *)__frame->_StubMsg.Buffer = hAccessor;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1972]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[256]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1972],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_AddRefAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1972], (void *)pcRefCount );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_AddRefAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBREFCOUNT * pcRefCount;
};

static void __finally_IWineRowServer_AddRefAccessor_Stub( struct __frame_IWineRowServer_AddRefAccessor_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pcRefCount,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1972]);

}

void __RPC_STUB IWineRowServer_AddRefAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_AddRefAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_AddRefAccessor_Stub );
    __frame->pcRefCount = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[256]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1972],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AddRefAccessor(__frame->_This, __frame->hAccessor, __frame->pcRefCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1972]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_AddRefAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_CreateAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_CreateAccessor_Proxy(
    IWineRowServer* This,
    DBACCESSORFLAGS dwAccessorFlags,
    DBCOUNTITEM cBindings,
    const DBBINDING *rgBindings,
    DBLENGTH cbRowSize,
    HACCESSOR *phAccessor,
    DBBINDSTATUS *rgStatus)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_CreateAccessor_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 22);
        if (!phAccessor) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2088]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2106]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer = dwAccessorFlags;
            __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = cBindings;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2088]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBLENGTH *)__frame->_StubMsg.Buffer = cbRowSize;
            __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2106]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[264]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *phAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2106],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_CreateAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2092], (void *)phAccessor );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2106], (void *)rgStatus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_CreateAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBACCESSORFLAGS dwAccessorFlags;
    DBCOUNTITEM cBindings;
    const DBBINDING * rgBindings;
    DBLENGTH cbRowSize;
    HACCESSOR _W0;
    HACCESSOR * phAccessor;
    DBBINDSTATUS * rgStatus;
};

static void __finally_IWineRowServer_CreateAccessor_Stub( struct __frame_IWineRowServer_CreateAccessor_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgBindings,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2088]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2106]);

}

void __RPC_STUB IWineRowServer_CreateAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_CreateAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_CreateAccessor_Stub );
    __frame->rgBindings = 0;
    __frame->phAccessor = 0;
    __frame->rgStatus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[264]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBACCESSORFLAGS) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwAccessorFlags = *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cBindings = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2088],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBLENGTH) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cbRowSize = *(DBLENGTH *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2106],
            0);


        __frame->phAccessor = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateAccessor(__frame->_This, __frame->dwAccessorFlags, __frame->cBindings, __frame->rgBindings, __frame->cbRowSize, __frame->phAccessor, __frame->rgStatus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2106]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HACCESSOR *)__frame->_StubMsg.Buffer = *__frame->phAccessor;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2106]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_CreateAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetBindings_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetBindings_Proxy(
    IWineRowServer* This,
    HACCESSOR hAccessor,
    DBACCESSORFLAGS *pdwAccessorFlags,
    DBCOUNTITEM *pcBindings,
    DBBINDING **prgBindings)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetBindings_Proxy );
    __frame->This = This;
    if (prgBindings) MIDL_memset( prgBindings, 0, sizeof( *prgBindings ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 23);
        if (!pdwAccessorFlags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcBindings) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgBindings) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HACCESSOR *)__frame->_StubMsg.Buffer = hAccessor;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *pcBindings;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[284]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBACCESSORFLAGS) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwAccessorFlags = *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcBindings = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetBindings_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2110], (void *)pdwAccessorFlags );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2114], (void *)pcBindings );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*pcBindings;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2176], (void *)prgBindings );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetBindings_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBACCESSORFLAGS _W0;
    DBACCESSORFLAGS * pdwAccessorFlags;
    DBCOUNTITEM * pcBindings;
    DBBINDING *_W1;
    DBBINDING ** prgBindings;
};

static void __finally_IWineRowServer_GetBindings_Stub( struct __frame_IWineRowServer_GetBindings_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgBindings,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176]);

}

void __RPC_STUB IWineRowServer_GetBindings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetBindings_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetBindings_Stub );
    __frame->pdwAccessorFlags = 0;
    __frame->pcBindings = 0;
    __frame->prgBindings = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[284]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcBindings = (DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);


        __frame->pdwAccessorFlags = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prgBindings = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetBindings(__frame->_This, __frame->hAccessor, __frame->pdwAccessorFlags, __frame->pcBindings, __frame->prgBindings);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer = *__frame->pdwAccessorFlags;
        __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *__frame->pcBindings;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2176]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetBindings_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_ReleaseAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_ReleaseAccessor_Proxy(
    IWineRowServer* This,
    HACCESSOR hAccessor,
    DBREFCOUNT *pcRefCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_ReleaseAccessor_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 24);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HACCESSOR *)__frame->_StubMsg.Buffer = hAccessor;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2180]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[300]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2180],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_ReleaseAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2180], (void *)pcRefCount );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_ReleaseAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBREFCOUNT * pcRefCount;
};

static void __finally_IWineRowServer_ReleaseAccessor_Stub( struct __frame_IWineRowServer_ReleaseAccessor_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pcRefCount,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2180]);

}

void __RPC_STUB IWineRowServer_ReleaseAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_ReleaseAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_ReleaseAccessor_Stub );
    __frame->pcRefCount = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[300]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2180],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseAccessor(__frame->_This, __frame->hAccessor, __frame->pcRefCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2180]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_ReleaseAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IWineRowServer_FormatStringOffsetTable[] =
{
    (unsigned short)-1,  /* IWineRowServer::SetInnerUnk */
    (unsigned short)-1,  /* IWineRowServer::GetMarshal */
    0,  /* IWineRowServer::GetColumns */
    12,  /* IWineRowServer::GetSourceRowset */
    26,  /* IWineRowServer::Open */
    50,  /* IWineRowServer::SetColumns */
    62,  /* IWineRowServer::AddRefRows */
    78,  /* IWineRowServer::GetData */
    90,  /* IWineRowServer::GetNextRows */
    106,  /* IWineRowServer::ReleaseRows */
    126,  /* IWineRowServer::RestartPosition */
    130,  /* IWineRowServer::Compare */
    150,  /* IWineRowServer::GetRowsAt */
    174,  /* IWineRowServer::GetRowsByBookmark */
    196,  /* IWineRowServer::Hash */
    218,  /* IWineRowServer::GetProperties */
    234,  /* IWineRowServer::GetReferencedRowset */
    246,  /* IWineRowServer::GetSpecification */
    256,  /* IWineRowServer::AddRefAccessor */
    264,  /* IWineRowServer::CreateAccessor */
    284,  /* IWineRowServer::GetBindings */
    300,  /* IWineRowServer::ReleaseAccessor */
};

static const CINTERFACE_PROXY_VTABLE(25) _IWineRowServerProxyVtbl =
{
    {
        &IID_IWineRowServer,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        0,  /* IWineRowServer::SetInnerUnk */
        0,  /* IWineRowServer::GetMarshal */
        IWineRowServer_GetColumns_Proxy,
        IWineRowServer_GetSourceRowset_Proxy,
        IWineRowServer_Open_Proxy,
        IWineRowServer_SetColumns_Proxy,
        IWineRowServer_AddRefRows_Proxy,
        IWineRowServer_GetData_Proxy,
        IWineRowServer_GetNextRows_Proxy,
        IWineRowServer_ReleaseRows_Proxy,
        IWineRowServer_RestartPosition_Proxy,
        IWineRowServer_Compare_Proxy,
        IWineRowServer_GetRowsAt_Proxy,
        IWineRowServer_GetRowsByBookmark_Proxy,
        IWineRowServer_Hash_Proxy,
        IWineRowServer_GetProperties_Proxy,
        IWineRowServer_GetReferencedRowset_Proxy,
        IWineRowServer_GetSpecification_Proxy,
        IWineRowServer_AddRefAccessor_Proxy,
        IWineRowServer_CreateAccessor_Proxy,
        IWineRowServer_GetBindings_Proxy,
        IWineRowServer_ReleaseAccessor_Proxy,
    }
};

static const MIDL_SERVER_INFO IWineRowServer_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IWineRowServer_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IWineRowServer_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    IWineRowServer_GetColumns_Stub,
    IWineRowServer_GetSourceRowset_Stub,
    IWineRowServer_Open_Stub,
    IWineRowServer_SetColumns_Stub,
    IWineRowServer_AddRefRows_Stub,
    IWineRowServer_GetData_Stub,
    IWineRowServer_GetNextRows_Stub,
    IWineRowServer_ReleaseRows_Stub,
    IWineRowServer_RestartPosition_Stub,
    IWineRowServer_Compare_Stub,
    IWineRowServer_GetRowsAt_Stub,
    IWineRowServer_GetRowsByBookmark_Stub,
    IWineRowServer_Hash_Stub,
    IWineRowServer_GetProperties_Stub,
    IWineRowServer_GetReferencedRowset_Stub,
    IWineRowServer_GetSpecification_Stub,
    IWineRowServer_AddRefAccessor_Stub,
    IWineRowServer_CreateAccessor_Stub,
    IWineRowServer_GetBindings_Stub,
    IWineRowServer_ReleaseAccessor_Stub
};

static const CInterfaceStubVtbl _IWineRowServerStubVtbl =
{
    {
        &IID_IWineRowServer,
        &IWineRowServer_ServerInfo,
        25,
        &IWineRowServer_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

static void __RPC_USER row_server_DBBINDEXTExprEval_0000(PMIDL_STUB_MESSAGE pStubMsg)
{
    DBBINDEXT *pS = (DBBINDEXT *)(pStubMsg->StackTop - 0);
    pStubMsg->Offset = 0;
    pStubMsg->MaxCount = (ULONG_PTR)(ULONG)pS->ulExtension;
}

static const EXPR_EVAL ExprEvalRoutines[] =
{
    row_server_DBBINDEXTExprEval_0000,
};

static const USER_MARSHAL_ROUTINE_QUADRUPLE UserMarshalRoutines[] =
{
    {
        (USER_MARSHAL_SIZING_ROUTINE)VARIANT_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)VARIANT_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)VARIANT_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)VARIANT_UserFree
    }
};

static const MIDL_STUB_DESC Object_StubDesc =
{
    0,
    NdrOleAllocate,
    NdrOleFree,
    {0}, 0, 0, ExprEvalRoutines, 0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    UserMarshalRoutines,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

#if !defined(__RPC_WIN32__)
#error Currently only Wine and WIN32 are supported.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter num_cols) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 2 (parameter in_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb0),	/* type offset = 176 */
/* 6 (parameter out_cols) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x532),	/* type offset = 1330 */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x548),	/* type offset = 1352 */
/* 16 (parameter ppRowset) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x552),	/* type offset = 1362 */
/* 20 (parameter phRow) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x556),	/* type offset = 1366 */
/* 24 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 26 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x55a),	/* type offset = 1370 */
/* 30 (parameter pColumnID) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x56c),	/* type offset = 1388 */
/* 34 (parameter rguidColumnType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x570),	/* type offset = 1392 */
/* 38 (parameter dwBindFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 40 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x574),	/* type offset = 1396 */
/* 44 (parameter ppUnk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x57e),	/* type offset = 1406 */
/* 48 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 50 (parameter num_cols) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 52 (parameter in_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x59a),	/* type offset = 1434 */
/* 56 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5b0),	/* type offset = 1456 */
/* 60 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 62 (parameter cRows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 64 (parameter rghRows) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5be),	/* type offset = 1470 */
/* 68 (parameter rgRefCounts) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5c8),	/* type offset = 1480 */
/* 72 (parameter rgRowStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5d2),	/* type offset = 1490 */
/* 76 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 78 (parameter hRow) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 80 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 82 (parameter pData) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x5dc),	/* type offset = 1500 */
/* 86 (parameter size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 88 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 90 (parameter hReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 92 (parameter lRowsOffset) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 94 (parameter cRows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 96 (parameter pcRowObtained) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ea),	/* type offset = 1514 */
/* 100 (parameter prghRows) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5fc),	/* type offset = 1532 */
/* 104 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 106 (parameter cRows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 108 (parameter rghRows) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x600),	/* type offset = 1536 */
/* 112 (parameter rgRowOptions) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x60a),	/* type offset = 1546 */
/* 116 (parameter rgRefCounts) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x614),	/* type offset = 1556 */
/* 120 (parameter rgRowStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x61e),	/* type offset = 1566 */
/* 124 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 126 (parameter hReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 128 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter hReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 132 (parameter cbBookmark1) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 134 (parameter pBookmark1) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x628),	/* type offset = 1576 */
/* 138 (parameter cbBookmark2) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 140 (parameter pBookmark2) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x636),	/* type offset = 1590 */
/* 144 (parameter pComparison) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x644),	/* type offset = 1604 */
/* 148 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 150 (parameter hReserved1) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 152 (parameter hReserved2) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 154 (parameter cbBookmark) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 156 (parameter pBookmark) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x648),	/* type offset = 1608 */
/* 160 (parameter lRowsOffset) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 162 (parameter cRows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 164 (parameter pcRowsObtained) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x656),	/* type offset = 1622 */
/* 168 (parameter prghRows) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x668),	/* type offset = 1640 */
/* 172 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 174 (parameter hReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 176 (parameter cRows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 178 (parameter rgcbBookmarks) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x66c),	/* type offset = 1644 */
/* 182 (parameter rgpBookmarks) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x676),	/* type offset = 1654 */
/* 186 (parameter rghRows) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x696),	/* type offset = 1686 */
/* 190 (parameter rgRowStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6a0),	/* type offset = 1696 */
/* 194 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 196 (parameter hReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 198 (parameter cBookmarks) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 200 (parameter rgcbBookmarks) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6aa),	/* type offset = 1706 */
/* 204 (parameter rgpBookmarks) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6b4),	/* type offset = 1716 */
/* 208 (parameter rgHashedValues) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6d4),	/* type offset = 1748 */
/* 212 (parameter rgBookmarkStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6de),	/* type offset = 1758 */
/* 216 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 218 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 220 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x72a),	/* type offset = 1834 */
/* 224 (parameter pcPropertySets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x72e),	/* type offset = 1838 */
/* 228 (parameter prgPropertySets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x794),	/* type offset = 1940 */
/* 232 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 234 (parameter iOrdinal) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 236 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x798),	/* type offset = 1944 */
/* 240 (parameter ppReferencedRowset) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7a2),	/* type offset = 1954 */
/* 244 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 246 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7a6),	/* type offset = 1958 */
/* 250 (parameter ppSpecification) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7b0),	/* type offset = 1968 */
/* 254 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 256 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 258 (parameter pcRefCount) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x7b4),	/* type offset = 1972 */
/* 262 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 264 (parameter dwAccessorFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 266 (parameter cBindings) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 268 (parameter rgBindings) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x828),	/* type offset = 2088 */
/* 272 (parameter cbRowSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 274 (parameter phAccessor) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x82c),	/* type offset = 2092 */
/* 278 (parameter rgStatus) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x83a),	/* type offset = 2106 */
/* 282 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 284 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 286 (parameter pdwAccessorFlags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x83e),	/* type offset = 2110 */
/* 290 (parameter pcBindings) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x842),	/* type offset = 2114 */
/* 294 (parameter prgBindings) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x880),	/* type offset = 2176 */
/* 298 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 300 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 302 (parameter pcRefCount) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x884),	/* type offset = 2180 */
/* 306 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 8 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2) */
        0x5b,	/* FC_END */
/* 20 (GUID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (8) */
/* 24 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0xffe8),	/* Offset= -24 (8) */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffe2),	/* Offset= -30 (8) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffdc),	/* Offset= -36 (8) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffd6),	/* Offset= -42 (8) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffd0),	/* Offset= -48 (8) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffd6),	/* Offset= -42 (20) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffd0),	/* Offset= -48 (20) */
        NdrFcShort(0x0),
/* 72 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 74 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 76 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (72) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffee),	/* Offset= -18 (72) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffe8),	/* Offset= -24 (72) */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcShort(0x0),
/* 124 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0xff96),	/* Offset= -106 (24) */
/* 132 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffc2),	/* Offset= -62 (76) */
/* 140 (DBID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (146) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (124) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe9),	/* Offset= -23 (132) */
        0x5b,	/* FC_END */
/* 158 (wine_getcolumns_in) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (164) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe4),	/* Offset= -28 (140) */
        0xb8,	/* FC_INT3264 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 176 (wine_getcolumns_in *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetColumns */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (158) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 194 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (176) */
/* 198 (unsigned short[]) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x9,	/* Corr desc: field clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 208 (FLAGGED_WORD_BLOB) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xfff2),	/* Offset= -14 (198) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 218 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (208) */
/* 222 (CY) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 228 (DECIMAL) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x08,	/* FC_LONG */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 238 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 256 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 274 (wireBSTR *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffa6),	/* Offset= -90 (208) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffa1),	/* Offset= -95 (208) */
        0x5b,	/* FC_END */
/* 306 (SAFEARR_BSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (318) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 318 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (274) */
/* 322 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 340 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (322) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 358 (SAFEARR_UNKNOWN) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (370) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 370 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (340) */
/* 374 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 392 (IDispatch **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (374) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 410 (SAFEARR_DISPATCH) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (422) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 422 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (392) */
/* 426 (wireVARIANT *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x33e),	/* Offset= 830 (1280) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x339),	/* Offset= 825 (1280) */
        0x5b,	/* FC_END */
/* 458 (SAFEARR_VARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (470) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 470 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (426) */
/* 474 (IRecordInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000002f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 492 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 502 (struct _wireBRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (518) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (474) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 518 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (492) */
/* 522 (wireBRECORD *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (502) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffcf),	/* Offset= -49 (502) */
        0x5b,	/* FC_END */
/* 554 (SAFEARR_BRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (566) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 566 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (522) */
/* 570 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 588 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (570) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 606 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 612 (IID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (606) */
        0x5b,	/* FC_END */
/* 624 (SAFEARR_HAVEIID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (640) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (612) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 640 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffca),	/* Offset= -54 (588) */
/* 644 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 654 (BYTE_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (644) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 674 (unsigned short *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 684 (WORD_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (674) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 704 (ULONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 714 (DWORD_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (704) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 734 (hyper *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 744 (HYPER_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (734) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 764 (SAFEARRAYUNION) */
        0x2a,	/* FC_ENCAPSULATED_UNION */
        0x49,	/* Switch type= FC_ULONG */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0xa),	/* 10 */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xfe2c),	/* Offset= -468 (306) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfe5a),	/* Offset= -422 (358) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfe88),	/* Offset= -376 (410) */
        NdrFcLong(0xc),	/* 12 */
        NdrFcShort(0xfeb2),	/* Offset= -334 (458) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xff0c),	/* Offset= -244 (554) */
        NdrFcLong(0x800d),	/* 32781 */
        NdrFcShort(0xff4c),	/* Offset= -180 (624) */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0xff64),	/* Offset= -156 (654) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xff7c),	/* Offset= -132 (684) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xff94),	/* Offset= -108 (714) */
        NdrFcLong(0x14),	/* 20 */
        NdrFcShort(0xffac),	/* Offset= -84 (744) */
        NdrFcShort(0xffff),
/* 832 (SAFEARRAYBOUND) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 840 (SAFEARRAYBOUND[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x7,	/* Corr desc: field cDims, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xffd8),	/* offset = -40 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffee),	/* Offset= -18 (832) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 854 (struct _wireSAFEARRAY) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x28),	/* 40 */
        NdrFcShort(0xffee),	/* Offset= -18 (840) */
        NdrFcShort(0x0),	/* Offset= 0 (860) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff98),	/* Offset= -104 (764) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 872 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (854) */
/* 876 (signed char *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 880 (USHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x07,	/* FC_USHORT */
        0x5c,	/* FC_PAD */
/* 884 (ULONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 888 (INT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 892 (UINT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 896 (BYTE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 900 (SHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 904 (LONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 908 (FLOAT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0a,	/* FC_FLOAT */
        0x5c,	/* FC_PAD */
/* 912 (DOUBLE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 916 (VARIANT_BOOL *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 920 (SCODE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 924 (DATE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 928 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd2e),	/* Offset= -722 (208) */
/* 932 (wireBSTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (928) */
/* 936 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x156),	/* Offset= 342 (1280) */
/* 940 (wireVARIANT *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (936) */
/* 944 (CY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd2c),	/* Offset= -724 (222) */
/* 948 (DECIMAL *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd2e),	/* Offset= -722 (228) */
/* 952 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 970 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (952) */
/* 974 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 992 (IDispatch **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (974) */
/* 996 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff70),	/* Offset= -144 (854) */
/* 1000 (wireSAFEARRAY *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (996) */
/* 1004 (wireBRECORD) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfe08),	/* Offset= -504 (502) */
/* 1008 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x2b),	/* 43 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x12),	/* 18 */
        NdrFcShort(0x8007),	/* Simple arm type: FC_USHORT */
        NdrFcLong(0x13),	/* 19 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x16),	/* 22 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x17),	/* 23 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x11),	/* 17 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x800a),	/* Simple arm type: FC_FLOAT */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0xb),	/* 11 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0xa),	/* 10 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xff4e),	/* Offset= -178 (928) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xfc86),	/* Offset= -890 (222) */
        NdrFcLong(0xe),	/* 14 */
        NdrFcShort(0xfc86),	/* Offset= -890 (228) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfc8a),	/* Offset= -886 (238) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfc96),	/* Offset= -874 (256) */
        NdrFcLong(0x2000),	/* 8192 */
        NdrFcShort(0xff74),	/* Offset= -140 (996) */
        NdrFcLong(0x4010),	/* 16400 */
        NdrFcShort(0xfef6),	/* Offset= -266 (876) */
        NdrFcLong(0x4012),	/* 16402 */
        NdrFcShort(0xfef4),	/* Offset= -268 (880) */
        NdrFcLong(0x4013),	/* 16403 */
        NdrFcShort(0xfef2),	/* Offset= -270 (884) */
        NdrFcLong(0x4016),	/* 16406 */
        NdrFcShort(0xfef0),	/* Offset= -272 (888) */
        NdrFcLong(0x4017),	/* 16407 */
        NdrFcShort(0xfeee),	/* Offset= -274 (892) */
        NdrFcLong(0x4011),	/* 16401 */
        NdrFcShort(0xfeec),	/* Offset= -276 (896) */
        NdrFcLong(0x4002),	/* 16386 */
        NdrFcShort(0xfeea),	/* Offset= -278 (900) */
        NdrFcLong(0x4003),	/* 16387 */
        NdrFcShort(0xfee8),	/* Offset= -280 (904) */
        NdrFcLong(0x4004),	/* 16388 */
        NdrFcShort(0xfee6),	/* Offset= -282 (908) */
        NdrFcLong(0x4005),	/* 16389 */
        NdrFcShort(0xfee4),	/* Offset= -284 (912) */
        NdrFcLong(0x400b),	/* 16395 */
        NdrFcShort(0xfee2),	/* Offset= -286 (916) */
        NdrFcLong(0x400a),	/* 16394 */
        NdrFcShort(0xfee0),	/* Offset= -288 (920) */
        NdrFcLong(0x4007),	/* 16391 */
        NdrFcShort(0xfede),	/* Offset= -290 (924) */
        NdrFcLong(0x4008),	/* 16392 */
        NdrFcShort(0xfee0),	/* Offset= -288 (932) */
        NdrFcLong(0x400c),	/* 16396 */
        NdrFcShort(0xfee2),	/* Offset= -286 (940) */
        NdrFcLong(0x4006),	/* 16390 */
        NdrFcShort(0xfee0),	/* Offset= -288 (944) */
        NdrFcLong(0x400e),	/* 16398 */
        NdrFcShort(0xfede),	/* Offset= -290 (948) */
        NdrFcLong(0x400d),	/* 16397 */
        NdrFcShort(0xfeee),	/* Offset= -274 (970) */
        NdrFcLong(0x4009),	/* 16393 */
        NdrFcShort(0xfefe),	/* Offset= -258 (992) */
        NdrFcLong(0x6000),	/* 24576 */
        NdrFcShort(0xff00),	/* Offset= -256 (1000) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xfefe),	/* Offset= -258 (1004) */
        NdrFcLong(0x4024),	/* 16420 */
        NdrFcShort(0xfef8),	/* Offset= -264 (1004) */
        NdrFcShort(0xffff),
/* 1272 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x7,	/* Corr desc: field vt, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xfef2),	/* Offset= -270 (1008) */
/* 1280 (struct _wireVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1286) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1272) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1300 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1280) */
/* 1304 (VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (1300) */
/* 1314 (wine_getcolumns_out) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1320) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (1304) */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1330 (wine_getcolumns_out *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetColumns */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe2),	/* Offset= -30 (1314) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1348 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1330) */
/* 1352 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfd1a),	/* Offset= -742 (612) */
/* 1356 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
/* 1362 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1356) */
/* 1366 (HROW *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1370 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1388 (DBID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb1e),	/* Offset= -1250 (140) */
/* 1392 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfa96),	/* Offset= -1386 (8) */
/* 1396 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfcee),	/* Offset= -786 (612) */
/* 1400 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
/* 1406 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1400) */
/* 1410 (wine_setcolumns_in) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x38),	/* 56 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1416) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff8c),	/* Offset= -116 (1304) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfafc),	/* Offset= -1284 (140) */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0xb8,	/* FC_INT3264 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1434 (wine_setcolumns_in *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for SetColumns */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffda),	/* Offset= -38 (1410) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1452 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1434) */
/* 1456 (DBSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for SetColumns */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1466 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1456) */
/* 1470 (const HROW[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for AddRefRows */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1480 (DBREFCOUNT[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for AddRefRows */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1490 (DBROWSTATUS[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for AddRefRows */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1500 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1510 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1500) */
/* 1514 (DBCOUNTITEM *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1518 (HROW *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for GetNextRows */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1528 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1518) */
/* 1532 (HROW **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1528) */
/* 1536 (const HROW[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for ReleaseRows */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1546 (DBROWOPTIONS[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for ReleaseRows */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1556 (DBREFCOUNT[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for ReleaseRows */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1566 (DBROWSTATUS[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for ReleaseRows */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1576 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x20,	/* Corr desc: unused for Compare */
        0x0,
        NdrFcShort(0x0),
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1586 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1576) */
/* 1590 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x20,	/* Corr desc: unused for Compare */
        0x0,
        NdrFcShort(0x0),
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1600 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1590) */
/* 1604 (DBCOMPARE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1608 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x20,	/* Corr desc: unused for GetRowsAt */
        0x0,
        NdrFcShort(0x0),
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1618 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1608) */
/* 1622 (DBCOUNTITEM *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1626 (HROW *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for GetRowsAt */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1636 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1626) */
/* 1640 (HROW **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1636) */
/* 1644 (const DBBKMARK[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for GetRowsByBookmark */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1654 (const BYTE *[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for GetRowsByBookmark */
        0x0,
        NdrFcShort(0x0),
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1686 (HROW[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for GetRowsByBookmark */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1696 (DBROWSTATUS[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for GetRowsByBookmark */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1706 (const DBBKMARK[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for Hash */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1716 (const BYTE *[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for Hash */
        0x0,
        NdrFcShort(0x0),
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1748 (DBHASHVALUE[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for Hash */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1758 (DBROWSTATUS[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for Hash */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1768 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1778 (const DBPROPIDSET) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1768) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf901),	/* Offset= -1791 (8) */
        0x5b,	/* FC_END */
/* 1802 (const DBPROPIDSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x20,	/* Corr desc: unused for GetProperties */
        0x0,
        NdrFcShort(0x0),
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc6),	/* Offset= -58 (1768) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcb),	/* Offset= -53 (1778) */
        0x5b,	/* FC_END */
/* 1834 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (1802) */
/* 1838 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1842 (DBPROP) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x34),	/* 52 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1848) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf94d),	/* Offset= -1715 (140) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfdd5),	/* Offset= -555 (1304) */
        0x5b,	/* FC_END */
/* 1862 (DBPROP *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cProperties, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1842) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1880 (DBPROPSET) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (1862) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf89b),	/* Offset= -1893 (8) */
        0x5b,	/* FC_END */
/* 1904 (DBPROPSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter pcPropertySets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffbe),	/* Offset= -66 (1862) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcb),	/* Offset= -53 (1880) */
        0x5b,	/* FC_END */
/* 1936 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (1904) */
/* 1940 (DBPROPSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1936) */
/* 1944 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfaca),	/* Offset= -1334 (612) */
/* 1948 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 1954 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1948) */
/* 1958 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfabc),	/* Offset= -1348 (612) */
/* 1962 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
/* 1968 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1962) */
/* 1972 (DBREFCOUNT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1976 (ITypeInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020401),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1994 (DBOBJECT) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfa93),	/* Offset= -1389 (612) */
        0x5b,	/* FC_END */
/* 2004 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x10,	/* Corr desc: field pointer in DBBINDEXT */
        0x59,	/* FC_CALLBACK */
        NdrFcShort(0x0),	/* 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2014 (DBBINDEXT) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2004) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 2034 (const DBBINDING) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x34),	/* 52 */
        NdrFcShort(0x0),
        NdrFcShort(0x16),	/* Offset= 22 (2062) */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffb8),	/* Offset= -72 (1976) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2062 (DBOBJECT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffba),	/* Offset= -70 (1994) */
/* 2066 (DBBINDEXT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffca),	/* Offset= -54 (2014) */
/* 2070 (const DBBINDING *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for CreateAccessor */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffce),	/* Offset= -50 (2034) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2088 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (2070) */
/* 2092 (HACCESSOR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 2096 (DBBINDSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for CreateAccessor */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2106 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (2096) */
/* 2110 (DBACCESSORFLAGS *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2114 (DBCOUNTITEM *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 2118 (DBBINDING) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x34),	/* 52 */
        NdrFcShort(0x0),
        NdrFcShort(0x16),	/* Offset= 22 (2146) */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff64),	/* Offset= -156 (1976) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2146 (DBOBJECT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff66),	/* Offset= -154 (1994) */
/* 2150 (DBBINDEXT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff76),	/* Offset= -138 (2014) */
/* 2154 (DBBINDING *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetBindings */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffce),	/* Offset= -50 (2118) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2172 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (2154) */
/* 2176 (DBBINDING **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (2172) */
/* 2180 (DBREFCOUNT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
        0x0
    }
};

static const CInterfaceProxyVtbl* const _row_server_ProxyVtblList[] =
{
    (const CInterfaceProxyVtbl*)&_IWineRowServerProxyVtbl,
    0
};

static const CInterfaceStubVtbl* const _row_server_StubVtblList[] =
{
    &_IWineRowServerStubVtbl,
    0
};

static PCInterfaceName const _row_server_InterfaceNamesList[] =
{
    "IWineRowServer",
    0
};

static int __stdcall _row_server_IID_Lookup(const IID* pIID, int* pIndex)
{
    int low = 0, high = 0;

    while (low <= high)
    {
        int pos = (low + high) / 2;
        int res = IID_GENERIC_CHECK_IID(_row_server, pIID, pos);
        if (!res) { *pIndex = pos; return 1; }
        if (res > 0) low = pos + 1;
        else high = pos - 1;
    }
    return 0;
}

const ExtendedProxyFileInfo row_server_ProxyFileInfo DECLSPEC_HIDDEN =
{
    (const PCInterfaceProxyVtblList*)_row_server_ProxyVtblList,
    (const PCInterfaceStubVtblList*)_row_server_StubVtblList,
    _row_server_InterfaceNamesList,
    0,
    _row_server_IID_Lookup,
    1,
    1,
    0,
    0,
    0,
    0
};

#else /* _WIN64 */

#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 440
#endif

#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error This code needs a newer version of rpcproxy.h
#endif /* __RPCPROXY_H_VERSION__ */

#include "row_server.h"

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __proxy_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    void             *This;
};

static int __proxy_filter( struct __proxy_frame *__frame )
{
    return (__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE);
}

#define TYPE_FORMAT_STRING_SIZE 2105
#define PROC_FORMAT_STRING_SIZE 309

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const MIDL_STUB_DESC Object_StubDesc;

/*****************************************************************************
 * IWineRowServer interface
 */
static void __finally_IWineRowServer_GetColumns_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetColumns_Proxy(
    IWineRowServer* This,
    DBORDINAL num_cols,
    wine_getcolumns_in *in_data,
    wine_getcolumns_out *out_cols)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetColumns_Proxy );
    __frame->This = This;
    if (out_cols) MIDL_memset( out_cols, 0, sizeof( *out_cols ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!in_data) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!out_cols) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)in_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[178]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&num_cols,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)in_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[178]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&out_cols,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1274],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetColumns_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1292], (void *)out_cols );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetColumns_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBORDINAL num_cols;
    wine_getcolumns_in * in_data;
    wine_getcolumns_out * out_cols;
};

static void __finally_IWineRowServer_GetColumns_Stub( struct __frame_IWineRowServer_GetColumns_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->in_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[196]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->out_cols,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1292]);

}

void __RPC_STUB IWineRowServer_GetColumns_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetColumns_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetColumns_Stub );
    __frame->in_data = 0;
    __frame->out_cols = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->num_cols,
            0xb9 /* FC_UINT3264 */);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->in_data,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[178],
            0);


        __frame->out_cols = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->num_cols * 40);
        memset(__frame->out_cols, 0, (ULONG)__frame->num_cols * 40);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetColumns(__frame->_This, __frame->num_cols, __frame->in_data, __frame->out_cols);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_cols,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1274]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->out_cols,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1274]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetColumns_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetSourceRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetSourceRowset_Proxy(
    IWineRowServer* This,
    REFIID riid,
    IUnknown **ppRowset,
    HROW *phRow)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetSourceRowset_Proxy );
    __frame->This = This;
    if (ppRowset) MIDL_memset( ppRowset, 0, sizeof( *ppRowset ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppRowset) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!phRow) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[572]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1306],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HROW) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *phRow = *(HROW *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HROW);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetSourceRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1306], (void *)ppRowset );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1310], (void *)phRow );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetSourceRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppRowset;
    HROW _W1;
    HROW * phRow;
};

static void __finally_IWineRowServer_GetSourceRowset_Stub( struct __frame_IWineRowServer_GetSourceRowset_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1306]);


}

void __RPC_STUB IWineRowServer_GetSourceRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetSourceRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetSourceRowset_Stub );
    __frame->riid = 0;
    __frame->ppRowset = 0;
    __frame->phRow = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[572],
            0);


        __frame->ppRowset = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->phRow = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSourceRowset(__frame->_This, __frame->riid, __frame->ppRowset, __frame->phRow);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1306]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1306]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HROW *)__frame->_StubMsg.Buffer = *__frame->phRow;
        __frame->_StubMsg.Buffer += sizeof(HROW);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetSourceRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_Open_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_Open_Proxy(
    IWineRowServer* This,
    IUnknown *pUnkOuter,
    DBID *pColumnID,
    REFGUID rguidColumnType,
    DWORD dwBindFlags,
    REFIID riid,
    IUnknown **ppUnk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_Open_Proxy );
    __frame->This = This;
    if (ppUnk) MIDL_memset( ppUnk, 0, sizeof( *ppUnk ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pColumnID) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rguidColumnType) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppUnk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1314]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pColumnID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1314]);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pColumnID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguidColumnType,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwBindFlags;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[572]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[26]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppUnk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1350],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_Open_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1350], (void *)ppUnk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_Open_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    DBID * pColumnID;
    REFGUID rguidColumnType;
    DWORD dwBindFlags;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppUnk;
};

static void __finally_IWineRowServer_Open_Stub( struct __frame_IWineRowServer_Open_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1314]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pColumnID,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1332]);




    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppUnk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1350]);

}

void __RPC_STUB IWineRowServer_Open_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_Open_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_Open_Stub );
    __frame->pUnkOuter = 0;
    __frame->pColumnID = 0;
    __frame->rguidColumnType = 0;
    __frame->riid = 0;
    __frame->ppUnk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[26]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1314],
            0);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pColumnID,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[140],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguidColumnType,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[8],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwBindFlags = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[572],
            0);


        __frame->ppUnk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Open(__frame->_This, __frame->pUnkOuter, __frame->pColumnID, __frame->rguidColumnType, __frame->dwBindFlags, __frame->riid, __frame->ppUnk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1350]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1350]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_Open_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_SetColumns_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_SetColumns_Proxy(
    IWineRowServer* This,
    DBORDINAL num_cols,
    wine_setcolumns_in *in_data,
    DBSTATUS *status)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_SetColumns_Proxy );
    __frame->This = This;
    if (status) MIDL_memset( status, 0, sizeof( *status ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!in_data) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!status) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)in_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1380]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&num_cols,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)in_data,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1380]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[50]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&status,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1402],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_SetColumns_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)num_cols;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1412], (void *)status );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_SetColumns_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBORDINAL num_cols;
    wine_setcolumns_in * in_data;
    DBSTATUS * status;
};

static void __finally_IWineRowServer_SetColumns_Stub( struct __frame_IWineRowServer_SetColumns_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->in_data,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1398]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->status,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1412]);

}

void __RPC_STUB IWineRowServer_SetColumns_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_SetColumns_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_SetColumns_Stub );
    __frame->in_data = 0;
    __frame->status = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[50]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->num_cols,
            0xb9 /* FC_UINT3264 */);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->in_data,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1380],
            0);


        __frame->status = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->num_cols * 4);
        memset(__frame->status, 0, (ULONG)__frame->num_cols * 4);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->SetColumns(__frame->_This, __frame->num_cols, __frame->in_data, __frame->status);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1402]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->num_cols;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->status,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1402]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_SetColumns_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_AddRefRows_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_AddRefRows_Proxy(
    IWineRowServer* This,
    DBCOUNTITEM cRows,
    const HROW rghRows[],
    DBREFCOUNT rgRefCounts[],
    DBROWSTATUS rgRowStatus[])
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_AddRefRows_Proxy );
    __frame->This = This;
    if (rgRefCounts) MIDL_memset( rgRefCounts, 0, sizeof( *rgRefCounts ));
    if (rgRowStatus) MIDL_memset( rgRowStatus, 0, sizeof( *rgRowStatus ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 9);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1416]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cRows,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1416]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[62]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgRefCounts,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1430],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgRowStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_AddRefRows_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1430], (void *)rgRefCounts );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1444], (void *)rgRowStatus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_AddRefRows_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBCOUNTITEM cRows;
    const HROW (*rghRows)[];
    DBREFCOUNT (*rgRefCounts)[];
    DBROWSTATUS (*rgRowStatus)[];
};

static void __finally_IWineRowServer_AddRefRows_Stub( struct __frame_IWineRowServer_AddRefRows_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rghRows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1416]);
    if (__frame->rghRows)
        __frame->_StubMsg.pfnFree(__frame->rghRows);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRefCounts,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1430]);
    if (__frame->rgRefCounts)
        __frame->_StubMsg.pfnFree(__frame->rgRefCounts);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRowStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);
    if (__frame->rgRowStatus)
        __frame->_StubMsg.pfnFree(__frame->rgRowStatus);

}

void __RPC_STUB IWineRowServer_AddRefRows_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_AddRefRows_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_AddRefRows_Stub );
    __frame->rghRows = 0;
    __frame->rgRefCounts = 0;
    __frame->rgRowStatus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[62]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cRows,
            0xb9 /* FC_UINT3264 */);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1416],
            0);


        __frame->rgRefCounts = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 8);
        memset(__frame->rgRefCounts, 0, (ULONG)__frame->cRows * 8);
        __frame->rgRowStatus = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 4);
        memset(__frame->rgRowStatus, 0, (ULONG)__frame->cRows * 4);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AddRefRows(__frame->_This, __frame->cRows, *__frame->rghRows, *__frame->rgRefCounts, *__frame->rgRowStatus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRefCounts,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1430]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRefCounts,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1430]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1444]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_AddRefRows_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetData_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetData_Proxy(
    IWineRowServer* This,
    HROW hRow,
    HACCESSOR hAccessor,
    BYTE *pData,
    DWORD size)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetData_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 10);
        if (!pData) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)size;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pData,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hRow,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hAccessor,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)size;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pData,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = size;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[78]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pData,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetData_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)size;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1464], (void *)pData );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetData_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HROW hRow;
    HACCESSOR hAccessor;
    BYTE * pData;
    DWORD size;
};

static void __finally_IWineRowServer_GetData_Stub( struct __frame_IWineRowServer_GetData_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pData,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454]);


}

void __RPC_STUB IWineRowServer_GetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetData_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetData_Stub );
    __frame->pData = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[78]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hRow,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hAccessor,
            0xb9 /* FC_UINT3264 */);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pData,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetData(__frame->_This, __frame->hRow, __frame->hAccessor, __frame->pData, __frame->size);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pData,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->size;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pData,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1454]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetData_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetNextRows_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetNextRows_Proxy(
    IWineRowServer* This,
    HCHAPTER hReserved,
    DBROWOFFSET lRowsOffset,
    DBROWCOUNT cRows,
    DBCOUNTITEM *pcRowObtained,
    HROW **prghRows)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetNextRows_Proxy );
    __frame->This = This;
    if (prghRows) MIDL_memset( prghRows, 0, sizeof( *prghRows ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 11);
        if (!pcRowObtained) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prghRows) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hReserved,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&lRowsOffset,
                0xb8 /* FC_INT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cRows,
                0xb8 /* FC_INT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[90]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcRowObtained = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1490],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetNextRows_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1468], (void *)pcRowObtained );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1490], (void *)prghRows );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetNextRows_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HCHAPTER hReserved;
    DBROWOFFSET lRowsOffset;
    DBROWCOUNT cRows;
    DBCOUNTITEM _W0;
    DBCOUNTITEM * pcRowObtained;
    HROW *_W1;
    HROW ** prghRows;
};

static void __finally_IWineRowServer_GetNextRows_Stub( struct __frame_IWineRowServer_GetNextRows_Stub *__frame )
{




    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prghRows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1490]);

}

void __RPC_STUB IWineRowServer_GetNextRows_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetNextRows_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetNextRows_Stub );
    __frame->pcRowObtained = 0;
    __frame->prghRows = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[90]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hReserved,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->lRowsOffset,
            0xb8 /* FC_INT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cRows,
            0xb8 /* FC_INT3264 */);


        __frame->pcRowObtained = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prghRows = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetNextRows(__frame->_This, __frame->hReserved, __frame->lRowsOffset, __frame->cRows, __frame->pcRowObtained, __frame->prghRows);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1490]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *__frame->pcRowObtained;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1490]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetNextRows_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_ReleaseRows_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_ReleaseRows_Proxy(
    IWineRowServer* This,
    DBCOUNTITEM cRows,
    const HROW rghRows[],
    DBROWOPTIONS rgRowOptions[],
    DBREFCOUNT rgRefCounts[],
    DBROWSTATUS rgRowStatus[])
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_ReleaseRows_Proxy );
    __frame->This = This;
    if (rgRefCounts) MIDL_memset( rgRefCounts, 0, sizeof( *rgRefCounts ));
    if (rgRowStatus) MIDL_memset( rgRowStatus, 0, sizeof( *rgRowStatus ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 12);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1494]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgRowOptions,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1508]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cRows,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1494]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgRowOptions,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1508]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[106]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgRefCounts,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgRowStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_ReleaseRows_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1518], (void *)rgRefCounts );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1532], (void *)rgRowStatus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_ReleaseRows_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBCOUNTITEM cRows;
    const HROW (*rghRows)[];
    DBROWOPTIONS (*rgRowOptions)[];
    DBREFCOUNT (*rgRefCounts)[];
    DBROWSTATUS (*rgRowStatus)[];
};

static void __finally_IWineRowServer_ReleaseRows_Stub( struct __frame_IWineRowServer_ReleaseRows_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rghRows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1494]);
    if (__frame->rghRows)
        __frame->_StubMsg.pfnFree(__frame->rghRows);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRowOptions,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1508]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRefCounts,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518]);
    if (__frame->rgRefCounts)
        __frame->_StubMsg.pfnFree(__frame->rgRefCounts);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRowStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532]);
    if (__frame->rgRowStatus)
        __frame->_StubMsg.pfnFree(__frame->rgRowStatus);

}

void __RPC_STUB IWineRowServer_ReleaseRows_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_ReleaseRows_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_ReleaseRows_Stub );
    __frame->rghRows = 0;
    __frame->rgRowOptions = 0;
    __frame->rgRefCounts = 0;
    __frame->rgRowStatus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[106]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cRows,
            0xb9 /* FC_UINT3264 */);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1494],
            0);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgRowOptions,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1508],
            0);


        __frame->rgRefCounts = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 8);
        memset(__frame->rgRefCounts, 0, (ULONG)__frame->cRows * 8);
        __frame->rgRowStatus = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 4);
        memset(__frame->rgRowStatus, 0, (ULONG)__frame->cRows * 4);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseRows(__frame->_This, __frame->cRows, *__frame->rghRows, *__frame->rgRowOptions, *__frame->rgRefCounts, *__frame->rgRowStatus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRefCounts,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRefCounts,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1518]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1532]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_ReleaseRows_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_RestartPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_RestartPosition_Proxy(
    IWineRowServer* This,
    HCHAPTER hReserved)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_RestartPosition_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 13);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hReserved,
                0xb9 /* FC_UINT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[126]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_RestartPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_RestartPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HCHAPTER hReserved;
};

static void __finally_IWineRowServer_RestartPosition_Stub( struct __frame_IWineRowServer_RestartPosition_Stub *__frame )
{

}

void __RPC_STUB IWineRowServer_RestartPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_RestartPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_RestartPosition_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[126]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hReserved,
            0xb9 /* FC_UINT3264 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->RestartPosition(__frame->_This, __frame->hReserved);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_RestartPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_Compare_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_Compare_Proxy(
    IWineRowServer* This,
    HCHAPTER hReserved,
    DBBKMARK cbBookmark1,
    const BYTE *pBookmark1,
    DBBKMARK cbBookmark2,
    const BYTE *pBookmark2,
    DBCOMPARE *pComparison)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_Compare_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 14);
        if (!pBookmark1) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pBookmark2) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pComparison) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 48;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark1;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark1,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1542]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark2;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark2,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1556]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hReserved,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cbBookmark1,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark1;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark1,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1542]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cbBookmark2,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark2;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark2,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1556]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOMPARE) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pComparison = *(DBCOMPARE *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOMPARE);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_Compare_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1570], (void *)pComparison );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_Compare_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HCHAPTER hReserved;
    DBBKMARK cbBookmark1;
    const BYTE * pBookmark1;
    DBBKMARK cbBookmark2;
    const BYTE * pBookmark2;
    DBCOMPARE _W0;
    DBCOMPARE * pComparison;
};

static void __finally_IWineRowServer_Compare_Stub( struct __frame_IWineRowServer_Compare_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cbBookmark1;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pBookmark1,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1542]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cbBookmark2;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pBookmark2,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1556]);


}

void __RPC_STUB IWineRowServer_Compare_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_Compare_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_Compare_Stub );
    __frame->pBookmark1 = 0;
    __frame->pBookmark2 = 0;
    __frame->pComparison = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hReserved,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cbBookmark1,
            0xb9 /* FC_UINT3264 */);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pBookmark1,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1542],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cbBookmark2,
            0xb9 /* FC_UINT3264 */);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pBookmark2,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1556],
            0);


        __frame->pComparison = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Compare(__frame->_This, __frame->hReserved, __frame->cbBookmark1, __frame->pBookmark1, __frame->cbBookmark2, __frame->pBookmark2, __frame->pComparison);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOMPARE *)__frame->_StubMsg.Buffer = *__frame->pComparison;
        __frame->_StubMsg.Buffer += sizeof(DBCOMPARE);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_Compare_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetRowsAt_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetRowsAt_Proxy(
    IWineRowServer* This,
    HWATCHREGION hReserved1,
    HCHAPTER hReserved2,
    DBBKMARK cbBookmark,
    const BYTE *pBookmark,
    DBROWOFFSET lRowsOffset,
    DBROWCOUNT cRows,
    DBCOUNTITEM *pcRowsObtained,
    HROW **prghRows)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetRowsAt_Proxy );
    __frame->This = This;
    if (prghRows) MIDL_memset( prghRows, 0, sizeof( *prghRows ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 15);
        if (!pBookmark) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcRowsObtained) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prghRows) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 80;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1574]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hReserved1,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hReserved2,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cbBookmark,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cbBookmark;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pBookmark,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1574]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&lRowsOffset,
                0xb8 /* FC_INT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cRows,
                0xb8 /* FC_INT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcRowsObtained = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1610],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetRowsAt_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1588], (void *)pcRowsObtained );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1610], (void *)prghRows );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetRowsAt_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HWATCHREGION hReserved1;
    HCHAPTER hReserved2;
    DBBKMARK cbBookmark;
    const BYTE * pBookmark;
    DBROWOFFSET lRowsOffset;
    DBROWCOUNT cRows;
    DBCOUNTITEM _W0;
    DBCOUNTITEM * pcRowsObtained;
    HROW *_W1;
    HROW ** prghRows;
};

static void __finally_IWineRowServer_GetRowsAt_Stub( struct __frame_IWineRowServer_GetRowsAt_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cbBookmark;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pBookmark,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1574]);




    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prghRows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1610]);

}

void __RPC_STUB IWineRowServer_GetRowsAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetRowsAt_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetRowsAt_Stub );
    __frame->pBookmark = 0;
    __frame->pcRowsObtained = 0;
    __frame->prghRows = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[150]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hReserved1,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hReserved2,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cbBookmark,
            0xb9 /* FC_UINT3264 */);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pBookmark,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1574],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->lRowsOffset,
            0xb8 /* FC_INT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cRows,
            0xb8 /* FC_INT3264 */);


        __frame->pcRowsObtained = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prghRows = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRowsAt(__frame->_This, __frame->hReserved1, __frame->hReserved2, __frame->cbBookmark, __frame->pBookmark, __frame->lRowsOffset, __frame->cRows, __frame->pcRowsObtained, __frame->prghRows);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1610]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *__frame->pcRowsObtained;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1610]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetRowsAt_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetRowsByBookmark_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetRowsByBookmark_Proxy(
    IWineRowServer* This,
    HCHAPTER hReserved,
    DBCOUNTITEM cRows,
    const DBBKMARK rgcbBookmarks[],
    const BYTE * rgpBookmarks[],
    HROW rghRows[],
    DBROWSTATUS rgRowStatus[])
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetRowsByBookmark_Proxy );
    __frame->This = This;
    if (rghRows) MIDL_memset( rghRows, 0, sizeof( *rghRows ));
    if (rgRowStatus) MIDL_memset( rgRowStatus, 0, sizeof( *rgRowStatus ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 16);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgcbBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1614]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgpBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1628]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hReserved,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cRows,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgcbBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1614]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgpBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1628]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[174]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rghRows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1646],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgRowStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1660],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetRowsByBookmark_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1646], (void *)rghRows );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cRows;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1660], (void *)rgRowStatus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetRowsByBookmark_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HCHAPTER hReserved;
    DBCOUNTITEM cRows;
    const DBBKMARK (*rgcbBookmarks)[];
    const BYTE * (*rgpBookmarks)[];
    HROW (*rghRows)[];
    DBROWSTATUS (*rgRowStatus)[];
};

static void __finally_IWineRowServer_GetRowsByBookmark_Stub( struct __frame_IWineRowServer_GetRowsByBookmark_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgcbBookmarks,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1614]);
    if (__frame->rgcbBookmarks)
        __frame->_StubMsg.pfnFree(__frame->rgcbBookmarks);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgpBookmarks,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1628]);
    if (__frame->rgpBookmarks)
        __frame->_StubMsg.pfnFree(__frame->rgpBookmarks);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rghRows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1646]);
    if (__frame->rghRows)
        __frame->_StubMsg.pfnFree(__frame->rghRows);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgRowStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1660]);
    if (__frame->rgRowStatus)
        __frame->_StubMsg.pfnFree(__frame->rgRowStatus);

}

void __RPC_STUB IWineRowServer_GetRowsByBookmark_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetRowsByBookmark_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetRowsByBookmark_Stub );
    __frame->rgcbBookmarks = 0;
    __frame->rgpBookmarks = 0;
    __frame->rghRows = 0;
    __frame->rgRowStatus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[174]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hReserved,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cRows,
            0xb9 /* FC_UINT3264 */);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgcbBookmarks,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1614],
            0);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgpBookmarks,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1628],
            0);


        __frame->rghRows = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 8);
        memset(__frame->rghRows, 0, (ULONG)__frame->cRows * 8);
        __frame->rgRowStatus = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cRows * 4);
        memset(__frame->rgRowStatus, 0, (ULONG)__frame->cRows * 4);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetRowsByBookmark(__frame->_This, __frame->hReserved, __frame->cRows, *__frame->rgcbBookmarks, *__frame->rgpBookmarks, *__frame->rghRows, *__frame->rgRowStatus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1646]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1660]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rghRows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1646]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cRows;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgRowStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1660]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetRowsByBookmark_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_Hash_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_Hash_Proxy(
    IWineRowServer* This,
    HCHAPTER hReserved,
    DBBKMARK cBookmarks,
    const DBBKMARK rgcbBookmarks[],
    const BYTE * rgpBookmarks[],
    DBHASHVALUE rgHashedValues[],
    DBROWSTATUS rgBookmarkStatus[])
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_Hash_Proxy );
    __frame->This = This;
    if (rgHashedValues) MIDL_memset( rgHashedValues, 0, sizeof( *rgHashedValues ));
    if (rgBookmarkStatus) MIDL_memset( rgBookmarkStatus, 0, sizeof( *rgBookmarkStatus ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 17);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgcbBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1670]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgpBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1684]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hReserved,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cBookmarks,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgcbBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1670]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgpBookmarks,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1684]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[196]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgHashedValues,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1702],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgBookmarkStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1716],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_Hash_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1702], (void *)rgHashedValues );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBookmarks;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1716], (void *)rgBookmarkStatus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_Hash_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HCHAPTER hReserved;
    DBBKMARK cBookmarks;
    const DBBKMARK (*rgcbBookmarks)[];
    const BYTE * (*rgpBookmarks)[];
    DBHASHVALUE (*rgHashedValues)[];
    DBROWSTATUS (*rgBookmarkStatus)[];
};

static void __finally_IWineRowServer_Hash_Stub( struct __frame_IWineRowServer_Hash_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgcbBookmarks,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1670]);
    if (__frame->rgcbBookmarks)
        __frame->_StubMsg.pfnFree(__frame->rgcbBookmarks);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgpBookmarks,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1684]);
    if (__frame->rgpBookmarks)
        __frame->_StubMsg.pfnFree(__frame->rgpBookmarks);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

    NdrComplexArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgHashedValues,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1702]);
    if (__frame->rgHashedValues)
        __frame->_StubMsg.pfnFree(__frame->rgHashedValues);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgBookmarkStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1716]);
    if (__frame->rgBookmarkStatus)
        __frame->_StubMsg.pfnFree(__frame->rgBookmarkStatus);

}

void __RPC_STUB IWineRowServer_Hash_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_Hash_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_Hash_Stub );
    __frame->rgcbBookmarks = 0;
    __frame->rgpBookmarks = 0;
    __frame->rgHashedValues = 0;
    __frame->rgBookmarkStatus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[196]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hReserved,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cBookmarks,
            0xb9 /* FC_UINT3264 */);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgcbBookmarks,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1670],
            0);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgpBookmarks,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1684],
            0);


        __frame->rgHashedValues = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cBookmarks * 8);
        memset(__frame->rgHashedValues, 0, (ULONG)__frame->cBookmarks * 8);
        __frame->rgBookmarkStatus = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->cBookmarks * 4);
        memset(__frame->rgBookmarkStatus, 0, (ULONG)__frame->cBookmarks * 4);

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->Hash(__frame->_This, __frame->hReserved, __frame->cBookmarks, *__frame->rgcbBookmarks, *__frame->rgpBookmarks, *__frame->rgHashedValues, *__frame->rgBookmarkStatus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgHashedValues,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1702]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgBookmarkStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1716]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgHashedValues,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1702]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBookmarks;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgBookmarkStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1716]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_Hash_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetProperties_Proxy(
    IWineRowServer* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertySets,
    DBPROPSET **prgPropertySets)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetProperties_Proxy );
    __frame->This = This;
    if (prgPropertySets) MIDL_memset( prgPropertySets, 0, sizeof( *prgPropertySets ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 18);
        if (!pcPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1774]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1774]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[218]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1864],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1778], (void *)pcPropertySets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertySets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1864], (void *)prgPropertySets );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertySets;
    DBPROPSET *_W0;
    DBPROPSET ** prgPropertySets;
};

static void __finally_IWineRowServer_GetProperties_Stub( struct __frame_IWineRowServer_GetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1774]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1864]);

}

void __RPC_STUB IWineRowServer_GetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetProperties_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertySets = 0;
    __frame->prgPropertySets = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[218]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1774],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertySets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->prgPropertySets = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetProperties(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertySets, __frame->prgPropertySets);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1864]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertySets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1864]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetReferencedRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetReferencedRowset_Proxy(
    IWineRowServer* This,
    DBORDINAL iOrdinal,
    REFIID riid,
    IUnknown **ppReferencedRowset)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetReferencedRowset_Proxy );
    __frame->This = This;
    if (ppReferencedRowset) MIDL_memset( ppReferencedRowset, 0, sizeof( *ppReferencedRowset ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 19);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppReferencedRowset) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 36;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&iOrdinal,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[572]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[234]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppReferencedRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1878],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetReferencedRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1878], (void *)ppReferencedRowset );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetReferencedRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBORDINAL iOrdinal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppReferencedRowset;
};

static void __finally_IWineRowServer_GetReferencedRowset_Stub( struct __frame_IWineRowServer_GetReferencedRowset_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppReferencedRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1878]);

}

void __RPC_STUB IWineRowServer_GetReferencedRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetReferencedRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetReferencedRowset_Stub );
    __frame->riid = 0;
    __frame->ppReferencedRowset = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[234]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->iOrdinal,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[572],
            0);


        __frame->ppReferencedRowset = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetReferencedRowset(__frame->_This, __frame->iOrdinal, __frame->riid, __frame->ppReferencedRowset);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppReferencedRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1878]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppReferencedRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1878]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetReferencedRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetSpecification_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetSpecification_Proxy(
    IWineRowServer* This,
    REFIID riid,
    IUnknown **ppSpecification)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetSpecification_Proxy );
    __frame->This = This;
    if (ppSpecification) MIDL_memset( ppSpecification, 0, sizeof( *ppSpecification ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 20);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSpecification) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[572]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[246]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSpecification,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1892],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetSpecification_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1892], (void *)ppSpecification );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetSpecification_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppSpecification;
};

static void __finally_IWineRowServer_GetSpecification_Stub( struct __frame_IWineRowServer_GetSpecification_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSpecification,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1892]);

}

void __RPC_STUB IWineRowServer_GetSpecification_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetSpecification_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetSpecification_Stub );
    __frame->riid = 0;
    __frame->ppSpecification = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[246]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[572],
            0);


        __frame->ppSpecification = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetSpecification(__frame->_This, __frame->riid, __frame->ppSpecification);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSpecification,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1892]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSpecification,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1892]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetSpecification_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_AddRefAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_AddRefAccessor_Proxy(
    IWineRowServer* This,
    HACCESSOR hAccessor,
    DBREFCOUNT *pcRefCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_AddRefAccessor_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 21);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hAccessor,
                0xb9 /* FC_UINT3264 */);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[256]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_AddRefAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1896], (void *)pcRefCount );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_AddRefAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBREFCOUNT * pcRefCount;
};

static void __finally_IWineRowServer_AddRefAccessor_Stub( struct __frame_IWineRowServer_AddRefAccessor_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pcRefCount,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896]);

}

void __RPC_STUB IWineRowServer_AddRefAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_AddRefAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_AddRefAccessor_Stub );
    __frame->pcRefCount = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[256]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hAccessor,
            0xb9 /* FC_UINT3264 */);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->AddRefAccessor(__frame->_This, __frame->hAccessor, __frame->pcRefCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1896]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_AddRefAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_CreateAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_CreateAccessor_Proxy(
    IWineRowServer* This,
    DBACCESSORFLAGS dwAccessorFlags,
    DBCOUNTITEM cBindings,
    const DBBINDING *rgBindings,
    DBLENGTH cbRowSize,
    HACCESSOR *phAccessor,
    DBBINDSTATUS *rgStatus)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_CreateAccessor_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 22);
        if (!phAccessor) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2008]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2026]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer = dwAccessorFlags;
            __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cBindings,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2008]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cbRowSize,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2026]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[264]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *phAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2026],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_CreateAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2012], (void *)phAccessor );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2026], (void *)rgStatus );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_CreateAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    DBACCESSORFLAGS dwAccessorFlags;
    DBCOUNTITEM cBindings;
    const DBBINDING * rgBindings;
    DBLENGTH cbRowSize;
    HACCESSOR _W0;
    HACCESSOR * phAccessor;
    DBBINDSTATUS * rgStatus;
};

static void __finally_IWineRowServer_CreateAccessor_Stub( struct __frame_IWineRowServer_CreateAccessor_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgBindings,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2008]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2026]);

}

void __RPC_STUB IWineRowServer_CreateAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_CreateAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_CreateAccessor_Stub );
    __frame->rgBindings = 0;
    __frame->phAccessor = 0;
    __frame->rgStatus = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[264]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBACCESSORFLAGS) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwAccessorFlags = *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cBindings,
            0xb9 /* FC_UINT3264 */);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2008],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cbRowSize,
            0xb9 /* FC_UINT3264 */);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2026],
            0);


        __frame->phAccessor = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->CreateAccessor(__frame->_This, __frame->dwAccessorFlags, __frame->cBindings, __frame->rgBindings, __frame->cbRowSize, __frame->phAccessor, __frame->rgStatus);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2026]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HACCESSOR *)__frame->_StubMsg.Buffer = *__frame->phAccessor;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2026]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_CreateAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_GetBindings_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_GetBindings_Proxy(
    IWineRowServer* This,
    HACCESSOR hAccessor,
    DBACCESSORFLAGS *pdwAccessorFlags,
    DBCOUNTITEM *pcBindings,
    DBBINDING **prgBindings)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_GetBindings_Proxy );
    __frame->This = This;
    if (prgBindings) MIDL_memset( prgBindings, 0, sizeof( *prgBindings ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 23);
        if (!pdwAccessorFlags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcBindings) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgBindings) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hAccessor,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *pcBindings;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[284]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBACCESSORFLAGS) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwAccessorFlags = *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcBindings = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2096],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_GetBindings_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2030], (void *)pdwAccessorFlags );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2034], (void *)pcBindings );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*pcBindings;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2096], (void *)prgBindings );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_GetBindings_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBACCESSORFLAGS _W0;
    DBACCESSORFLAGS * pdwAccessorFlags;
    DBCOUNTITEM * pcBindings;
    DBBINDING *_W1;
    DBBINDING ** prgBindings;
};

static void __finally_IWineRowServer_GetBindings_Stub( struct __frame_IWineRowServer_GetBindings_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgBindings,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2096]);

}

void __RPC_STUB IWineRowServer_GetBindings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_GetBindings_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_GetBindings_Stub );
    __frame->pdwAccessorFlags = 0;
    __frame->pcBindings = 0;
    __frame->prgBindings = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[284]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hAccessor,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcBindings = (DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);


        __frame->pdwAccessorFlags = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prgBindings = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->GetBindings(__frame->_This, __frame->hAccessor, __frame->pdwAccessorFlags, __frame->pcBindings, __frame->prgBindings);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2096]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer = *__frame->pdwAccessorFlags;
        __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *__frame->pcBindings;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2096]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_GetBindings_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IWineRowServer_ReleaseAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IWineRowServer_ReleaseAccessor_Proxy(
    IWineRowServer* This,
    HACCESSOR hAccessor,
    DBREFCOUNT *pcRefCount)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IWineRowServer_ReleaseAccessor_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 24);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hAccessor,
                0xb9 /* FC_UINT3264 */);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2100]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[300]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2100],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IWineRowServer_ReleaseAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2100], (void *)pcRefCount );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IWineRowServer_ReleaseAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IWineRowServer * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBREFCOUNT * pcRefCount;
};

static void __finally_IWineRowServer_ReleaseAccessor_Stub( struct __frame_IWineRowServer_ReleaseAccessor_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pcRefCount,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2100]);

}

void __RPC_STUB IWineRowServer_ReleaseAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IWineRowServer_ReleaseAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IWineRowServer*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IWineRowServer_ReleaseAccessor_Stub );
    __frame->pcRefCount = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[300]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hAccessor,
            0xb9 /* FC_UINT3264 */);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2100],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = __frame->_This->lpVtbl->ReleaseAccessor(__frame->_This, __frame->hAccessor, __frame->pcRefCount);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2100]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IWineRowServer_ReleaseAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IWineRowServer_FormatStringOffsetTable[] =
{
    (unsigned short)-1,  /* IWineRowServer::SetInnerUnk */
    (unsigned short)-1,  /* IWineRowServer::GetMarshal */
    0,  /* IWineRowServer::GetColumns */
    12,  /* IWineRowServer::GetSourceRowset */
    26,  /* IWineRowServer::Open */
    50,  /* IWineRowServer::SetColumns */
    62,  /* IWineRowServer::AddRefRows */
    78,  /* IWineRowServer::GetData */
    90,  /* IWineRowServer::GetNextRows */
    106,  /* IWineRowServer::ReleaseRows */
    126,  /* IWineRowServer::RestartPosition */
    130,  /* IWineRowServer::Compare */
    150,  /* IWineRowServer::GetRowsAt */
    174,  /* IWineRowServer::GetRowsByBookmark */
    196,  /* IWineRowServer::Hash */
    218,  /* IWineRowServer::GetProperties */
    234,  /* IWineRowServer::GetReferencedRowset */
    246,  /* IWineRowServer::GetSpecification */
    256,  /* IWineRowServer::AddRefAccessor */
    264,  /* IWineRowServer::CreateAccessor */
    284,  /* IWineRowServer::GetBindings */
    300,  /* IWineRowServer::ReleaseAccessor */
};

static const CINTERFACE_PROXY_VTABLE(25) _IWineRowServerProxyVtbl =
{
    {
        &IID_IWineRowServer,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        0,  /* IWineRowServer::SetInnerUnk */
        0,  /* IWineRowServer::GetMarshal */
        IWineRowServer_GetColumns_Proxy,
        IWineRowServer_GetSourceRowset_Proxy,
        IWineRowServer_Open_Proxy,
        IWineRowServer_SetColumns_Proxy,
        IWineRowServer_AddRefRows_Proxy,
        IWineRowServer_GetData_Proxy,
        IWineRowServer_GetNextRows_Proxy,
        IWineRowServer_ReleaseRows_Proxy,
        IWineRowServer_RestartPosition_Proxy,
        IWineRowServer_Compare_Proxy,
        IWineRowServer_GetRowsAt_Proxy,
        IWineRowServer_GetRowsByBookmark_Proxy,
        IWineRowServer_Hash_Proxy,
        IWineRowServer_GetProperties_Proxy,
        IWineRowServer_GetReferencedRowset_Proxy,
        IWineRowServer_GetSpecification_Proxy,
        IWineRowServer_AddRefAccessor_Proxy,
        IWineRowServer_CreateAccessor_Proxy,
        IWineRowServer_GetBindings_Proxy,
        IWineRowServer_ReleaseAccessor_Proxy,
    }
};

static const MIDL_SERVER_INFO IWineRowServer_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IWineRowServer_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IWineRowServer_table[] =
{
    STUB_FORWARDING_FUNCTION,
    STUB_FORWARDING_FUNCTION,
    IWineRowServer_GetColumns_Stub,
    IWineRowServer_GetSourceRowset_Stub,
    IWineRowServer_Open_Stub,
    IWineRowServer_SetColumns_Stub,
    IWineRowServer_AddRefRows_Stub,
    IWineRowServer_GetData_Stub,
    IWineRowServer_GetNextRows_Stub,
    IWineRowServer_ReleaseRows_Stub,
    IWineRowServer_RestartPosition_Stub,
    IWineRowServer_Compare_Stub,
    IWineRowServer_GetRowsAt_Stub,
    IWineRowServer_GetRowsByBookmark_Stub,
    IWineRowServer_Hash_Stub,
    IWineRowServer_GetProperties_Stub,
    IWineRowServer_GetReferencedRowset_Stub,
    IWineRowServer_GetSpecification_Stub,
    IWineRowServer_AddRefAccessor_Stub,
    IWineRowServer_CreateAccessor_Stub,
    IWineRowServer_GetBindings_Stub,
    IWineRowServer_ReleaseAccessor_Stub
};

static const CInterfaceStubVtbl _IWineRowServerStubVtbl =
{
    {
        &IID_IWineRowServer,
        &IWineRowServer_ServerInfo,
        25,
        &IWineRowServer_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

static void __RPC_USER row_server_DBBINDEXTExprEval_0000(PMIDL_STUB_MESSAGE pStubMsg)
{
    DBBINDEXT *pS = (DBBINDEXT *)(pStubMsg->StackTop - 0);
    pStubMsg->Offset = 0;
    pStubMsg->MaxCount = (ULONG_PTR)(ULONG)pS->ulExtension;
}

static const EXPR_EVAL ExprEvalRoutines[] =
{
    row_server_DBBINDEXTExprEval_0000,
};

static const USER_MARSHAL_ROUTINE_QUADRUPLE UserMarshalRoutines[] =
{
    {
        (USER_MARSHAL_SIZING_ROUTINE)VARIANT_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)VARIANT_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)VARIANT_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)VARIANT_UserFree
    }
};

static const MIDL_STUB_DESC Object_StubDesc =
{
    0,
    NdrOleAllocate,
    NdrOleFree,
    {0}, 0, 0, ExprEvalRoutines, 0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    UserMarshalRoutines,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

#if !defined(__RPC_WIN64__)
#error Currently only Wine and WIN32 are supported.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter num_cols) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 2 (parameter in_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb2),	/* type offset = 178 */
/* 6 (parameter out_cols) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x4fa),	/* type offset = 1274 */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x510),	/* type offset = 1296 */
/* 16 (parameter ppRowset) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x51a),	/* type offset = 1306 */
/* 20 (parameter phRow) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x51e),	/* type offset = 1310 */
/* 24 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 26 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x522),	/* type offset = 1314 */
/* 30 (parameter pColumnID) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x534),	/* type offset = 1332 */
/* 34 (parameter rguidColumnType) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x538),	/* type offset = 1336 */
/* 38 (parameter dwBindFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 40 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x53c),	/* type offset = 1340 */
/* 44 (parameter ppUnk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x546),	/* type offset = 1350 */
/* 48 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 50 (parameter num_cols) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 52 (parameter in_data) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x564),	/* type offset = 1380 */
/* 56 (parameter status) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x57a),	/* type offset = 1402 */
/* 60 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 62 (parameter cRows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 64 (parameter rghRows) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x588),	/* type offset = 1416 */
/* 68 (parameter rgRefCounts) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x596),	/* type offset = 1430 */
/* 72 (parameter rgRowStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5a4),	/* type offset = 1444 */
/* 76 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 78 (parameter hRow) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 80 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 82 (parameter pData) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ae),	/* type offset = 1454 */
/* 86 (parameter size) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 88 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 90 (parameter hReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 92 (parameter lRowsOffset) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 94 (parameter cRows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 96 (parameter pcRowObtained) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5bc),	/* type offset = 1468 */
/* 100 (parameter prghRows) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5d2),	/* type offset = 1490 */
/* 104 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 106 (parameter cRows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 108 (parameter rghRows) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5d6),	/* type offset = 1494 */
/* 112 (parameter rgRowOptions) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x5e4),	/* type offset = 1508 */
/* 116 (parameter rgRefCounts) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5ee),	/* type offset = 1518 */
/* 120 (parameter rgRowStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x5fc),	/* type offset = 1532 */
/* 124 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 126 (parameter hReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 128 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter hReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 132 (parameter cbBookmark1) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 134 (parameter pBookmark1) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x606),	/* type offset = 1542 */
/* 138 (parameter cbBookmark2) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 140 (parameter pBookmark2) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x614),	/* type offset = 1556 */
/* 144 (parameter pComparison) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x622),	/* type offset = 1570 */
/* 148 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 150 (parameter hReserved1) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 152 (parameter hReserved2) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 154 (parameter cbBookmark) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 156 (parameter pBookmark) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x626),	/* type offset = 1574 */
/* 160 (parameter lRowsOffset) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 162 (parameter cRows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 164 (parameter pcRowsObtained) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x634),	/* type offset = 1588 */
/* 168 (parameter prghRows) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x64a),	/* type offset = 1610 */
/* 172 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 174 (parameter hReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 176 (parameter cRows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 178 (parameter rgcbBookmarks) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x64e),	/* type offset = 1614 */
/* 182 (parameter rgpBookmarks) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x65c),	/* type offset = 1628 */
/* 186 (parameter rghRows) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x66e),	/* type offset = 1646 */
/* 190 (parameter rgRowStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x67c),	/* type offset = 1660 */
/* 194 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 196 (parameter hReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 198 (parameter cBookmarks) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 200 (parameter rgcbBookmarks) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x686),	/* type offset = 1670 */
/* 204 (parameter rgpBookmarks) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x694),	/* type offset = 1684 */
/* 208 (parameter rgHashedValues) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6a6),	/* type offset = 1702 */
/* 212 (parameter rgBookmarkStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6b4),	/* type offset = 1716 */
/* 216 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 218 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 220 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6ee),	/* type offset = 1774 */
/* 224 (parameter pcPropertySets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x6f2),	/* type offset = 1778 */
/* 228 (parameter prgPropertySets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x748),	/* type offset = 1864 */
/* 232 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 234 (parameter iOrdinal) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 236 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x74c),	/* type offset = 1868 */
/* 240 (parameter ppReferencedRowset) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x756),	/* type offset = 1878 */
/* 244 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 246 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x75a),	/* type offset = 1882 */
/* 250 (parameter ppSpecification) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x764),	/* type offset = 1892 */
/* 254 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 256 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 258 (parameter pcRefCount) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x768),	/* type offset = 1896 */
/* 262 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 264 (parameter dwAccessorFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 266 (parameter cBindings) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 268 (parameter rgBindings) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x7d8),	/* type offset = 2008 */
/* 272 (parameter cbRowSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 274 (parameter phAccessor) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7dc),	/* type offset = 2012 */
/* 278 (parameter rgStatus) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x7ea),	/* type offset = 2026 */
/* 282 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 284 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 286 (parameter pdwAccessorFlags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7ee),	/* type offset = 2030 */
/* 290 (parameter pcBindings) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x7f2),	/* type offset = 2034 */
/* 294 (parameter prgBindings) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x830),	/* type offset = 2096 */
/* 298 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 300 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 302 (parameter pcRefCount) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x834),	/* type offset = 2100 */
/* 306 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 8 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2) */
        0x5b,	/* FC_END */
/* 20 (GUID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (8) */
/* 24 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0xffe8),	/* Offset= -24 (8) */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffe2),	/* Offset= -30 (8) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffdc),	/* Offset= -36 (8) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffd6),	/* Offset= -42 (8) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffd0),	/* Offset= -48 (8) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffd6),	/* Offset= -42 (20) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffd0),	/* Offset= -48 (20) */
        NdrFcShort(0x0),
/* 72 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 74 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 76 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (72) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffee),	/* Offset= -18 (72) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffe8),	/* Offset= -24 (72) */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcShort(0x0),
/* 124 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0xff96),	/* Offset= -106 (24) */
/* 132 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffc2),	/* Offset= -62 (76) */
/* 140 (DBID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (146) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (124) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (132) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 160 (wine_getcolumns_in) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (166) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe2),	/* Offset= -30 (140) */
        0xb8,	/* FC_INT3264 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 178 (wine_getcolumns_in *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetColumns */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (160) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 196 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (178) */
/* 200 (unsigned short[]) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x9,	/* Corr desc: field clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 210 (FLAGGED_WORD_BLOB) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xfff2),	/* Offset= -14 (200) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 220 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (210) */
/* 224 (CY) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 230 (DECIMAL) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x08,	/* FC_LONG */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 240 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 258 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 276 (wireBSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffb0),	/* Offset= -80 (210) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 294 (SAFEARR_BSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (306) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 306 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (276) */
/* 310 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 328 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (310) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 346 (SAFEARR_UNKNOWN) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (358) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 358 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (328) */
/* 362 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 380 (IDispatch **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (362) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 398 (SAFEARR_DISPATCH) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (410) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 410 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (380) */
/* 414 (wireVARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x31c),	/* Offset= 796 (1224) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 432 (SAFEARR_VARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (444) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 444 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (414) */
/* 448 (IRecordInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000002f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 466 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 476 (struct _wireBRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (492) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (448) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 492 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (466) */
/* 496 (wireBRECORD *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (476) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 514 (SAFEARR_BRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (526) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 526 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (496) */
/* 530 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 548 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (530) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 566 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 572 (IID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (566) */
        0x5b,	/* FC_END */
/* 584 (SAFEARR_HAVEIID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (600) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe7),	/* Offset= -25 (572) */
        0x5b,	/* FC_END */
/* 600 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffca),	/* Offset= -54 (548) */
/* 604 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 614 (BYTE_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (626) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 626 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (604) */
/* 630 (unsigned short *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 640 (WORD_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (652) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 652 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (630) */
/* 656 (ULONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 666 (DWORD_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (678) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 678 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (656) */
/* 682 (hyper *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 692 (HYPER_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (704) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 704 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (682) */
/* 708 (SAFEARRAYUNION) */
        0x2a,	/* FC_ENCAPSULATED_UNION */
        0x89,	/* Switch type= FC_ULONG */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0xa),	/* 10 */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xfe58),	/* Offset= -424 (294) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfe86),	/* Offset= -378 (346) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfeb4),	/* Offset= -332 (398) */
        NdrFcLong(0xc),	/* 12 */
        NdrFcShort(0xfed0),	/* Offset= -304 (432) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xff1c),	/* Offset= -228 (514) */
        NdrFcLong(0x800d),	/* 32781 */
        NdrFcShort(0xff5c),	/* Offset= -164 (584) */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0xff74),	/* Offset= -140 (614) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xff88),	/* Offset= -120 (640) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xff9c),	/* Offset= -100 (666) */
        NdrFcLong(0x14),	/* 20 */
        NdrFcShort(0xffb0),	/* Offset= -80 (692) */
        NdrFcShort(0xffff),
/* 776 (SAFEARRAYBOUND) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 784 (SAFEARRAYBOUND[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x7,	/* Corr desc: field cDims, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xffc8),	/* offset = -56 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffee),	/* Offset= -18 (776) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 798 (struct _wireSAFEARRAY) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x38),	/* 56 */
        NdrFcShort(0xffee),	/* Offset= -18 (784) */
        NdrFcShort(0x0),	/* Offset= 0 (804) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff97),	/* Offset= -105 (708) */
        0x5b,	/* FC_END */
/* 816 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (798) */
/* 820 (signed char *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 824 (USHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x07,	/* FC_USHORT */
        0x5c,	/* FC_PAD */
/* 828 (ULONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 832 (INT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 836 (UINT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 840 (BYTE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 844 (SHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 848 (LONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 852 (FLOAT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0a,	/* FC_FLOAT */
        0x5c,	/* FC_PAD */
/* 856 (DOUBLE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 860 (VARIANT_BOOL *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 864 (SCODE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 868 (DATE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 872 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd68),	/* Offset= -664 (210) */
/* 876 (wireBSTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (872) */
/* 880 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x156),	/* Offset= 342 (1224) */
/* 884 (wireVARIANT *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (880) */
/* 888 (CY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd66),	/* Offset= -666 (224) */
/* 892 (DECIMAL *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd68),	/* Offset= -664 (230) */
/* 896 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 914 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (896) */
/* 918 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 936 (IDispatch **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (918) */
/* 940 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff70),	/* Offset= -144 (798) */
/* 944 (wireSAFEARRAY *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (940) */
/* 948 (wireBRECORD) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfe26),	/* Offset= -474 (476) */
/* 952 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x2b),	/* 43 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x12),	/* 18 */
        NdrFcShort(0x8007),	/* Simple arm type: FC_USHORT */
        NdrFcLong(0x13),	/* 19 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x16),	/* 22 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x17),	/* 23 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x11),	/* 17 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x800a),	/* Simple arm type: FC_FLOAT */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0xb),	/* 11 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0xa),	/* 10 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xff4e),	/* Offset= -178 (872) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xfcc0),	/* Offset= -832 (224) */
        NdrFcLong(0xe),	/* 14 */
        NdrFcShort(0xfcc0),	/* Offset= -832 (230) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfcc4),	/* Offset= -828 (240) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfcd0),	/* Offset= -816 (258) */
        NdrFcLong(0x2000),	/* 8192 */
        NdrFcShort(0xff74),	/* Offset= -140 (940) */
        NdrFcLong(0x4010),	/* 16400 */
        NdrFcShort(0xfef6),	/* Offset= -266 (820) */
        NdrFcLong(0x4012),	/* 16402 */
        NdrFcShort(0xfef4),	/* Offset= -268 (824) */
        NdrFcLong(0x4013),	/* 16403 */
        NdrFcShort(0xfef2),	/* Offset= -270 (828) */
        NdrFcLong(0x4016),	/* 16406 */
        NdrFcShort(0xfef0),	/* Offset= -272 (832) */
        NdrFcLong(0x4017),	/* 16407 */
        NdrFcShort(0xfeee),	/* Offset= -274 (836) */
        NdrFcLong(0x4011),	/* 16401 */
        NdrFcShort(0xfeec),	/* Offset= -276 (840) */
        NdrFcLong(0x4002),	/* 16386 */
        NdrFcShort(0xfeea),	/* Offset= -278 (844) */
        NdrFcLong(0x4003),	/* 16387 */
        NdrFcShort(0xfee8),	/* Offset= -280 (848) */
        NdrFcLong(0x4004),	/* 16388 */
        NdrFcShort(0xfee6),	/* Offset= -282 (852) */
        NdrFcLong(0x4005),	/* 16389 */
        NdrFcShort(0xfee4),	/* Offset= -284 (856) */
        NdrFcLong(0x400b),	/* 16395 */
        NdrFcShort(0xfee2),	/* Offset= -286 (860) */
        NdrFcLong(0x400a),	/* 16394 */
        NdrFcShort(0xfee0),	/* Offset= -288 (864) */
        NdrFcLong(0x4007),	/* 16391 */
        NdrFcShort(0xfede),	/* Offset= -290 (868) */
        NdrFcLong(0x4008),	/* 16392 */
        NdrFcShort(0xfee0),	/* Offset= -288 (876) */
        NdrFcLong(0x400c),	/* 16396 */
        NdrFcShort(0xfee2),	/* Offset= -286 (884) */
        NdrFcLong(0x4006),	/* 16390 */
        NdrFcShort(0xfee0),	/* Offset= -288 (888) */
        NdrFcLong(0x400e),	/* 16398 */
        NdrFcShort(0xfede),	/* Offset= -290 (892) */
        NdrFcLong(0x400d),	/* 16397 */
        NdrFcShort(0xfeee),	/* Offset= -274 (914) */
        NdrFcLong(0x4009),	/* 16393 */
        NdrFcShort(0xfefe),	/* Offset= -258 (936) */
        NdrFcLong(0x6000),	/* 24576 */
        NdrFcShort(0xff00),	/* Offset= -256 (944) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xfefe),	/* Offset= -258 (948) */
        NdrFcLong(0x4024),	/* 16420 */
        NdrFcShort(0xfef8),	/* Offset= -264 (948) */
        NdrFcShort(0xffff),
/* 1216 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x7,	/* Corr desc: field vt, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xfef2),	/* Offset= -270 (952) */
/* 1224 (struct _wireVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1230) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1216) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1244 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1224) */
/* 1248 (VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (1244) */
/* 1258 (wine_getcolumns_out) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x28),	/* 40 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1264) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (1248) */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 1274 (wine_getcolumns_out *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetColumns */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe2),	/* Offset= -30 (1258) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1292 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1274) */
/* 1296 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfd2a),	/* Offset= -726 (572) */
/* 1300 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 1306 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1300) */
/* 1310 (HROW *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1314 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1332 (DBID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfb56),	/* Offset= -1194 (140) */
/* 1336 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xface),	/* Offset= -1330 (8) */
/* 1340 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfcfe),	/* Offset= -770 (572) */
/* 1344 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
/* 1350 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1344) */
/* 1354 (wine_setcolumns_in) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1360) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff8c),	/* Offset= -116 (1248) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfb34),	/* Offset= -1228 (140) */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0xb8,	/* FC_INT3264 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1380 (wine_setcolumns_in *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for SetColumns */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (1354) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1398 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (1380) */
/* 1402 (DBSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for SetColumns */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1412 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1402) */
/* 1416 (const HROW[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for AddRefRows */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1430 (DBREFCOUNT[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for AddRefRows */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1444 (DBROWSTATUS[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for AddRefRows */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1454 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x29,	/* Corr desc: parameter size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1464 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1454) */
/* 1468 (DBCOUNTITEM *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1472 (HROW *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetNextRows */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1486 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (1472) */
/* 1490 (HROW **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1486) */
/* 1494 (const HROW[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for ReleaseRows */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1508 (DBROWOPTIONS[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for ReleaseRows */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1518 (DBREFCOUNT[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for ReleaseRows */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1532 (DBROWSTATUS[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for ReleaseRows */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1542 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x20,	/* Corr desc: unused for Compare */
        0x0,
        NdrFcShort(0x0),
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1552 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1542) */
/* 1556 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x20,	/* Corr desc: unused for Compare */
        0x0,
        NdrFcShort(0x0),
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1566 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1556) */
/* 1570 (DBCOMPARE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1574 (const BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x20,	/* Corr desc: unused for GetRowsAt */
        0x0,
        NdrFcShort(0x0),
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1584 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (1574) */
/* 1588 (DBCOUNTITEM *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1592 (HROW *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetRowsAt */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1606 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (1592) */
/* 1610 (HROW **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1606) */
/* 1614 (const DBBKMARK[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetRowsByBookmark */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1628 (const BYTE *[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetRowsByBookmark */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1646 (HROW[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetRowsByBookmark */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1660 (DBROWSTATUS[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for GetRowsByBookmark */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1670 (const DBBKMARK[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for Hash */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1684 (const BYTE *[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for Hash */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1702 (DBHASHVALUE[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for Hash */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 1716 (DBROWSTATUS[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for Hash */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1726 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1736 (const DBPROPIDSET) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (1752) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf934),	/* Offset= -1740 (8) */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 1752 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (1726) */
/* 1756 (const DBPROPIDSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetProperties */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1736) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1774 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (1756) */
/* 1778 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1782 (DBPROP) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x48),	/* 72 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1788) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf988),	/* Offset= -1656 (140) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfdd8),	/* Offset= -552 (1248) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1804 (DBPROP *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cProperties, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (1782) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1822 (DBPROPSET) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (1838) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf8de),	/* Offset= -1826 (8) */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 1838 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (1804) */
/* 1842 (DBPROPSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter pcPropertySets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1822) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1860 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (1842) */
/* 1864 (DBPROPSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1860) */
/* 1868 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfaee),	/* Offset= -1298 (572) */
/* 1872 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
/* 1878 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1872) */
/* 1882 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfae0),	/* Offset= -1312 (572) */
/* 1886 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 1892 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1886) */
/* 1896 (DBREFCOUNT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1900 (ITypeInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020401),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1918 (DBOBJECT) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfab7),	/* Offset= -1353 (572) */
        0x5b,	/* FC_END */
/* 1928 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x10,	/* Corr desc: field pointer in DBBINDEXT */
        0x59,	/* FC_CALLBACK */
        NdrFcShort(0x0),	/* 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1938 (DBBINDEXT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (1950) */
        0x36,	/* FC_POINTER */
        0xb8,	/* FC_INT3264 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1950 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1928) */
/* 1954 (const DBBINDING) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x16),	/* Offset= 22 (1982) */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffbc),	/* Offset= -68 (1900) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 1982 (DBOBJECT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffbe),	/* Offset= -66 (1918) */
/* 1986 (DBBINDEXT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffce),	/* Offset= -50 (1938) */
/* 1990 (const DBBINDING *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for CreateAccessor */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffce),	/* Offset= -50 (1954) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2008 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (1990) */
/* 2012 (HACCESSOR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 2016 (DBBINDSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for CreateAccessor */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2026 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (2016) */
/* 2030 (DBACCESSORFLAGS *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2034 (DBCOUNTITEM *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 2038 (DBBINDING) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x16),	/* Offset= 22 (2066) */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff68),	/* Offset= -152 (1900) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2066 (DBOBJECT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff6a),	/* Offset= -150 (1918) */
/* 2070 (DBBINDEXT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff7a),	/* Offset= -134 (1938) */
/* 2074 (DBBINDING *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for GetBindings */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffce),	/* Offset= -50 (2038) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2092 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (2074) */
/* 2096 (DBBINDING **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (2092) */
/* 2100 (DBREFCOUNT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
        0x0
    }
};

static const CInterfaceProxyVtbl* const _row_server_ProxyVtblList[] =
{
    (const CInterfaceProxyVtbl*)&_IWineRowServerProxyVtbl,
    0
};

static const CInterfaceStubVtbl* const _row_server_StubVtblList[] =
{
    &_IWineRowServerStubVtbl,
    0
};

static PCInterfaceName const _row_server_InterfaceNamesList[] =
{
    "IWineRowServer",
    0
};

static int __stdcall _row_server_IID_Lookup(const IID* pIID, int* pIndex)
{
    int low = 0, high = 0;

    while (low <= high)
    {
        int pos = (low + high) / 2;
        int res = IID_GENERIC_CHECK_IID(_row_server, pIID, pos);
        if (!res) { *pIndex = pos; return 1; }
        if (res > 0) low = pos + 1;
        else high = pos - 1;
    }
    return 0;
}

const ExtendedProxyFileInfo row_server_ProxyFileInfo DECLSPEC_HIDDEN =
{
    (const PCInterfaceProxyVtblList*)_row_server_ProxyVtblList,
    (const PCInterfaceStubVtblList*)_row_server_StubVtblList,
    _row_server_InterfaceNamesList,
    0,
    _row_server_IID_Lookup,
    1,
    1,
    0,
    0,
    0,
    0
};

#endif /* _WIN64 */
