/*** Autogenerated by WIDL 3.8 from winemsi.idl - Do not edit ***/
#include <string.h>

#include "winemsi.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif

#ifndef _WIN64

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

#define TYPE_FORMAT_STRING_SIZE 429
#define PROC_FORMAT_STRING_SIZE 345

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

/*****************************************************************************
 * IWineMsiRemote interface
 */

handle_t rpc_handle;

static const RPC_CLIENT_INTERFACE IWineMsiRemote___RpcClientInterface =
{
    sizeof(RPC_CLIENT_INTERFACE),
    {{0x56d58b64,0x8780,0x4c22,{0xa8,0xbc,0x8b,0x0b,0x29,0xe4,0xa9,0xf8}},{0,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    0,
    0,
    0,
    0,
    0,
    0,
};
RPC_IF_HANDLE IWineMsiRemote_v0_0_c_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& IWineMsiRemote___RpcClientInterface;

static const MIDL_STUB_DESC IWineMsiRemote_StubDesc;

struct __frame_remote_ViewClose
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ViewClose( struct __frame_remote_ViewClose *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_ViewClose(
    MSIHANDLE view)
{
    struct __frame_remote_ViewClose __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ViewClose );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 0);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = view;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_ViewClose( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_ViewExecute
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ViewExecute( struct __frame_remote_ViewExecute *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_ViewExecute(
    MSIHANDLE view,
    struct wire_record *record)
{
    struct __frame_remote_ViewExecute __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ViewExecute );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 1);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[106]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = view;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[106]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[4]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_ViewExecute( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_ViewFetch
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ViewFetch( struct __frame_remote_ViewFetch *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_ViewFetch(
    MSIHANDLE view,
    struct wire_record **record)
{
    struct __frame_remote_ViewFetch __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ViewFetch );
    if (!record) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 2);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = view;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[12]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[124],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_ViewFetch( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_ViewGetColumnInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ViewGetColumnInfo( struct __frame_remote_ViewGetColumnInfo *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_ViewGetColumnInfo(
    MSIHANDLE view,
    MSICOLINFO info,
    struct wire_record **record)
{
    struct __frame_remote_ViewGetColumnInfo __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ViewGetColumnInfo );
    if (!record) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 3);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = view;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSICOLINFO *)__frame->_StubMsg.Buffer = info;
        __frame->_StubMsg.Buffer += sizeof(MSICOLINFO);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[20]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[142],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_ViewGetColumnInfo( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_ViewModify
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ViewModify( struct __frame_remote_ViewModify *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_ViewModify(
    MSIHANDLE view,
    MSIMODIFY mode,
    struct wire_record *record,
    struct wire_record **refreshed)
{
    struct __frame_remote_ViewModify __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ViewModify );
    if (!record) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!refreshed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 4);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[146]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = view;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIMODIFY *)__frame->_StubMsg.Buffer = mode;
        __frame->_StubMsg.Buffer += sizeof(MSIMODIFY);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[146]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[30]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&refreshed,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[174],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_ViewModify( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_DatabaseIsTablePersistent
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_DatabaseIsTablePersistent( struct __frame_remote_DatabaseIsTablePersistent *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

MSICONDITION __cdecl remote_DatabaseIsTablePersistent(
    MSIHANDLE db,
    LPCWSTR table)
{
    struct __frame_remote_DatabaseIsTablePersistent __f, * const __frame = &__f;
    MSICONDITION _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_DatabaseIsTablePersistent );
    if (!table) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 5);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[180]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = db;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[180]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[44]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSICONDITION) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(MSICONDITION *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSICONDITION);

    }
    RpcFinally
    {
        __finally_remote_DatabaseIsTablePersistent( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_DatabaseGetPrimaryKeys
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_DatabaseGetPrimaryKeys( struct __frame_remote_DatabaseGetPrimaryKeys *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_DatabaseGetPrimaryKeys(
    MSIHANDLE db,
    LPCWSTR table,
    struct wire_record **keys)
{
    struct __frame_remote_DatabaseGetPrimaryKeys __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_DatabaseGetPrimaryKeys );
    if (!table) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!keys) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 6);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[184]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = db;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[184]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[52]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&keys,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[200],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_DatabaseGetPrimaryKeys( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_DatabaseGetSummaryInformation
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_DatabaseGetSummaryInformation( struct __frame_remote_DatabaseGetSummaryInformation *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_DatabaseGetSummaryInformation(
    MSIHANDLE db,
    UINT updatecount,
    MSIHANDLE *suminfo)
{
    struct __frame_remote_DatabaseGetSummaryInformation __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_DatabaseGetSummaryInformation );
    if (!suminfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 7);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = db;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(UINT *)__frame->_StubMsg.Buffer = updatecount;
        __frame->_StubMsg.Buffer += sizeof(UINT);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[64]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSIHANDLE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *suminfo = *(MSIHANDLE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_DatabaseGetSummaryInformation( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_DatabaseOpenView
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_DatabaseOpenView( struct __frame_remote_DatabaseOpenView *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_DatabaseOpenView(
    MSIHANDLE db,
    LPCWSTR query,
    MSIHANDLE *view)
{
    struct __frame_remote_DatabaseOpenView __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_DatabaseOpenView );
    if (!query) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!view) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 8);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)query,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[210]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = db;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)query,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[210]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[74]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSIHANDLE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *view = *(MSIHANDLE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_DatabaseOpenView( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetActiveDatabase
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetActiveDatabase( struct __frame_remote_GetActiveDatabase *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

MSIHANDLE __cdecl remote_GetActiveDatabase(
    MSIHANDLE hinst)
{
    struct __frame_remote_GetActiveDatabase __f, * const __frame = &__f;
    MSIHANDLE _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetActiveDatabase );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 9);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[86]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSIHANDLE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(MSIHANDLE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

    }
    RpcFinally
    {
        __finally_remote_GetActiveDatabase( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetProperty
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetProperty( struct __frame_remote_GetProperty *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetProperty(
    MSIHANDLE hinst,
    LPCWSTR property,
    LPWSTR *value,
    DWORD *size)
{
    struct __frame_remote_GetProperty __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetProperty );
    if (!property) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!value) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 10);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)property,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[218]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)property,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[218]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[90]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[220],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetProperty( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetProperty
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetProperty( struct __frame_remote_SetProperty *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetProperty(
    MSIHANDLE hinst,
    LPCWSTR property,
    LPCWSTR value)
{
    struct __frame_remote_SetProperty __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetProperty );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 11);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)property,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[360]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[360]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)property,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[360]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[360]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[106]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetProperty( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_ProcessMessage
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ProcessMessage( struct __frame_remote_ProcessMessage *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

int __cdecl remote_ProcessMessage(
    MSIHANDLE hinst,
    INSTALLMESSAGE message,
    struct wire_record *record)
{
    struct __frame_remote_ProcessMessage __f, * const __frame = &__f;
    int _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ProcessMessage );
    if (!record) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 12);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[240]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(INSTALLMESSAGE *)__frame->_StubMsg.Buffer = message;
        __frame->_StubMsg.Buffer += sizeof(INSTALLMESSAGE);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[240]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[118]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);

    }
    RpcFinally
    {
        __finally_remote_ProcessMessage( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_DoAction
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_DoAction( struct __frame_remote_DoAction *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_DoAction(
    MSIHANDLE hinst,
    LPCWSTR action)
{
    struct __frame_remote_DoAction __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_DoAction );
    if (!action) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 13);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)action,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[256]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)action,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[256]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[128]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_DoAction( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_Sequence
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_Sequence( struct __frame_remote_Sequence *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_Sequence(
    MSIHANDLE hinst,
    LPCWSTR table,
    int sequence)
{
    struct __frame_remote_Sequence __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_Sequence );
    if (!table) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 14);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[260]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[260]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(int *)__frame->_StubMsg.Buffer = sequence;
        __frame->_StubMsg.Buffer += sizeof(int);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[136]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_Sequence( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetTargetPath
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetTargetPath( struct __frame_remote_GetTargetPath *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetTargetPath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPWSTR *value)
{
    struct __frame_remote_GetTargetPath __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetTargetPath );
    if (!folder) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!value) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 15);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[264]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[264]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[146]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[266],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetTargetPath( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetTargetPath
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetTargetPath( struct __frame_remote_SetTargetPath *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetTargetPath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPCWSTR value)
{
    struct __frame_remote_SetTargetPath __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetTargetPath );
    if (!folder) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!value) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 16);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[280]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[280]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[158]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetTargetPath( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetSourcePath
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetSourcePath( struct __frame_remote_GetSourcePath *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetSourcePath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPWSTR *value)
{
    struct __frame_remote_GetSourcePath __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetSourcePath );
    if (!folder) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!value) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 17);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[284]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[284]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[170]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[286],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetSourcePath( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetMode
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetMode( struct __frame_remote_GetMode *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

BOOL __cdecl remote_GetMode(
    MSIHANDLE hinst,
    MSIRUNMODE mode)
{
    struct __frame_remote_GetMode __f, * const __frame = &__f;
    BOOL _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetMode );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 18);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIRUNMODE *)__frame->_StubMsg.Buffer = mode;
        __frame->_StubMsg.Buffer += sizeof(MSIRUNMODE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[182]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

    }
    RpcFinally
    {
        __finally_remote_GetMode( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetMode
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetMode( struct __frame_remote_SetMode *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetMode(
    MSIHANDLE hinst,
    MSIRUNMODE mode,
    BOOL state)
{
    struct __frame_remote_SetMode __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetMode );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 19);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIRUNMODE *)__frame->_StubMsg.Buffer = mode;
        __frame->_StubMsg.Buffer += sizeof(MSIRUNMODE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[188]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetMode( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetFeatureState
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetFeatureState( struct __frame_remote_GetFeatureState *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetFeatureState(
    MSIHANDLE hinst,
    LPCWSTR feature,
    INSTALLSTATE *installed,
    INSTALLSTATE *action)
{
    struct __frame_remote_GetFeatureState __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetFeatureState );
    if (!feature) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!installed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!action) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 20);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[296]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[296]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[196]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INSTALLSTATE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *installed = *(INSTALLSTATE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INSTALLSTATE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *action = *(INSTALLSTATE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetFeatureState( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetFeatureState
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetFeatureState( struct __frame_remote_SetFeatureState *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetFeatureState(
    MSIHANDLE hinst,
    LPCWSTR feature,
    INSTALLSTATE state)
{
    struct __frame_remote_SetFeatureState __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetFeatureState );
    if (!feature) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 21);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[308]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[308]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(INSTALLSTATE *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[212]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetFeatureState( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetComponentState
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetComponentState( struct __frame_remote_GetComponentState *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetComponentState(
    MSIHANDLE hinst,
    LPCWSTR component,
    INSTALLSTATE *installed,
    INSTALLSTATE *action)
{
    struct __frame_remote_GetComponentState __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetComponentState );
    if (!component) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!installed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!action) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 22);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[312]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[312]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[222]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INSTALLSTATE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *installed = *(INSTALLSTATE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INSTALLSTATE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *action = *(INSTALLSTATE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetComponentState( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetComponentState
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetComponentState( struct __frame_remote_SetComponentState *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetComponentState(
    MSIHANDLE hinst,
    LPCWSTR component,
    INSTALLSTATE state)
{
    struct __frame_remote_SetComponentState __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetComponentState );
    if (!component) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 23);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[324]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[324]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(INSTALLSTATE *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[238]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetComponentState( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetLanguage
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetLanguage( struct __frame_remote_GetLanguage *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

LANGID __cdecl remote_GetLanguage(
    MSIHANDLE hinst)
{
    struct __frame_remote_GetLanguage __f, * const __frame = &__f;
    LANGID _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetLanguage );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 24);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[248]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

    }
    RpcFinally
    {
        __finally_remote_GetLanguage( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetInstallLevel
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetInstallLevel( struct __frame_remote_SetInstallLevel *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetInstallLevel(
    MSIHANDLE hinst,
    int level)
{
    struct __frame_remote_SetInstallLevel __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetInstallLevel );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 25);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(int *)__frame->_StubMsg.Buffer = level;
        __frame->_StubMsg.Buffer += sizeof(int);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[252]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetInstallLevel( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_FormatRecord
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_FormatRecord( struct __frame_remote_FormatRecord *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_FormatRecord(
    MSIHANDLE hinst,
    struct wire_record *record,
    LPWSTR *value)
{
    struct __frame_remote_FormatRecord __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_FormatRecord );
    if (!record) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!value) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 26);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[326]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[326]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[258]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[340],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_FormatRecord( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_EvaluateCondition
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_EvaluateCondition( struct __frame_remote_EvaluateCondition *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

MSICONDITION __cdecl remote_EvaluateCondition(
    MSIHANDLE hinst,
    LPCWSTR condition)
{
    struct __frame_remote_EvaluateCondition __f, * const __frame = &__f;
    MSICONDITION _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_EvaluateCondition );
    if (!condition) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 27);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)condition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[350]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)condition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[350]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[270]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSICONDITION) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(MSICONDITION *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSICONDITION);

    }
    RpcFinally
    {
        __finally_remote_EvaluateCondition( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetFeatureCost
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetFeatureCost( struct __frame_remote_GetFeatureCost *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetFeatureCost(
    MSIHANDLE hinst,
    LPCWSTR feature,
    MSICOSTTREE cost_tree,
    INSTALLSTATE state,
    INT *cost)
{
    struct __frame_remote_GetFeatureCost __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetFeatureCost );
    if (!feature) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!cost) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 28);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[354]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSICOSTTREE *)__frame->_StubMsg.Buffer = cost_tree;
        __frame->_StubMsg.Buffer += sizeof(MSICOSTTREE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(INSTALLSTATE *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[278]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *cost = *(INT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INT);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetFeatureCost( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_EnumComponentCosts
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_EnumComponentCosts( struct __frame_remote_EnumComponentCosts *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_EnumComponentCosts(
    MSIHANDLE hinst,
    LPCWSTR component,
    DWORD index,
    INSTALLSTATE state,
    LPWSTR drive,
    INT *cost,
    INT *temp)
{
    struct __frame_remote_EnumComponentCosts __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_EnumComponentCosts );
    if (!drive) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!cost) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!temp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 29);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[360]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[360]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = index;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(INSTALLSTATE *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[294]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&drive,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[368],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *cost = *(INT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INT);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *temp = *(INT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INT);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_EnumComponentCosts( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetActionInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetActionInfo( struct __frame_remote_GetActionInfo *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetActionInfo(
    const GUID *guid,
    int *type,
    LPWSTR *dllname,
    LPSTR *function,
    MSIHANDLE *hinst)
{
    struct __frame_remote_GetActionInfo __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetActionInfo );
    if (!guid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!type) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!dllname) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!function) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!hinst) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 30);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 20;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[388]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[318]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *type = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&dllname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[408],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&function,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[416],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSIHANDLE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *hinst = *(MSIHANDLE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetActionInfo( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_CloseHandle
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_CloseHandle( struct __frame_remote_CloseHandle *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_CloseHandle(
    MSIHANDLE handle)
{
    struct __frame_remote_CloseHandle __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_CloseHandle );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 31);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = handle;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[340]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_CloseHandle( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

#if !defined(__RPC_WIN32__)
#error  Invalid build platform for this stub.
#endif

static const MIDL_STUB_DESC IWineMsiRemote_StubDesc =
{
    (void *)& IWineMsiRemote___RpcClientInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        &rpc_handle,
    },
    0,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};


static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter view) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 2 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 4 (parameter view) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter record) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6a),	/* type offset = 106 */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter view) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 14 (parameter record) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x7c),	/* type offset = 124 */
/* 18 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 20 (parameter view) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 22 (parameter info) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter record) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x8e),	/* type offset = 142 */
/* 28 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 30 (parameter view) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 32 (parameter mode) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter record) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9c),	/* type offset = 156 */
/* 38 (parameter refreshed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xae),	/* type offset = 174 */
/* 42 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 44 (parameter db) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter table) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb2),	/* type offset = 178 */
/* 50 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 52 (parameter db) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 54 (parameter table) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xb6),	/* type offset = 182 */
/* 58 (parameter keys) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xc8),	/* type offset = 200 */
/* 62 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 64 (parameter db) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 66 (parameter updatecount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 68 (parameter suminfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xcc),	/* type offset = 204 */
/* 72 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 74 (parameter db) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter query) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd0),	/* type offset = 208 */
/* 80 (parameter view) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd4),	/* type offset = 212 */
/* 84 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 88 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 90 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter property) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xd8),	/* type offset = 216 */
/* 96 (parameter value) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe0),	/* type offset = 224 */
/* 100 (parameter size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe4),	/* type offset = 228 */
/* 104 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 106 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 108 (parameter property) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe8),	/* type offset = 232 */
/* 112 (parameter value) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xec),	/* type offset = 236 */
/* 116 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 118 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 120 (parameter message) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 122 (parameter record) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfa),	/* type offset = 250 */
/* 126 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 128 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter action) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfe),	/* type offset = 254 */
/* 134 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 136 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 138 (parameter table) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x102),	/* type offset = 258 */
/* 142 (parameter sequence) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 144 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 146 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 148 (parameter folder) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x106),	/* type offset = 262 */
/* 152 (parameter value) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10e),	/* type offset = 270 */
/* 156 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 158 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 160 (parameter folder) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x112),	/* type offset = 274 */
/* 164 (parameter value) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x116),	/* type offset = 278 */
/* 168 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 170 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 172 (parameter folder) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x11a),	/* type offset = 282 */
/* 176 (parameter value) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x122),	/* type offset = 290 */
/* 180 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 182 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 184 (parameter mode) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 186 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 188 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 190 (parameter mode) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 192 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 196 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 198 (parameter feature) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x126),	/* type offset = 294 */
/* 202 (parameter installed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12a),	/* type offset = 298 */
/* 206 (parameter action) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12e),	/* type offset = 302 */
/* 210 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 212 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 214 (parameter feature) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x132),	/* type offset = 306 */
/* 218 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 220 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 222 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 224 (parameter component) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x136),	/* type offset = 310 */
/* 228 (parameter installed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13a),	/* type offset = 314 */
/* 232 (parameter action) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13e),	/* type offset = 318 */
/* 236 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 238 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 240 (parameter component) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x142),	/* type offset = 322 */
/* 244 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 246 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 248 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 250 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 252 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 254 (parameter level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 256 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 258 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter record) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x150),	/* type offset = 336 */
/* 264 (parameter value) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x158),	/* type offset = 344 */
/* 268 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 270 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 272 (parameter condition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15c),	/* type offset = 348 */
/* 276 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 278 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 280 (parameter feature) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x160),	/* type offset = 352 */
/* 284 (parameter cost_tree) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 286 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 288 (parameter cost) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x164),	/* type offset = 356 */
/* 292 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 294 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 296 (parameter component) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x168),	/* type offset = 360 */
/* 300 (parameter index) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 302 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 304 (parameter drive) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16c),	/* type offset = 364 */
/* 308 (parameter cost) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x176),	/* type offset = 374 */
/* 312 (parameter temp) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x17a),	/* type offset = 378 */
/* 316 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 318 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x190),	/* type offset = 400 */
/* 322 (parameter type) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x194),	/* type offset = 404 */
/* 326 (parameter dllname) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x19c),	/* type offset = 412 */
/* 330 (parameter function) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a4),	/* type offset = 420 */
/* 334 (parameter hinst) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a8),	/* type offset = 424 */
/* 338 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 340 (parameter handle) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 342 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  4 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 6 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 24 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffd6),	/* Offset= -42 (2) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffd4),	/* Offset= -44 (6) */
        NdrFcShort(0xffff),
/* 54 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field type, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffdc),	/* Offset= -36 (24) */
/* 62 (struct wire_field) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (68) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (54) */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 78 (struct wire_field[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x9,	/* Corr desc: field count, FC_ULONG */
        0x57,	/* FC_ADD_1 */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe2),	/* Offset= -30 (62) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 96 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffea),	/* Offset= -22 (78) */
        NdrFcShort(0x0),	/* Offset= 0 (102) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 106 (struct wire_record *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (96) */
/* 110 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffdc),	/* Offset= -36 (78) */
        NdrFcShort(0x0),	/* Offset= 0 (116) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 120 (struct wire_record *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (110) */
/* 124 (struct wire_record **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (120) */
/* 128 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffca),	/* Offset= -54 (78) */
        NdrFcShort(0x0),	/* Offset= 0 (134) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 138 (struct wire_record *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (128) */
/* 142 (struct wire_record **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (138) */
/* 146 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffb8),	/* Offset= -72 (78) */
        NdrFcShort(0x0),	/* Offset= 0 (152) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 156 (struct wire_record *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (146) */
/* 160 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xffaa),	/* Offset= -86 (78) */
        NdrFcShort(0x0),	/* Offset= 0 (166) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 170 (struct wire_record *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (160) */
/* 174 (struct wire_record **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (170) */
/* 178 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 180 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 182 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 184 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 186 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xff90),	/* Offset= -112 (78) */
        NdrFcShort(0x0),	/* Offset= 0 (192) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 196 (struct wire_record *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (186) */
/* 200 (struct wire_record **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (196) */
/* 204 (MSIHANDLE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 208 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 210 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 212 (MSIHANDLE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 216 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 218 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 220 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (224) */
/* 224 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 226 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 228 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 232 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 234 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 236 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 238 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 240 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xff5a),	/* Offset= -166 (78) */
        NdrFcShort(0x0),	/* Offset= 0 (246) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 250 (struct wire_record *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (240) */
/* 254 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 256 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 258 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 260 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 262 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 264 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 266 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (270) */
/* 270 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 272 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 274 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 276 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 278 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 280 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 282 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 284 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 286 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (290) */
/* 290 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 292 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 294 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 296 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 298 (INSTALLSTATE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 302 (INSTALLSTATE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 306 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 308 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 310 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 312 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 314 (INSTALLSTATE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 318 (INSTALLSTATE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 322 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 324 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 326 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0xff04),	/* Offset= -252 (78) */
        NdrFcShort(0x0),	/* Offset= 0 (332) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 336 (struct wire_record *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (326) */
/* 340 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (344) */
/* 344 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 346 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 348 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 350 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 352 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 354 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 356 (INT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 360 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 362 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 364 (LPWSTR) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),
/* 368 */
        0x25,	/* FC_C_WSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x40, /* Corr desc: constant, val = 3 */
        0x0,
        NdrFcShort(0x3),
/* 374 (INT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 378 (INT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 382 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 388 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (382) */
        0x5b,	/* FC_END */
/* 400 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (388) */
/* 404 (int *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 408 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (412) */
/* 412 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 414 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 416 (LPSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (420) */
/* 420 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 422 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 424 (MSIHANDLE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
        0x0
    }
};


#else /* _WIN64 */

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

#define TYPE_FORMAT_STRING_SIZE 447
#define PROC_FORMAT_STRING_SIZE 345

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

/*****************************************************************************
 * IWineMsiRemote interface
 */

handle_t rpc_handle;

static const RPC_CLIENT_INTERFACE IWineMsiRemote___RpcClientInterface =
{
    sizeof(RPC_CLIENT_INTERFACE),
    {{0x56d58b64,0x8780,0x4c22,{0xa8,0xbc,0x8b,0x0b,0x29,0xe4,0xa9,0xf8}},{0,0}},
    {{0x8a885d04,0x1ceb,0x11c9,{0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60}},{2,0}},
    0,
    0,
    0,
    0,
    0,
    0,
};
RPC_IF_HANDLE IWineMsiRemote_v0_0_c_ifspec DECLSPEC_HIDDEN = (RPC_IF_HANDLE)& IWineMsiRemote___RpcClientInterface;

static const MIDL_STUB_DESC IWineMsiRemote_StubDesc;

struct __frame_remote_ViewClose
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ViewClose( struct __frame_remote_ViewClose *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_ViewClose(
    MSIHANDLE view)
{
    struct __frame_remote_ViewClose __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ViewClose );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 0);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = view;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[0]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_ViewClose( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_ViewExecute
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ViewExecute( struct __frame_remote_ViewExecute *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_ViewExecute(
    MSIHANDLE view,
    struct wire_record *record)
{
    struct __frame_remote_ViewExecute __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ViewExecute );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 1);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = view;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[110]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[4]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_ViewExecute( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_ViewFetch
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ViewFetch( struct __frame_remote_ViewFetch *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_ViewFetch(
    MSIHANDLE view,
    struct wire_record **record)
{
    struct __frame_remote_ViewFetch __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ViewFetch );
    if (!record) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 2);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = view;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[12]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[130],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_ViewFetch( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_ViewGetColumnInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ViewGetColumnInfo( struct __frame_remote_ViewGetColumnInfo *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_ViewGetColumnInfo(
    MSIHANDLE view,
    MSICOLINFO info,
    struct wire_record **record)
{
    struct __frame_remote_ViewGetColumnInfo __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ViewGetColumnInfo );
    if (!record) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 3);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = view;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSICOLINFO *)__frame->_StubMsg.Buffer = info;
        __frame->_StubMsg.Buffer += sizeof(MSICOLINFO);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[20]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[150],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_ViewGetColumnInfo( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_ViewModify
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ViewModify( struct __frame_remote_ViewModify *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_ViewModify(
    MSIHANDLE view,
    MSIMODIFY mode,
    struct wire_record *record,
    struct wire_record **refreshed)
{
    struct __frame_remote_ViewModify __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ViewModify );
    if (!record) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!refreshed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 4);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = view;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIMODIFY *)__frame->_StubMsg.Buffer = mode;
        __frame->_StubMsg.Buffer += sizeof(MSIMODIFY);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[30]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&refreshed,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[186],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_ViewModify( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_DatabaseIsTablePersistent
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_DatabaseIsTablePersistent( struct __frame_remote_DatabaseIsTablePersistent *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

MSICONDITION __cdecl remote_DatabaseIsTablePersistent(
    MSIHANDLE db,
    LPCWSTR table)
{
    struct __frame_remote_DatabaseIsTablePersistent __f, * const __frame = &__f;
    MSICONDITION _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_DatabaseIsTablePersistent );
    if (!table) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 5);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = db;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[192]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[44]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSICONDITION) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(MSICONDITION *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSICONDITION);

    }
    RpcFinally
    {
        __finally_remote_DatabaseIsTablePersistent( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_DatabaseGetPrimaryKeys
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_DatabaseGetPrimaryKeys( struct __frame_remote_DatabaseGetPrimaryKeys *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_DatabaseGetPrimaryKeys(
    MSIHANDLE db,
    LPCWSTR table,
    struct wire_record **keys)
{
    struct __frame_remote_DatabaseGetPrimaryKeys __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_DatabaseGetPrimaryKeys );
    if (!table) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!keys) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 6);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[196]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = db;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[196]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[52]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&keys,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[214],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_DatabaseGetPrimaryKeys( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_DatabaseGetSummaryInformation
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_DatabaseGetSummaryInformation( struct __frame_remote_DatabaseGetSummaryInformation *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_DatabaseGetSummaryInformation(
    MSIHANDLE db,
    UINT updatecount,
    MSIHANDLE *suminfo)
{
    struct __frame_remote_DatabaseGetSummaryInformation __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_DatabaseGetSummaryInformation );
    if (!suminfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 7);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = db;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(UINT *)__frame->_StubMsg.Buffer = updatecount;
        __frame->_StubMsg.Buffer += sizeof(UINT);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[64]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSIHANDLE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *suminfo = *(MSIHANDLE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_DatabaseGetSummaryInformation( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_DatabaseOpenView
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_DatabaseOpenView( struct __frame_remote_DatabaseOpenView *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_DatabaseOpenView(
    MSIHANDLE db,
    LPCWSTR query,
    MSIHANDLE *view)
{
    struct __frame_remote_DatabaseOpenView __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_DatabaseOpenView );
    if (!query) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!view) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 8);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)query,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[224]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = db;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)query,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[224]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[74]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSIHANDLE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *view = *(MSIHANDLE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_DatabaseOpenView( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetActiveDatabase
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetActiveDatabase( struct __frame_remote_GetActiveDatabase *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

MSIHANDLE __cdecl remote_GetActiveDatabase(
    MSIHANDLE hinst)
{
    struct __frame_remote_GetActiveDatabase __f, * const __frame = &__f;
    MSIHANDLE _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetActiveDatabase );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 9);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[86]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSIHANDLE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(MSIHANDLE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

    }
    RpcFinally
    {
        __finally_remote_GetActiveDatabase( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetProperty
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetProperty( struct __frame_remote_GetProperty *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetProperty(
    MSIHANDLE hinst,
    LPCWSTR property,
    LPWSTR *value,
    DWORD *size)
{
    struct __frame_remote_GetProperty __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetProperty );
    if (!property) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!value) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!size) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 10);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)property,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)property,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[90]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[234],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *size = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetProperty( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetProperty
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetProperty( struct __frame_remote_SetProperty *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetProperty(
    MSIHANDLE hinst,
    LPCWSTR property,
    LPCWSTR value)
{
    struct __frame_remote_SetProperty __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetProperty );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 11);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)property,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[378]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[378]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)property,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[378]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[378]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[106]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetProperty( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_ProcessMessage
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_ProcessMessage( struct __frame_remote_ProcessMessage *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

int __cdecl remote_ProcessMessage(
    MSIHANDLE hinst,
    INSTALLMESSAGE message,
    struct wire_record *record)
{
    struct __frame_remote_ProcessMessage __f, * const __frame = &__f;
    int _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_ProcessMessage );
    if (!record) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 12);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(INSTALLMESSAGE *)__frame->_StubMsg.Buffer = message;
        __frame->_StubMsg.Buffer += sizeof(INSTALLMESSAGE);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[118]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);

    }
    RpcFinally
    {
        __finally_remote_ProcessMessage( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_DoAction
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_DoAction( struct __frame_remote_DoAction *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_DoAction(
    MSIHANDLE hinst,
    LPCWSTR action)
{
    struct __frame_remote_DoAction __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_DoAction );
    if (!action) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 13);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)action,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[272]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)action,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[272]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[128]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_DoAction( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_Sequence
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_Sequence( struct __frame_remote_Sequence *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_Sequence(
    MSIHANDLE hinst,
    LPCWSTR table,
    int sequence)
{
    struct __frame_remote_Sequence __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_Sequence );
    if (!table) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 14);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)table,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(int *)__frame->_StubMsg.Buffer = sequence;
        __frame->_StubMsg.Buffer += sizeof(int);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[136]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_Sequence( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetTargetPath
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetTargetPath( struct __frame_remote_GetTargetPath *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetTargetPath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPWSTR *value)
{
    struct __frame_remote_GetTargetPath __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetTargetPath );
    if (!folder) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!value) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 15);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[280]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[280]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[146]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[282],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetTargetPath( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetTargetPath
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetTargetPath( struct __frame_remote_SetTargetPath *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetTargetPath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPCWSTR value)
{
    struct __frame_remote_SetTargetPath __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetTargetPath );
    if (!folder) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!value) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 16);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[292]);

        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[296]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[292]);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[296]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[158]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetTargetPath( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetSourcePath
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetSourcePath( struct __frame_remote_GetSourcePath *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetSourcePath(
    MSIHANDLE hinst,
    LPCWSTR folder,
    LPWSTR *value)
{
    struct __frame_remote_GetSourcePath __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetSourcePath );
    if (!folder) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!value) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 17);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)folder,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[170]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[302],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetSourcePath( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetMode
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetMode( struct __frame_remote_GetMode *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

BOOL __cdecl remote_GetMode(
    MSIHANDLE hinst,
    MSIRUNMODE mode)
{
    struct __frame_remote_GetMode __f, * const __frame = &__f;
    BOOL _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetMode );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 18);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIRUNMODE *)__frame->_StubMsg.Buffer = mode;
        __frame->_StubMsg.Buffer += sizeof(MSIRUNMODE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[182]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

    }
    RpcFinally
    {
        __finally_remote_GetMode( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetMode
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetMode( struct __frame_remote_SetMode *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetMode(
    MSIHANDLE hinst,
    MSIRUNMODE mode,
    BOOL state)
{
    struct __frame_remote_SetMode __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetMode );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 19);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIRUNMODE *)__frame->_StubMsg.Buffer = mode;
        __frame->_StubMsg.Buffer += sizeof(MSIRUNMODE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(BOOL *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(BOOL);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[188]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetMode( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetFeatureState
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetFeatureState( struct __frame_remote_GetFeatureState *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetFeatureState(
    MSIHANDLE hinst,
    LPCWSTR feature,
    INSTALLSTATE *installed,
    INSTALLSTATE *action)
{
    struct __frame_remote_GetFeatureState __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetFeatureState );
    if (!feature) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!installed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!action) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 20);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[312]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[312]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[196]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INSTALLSTATE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *installed = *(INSTALLSTATE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INSTALLSTATE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *action = *(INSTALLSTATE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetFeatureState( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetFeatureState
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetFeatureState( struct __frame_remote_SetFeatureState *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetFeatureState(
    MSIHANDLE hinst,
    LPCWSTR feature,
    INSTALLSTATE state)
{
    struct __frame_remote_SetFeatureState __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetFeatureState );
    if (!feature) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 21);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[324]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[324]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(INSTALLSTATE *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[212]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetFeatureState( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetComponentState
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetComponentState( struct __frame_remote_GetComponentState *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetComponentState(
    MSIHANDLE hinst,
    LPCWSTR component,
    INSTALLSTATE *installed,
    INSTALLSTATE *action)
{
    struct __frame_remote_GetComponentState __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetComponentState );
    if (!component) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!installed) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!action) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 22);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[328]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[328]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[222]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INSTALLSTATE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *installed = *(INSTALLSTATE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INSTALLSTATE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *action = *(INSTALLSTATE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetComponentState( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetComponentState
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetComponentState( struct __frame_remote_SetComponentState *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetComponentState(
    MSIHANDLE hinst,
    LPCWSTR component,
    INSTALLSTATE state)
{
    struct __frame_remote_SetComponentState __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetComponentState );
    if (!component) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 23);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[340]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[340]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(INSTALLSTATE *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[238]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetComponentState( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetLanguage
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetLanguage( struct __frame_remote_GetLanguage *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

LANGID __cdecl remote_GetLanguage(
    MSIHANDLE hinst)
{
    struct __frame_remote_GetLanguage __f, * const __frame = &__f;
    LANGID _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetLanguage );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 24);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[248]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 1) & ~0x1);
        if (__frame->_StubMsg.Buffer + sizeof(LANGID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(LANGID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LANGID);

    }
    RpcFinally
    {
        __finally_remote_GetLanguage( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_SetInstallLevel
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_SetInstallLevel( struct __frame_remote_SetInstallLevel *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_SetInstallLevel(
    MSIHANDLE hinst,
    int level)
{
    struct __frame_remote_SetInstallLevel __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_SetInstallLevel );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 25);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 16;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(int *)__frame->_StubMsg.Buffer = level;
        __frame->_StubMsg.Buffer += sizeof(int);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[252]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_SetInstallLevel( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_FormatRecord
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_FormatRecord( struct __frame_remote_FormatRecord *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_FormatRecord(
    MSIHANDLE hinst,
    struct wire_record *record,
    LPWSTR *value)
{
    struct __frame_remote_FormatRecord __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_FormatRecord );
    if (!record) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!value) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 26);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[342]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)record,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[342]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[258]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&value,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[358],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_FormatRecord( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_EvaluateCondition
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_EvaluateCondition( struct __frame_remote_EvaluateCondition *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

MSICONDITION __cdecl remote_EvaluateCondition(
    MSIHANDLE hinst,
    LPCWSTR condition)
{
    struct __frame_remote_EvaluateCondition __f, * const __frame = &__f;
    MSICONDITION _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_EvaluateCondition );
    if (!condition) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 27);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)condition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[368]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)condition,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[368]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[270]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSICONDITION) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(MSICONDITION *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSICONDITION);

    }
    RpcFinally
    {
        __finally_remote_EvaluateCondition( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetFeatureCost
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetFeatureCost( struct __frame_remote_GetFeatureCost *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetFeatureCost(
    MSIHANDLE hinst,
    LPCWSTR feature,
    MSICOSTTREE cost_tree,
    INSTALLSTATE state,
    INT *cost)
{
    struct __frame_remote_GetFeatureCost __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetFeatureCost );
    if (!feature) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!cost) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 28);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrConformantStringBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[372]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrConformantStringMarshall(
            &__frame->_StubMsg,
            (unsigned char *)feature,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[372]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSICOSTTREE *)__frame->_StubMsg.Buffer = cost_tree;
        __frame->_StubMsg.Buffer += sizeof(MSICOSTTREE);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(INSTALLSTATE *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[278]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *cost = *(INT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INT);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetFeatureCost( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_EnumComponentCosts
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_EnumComponentCosts( struct __frame_remote_EnumComponentCosts *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_EnumComponentCosts(
    MSIHANDLE hinst,
    LPCWSTR component,
    DWORD index,
    INSTALLSTATE state,
    LPWSTR drive,
    INT *cost,
    INT *temp)
{
    struct __frame_remote_EnumComponentCosts __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_EnumComponentCosts );
    if (!drive) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!cost) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!temp) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 29);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 24;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[378]);

        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = hinst;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)component,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[378]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DWORD *)__frame->_StubMsg.Buffer = index;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(INSTALLSTATE *)__frame->_StubMsg.Buffer = state;
        __frame->_StubMsg.Buffer += sizeof(INSTALLSTATE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[294]);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&drive,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[386],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *cost = *(INT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INT);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(INT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *temp = *(INT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(INT);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_EnumComponentCosts( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_GetActionInfo
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_GetActionInfo( struct __frame_remote_GetActionInfo *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_GetActionInfo(
    const GUID *guid,
    int *type,
    LPWSTR *dllname,
    LPSTR *function,
    MSIHANDLE *hinst)
{
    struct __frame_remote_GetActionInfo __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_GetActionInfo );
    if (!guid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!type) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!dllname) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!function) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    if (!hinst) RpcRaiseException(RPC_X_NULL_REF_POINTER);
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 30);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 20;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)guid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[406]);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[318]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(int) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *type = *(int *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(int);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&dllname,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[426],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&function,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[434],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(MSIHANDLE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        *hinst = *(MSIHANDLE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_GetActionInfo( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

struct __frame_remote_CloseHandle
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    RPC_BINDING_HANDLE _Handle;
};

static void __finally_remote_CloseHandle( struct __frame_remote_CloseHandle *__frame )
{
    NdrFreeBuffer(&__frame->_StubMsg);
}

UINT __cdecl remote_CloseHandle(
    MSIHANDLE handle)
{
    struct __frame_remote_CloseHandle __f, * const __frame = &__f;
    UINT _RetVal;
    RPC_MESSAGE _RpcMessage;
    __frame->_Handle = 0;

    RpcExceptionInit( 0, __finally_remote_CloseHandle );
    RpcTryFinally
    {
        NdrClientInitializeNew(&_RpcMessage, &__frame->_StubMsg, &IWineMsiRemote_StubDesc, 31);
        __frame->_Handle = rpc_handle;

        __frame->_StubMsg.BufferLength = 8;
        NdrGetBuffer(&__frame->_StubMsg, __frame->_StubMsg.BufferLength, __frame->_Handle);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(MSIHANDLE *)__frame->_StubMsg.Buffer = handle;
        __frame->_StubMsg.Buffer += sizeof(MSIHANDLE);

        NdrSendReceive(&__frame->_StubMsg, __frame->_StubMsg.Buffer);

        __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
        __frame->_StubMsg.BufferEnd = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

        if ((_RpcMessage.DataRepresentation & 0x0000FFFFUL) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert(&__frame->_StubMsg, (PFORMAT_STRING)&__MIDL_ProcFormatString.Format[340]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(UINT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        _RetVal = *(UINT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(UINT);

    }
    RpcFinally
    {
        __finally_remote_CloseHandle( __frame );
    }
    RpcEndFinally

    return _RetVal;
}

#if !defined(__RPC_WIN64__)
#error  Invalid build platform for this stub.
#endif

static const MIDL_STUB_DESC IWineMsiRemote_StubDesc =
{
    (void *)& IWineMsiRemote___RpcClientInterface,
    MIDL_user_allocate,
    MIDL_user_free,
    {
        &rpc_handle,
    },
    0,
    0,
    0,
    0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    0,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};


static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter view) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 2 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 4 (parameter view) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 6 (parameter record) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6e),	/* type offset = 110 */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter view) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 14 (parameter record) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x82),	/* type offset = 130 */
/* 18 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 20 (parameter view) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 22 (parameter info) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 24 (parameter record) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x96),	/* type offset = 150 */
/* 28 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 30 (parameter view) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 32 (parameter mode) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 34 (parameter record) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xa6),	/* type offset = 166 */
/* 38 (parameter refreshed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xba),	/* type offset = 186 */
/* 42 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 44 (parameter db) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 46 (parameter table) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xbe),	/* type offset = 190 */
/* 50 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 52 (parameter db) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 54 (parameter table) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xc2),	/* type offset = 194 */
/* 58 (parameter keys) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xd6),	/* type offset = 214 */
/* 62 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 64 (parameter db) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 66 (parameter updatecount) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 68 (parameter suminfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xda),	/* type offset = 218 */
/* 72 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 74 (parameter db) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 76 (parameter query) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xde),	/* type offset = 222 */
/* 80 (parameter view) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe2),	/* type offset = 226 */
/* 84 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 86 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 88 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 90 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 92 (parameter property) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe6),	/* type offset = 230 */
/* 96 (parameter value) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xee),	/* type offset = 238 */
/* 100 (parameter size) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf2),	/* type offset = 242 */
/* 104 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 106 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 108 (parameter property) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf6),	/* type offset = 246 */
/* 112 (parameter value) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfa),	/* type offset = 250 */
/* 116 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 118 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 120 (parameter message) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 122 (parameter record) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10a),	/* type offset = 266 */
/* 126 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 128 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter action) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10e),	/* type offset = 270 */
/* 134 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 136 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 138 (parameter table) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x112),	/* type offset = 274 */
/* 142 (parameter sequence) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 144 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 146 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 148 (parameter folder) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x116),	/* type offset = 278 */
/* 152 (parameter value) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11e),	/* type offset = 286 */
/* 156 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 158 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 160 (parameter folder) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x122),	/* type offset = 290 */
/* 164 (parameter value) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x126),	/* type offset = 294 */
/* 168 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 170 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 172 (parameter folder) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12a),	/* type offset = 298 */
/* 176 (parameter value) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x132),	/* type offset = 306 */
/* 180 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 182 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 184 (parameter mode) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 186 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 188 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 190 (parameter mode) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 192 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 196 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 198 (parameter feature) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x136),	/* type offset = 310 */
/* 202 (parameter installed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13a),	/* type offset = 314 */
/* 206 (parameter action) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13e),	/* type offset = 318 */
/* 210 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 212 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 214 (parameter feature) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x142),	/* type offset = 322 */
/* 218 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 220 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 222 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 224 (parameter component) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x146),	/* type offset = 326 */
/* 228 (parameter installed) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14a),	/* type offset = 330 */
/* 232 (parameter action) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14e),	/* type offset = 334 */
/* 236 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 238 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 240 (parameter component) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x152),	/* type offset = 338 */
/* 244 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 246 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 248 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 250 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x06,    /* FC_SHORT */
/* 252 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 254 (parameter level) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 256 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 258 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 260 (parameter record) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x162),	/* type offset = 354 */
/* 264 (parameter value) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16a),	/* type offset = 362 */
/* 268 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 270 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 272 (parameter condition) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x16e),	/* type offset = 366 */
/* 276 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 278 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 280 (parameter feature) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x172),	/* type offset = 370 */
/* 284 (parameter cost_tree) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 286 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 288 (parameter cost) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x176),	/* type offset = 374 */
/* 292 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 294 (parameter hinst) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 296 (parameter component) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x17a),	/* type offset = 378 */
/* 300 (parameter index) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 302 (parameter state) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 304 (parameter drive) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x17e),	/* type offset = 382 */
/* 308 (parameter cost) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x188),	/* type offset = 392 */
/* 312 (parameter temp) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18c),	/* type offset = 396 */
/* 316 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 318 (parameter guid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1a2),	/* type offset = 418 */
/* 322 (parameter type) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1a6),	/* type offset = 422 */
/* 326 (parameter dllname) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1ae),	/* type offset = 430 */
/* 330 (parameter function) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1b6),	/* type offset = 438 */
/* 334 (parameter hinst) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1ba),	/* type offset = 442 */
/* 338 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 340 (parameter handle) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 342 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  4 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 6 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 24 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffd6),	/* Offset= -42 (2) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffd4),	/* Offset= -44 (6) */
        NdrFcShort(0xffff),
/* 54 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field type, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffdc),	/* Offset= -36 (24) */
/* 62 (struct wire_field) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (68) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffec),	/* Offset= -20 (54) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 80 (struct wire_field[]) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x9,	/* Corr desc: field count, FC_ULONG */
        0x57,	/* FC_ADD_1 */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (62) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 98 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xffea),	/* Offset= -22 (80) */
        NdrFcShort(0x0),	/* Offset= 0 (104) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 110 (struct wire_record *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (98) */
/* 114 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xffda),	/* Offset= -38 (80) */
        NdrFcShort(0x0),	/* Offset= 0 (120) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 126 (struct wire_record *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (114) */
/* 130 (struct wire_record **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (126) */
/* 134 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xffc6),	/* Offset= -58 (80) */
        NdrFcShort(0x0),	/* Offset= 0 (140) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 146 (struct wire_record *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (134) */
/* 150 (struct wire_record **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (146) */
/* 154 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xffb2),	/* Offset= -78 (80) */
        NdrFcShort(0x0),	/* Offset= 0 (160) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 166 (struct wire_record *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (154) */
/* 170 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xffa2),	/* Offset= -94 (80) */
        NdrFcShort(0x0),	/* Offset= 0 (176) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 182 (struct wire_record *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (170) */
/* 186 (struct wire_record **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (182) */
/* 190 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 192 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 194 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 196 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 198 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xff86),	/* Offset= -122 (80) */
        NdrFcShort(0x0),	/* Offset= 0 (204) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 210 (struct wire_record *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (198) */
/* 214 (struct wire_record **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (210) */
/* 218 (MSIHANDLE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 222 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 224 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 226 (MSIHANDLE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 230 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 232 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 234 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (238) */
/* 238 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 240 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 242 (DWORD *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 246 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 248 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 250 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 252 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 254 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xff4e),	/* Offset= -178 (80) */
        NdrFcShort(0x0),	/* Offset= 0 (260) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 266 (struct wire_record *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (254) */
/* 270 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 272 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 274 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 276 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 278 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 280 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 282 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (286) */
/* 286 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 288 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 290 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 292 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 294 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 296 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 298 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 300 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 302 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (306) */
/* 306 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 308 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 310 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 312 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 314 (INSTALLSTATE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 318 (INSTALLSTATE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 322 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 324 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 326 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 328 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 330 (INSTALLSTATE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 334 (INSTALLSTATE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 338 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 340 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 342 (struct wire_record) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xfef6),	/* Offset= -266 (80) */
        NdrFcShort(0x0),	/* Offset= 0 (348) */
        0x08,	/* FC_LONG */
        0x40,	/* FC_STRUCTPAD4 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 354 (struct wire_record *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (342) */
/* 358 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (362) */
/* 362 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 364 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 366 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 368 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 370 (LPCWSTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 372 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 374 (INT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 378 (LPCWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 380 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 382 (LPWSTR) */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0x2),
/* 386 */
        0x25,	/* FC_C_WSTRING */
        0x44,	/* FC_STRING_SIZED */
        0x40, /* Corr desc: constant, val = 3 */
        0x0,
        NdrFcShort(0x3),
/* 392 (INT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 396 (INT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 400 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 406 (const GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (400) */
        0x5b,	/* FC_END */
/* 418 (const GUID *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xfff2),	/* Offset= -14 (406) */
/* 422 (int *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 426 (LPWSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (430) */
/* 430 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 432 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 434 (LPSTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (438) */
/* 438 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 440 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 442 (MSIHANDLE *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
        0x0
    }
};


#endif /* _WIN64 */
