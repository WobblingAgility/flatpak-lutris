/*** Autogenerated by WIDL 3.8 from msdaps.idl - Do not edit ***/

#define __midl_proxy
#include "objbase.h"

#ifndef DECLSPEC_HIDDEN
#define DECLSPEC_HIDDEN
#endif


#ifndef _WIN64

#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 440
#endif

#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error This code needs a newer version of rpcproxy.h
#endif /* __RPCPROXY_H_VERSION__ */

#include "msdaps.h"

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __proxy_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    void             *This;
};

static int __proxy_filter( struct __proxy_frame *__frame )
{
    return (__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE);
}

#define TYPE_FORMAT_STRING_SIZE 6417
#define PROC_FORMAT_STRING_SIZE 963

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const MIDL_STUB_DESC Object_StubDesc;

/*****************************************************************************
 * IAccessor interface
 */
static void __finally_IAccessor_RemoteAddRefAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAccessor_RemoteAddRefAccessor_Proxy(
    IAccessor* This,
    HACCESSOR hAccessor,
    DBREFCOUNT *pcRefCount,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAccessor_RemoteAddRefAccessor_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HACCESSOR *)__frame->_StubMsg.Buffer = hAccessor;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[24],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAccessor_RemoteAddRefAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2], (void *)pcRefCount );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[24], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAccessor_RemoteAddRefAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAccessor * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBREFCOUNT * pcRefCount;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IAccessor_RemoteAddRefAccessor_Stub( struct __frame_IAccessor_RemoteAddRefAccessor_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pcRefCount,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[24]);

}

void __RPC_STUB IAccessor_RemoteAddRefAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAccessor_RemoteAddRefAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IAccessor*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAccessor_RemoteAddRefAccessor_Stub );
    __frame->pcRefCount = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2],
            0);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IAccessor_AddRefAccessor_Stub(__frame->_This, __frame->hAccessor, __frame->pcRefCount, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[24]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[24]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAccessor_RemoteAddRefAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAccessor_RemoteCreateAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAccessor_RemoteCreateAccessor_Proxy(
    IAccessor* This,
    DBACCESSORFLAGS dwAccessorFlags,
    DBCOUNTITEM cBindings,
    DBBINDING *rgBindings,
    DBLENGTH cbRowSize,
    HACCESSOR *phAccessor,
    DBBINDSTATUS *rgStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAccessor_RemoteCreateAccessor_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!phAccessor) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[158]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer = dwAccessorFlags;
            __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = cBindings;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[158]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBLENGTH *)__frame->_StubMsg.Buffer = cbRowSize;
            __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *phAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAccessor_RemoteCreateAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[162], (void *)phAccessor );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[176], (void *)rgStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[198], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAccessor_RemoteCreateAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAccessor * _This;
    HRESULT _RetVal;
    DBACCESSORFLAGS dwAccessorFlags;
    DBCOUNTITEM cBindings;
    DBBINDING * rgBindings;
    DBLENGTH cbRowSize;
    HACCESSOR _W0;
    HACCESSOR * phAccessor;
    DBBINDSTATUS * rgStatus;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IAccessor_RemoteCreateAccessor_Stub( struct __frame_IAccessor_RemoteCreateAccessor_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgBindings,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[158]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);

}

void __RPC_STUB IAccessor_RemoteCreateAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAccessor_RemoteCreateAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IAccessor*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAccessor_RemoteCreateAccessor_Stub );
    __frame->rgBindings = 0;
    __frame->phAccessor = 0;
    __frame->rgStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBACCESSORFLAGS) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwAccessorFlags = *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cBindings = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[158],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBLENGTH) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cbRowSize = *(DBLENGTH *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176],
            0);


        __frame->phAccessor = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IAccessor_CreateAccessor_Stub(__frame->_This, __frame->dwAccessorFlags, __frame->cBindings, __frame->rgBindings, __frame->cbRowSize, __frame->phAccessor, __frame->rgStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HACCESSOR *)__frame->_StubMsg.Buffer = *__frame->phAccessor;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[176]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[198]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAccessor_RemoteCreateAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAccessor_RemoteGetBindings_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAccessor_RemoteGetBindings_Proxy(
    IAccessor* This,
    HACCESSOR hAccessor,
    DBACCESSORFLAGS *pdwAccessorFlags,
    DBCOUNTITEM *pcBindings,
    DBBINDING **prgBindings,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAccessor_RemoteGetBindings_Proxy );
    __frame->This = This;
    if (prgBindings) MIDL_memset( prgBindings, 0, sizeof( *prgBindings ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pdwAccessorFlags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcBindings) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgBindings) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HACCESSOR *)__frame->_StubMsg.Buffer = hAccessor;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *pcBindings;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[36]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBACCESSORFLAGS) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwAccessorFlags = *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcBindings = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAccessor_RemoteGetBindings_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[202], (void *)pdwAccessorFlags );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[206], (void *)pcBindings );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*pcBindings;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[232], (void *)prgBindings );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[254], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAccessor_RemoteGetBindings_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAccessor * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBACCESSORFLAGS _W0;
    DBACCESSORFLAGS * pdwAccessorFlags;
    DBCOUNTITEM * pcBindings;
    DBBINDING *_W1;
    DBBINDING ** prgBindings;
    IErrorInfo *_W2;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IAccessor_RemoteGetBindings_Stub( struct __frame_IAccessor_RemoteGetBindings_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgBindings,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);

}

void __RPC_STUB IAccessor_RemoteGetBindings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAccessor_RemoteGetBindings_Stub __f, * const __frame = &__f;

    __frame->_This = (IAccessor*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAccessor_RemoteGetBindings_Stub );
    __frame->pdwAccessorFlags = 0;
    __frame->pcBindings = 0;
    __frame->prgBindings = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[36]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcBindings = (DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);


        __frame->pdwAccessorFlags = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prgBindings = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->ppErrorInfoRem = &__frame->_W2;
        __frame->_W2 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IAccessor_GetBindings_Stub(__frame->_This, __frame->hAccessor, __frame->pdwAccessorFlags, __frame->pcBindings, __frame->prgBindings, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer = *__frame->pdwAccessorFlags;
        __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *__frame->pcBindings;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[232]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAccessor_RemoteGetBindings_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAccessor_RemoteReleaseAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAccessor_RemoteReleaseAccessor_Proxy(
    IAccessor* This,
    HACCESSOR hAccessor,
    DBREFCOUNT *pcRefCount,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAccessor_RemoteReleaseAccessor_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HACCESSOR *)__frame->_StubMsg.Buffer = hAccessor;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[258]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[56]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[258],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[280],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAccessor_RemoteReleaseAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[258], (void *)pcRefCount );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[280], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAccessor_RemoteReleaseAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAccessor * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBREFCOUNT * pcRefCount;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IAccessor_RemoteReleaseAccessor_Stub( struct __frame_IAccessor_RemoteReleaseAccessor_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pcRefCount,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[258]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[280]);

}

void __RPC_STUB IAccessor_RemoteReleaseAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAccessor_RemoteReleaseAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IAccessor*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAccessor_RemoteReleaseAccessor_Stub );
    __frame->pcRefCount = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[56]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[258],
            0);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IAccessor_ReleaseAccessor_Stub(__frame->_This, __frame->hAccessor, __frame->pcRefCount, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[280]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[258]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[280]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAccessor_RemoteReleaseAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAccessor_FormatStringOffsetTable[] =
{
    0,  /* IAccessor::RemoteAddRefAccessor */
    12,  /* IAccessor::RemoteCreateAccessor */
    36,  /* IAccessor::RemoteGetBindings */
    56,  /* IAccessor::RemoteReleaseAccessor */
};

static const CINTERFACE_PROXY_VTABLE(7) _IAccessorProxyVtbl =
{
    {
        &IID_IAccessor,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAccessor_AddRefAccessor_Proxy,
        IAccessor_CreateAccessor_Proxy,
        IAccessor_GetBindings_Proxy,
        IAccessor_ReleaseAccessor_Proxy,
    }
};

static const MIDL_SERVER_INFO IAccessor_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAccessor_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAccessor_table[] =
{
    IAccessor_RemoteAddRefAccessor_Stub,
    IAccessor_RemoteCreateAccessor_Stub,
    IAccessor_RemoteGetBindings_Stub,
    IAccessor_RemoteReleaseAccessor_Stub
};

static const CInterfaceStubVtbl _IAccessorStubVtbl =
{
    {
        &IID_IAccessor,
        &IAccessor_ServerInfo,
        7,
        &IAccessor_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IRowsetInfo interface
 */
static void __finally_IRowsetInfo_RemoteGetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetInfo_RemoteGetProperties_Proxy(
    IRowsetInfo* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertySets,
    DBPROPSET **prgPropertySets,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetInfo_RemoteGetProperties_Proxy );
    __frame->This = This;
    if (prgPropertySets) MIDL_memset( prgPropertySets, 0, sizeof( *prgPropertySets ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pcPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[368]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[368]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[68]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1732],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetInfo_RemoteGetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[372], (void *)pcPropertySets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertySets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1710], (void *)prgPropertySets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1732], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetInfo_RemoteGetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetInfo * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertySets;
    DBPROPSET *_W0;
    DBPROPSET ** prgPropertySets;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IRowsetInfo_RemoteGetProperties_Stub( struct __frame_IRowsetInfo_RemoteGetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[368]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1732]);

}

void __RPC_STUB IRowsetInfo_RemoteGetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetInfo_RemoteGetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetInfo_RemoteGetProperties_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertySets = 0;
    __frame->prgPropertySets = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[68]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[368],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertySets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->prgPropertySets = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetInfo_GetProperties_Stub(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertySets, __frame->prgPropertySets, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1732]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertySets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1732]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetInfo_RemoteGetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowsetInfo_RemoteGetReferencedRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetInfo_RemoteGetReferencedRowset_Proxy(
    IRowsetInfo* This,
    DBORDINAL iOrdinal,
    REFIID riid,
    IUnknown **ppReferencedRowset,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetInfo_RemoteGetReferencedRowset_Proxy );
    __frame->This = This;
    if (ppReferencedRowset) MIDL_memset( ppReferencedRowset, 0, sizeof( *ppReferencedRowset ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppReferencedRowset) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBORDINAL *)__frame->_StubMsg.Buffer = iOrdinal;
            __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[88]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppReferencedRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1746],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1768],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetInfo_RemoteGetReferencedRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1746], (void *)ppReferencedRowset );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1768], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetInfo_RemoteGetReferencedRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetInfo * _This;
    HRESULT _RetVal;
    DBORDINAL iOrdinal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppReferencedRowset;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IRowsetInfo_RemoteGetReferencedRowset_Stub( struct __frame_IRowsetInfo_RemoteGetReferencedRowset_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppReferencedRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1746]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1768]);

}

void __RPC_STUB IRowsetInfo_RemoteGetReferencedRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetInfo_RemoteGetReferencedRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetInfo_RemoteGetReferencedRowset_Stub );
    __frame->riid = 0;
    __frame->ppReferencedRowset = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[88]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBORDINAL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->iOrdinal = *(DBORDINAL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppReferencedRowset = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetInfo_GetReferencedRowset_Stub(__frame->_This, __frame->iOrdinal, __frame->riid, __frame->ppReferencedRowset, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppReferencedRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1746]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1768]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppReferencedRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1746]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1768]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetInfo_RemoteGetReferencedRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowsetInfo_RemoteGetSpecification_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetInfo_RemoteGetSpecification_Proxy(
    IRowsetInfo* This,
    REFIID riid,
    IUnknown **ppSpecification,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetInfo_RemoteGetSpecification_Proxy );
    __frame->This = This;
    if (ppSpecification) MIDL_memset( ppSpecification, 0, sizeof( *ppSpecification ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSpecification) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[104]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSpecification,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1782],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1804],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetInfo_RemoteGetSpecification_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1782], (void *)ppSpecification );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1804], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetInfo_RemoteGetSpecification_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetInfo * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppSpecification;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IRowsetInfo_RemoteGetSpecification_Stub( struct __frame_IRowsetInfo_RemoteGetSpecification_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSpecification,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1782]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1804]);

}

void __RPC_STUB IRowsetInfo_RemoteGetSpecification_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetInfo_RemoteGetSpecification_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetInfo_RemoteGetSpecification_Stub );
    __frame->riid = 0;
    __frame->ppSpecification = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[104]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppSpecification = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetInfo_GetSpecification_Stub(__frame->_This, __frame->riid, __frame->ppSpecification, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSpecification,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1782]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1804]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSpecification,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1782]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1804]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetInfo_RemoteGetSpecification_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IRowsetInfo_FormatStringOffsetTable[] =
{
    68,  /* IRowsetInfo::RemoteGetProperties */
    88,  /* IRowsetInfo::RemoteGetReferencedRowset */
    104,  /* IRowsetInfo::RemoteGetSpecification */
};

static const CINTERFACE_PROXY_VTABLE(6) _IRowsetInfoProxyVtbl =
{
    {
        &IID_IRowsetInfo,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IRowsetInfo_GetProperties_Proxy,
        IRowsetInfo_GetReferencedRowset_Proxy,
        IRowsetInfo_GetSpecification_Proxy,
    }
};

static const MIDL_SERVER_INFO IRowsetInfo_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IRowsetInfo_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IRowsetInfo_table[] =
{
    IRowsetInfo_RemoteGetProperties_Stub,
    IRowsetInfo_RemoteGetReferencedRowset_Stub,
    IRowsetInfo_RemoteGetSpecification_Stub
};

static const CInterfaceStubVtbl _IRowsetInfoStubVtbl =
{
    {
        &IID_IRowsetInfo,
        &IRowsetInfo_ServerInfo,
        6,
        &IRowsetInfo_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IChapteredRowset interface
 */
static void __finally_IChapteredRowset_RemoteAddRefChapter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IChapteredRowset_RemoteAddRefChapter_Proxy(
    IChapteredRowset* This,
    HCHAPTER chapter,
    DBREFCOUNT *refcount,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IChapteredRowset_RemoteAddRefChapter_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!refcount) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = chapter;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBREFCOUNT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *refcount = *(DBREFCOUNT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBREFCOUNT);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IChapteredRowset_RemoteAddRefChapter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1808], (void *)refcount );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1830], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IChapteredRowset_RemoteAddRefChapter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IChapteredRowset * _This;
    HRESULT _RetVal;
    HCHAPTER chapter;
    DBREFCOUNT _W0;
    DBREFCOUNT * refcount;
    IErrorInfo *_W1;
    IErrorInfo ** errorinfo;
};

static void __finally_IChapteredRowset_RemoteAddRefChapter_Stub( struct __frame_IChapteredRowset_RemoteAddRefChapter_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830]);

}

void __RPC_STUB IChapteredRowset_RemoteAddRefChapter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IChapteredRowset_RemoteAddRefChapter_Stub __f, * const __frame = &__f;

    __frame->_This = (IChapteredRowset*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IChapteredRowset_RemoteAddRefChapter_Stub );
    __frame->refcount = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->chapter = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);


        __frame->refcount = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->errorinfo = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IChapteredRowset_AddRefChapter_Stub(__frame->_This, __frame->chapter, __frame->refcount, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBREFCOUNT *)__frame->_StubMsg.Buffer = *__frame->refcount;
        __frame->_StubMsg.Buffer += sizeof(DBREFCOUNT);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1830]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IChapteredRowset_RemoteAddRefChapter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IChapteredRowset_RemoteReleaseChapter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IChapteredRowset_RemoteReleaseChapter_Proxy(
    IChapteredRowset* This,
    HCHAPTER chapter,
    DBREFCOUNT *refcount,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IChapteredRowset_RemoteReleaseChapter_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!refcount) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = chapter;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBREFCOUNT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *refcount = *(DBREFCOUNT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBREFCOUNT);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1856],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IChapteredRowset_RemoteReleaseChapter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1834], (void *)refcount );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1856], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IChapteredRowset_RemoteReleaseChapter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IChapteredRowset * _This;
    HRESULT _RetVal;
    HCHAPTER chapter;
    DBREFCOUNT _W0;
    DBREFCOUNT * refcount;
    IErrorInfo *_W1;
    IErrorInfo ** errorinfo;
};

static void __finally_IChapteredRowset_RemoteReleaseChapter_Stub( struct __frame_IChapteredRowset_RemoteReleaseChapter_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1856]);

}

void __RPC_STUB IChapteredRowset_RemoteReleaseChapter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IChapteredRowset_RemoteReleaseChapter_Stub __f, * const __frame = &__f;

    __frame->_This = (IChapteredRowset*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IChapteredRowset_RemoteReleaseChapter_Stub );
    __frame->refcount = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->chapter = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);


        __frame->refcount = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->errorinfo = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IChapteredRowset_ReleaseChapter_Stub(__frame->_This, __frame->chapter, __frame->refcount, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1856]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBREFCOUNT *)__frame->_StubMsg.Buffer = *__frame->refcount;
        __frame->_StubMsg.Buffer += sizeof(DBREFCOUNT);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1856]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IChapteredRowset_RemoteReleaseChapter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IChapteredRowset_FormatStringOffsetTable[] =
{
    118,  /* IChapteredRowset::RemoteAddRefChapter */
    130,  /* IChapteredRowset::RemoteReleaseChapter */
};

static const CINTERFACE_PROXY_VTABLE(5) _IChapteredRowsetProxyVtbl =
{
    {
        &IID_IChapteredRowset,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IChapteredRowset_AddRefChapter_Proxy,
        IChapteredRowset_ReleaseChapter_Proxy,
    }
};

static const MIDL_SERVER_INFO IChapteredRowset_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IChapteredRowset_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IChapteredRowset_table[] =
{
    IChapteredRowset_RemoteAddRefChapter_Stub,
    IChapteredRowset_RemoteReleaseChapter_Stub
};

static const CInterfaceStubVtbl _IChapteredRowsetStubVtbl =
{
    {
        &IID_IChapteredRowset,
        &IChapteredRowset_ServerInfo,
        5,
        &IChapteredRowset_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICommand interface
 */
static void __finally_ICommand_RemoteCancel_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICommand_RemoteCancel_Proxy(
    ICommand* This,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICommand_RemoteCancel_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[142]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1878],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICommand_RemoteCancel_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1878], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICommand_RemoteCancel_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICommand * _This;
    HRESULT _RetVal;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ICommand_RemoteCancel_Stub( struct __frame_ICommand_RemoteCancel_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1878]);

}

void __RPC_STUB ICommand_RemoteCancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICommand_RemoteCancel_Stub __f, * const __frame = &__f;

    __frame->_This = (ICommand*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICommand_RemoteCancel_Stub );
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[142]);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICommand_Cancel_Stub(__frame->_This, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1878]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1878]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICommand_RemoteCancel_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICommand_RemoteExecute_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICommand_RemoteExecute_Proxy(
    ICommand* This,
    IUnknown *pUnkOuter,
    REFIID riid,
    HACCESSOR hAccessor,
    DB_UPARAMS cParamSets,
    GUID *pGuid,
    ULONG ulGuidOffset,
    RMTPACK *pInputParams,
    RMTPACK *pOutputParams,
    DBCOUNTITEM cBindings,
    DBBINDING *rgBindings,
    DBSTATUS *rgStatus,
    DBROWCOUNT *pcRowsAffected,
    IUnknown **ppRowset)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICommand_RemoteExecute_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 96;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1882]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pInputParams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3810]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pOutputParams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3814]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3864]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1882]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HACCESSOR *)__frame->_StubMsg.Buffer = hAccessor;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DB_UPARAMS *)__frame->_StubMsg.Buffer = cParamSets;
            __frame->_StubMsg.Buffer += sizeof(DB_UPARAMS);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pGuid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1904]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulGuidOffset;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pInputParams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3810]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pOutputParams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3814]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = cBindings;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pcRowsAffected,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3864]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[148]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pOutputParams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3814],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pcRowsAffected,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3864],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICommand_RemoteExecute_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3814], (void *)pOutputParams );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3850], (void *)rgStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3854], (void *)pcRowsAffected );

        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3864], (void *)ppRowset );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICommand_RemoteExecute_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICommand * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    REFIID riid;
    HACCESSOR hAccessor;
    DB_UPARAMS cParamSets;
    GUID * pGuid;
    ULONG ulGuidOffset;
    RMTPACK * pInputParams;
    RMTPACK * pOutputParams;
    DBCOUNTITEM cBindings;
    DBBINDING * rgBindings;
    DBSTATUS * rgStatus;
    DBROWCOUNT * pcRowsAffected;
    IUnknown ** ppRowset;
};

static void __finally_ICommand_RemoteExecute_Stub( struct __frame_ICommand_RemoteExecute_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1882]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pGuid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1904]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pInputParams,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3810]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pOutputParams,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3814]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgBindings,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pcRowsAffected,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3864]);

}

void __RPC_STUB ICommand_RemoteExecute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICommand_RemoteExecute_Stub __f, * const __frame = &__f;

    __frame->_This = (ICommand*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICommand_RemoteExecute_Stub );
    __frame->pUnkOuter = 0;
    __frame->riid = 0;
    __frame->pGuid = 0;
    __frame->pInputParams = 0;
    __frame->pOutputParams = 0;
    __frame->rgBindings = 0;
    __frame->rgStatus = 0;
    __frame->pcRowsAffected = 0;
    __frame->ppRowset = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[148]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1882],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DB_UPARAMS) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cParamSets = *(DB_UPARAMS *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DB_UPARAMS);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pGuid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1904],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulGuidOffset = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pInputParams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3810],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pOutputParams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3814],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cBindings = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3836],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pcRowsAffected,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3864],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICommand_Execute_Stub(__frame->_This, __frame->pUnkOuter, __frame->riid, __frame->hAccessor, __frame->cParamSets, __frame->pGuid, __frame->ulGuidOffset, __frame->pInputParams, __frame->pOutputParams, __frame->cBindings, __frame->rgBindings, __frame->rgStatus, __frame->pcRowsAffected, __frame->ppRowset);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pOutputParams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3814]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3864]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pOutputParams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3814]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3850]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pcRowsAffected,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3854]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3864]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICommand_RemoteExecute_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICommand_RemoteGetDBSession_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICommand_RemoteGetDBSession_Proxy(
    ICommand* This,
    REFIID riid,
    IUnknown **ppSession,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICommand_RemoteGetDBSession_Proxy );
    __frame->This = This;
    if (ppSession) MIDL_memset( ppSession, 0, sizeof( *ppSession ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSession) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[194]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3878],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3900],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICommand_RemoteGetDBSession_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3878], (void *)ppSession );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3900], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICommand_RemoteGetDBSession_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICommand * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppSession;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ICommand_RemoteGetDBSession_Stub( struct __frame_ICommand_RemoteGetDBSession_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSession,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3878]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3900]);

}

void __RPC_STUB ICommand_RemoteGetDBSession_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICommand_RemoteGetDBSession_Stub __f, * const __frame = &__f;

    __frame->_This = (ICommand*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICommand_RemoteGetDBSession_Stub );
    __frame->riid = 0;
    __frame->ppSession = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[194]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppSession = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICommand_GetDBSession_Stub(__frame->_This, __frame->riid, __frame->ppSession, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3878]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3900]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3878]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3900]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICommand_RemoteGetDBSession_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICommand_FormatStringOffsetTable[] =
{
    142,  /* ICommand::RemoteCancel */
    148,  /* ICommand::RemoteExecute */
    194,  /* ICommand::RemoteGetDBSession */
};

static const CINTERFACE_PROXY_VTABLE(6) _ICommandProxyVtbl =
{
    {
        &IID_ICommand,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICommand_Cancel_Proxy,
        ICommand_Execute_Proxy,
        ICommand_GetDBSession_Proxy,
    }
};

static const MIDL_SERVER_INFO ICommand_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICommand_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICommand_table[] =
{
    ICommand_RemoteCancel_Stub,
    ICommand_RemoteExecute_Stub,
    ICommand_RemoteGetDBSession_Stub
};

static const CInterfaceStubVtbl _ICommandStubVtbl =
{
    {
        &IID_ICommand,
        &ICommand_ServerInfo,
        6,
        &ICommand_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICommandText interface
 */
static void __finally_ICommandText_RemoteGetCommandText_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICommandText_RemoteGetCommandText_Proxy(
    ICommandText* This,
    GUID *pguidDialect,
    LPOLESTR *ppwszCommand,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICommandText_RemoteGetCommandText_Proxy );
    __frame->This = This;
    if (ppwszCommand) MIDL_memset( ppwszCommand, 0, sizeof( *ppwszCommand ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppwszCommand) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pguidDialect,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3904]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[208]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pguidDialect,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3904],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppwszCommand,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3908],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3934],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICommandText_RemoteGetCommandText_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3904], (void *)pguidDialect );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3912], (void *)ppwszCommand );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3934], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICommandText_RemoteGetCommandText_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICommandText * _This;
    HRESULT _RetVal;
    GUID * pguidDialect;
    LPOLESTR _W0;
    LPOLESTR * ppwszCommand;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ICommandText_RemoteGetCommandText_Stub( struct __frame_ICommandText_RemoteGetCommandText_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pguidDialect,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3904]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppwszCommand,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3908]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3934]);

}

void __RPC_STUB ICommandText_RemoteGetCommandText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICommandText_RemoteGetCommandText_Stub __f, * const __frame = &__f;

    __frame->_This = (ICommandText*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICommandText_RemoteGetCommandText_Stub );
    __frame->pguidDialect = 0;
    __frame->ppwszCommand = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[208]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pguidDialect,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3904],
            0);


        __frame->ppwszCommand = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICommandText_GetCommandText_Stub(__frame->_This, __frame->pguidDialect, __frame->ppwszCommand, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 36;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszCommand,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3908]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3934]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pguidDialect,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3904]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszCommand,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3908]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3934]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICommandText_RemoteGetCommandText_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICommandText_RemoteSetCommandText_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICommandText_RemoteSetCommandText_Proxy(
    ICommandText* This,
    REFGUID rguidDialect,
    LPCOLESTR pwszCommand,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICommandText_RemoteSetCommandText_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!rguidDialect) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pwszCommand,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3942]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguidDialect,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pwszCommand,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3942]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[222]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3964],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICommandText_RemoteSetCommandText_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3964], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICommandText_RemoteSetCommandText_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICommandText * _This;
    HRESULT _RetVal;
    REFGUID rguidDialect;
    LPCOLESTR pwszCommand;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ICommandText_RemoteSetCommandText_Stub( struct __frame_ICommandText_RemoteSetCommandText_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pwszCommand,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3942]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3964]);

}

void __RPC_STUB ICommandText_RemoteSetCommandText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICommandText_RemoteSetCommandText_Stub __f, * const __frame = &__f;

    __frame->_This = (ICommandText*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICommandText_RemoteSetCommandText_Stub );
    __frame->rguidDialect = 0;
    __frame->pwszCommand = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[222]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguidDialect,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pwszCommand,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3942],
            0);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICommandText_SetCommandText_Stub(__frame->_This, __frame->rguidDialect, __frame->pwszCommand, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3964]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3964]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICommandText_RemoteSetCommandText_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICommandText_FormatStringOffsetTable[] =
{
    142,  /* ICommand::RemoteCancel */
    148,  /* ICommand::RemoteExecute */
    194,  /* ICommand::RemoteGetDBSession */
    208,  /* ICommandText::RemoteGetCommandText */
    222,  /* ICommandText::RemoteSetCommandText */
};

static const CINTERFACE_PROXY_VTABLE(8) _ICommandTextProxyVtbl =
{
    {
        &IID_ICommandText,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICommand_Cancel_Proxy,
        ICommand_Execute_Proxy,
        ICommand_GetDBSession_Proxy,
        ICommandText_GetCommandText_Proxy,
        ICommandText_SetCommandText_Proxy,
    }
};

static const MIDL_SERVER_INFO ICommandText_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICommandText_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICommandText_table[] =
{
    ICommand_RemoteCancel_Stub,
    ICommand_RemoteExecute_Stub,
    ICommand_RemoteGetDBSession_Stub,
    ICommandText_RemoteGetCommandText_Stub,
    ICommandText_RemoteSetCommandText_Stub
};

static const CInterfaceStubVtbl _ICommandTextStubVtbl =
{
    {
        &IID_ICommandText,
        &ICommandText_ServerInfo,
        8,
        &ICommandText_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IColumnsInfo interface
 */
static void __finally_IColumnsInfo_RemoteGetColumnInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IColumnsInfo_RemoteGetColumnInfo_Proxy(
    IColumnsInfo* This,
    DBORDINAL *columns,
    DBCOLUMNINFO **colinfo,
    DBBYTEOFFSET **name_offsets,
    DBBYTEOFFSET **columnid_offsets,
    DBLENGTH *string_len,
    OLECHAR **stringsbuffer,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IColumnsInfo_RemoteGetColumnInfo_Proxy );
    __frame->This = This;
    if (colinfo) MIDL_memset( colinfo, 0, sizeof( *colinfo ));
    if (name_offsets) MIDL_memset( name_offsets, 0, sizeof( *name_offsets ));
    if (columnid_offsets) MIDL_memset( columnid_offsets, 0, sizeof( *columnid_offsets ));
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!columns) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!colinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!name_offsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!columnid_offsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!string_len) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*string_len;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)stringsbuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBORDINAL *)__frame->_StubMsg.Buffer = *columns;
            __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBLENGTH *)__frame->_StubMsg.Buffer = *string_len;
            __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*string_len;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)stringsbuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[236]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBORDINAL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *columns = *(DBORDINAL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&colinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4044],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&name_offsets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4062],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&columnid_offsets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4080],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBLENGTH) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *string_len = *(DBLENGTH *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&stringsbuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IColumnsInfo_RemoteGetColumnInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3968], (void *)columns );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*columns;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4044], (void *)colinfo );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*columns;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4062], (void *)name_offsets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*columns;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4080], (void *)columnid_offsets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4084], (void *)string_len );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*string_len;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4102], (void *)stringsbuffer );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4124], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IColumnsInfo_RemoteGetColumnInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IColumnsInfo * _This;
    HRESULT _RetVal;
    DBORDINAL * columns;
    DBCOLUMNINFO *_W0;
    DBCOLUMNINFO ** colinfo;
    DBBYTEOFFSET *_W1;
    DBBYTEOFFSET ** name_offsets;
    DBBYTEOFFSET *_W2;
    DBBYTEOFFSET ** columnid_offsets;
    DBLENGTH * string_len;
    OLECHAR ** stringsbuffer;
    IErrorInfo *_W3;
    IErrorInfo ** errorinfo;
};

static void __finally_IColumnsInfo_RemoteGetColumnInfo_Stub( struct __frame_IColumnsInfo_RemoteGetColumnInfo_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->colinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4044]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->name_offsets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4062]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->columnid_offsets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4080]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->string_len;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->stringsbuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124]);

}

void __RPC_STUB IColumnsInfo_RemoteGetColumnInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IColumnsInfo_RemoteGetColumnInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IColumnsInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IColumnsInfo_RemoteGetColumnInfo_Stub );
    __frame->columns = 0;
    __frame->colinfo = 0;
    __frame->name_offsets = 0;
    __frame->columnid_offsets = 0;
    __frame->string_len = 0;
    __frame->stringsbuffer = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[236]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBORDINAL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->columns = (DBORDINAL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBLENGTH) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->string_len = (DBLENGTH *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->stringsbuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102],
            0);


        __frame->colinfo = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->name_offsets = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->columnid_offsets = &__frame->_W2;
        __frame->_W2 = 0;
        __frame->errorinfo = &__frame->_W3;
        __frame->_W3 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IColumnsInfo_GetColumnInfo_Stub(__frame->_This, __frame->columns, __frame->colinfo, __frame->name_offsets, __frame->columnid_offsets, __frame->string_len, __frame->stringsbuffer, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->colinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4044]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->name_offsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4062]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->columnid_offsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4080]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->string_len;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->stringsbuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBORDINAL *)__frame->_StubMsg.Buffer = *__frame->columns;
        __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->colinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4044]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->name_offsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4062]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->columnid_offsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4080]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBLENGTH *)__frame->_StubMsg.Buffer = *__frame->string_len;
        __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->string_len;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->stringsbuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4124]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IColumnsInfo_RemoteGetColumnInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IColumnsInfo_RemoteMapColumnIDs_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IColumnsInfo_RemoteMapColumnIDs_Proxy(
    IColumnsInfo* This,
    DBORDINAL column_ids,
    const DBID *dbids,
    DBORDINAL *columns,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IColumnsInfo_RemoteMapColumnIDs_Proxy );
    __frame->This = This;
    if (columns) MIDL_memset( columns, 0, sizeof( *columns ));
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!dbids) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!columns) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)column_ids;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)dbids,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4162]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBORDINAL *)__frame->_StubMsg.Buffer = column_ids;
            __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)column_ids;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)dbids,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4162]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[266]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&columns,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4184],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4216],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IColumnsInfo_RemoteMapColumnIDs_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)column_ids;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4194], (void *)columns );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4216], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IColumnsInfo_RemoteMapColumnIDs_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IColumnsInfo * _This;
    HRESULT _RetVal;
    DBORDINAL column_ids;
    const DBID * dbids;
    DBORDINAL * columns;
    IErrorInfo *_W0;
    IErrorInfo ** errorinfo;
};

static void __finally_IColumnsInfo_RemoteMapColumnIDs_Stub( struct __frame_IColumnsInfo_RemoteMapColumnIDs_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->column_ids;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->dbids,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4180]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->column_ids;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->columns,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4194]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4216]);

}

void __RPC_STUB IColumnsInfo_RemoteMapColumnIDs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IColumnsInfo_RemoteMapColumnIDs_Stub __f, * const __frame = &__f;

    __frame->_This = (IColumnsInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IColumnsInfo_RemoteMapColumnIDs_Stub );
    __frame->dbids = 0;
    __frame->columns = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[266]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBORDINAL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->column_ids = *(DBORDINAL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->dbids,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4162],
            0);


        __frame->columns = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->column_ids * 4);
        memset(__frame->columns, 0, (ULONG)__frame->column_ids * 4);
        __frame->errorinfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IColumnsInfo_MapColumnIDs_Stub(__frame->_This, __frame->column_ids, __frame->dbids, __frame->columns, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->column_ids;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->columns,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4184]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4216]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->column_ids;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->columns,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4184]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4216]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IColumnsInfo_RemoteMapColumnIDs_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IColumnsInfo_FormatStringOffsetTable[] =
{
    236,  /* IColumnsInfo::RemoteGetColumnInfo */
    266,  /* IColumnsInfo::RemoteMapColumnIDs */
};

static const CINTERFACE_PROXY_VTABLE(5) _IColumnsInfoProxyVtbl =
{
    {
        &IID_IColumnsInfo,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IColumnsInfo_GetColumnInfo_Proxy,
        IColumnsInfo_MapColumnIDs_Proxy,
    }
};

static const MIDL_SERVER_INFO IColumnsInfo_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IColumnsInfo_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IColumnsInfo_table[] =
{
    IColumnsInfo_RemoteGetColumnInfo_Stub,
    IColumnsInfo_RemoteMapColumnIDs_Stub
};

static const CInterfaceStubVtbl _IColumnsInfoStubVtbl =
{
    {
        &IID_IColumnsInfo,
        &IColumnsInfo_ServerInfo,
        5,
        &IColumnsInfo_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBCreateCommand interface
 */
static void __finally_IDBCreateCommand_RemoteCreateCommand_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBCreateCommand_RemoteCreateCommand_Proxy(
    IDBCreateCommand* This,
    IUnknown *pUnkOuter,
    REFIID riid,
    IUnknown **ppCommand,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBCreateCommand_RemoteCreateCommand_Proxy );
    __frame->This = This;
    if (ppCommand) MIDL_memset( ppCommand, 0, sizeof( *ppCommand ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppCommand) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4220]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4220]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppCommand,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4248],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4270],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBCreateCommand_RemoteCreateCommand_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4248], (void *)ppCommand );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4270], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBCreateCommand_RemoteCreateCommand_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBCreateCommand * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppCommand;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBCreateCommand_RemoteCreateCommand_Stub( struct __frame_IDBCreateCommand_RemoteCreateCommand_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4220]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppCommand,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4248]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4270]);

}

void __RPC_STUB IDBCreateCommand_RemoteCreateCommand_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBCreateCommand_RemoteCreateCommand_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBCreateCommand*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBCreateCommand_RemoteCreateCommand_Stub );
    __frame->pUnkOuter = 0;
    __frame->riid = 0;
    __frame->ppCommand = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4220],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppCommand = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBCreateCommand_CreateCommand_Stub(__frame->_This, __frame->pUnkOuter, __frame->riid, __frame->ppCommand, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppCommand,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4248]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4270]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppCommand,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4248]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4270]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBCreateCommand_RemoteCreateCommand_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBCreateCommand_FormatStringOffsetTable[] =
{
    282,  /* IDBCreateCommand::RemoteCreateCommand */
};

static const CINTERFACE_PROXY_VTABLE(4) _IDBCreateCommandProxyVtbl =
{
    {
        &IID_IDBCreateCommand,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBCreateCommand_CreateCommand_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBCreateCommand_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBCreateCommand_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBCreateCommand_table[] =
{
    IDBCreateCommand_RemoteCreateCommand_Stub
};

static const CInterfaceStubVtbl _IDBCreateCommandStubVtbl =
{
    {
        &IID_IDBCreateCommand,
        &IDBCreateCommand_ServerInfo,
        4,
        &IDBCreateCommand_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBCreateSession interface
 */
static void __finally_IDBCreateSession_RemoteCreateSession_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBCreateSession_RemoteCreateSession_Proxy(
    IDBCreateSession* This,
    IUnknown *pUnkOuter,
    REFIID riid,
    IUnknown **ppDBSession,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBCreateSession_RemoteCreateSession_Proxy );
    __frame->This = This;
    if (ppDBSession) MIDL_memset( ppDBSession, 0, sizeof( *ppDBSession ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppDBSession) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4274]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4274]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[300]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDBSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4302],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4324],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBCreateSession_RemoteCreateSession_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4302], (void *)ppDBSession );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4324], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBCreateSession_RemoteCreateSession_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBCreateSession * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppDBSession;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBCreateSession_RemoteCreateSession_Stub( struct __frame_IDBCreateSession_RemoteCreateSession_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4274]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDBSession,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4302]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4324]);

}

void __RPC_STUB IDBCreateSession_RemoteCreateSession_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBCreateSession_RemoteCreateSession_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBCreateSession*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBCreateSession_RemoteCreateSession_Stub );
    __frame->pUnkOuter = 0;
    __frame->riid = 0;
    __frame->ppDBSession = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[300]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4274],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppDBSession = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBCreateSession_CreateSession_Stub(__frame->_This, __frame->pUnkOuter, __frame->riid, __frame->ppDBSession, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDBSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4302]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4324]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDBSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4302]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4324]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBCreateSession_RemoteCreateSession_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBCreateSession_FormatStringOffsetTable[] =
{
    300,  /* IDBCreateSession::RemoteCreateSession */
};

static const CINTERFACE_PROXY_VTABLE(4) _IDBCreateSessionProxyVtbl =
{
    {
        &IID_IDBCreateSession,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBCreateSession_CreateSession_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBCreateSession_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBCreateSession_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBCreateSession_table[] =
{
    IDBCreateSession_RemoteCreateSession_Stub
};

static const CInterfaceStubVtbl _IDBCreateSessionStubVtbl =
{
    {
        &IID_IDBCreateSession,
        &IDBCreateSession_ServerInfo,
        4,
        &IDBCreateSession_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ISourcesRowset interface
 */
static void __finally_ISourcesRowset_RemoteGetSourcesRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ISourcesRowset_RemoteGetSourcesRowset_Proxy(
    ISourcesRowset* This,
    IUnknown *pUnkOuter,
    REFIID riid,
    ULONG cPropertySets,
    DBPROPSET *rgProperties,
    IUnknown **ppSourcesRowset,
    ULONG cTotalProps,
    DBPROPSTATUS *rgPropStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ISourcesRowset_RemoteGetSourcesRowset_Proxy );
    __frame->This = This;
    if (ppSourcesRowset) MIDL_memset( ppSourcesRowset, 0, sizeof( *ppSourcesRowset ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgProperties) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSourcesRowset) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgPropStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 36;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4328]);

            NdrSimpleStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgProperties,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1650]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4328]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgProperties,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1650]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cTotalProps;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[318]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSourcesRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4372],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBPROPSTATUS) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *rgPropStatus = *(DBPROPSTATUS *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBPROPSTATUS);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4398],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ISourcesRowset_RemoteGetSourcesRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4372], (void *)ppSourcesRowset );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4376], (void *)rgPropStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4398], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ISourcesRowset_RemoteGetSourcesRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ISourcesRowset * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    REFIID riid;
    ULONG cPropertySets;
    DBPROPSET * rgProperties;
    IUnknown *_W0;
    IUnknown ** ppSourcesRowset;
    ULONG cTotalProps;
    DBPROPSTATUS _W1;
    DBPROPSTATUS * rgPropStatus;
    IErrorInfo *_W2;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ISourcesRowset_RemoteGetSourcesRowset_Stub( struct __frame_ISourcesRowset_RemoteGetSourcesRowset_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4328]);



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgProperties,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4350]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSourcesRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4372]);



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4398]);

}

void __RPC_STUB ISourcesRowset_RemoteGetSourcesRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ISourcesRowset_RemoteGetSourcesRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (ISourcesRowset*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ISourcesRowset_RemoteGetSourcesRowset_Stub );
    __frame->pUnkOuter = 0;
    __frame->riid = 0;
    __frame->rgProperties = 0;
    __frame->ppSourcesRowset = 0;
    __frame->rgPropStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[318]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4328],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgProperties,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1650],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cTotalProps = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppSourcesRowset = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->rgPropStatus = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->ppErrorInfoRem = &__frame->_W2;
        __frame->_W2 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ISourcesRowset_GetSourcesRowset_Stub(__frame->_This, __frame->pUnkOuter, __frame->riid, __frame->cPropertySets, __frame->rgProperties, __frame->ppSourcesRowset, __frame->cTotalProps, __frame->rgPropStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSourcesRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4372]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4398]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSourcesRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4372]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBPROPSTATUS *)__frame->_StubMsg.Buffer = *__frame->rgPropStatus;
        __frame->_StubMsg.Buffer += sizeof(DBPROPSTATUS);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4398]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ISourcesRowset_RemoteGetSourcesRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ISourcesRowset_FormatStringOffsetTable[] =
{
    318,  /* ISourcesRowset::RemoteGetSourcesRowset */
};

static const CINTERFACE_PROXY_VTABLE(4) _ISourcesRowsetProxyVtbl =
{
    {
        &IID_ISourcesRowset,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ISourcesRowset_GetSourcesRowset_Proxy,
    }
};

static const MIDL_SERVER_INFO ISourcesRowset_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISourcesRowset_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ISourcesRowset_table[] =
{
    ISourcesRowset_RemoteGetSourcesRowset_Stub
};

static const CInterfaceStubVtbl _ISourcesRowsetStubVtbl =
{
    {
        &IID_ISourcesRowset,
        &ISourcesRowset_ServerInfo,
        4,
        &ISourcesRowset_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBProperties interface
 */
static void __finally_IDBProperties_RemoteGetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBProperties_RemoteGetProperties_Proxy(
    IDBProperties* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertySets,
    DBPROPSET **prgPropertySets,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBProperties_RemoteGetProperties_Proxy );
    __frame->This = This;
    if (prgPropertySets) MIDL_memset( prgPropertySets, 0, sizeof( *prgPropertySets ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pcPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4468]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4468]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[348]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4512],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4534],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBProperties_RemoteGetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4472], (void *)pcPropertySets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertySets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4512], (void *)prgPropertySets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4534], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBProperties_RemoteGetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBProperties * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertySets;
    DBPROPSET *_W0;
    DBPROPSET ** prgPropertySets;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBProperties_RemoteGetProperties_Stub( struct __frame_IDBProperties_RemoteGetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4468]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4512]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4534]);

}

void __RPC_STUB IDBProperties_RemoteGetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBProperties_RemoteGetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBProperties_RemoteGetProperties_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertySets = 0;
    __frame->prgPropertySets = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[348]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4468],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertySets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->prgPropertySets = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBProperties_GetProperties_Stub(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertySets, __frame->prgPropertySets, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4512]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4534]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertySets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4512]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4534]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBProperties_RemoteGetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBProperties_RemoteGetPropertyInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBProperties_RemoteGetPropertyInfo_Proxy(
    IDBProperties* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertyInfoSets,
    DBPROPINFOSET **prgPropertyInfoSets,
    ULONG *pcOffsets,
    DBBYTEOFFSET **prgDescOffsets,
    ULONG *pcbDescBuffer,
    OLECHAR **ppDescBuffer,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBProperties_RemoteGetPropertyInfo_Proxy );
    __frame->This = This;
    if (prgPropertyInfoSets) MIDL_memset( prgPropertyInfoSets, 0, sizeof( *prgPropertyInfoSets ));
    if (prgDescOffsets) MIDL_memset( prgDescOffsets, 0, sizeof( *prgDescOffsets ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pcPropertyInfoSets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertyInfoSets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcOffsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgDescOffsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcbDescBuffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4604]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4760]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4604]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertyInfoSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcOffsets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcbDescBuffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4760]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertyInfoSets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertyInfoSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4716],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcOffsets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgDescOffsets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4738],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcbDescBuffer = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4760],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4782],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBProperties_RemoteGetPropertyInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4608], (void *)pcPropertyInfoSets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertyInfoSets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4716], (void *)prgPropertyInfoSets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4720], (void *)pcOffsets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcOffsets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4738], (void *)prgDescOffsets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4742], (void *)pcbDescBuffer );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4760], (void *)ppDescBuffer );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4782], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBProperties_RemoteGetPropertyInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBProperties * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertyInfoSets;
    DBPROPINFOSET *_W0;
    DBPROPINFOSET ** prgPropertyInfoSets;
    ULONG * pcOffsets;
    DBBYTEOFFSET *_W1;
    DBBYTEOFFSET ** prgDescOffsets;
    ULONG * pcbDescBuffer;
    OLECHAR ** ppDescBuffer;
    IErrorInfo *_W2;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBProperties_RemoteGetPropertyInfo_Stub( struct __frame_IDBProperties_RemoteGetPropertyInfo_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4604]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertyInfoSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4716]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcOffsets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgDescOffsets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4738]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDescBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4760]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4782]);

}

void __RPC_STUB IDBProperties_RemoteGetPropertyInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBProperties_RemoteGetPropertyInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBProperties_RemoteGetPropertyInfo_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertyInfoSets = 0;
    __frame->prgPropertyInfoSets = 0;
    __frame->pcOffsets = 0;
    __frame->prgDescOffsets = 0;
    __frame->pcbDescBuffer = 0;
    __frame->ppDescBuffer = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4604],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertyInfoSets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcOffsets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcbDescBuffer = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4760],
            0);


        __frame->prgPropertyInfoSets = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prgDescOffsets = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->ppErrorInfoRem = &__frame->_W2;
        __frame->_W2 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBProperties_GetPropertyInfo_Stub(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertyInfoSets, __frame->prgPropertyInfoSets, __frame->pcOffsets, __frame->prgDescOffsets, __frame->pcbDescBuffer, __frame->ppDescBuffer, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertyInfoSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4716]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcOffsets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgDescOffsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4738]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4760]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4782]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertyInfoSets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertyInfoSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4716]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcOffsets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcOffsets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgDescOffsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4738]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcbDescBuffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4760]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4782]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBProperties_RemoteGetPropertyInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBProperties_RemoteSetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBProperties_RemoteSetProperties_Proxy(
    IDBProperties* This,
    ULONG cPropertySets,
    DBPROPSET *rgPropertySets,
    ULONG cTotalProps,
    DBPROPSTATUS *rgPropStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBProperties_RemoteSetProperties_Proxy );
    __frame->This = This;
    if (rgPropStatus) MIDL_memset( rgPropStatus, 0, sizeof( *rgPropStatus ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!rgPropStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4818]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4818]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cTotalProps;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[404]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgPropStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4822],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4854],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBProperties_RemoteSetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)cTotalProps;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4832], (void *)rgPropStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4854], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBProperties_RemoteSetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBProperties * _This;
    HRESULT _RetVal;
    ULONG cPropertySets;
    DBPROPSET * rgPropertySets;
    ULONG cTotalProps;
    DBPROPSTATUS * rgPropStatus;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBProperties_RemoteSetProperties_Stub( struct __frame_IDBProperties_RemoteSetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4818]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4832]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4854]);

}

void __RPC_STUB IDBProperties_RemoteSetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBProperties_RemoteSetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBProperties_RemoteSetProperties_Stub );
    __frame->rgPropertySets = 0;
    __frame->rgPropStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[404]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4818],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cTotalProps = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgPropStatus = NdrAllocate(&__frame->_StubMsg, __frame->cTotalProps * 4);
        memset(__frame->rgPropStatus, 0, __frame->cTotalProps * 4);
        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBProperties_SetProperties_Stub(__frame->_This, __frame->cPropertySets, __frame->rgPropertySets, __frame->cTotalProps, __frame->rgPropStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4822]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4854]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4822]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4854]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBProperties_RemoteSetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBProperties_FormatStringOffsetTable[] =
{
    348,  /* IDBProperties::RemoteGetProperties */
    368,  /* IDBProperties::RemoteGetPropertyInfo */
    404,  /* IDBProperties::RemoteSetProperties */
};

static const CINTERFACE_PROXY_VTABLE(6) _IDBPropertiesProxyVtbl =
{
    {
        &IID_IDBProperties,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBProperties_GetProperties_Proxy,
        IDBProperties_GetPropertyInfo_Proxy,
        IDBProperties_SetProperties_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBProperties_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBProperties_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBProperties_table[] =
{
    IDBProperties_RemoteGetProperties_Stub,
    IDBProperties_RemoteGetPropertyInfo_Stub,
    IDBProperties_RemoteSetProperties_Stub
};

static const CInterfaceStubVtbl _IDBPropertiesStubVtbl =
{
    {
        &IID_IDBProperties,
        &IDBProperties_ServerInfo,
        6,
        &IDBProperties_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBInitialize interface
 */
static void __finally_IDBInitialize_RemoteInitialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBInitialize_RemoteInitialize_Proxy(
    IDBInitialize* This,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBInitialize_RemoteInitialize_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[422]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4876],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBInitialize_RemoteInitialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4876], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBInitialize_RemoteInitialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBInitialize * _This;
    HRESULT _RetVal;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBInitialize_RemoteInitialize_Stub( struct __frame_IDBInitialize_RemoteInitialize_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4876]);

}

void __RPC_STUB IDBInitialize_RemoteInitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBInitialize_RemoteInitialize_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBInitialize*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBInitialize_RemoteInitialize_Stub );
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[422]);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBInitialize_Initialize_Stub(__frame->_This, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4876]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4876]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBInitialize_RemoteInitialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBInitialize_RemoteUninitialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBInitialize_RemoteUninitialize_Proxy(
    IDBInitialize* This,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBInitialize_RemoteUninitialize_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4898],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBInitialize_RemoteUninitialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4898], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBInitialize_RemoteUninitialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBInitialize * _This;
    HRESULT _RetVal;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBInitialize_RemoteUninitialize_Stub( struct __frame_IDBInitialize_RemoteUninitialize_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4898]);

}

void __RPC_STUB IDBInitialize_RemoteUninitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBInitialize_RemoteUninitialize_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBInitialize*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBInitialize_RemoteUninitialize_Stub );
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBInitialize_Uninitialize_Stub(__frame->_This, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4898]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4898]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBInitialize_RemoteUninitialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBInitialize_FormatStringOffsetTable[] =
{
    422,  /* IDBInitialize::RemoteInitialize */
    428,  /* IDBInitialize::RemoteUninitialize */
};

static const CINTERFACE_PROXY_VTABLE(5) _IDBInitializeProxyVtbl =
{
    {
        &IID_IDBInitialize,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBInitialize_Initialize_Proxy,
        IDBInitialize_Uninitialize_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBInitialize_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBInitialize_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBInitialize_table[] =
{
    IDBInitialize_RemoteInitialize_Stub,
    IDBInitialize_RemoteUninitialize_Stub
};

static const CInterfaceStubVtbl _IDBInitializeStubVtbl =
{
    {
        &IID_IDBInitialize,
        &IDBInitialize_ServerInfo,
        5,
        &IDBInitialize_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBDataSourceAdmin interface
 */
static void __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBDataSourceAdmin_RemoteCreateDataSource_Proxy(
    IDBDataSourceAdmin* This,
    ULONG cPropertySets,
    DBPROPSET *rgPropertySets,
    IUnknown *pUnkOuter,
    REFIID riid,
    IUnknown **ppDBSession,
    ULONG cTotalProps,
    DBPROPSTATUS *rgPropStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Proxy );
    __frame->This = This;
    if (rgPropStatus) MIDL_memset( rgPropStatus, 0, sizeof( *rgPropStatus ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgPropStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 36;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4934]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4938]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppDBSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4966]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4934]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4938]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppDBSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4966]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cTotalProps;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[434]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDBSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4966],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgPropStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4970],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5002],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4966], (void *)ppDBSession );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)cTotalProps;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4980], (void *)rgPropStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5002], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBDataSourceAdmin_RemoteCreateDataSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBDataSourceAdmin * _This;
    HRESULT _RetVal;
    ULONG cPropertySets;
    DBPROPSET * rgPropertySets;
    IUnknown * pUnkOuter;
    REFIID riid;
    IUnknown ** ppDBSession;
    ULONG cTotalProps;
    DBPROPSTATUS * rgPropStatus;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Stub( struct __frame_IDBDataSourceAdmin_RemoteCreateDataSource_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4934]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4938]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDBSession,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4966]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4980]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5002]);

}

void __RPC_STUB IDBDataSourceAdmin_RemoteCreateDataSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBDataSourceAdmin_RemoteCreateDataSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBDataSourceAdmin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Stub );
    __frame->rgPropertySets = 0;
    __frame->pUnkOuter = 0;
    __frame->riid = 0;
    __frame->ppDBSession = 0;
    __frame->rgPropStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[434]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4934],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4938],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppDBSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4966],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cTotalProps = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgPropStatus = NdrAllocate(&__frame->_StubMsg, __frame->cTotalProps * 4);
        memset(__frame->rgPropStatus, 0, __frame->cTotalProps * 4);
        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBDataSourceAdmin_CreateDataSource_Stub(__frame->_This, __frame->cPropertySets, __frame->rgPropertySets, __frame->pUnkOuter, __frame->riid, __frame->ppDBSession, __frame->cTotalProps, __frame->rgPropStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDBSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4966]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4970]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5002]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDBSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4966]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4970]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5002]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBDataSourceAdmin_RemoteDestroyDataSource_Proxy(
    IDBDataSourceAdmin* This,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[464]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5024],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5024], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBDataSourceAdmin * _This;
    HRESULT _RetVal;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub( struct __frame_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5024]);

}

void __RPC_STUB IDBDataSourceAdmin_RemoteDestroyDataSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBDataSourceAdmin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub );
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[464]);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBDataSourceAdmin_DestroyDataSource_Stub(__frame->_This, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5024]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5024]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBDataSourceAdmin_RemoteGetCreationProperties_Proxy(
    IDBDataSourceAdmin* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertyInfoSets,
    DBPROPINFOSET **prgPropertyInfoSets,
    DBCOUNTITEM *pcOffsets,
    DBBYTEOFFSET **prgDescOffsets,
    ULONG *pcbDescBuffer,
    OLECHAR **ppDescBuffer,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Proxy );
    __frame->This = This;
    if (prgPropertyInfoSets) MIDL_memset( prgPropertyInfoSets, 0, sizeof( *prgPropertyInfoSets ));
    if (prgDescOffsets) MIDL_memset( prgDescOffsets, 0, sizeof( *prgDescOffsets ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pcPropertyInfoSets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertyInfoSets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcOffsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgDescOffsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcbDescBuffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5094]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5182]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5094]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertyInfoSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *pcOffsets;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcbDescBuffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5182]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[470]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertyInfoSets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertyInfoSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5138],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcOffsets = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgDescOffsets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5160],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcbDescBuffer = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5182],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5204],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5098], (void *)pcPropertyInfoSets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertyInfoSets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5138], (void *)prgPropertyInfoSets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5142], (void *)pcOffsets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*pcOffsets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5160], (void *)prgDescOffsets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5164], (void *)pcbDescBuffer );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5182], (void *)ppDescBuffer );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5204], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBDataSourceAdmin * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertyInfoSets;
    DBPROPINFOSET *_W0;
    DBPROPINFOSET ** prgPropertyInfoSets;
    DBCOUNTITEM * pcOffsets;
    DBBYTEOFFSET *_W1;
    DBBYTEOFFSET ** prgDescOffsets;
    ULONG * pcbDescBuffer;
    OLECHAR ** ppDescBuffer;
    IErrorInfo *_W2;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub( struct __frame_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5094]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertyInfoSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5138]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcOffsets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgDescOffsets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5160]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDescBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5182]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5204]);

}

void __RPC_STUB IDBDataSourceAdmin_RemoteGetCreationProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBDataSourceAdmin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertyInfoSets = 0;
    __frame->prgPropertyInfoSets = 0;
    __frame->pcOffsets = 0;
    __frame->prgDescOffsets = 0;
    __frame->pcbDescBuffer = 0;
    __frame->ppDescBuffer = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[470]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5094],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertyInfoSets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcOffsets = (DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcbDescBuffer = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5182],
            0);


        __frame->prgPropertyInfoSets = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prgDescOffsets = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->ppErrorInfoRem = &__frame->_W2;
        __frame->_W2 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBDataSourceAdmin_GetCreationProperties_Stub(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertyInfoSets, __frame->prgPropertyInfoSets, __frame->pcOffsets, __frame->prgDescOffsets, __frame->pcbDescBuffer, __frame->ppDescBuffer, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertyInfoSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5138]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcOffsets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgDescOffsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5160]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5182]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5204]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertyInfoSets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertyInfoSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5138]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *__frame->pcOffsets;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcOffsets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgDescOffsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5160]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcbDescBuffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5182]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5204]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBDataSourceAdmin_RemoteModifyDataSource_Proxy(
    IDBDataSourceAdmin* This,
    ULONG cPropertySets,
    DBPROPSET *rgPropertySets,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!rgPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5208]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5208]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[506]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5262],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5262], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBDataSourceAdmin_RemoteModifyDataSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBDataSourceAdmin * _This;
    HRESULT _RetVal;
    ULONG cPropertySets;
    DBPROPSET * rgPropertySets;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Stub( struct __frame_IDBDataSourceAdmin_RemoteModifyDataSource_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertySets;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5208]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5262]);

}

void __RPC_STUB IDBDataSourceAdmin_RemoteModifyDataSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBDataSourceAdmin_RemoteModifyDataSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBDataSourceAdmin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Stub );
    __frame->rgPropertySets = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[506]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5208],
            0);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBDataSourceAdmin_ModifyDataSource_Stub(__frame->_This, __frame->cPropertySets, __frame->rgPropertySets, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5262]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5262]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBDataSourceAdmin_FormatStringOffsetTable[] =
{
    434,  /* IDBDataSourceAdmin::RemoteCreateDataSource */
    464,  /* IDBDataSourceAdmin::RemoteDestroyDataSource */
    470,  /* IDBDataSourceAdmin::RemoteGetCreationProperties */
    506,  /* IDBDataSourceAdmin::RemoteModifyDataSource */
};

static const CINTERFACE_PROXY_VTABLE(7) _IDBDataSourceAdminProxyVtbl =
{
    {
        &IID_IDBDataSourceAdmin,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBDataSourceAdmin_CreateDataSource_Proxy,
        IDBDataSourceAdmin_DestroyDataSource_Proxy,
        IDBDataSourceAdmin_GetCreationProperties_Proxy,
        IDBDataSourceAdmin_ModifyDataSource_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBDataSourceAdmin_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBDataSourceAdmin_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBDataSourceAdmin_table[] =
{
    IDBDataSourceAdmin_RemoteCreateDataSource_Stub,
    IDBDataSourceAdmin_RemoteDestroyDataSource_Stub,
    IDBDataSourceAdmin_RemoteGetCreationProperties_Stub,
    IDBDataSourceAdmin_RemoteModifyDataSource_Stub
};

static const CInterfaceStubVtbl _IDBDataSourceAdminStubVtbl =
{
    {
        &IID_IDBDataSourceAdmin,
        &IDBDataSourceAdmin_ServerInfo,
        7,
        &IDBDataSourceAdmin_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBAsynchNotify interface
 */
static void __finally_IDBAsynchNotify_RemoteOnLowResource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBAsynchNotify_RemoteOnLowResource_Proxy(
    IDBAsynchNotify* This,
    DB_DWRESERVE dwReserved)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBAsynchNotify_RemoteOnLowResource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DB_DWRESERVE *)__frame->_StubMsg.Buffer = dwReserved;
            __frame->_StubMsg.Buffer += sizeof(DB_DWRESERVE);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[518]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBAsynchNotify_RemoteOnLowResource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBAsynchNotify_RemoteOnLowResource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBAsynchNotify * _This;
    HRESULT _RetVal;
    DB_DWRESERVE dwReserved;
};

static void __finally_IDBAsynchNotify_RemoteOnLowResource_Stub( struct __frame_IDBAsynchNotify_RemoteOnLowResource_Stub *__frame )
{

}

void __RPC_STUB IDBAsynchNotify_RemoteOnLowResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBAsynchNotify_RemoteOnLowResource_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBAsynchNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBAsynchNotify_RemoteOnLowResource_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[518]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DB_DWRESERVE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwReserved = *(DB_DWRESERVE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DB_DWRESERVE);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBAsynchNotify_OnLowResource_Stub(__frame->_This, __frame->dwReserved);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBAsynchNotify_RemoteOnLowResource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBAsynchNotify_RemoteOnProgress_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBAsynchNotify_RemoteOnProgress_Proxy(
    IDBAsynchNotify* This,
    HCHAPTER hChapter,
    DBASYNCHOP eOperation,
    DBCOUNTITEM ulProgress,
    DBCOUNTITEM ulProgressMax,
    DBASYNCHPHASE eAsynchPhase,
    LPOLESTR pwszStatusText)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBAsynchNotify_RemoteOnProgress_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6098]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = hChapter;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBASYNCHOP *)__frame->_StubMsg.Buffer = eOperation;
            __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = ulProgress;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = ulProgressMax;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBASYNCHPHASE *)__frame->_StubMsg.Buffer = eAsynchPhase;
            __frame->_StubMsg.Buffer += sizeof(DBASYNCHPHASE);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6098]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[522]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBAsynchNotify_RemoteOnProgress_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBAsynchNotify_RemoteOnProgress_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBAsynchNotify * _This;
    HRESULT _RetVal;
    HCHAPTER hChapter;
    DBASYNCHOP eOperation;
    DBCOUNTITEM ulProgress;
    DBCOUNTITEM ulProgressMax;
    DBASYNCHPHASE eAsynchPhase;
    LPOLESTR pwszStatusText;
};

static void __finally_IDBAsynchNotify_RemoteOnProgress_Stub( struct __frame_IDBAsynchNotify_RemoteOnProgress_Stub *__frame )
{





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pwszStatusText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6098]);

}

void __RPC_STUB IDBAsynchNotify_RemoteOnProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBAsynchNotify_RemoteOnProgress_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBAsynchNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBAsynchNotify_RemoteOnProgress_Stub );
    __frame->pwszStatusText = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[522]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hChapter = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBASYNCHOP) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->eOperation = *(DBASYNCHOP *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulProgress = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulProgressMax = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBASYNCHPHASE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->eAsynchPhase = *(DBASYNCHPHASE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBASYNCHPHASE);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pwszStatusText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6098],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBAsynchNotify_OnProgress_Stub(__frame->_This, __frame->hChapter, __frame->eOperation, __frame->ulProgress, __frame->ulProgressMax, __frame->eAsynchPhase, __frame->pwszStatusText);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBAsynchNotify_RemoteOnProgress_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBAsynchNotify_RemoteOnStop_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBAsynchNotify_RemoteOnStop_Proxy(
    IDBAsynchNotify* This,
    HCHAPTER hChapter,
    DBASYNCHOP eOperation,
    HRESULT hrStatus,
    LPOLESTR pwszStatusText)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBAsynchNotify_RemoteOnStop_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6098]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = hChapter;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBASYNCHOP *)__frame->_StubMsg.Buffer = eOperation;
            __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HRESULT *)__frame->_StubMsg.Buffer = hrStatus;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6098]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[538]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBAsynchNotify_RemoteOnStop_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBAsynchNotify_RemoteOnStop_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBAsynchNotify * _This;
    HRESULT _RetVal;
    HCHAPTER hChapter;
    DBASYNCHOP eOperation;
    HRESULT hrStatus;
    LPOLESTR pwszStatusText;
};

static void __finally_IDBAsynchNotify_RemoteOnStop_Stub( struct __frame_IDBAsynchNotify_RemoteOnStop_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pwszStatusText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6098]);

}

void __RPC_STUB IDBAsynchNotify_RemoteOnStop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBAsynchNotify_RemoteOnStop_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBAsynchNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBAsynchNotify_RemoteOnStop_Stub );
    __frame->pwszStatusText = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[538]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hChapter = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBASYNCHOP) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->eOperation = *(DBASYNCHOP *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hrStatus = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pwszStatusText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6098],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBAsynchNotify_OnStop_Stub(__frame->_This, __frame->hChapter, __frame->eOperation, __frame->hrStatus, __frame->pwszStatusText);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBAsynchNotify_RemoteOnStop_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBAsynchNotify_FormatStringOffsetTable[] =
{
    518,  /* IDBAsynchNotify::RemoteOnLowResource */
    522,  /* IDBAsynchNotify::RemoteOnProgress */
    538,  /* IDBAsynchNotify::RemoteOnStop */
};

static const CINTERFACE_PROXY_VTABLE(6) _IDBAsynchNotifyProxyVtbl =
{
    {
        &IID_IDBAsynchNotify,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBAsynchNotify_OnLowResource_Proxy,
        IDBAsynchNotify_OnProgress_Proxy,
        IDBAsynchNotify_OnStop_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBAsynchNotify_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBAsynchNotify_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBAsynchNotify_table[] =
{
    IDBAsynchNotify_RemoteOnLowResource_Stub,
    IDBAsynchNotify_RemoteOnProgress_Stub,
    IDBAsynchNotify_RemoteOnStop_Stub
};

static const CInterfaceStubVtbl _IDBAsynchNotifyStubVtbl =
{
    {
        &IID_IDBAsynchNotify,
        &IDBAsynchNotify_ServerInfo,
        6,
        &IDBAsynchNotify_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBAsynchStatus interface
 */
static void __finally_IDBAsynchStatus_RemoteAbort_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBAsynchStatus_RemoteAbort_Proxy(
    IDBAsynchStatus* This,
    HCHAPTER hChapter,
    DBASYNCHOP eOperation,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBAsynchStatus_RemoteAbort_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = hChapter;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBASYNCHOP *)__frame->_StubMsg.Buffer = eOperation;
            __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[550]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBAsynchStatus_RemoteAbort_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5292], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBAsynchStatus_RemoteAbort_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBAsynchStatus * _This;
    HRESULT _RetVal;
    HCHAPTER hChapter;
    DBASYNCHOP eOperation;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBAsynchStatus_RemoteAbort_Stub( struct __frame_IDBAsynchStatus_RemoteAbort_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292]);

}

void __RPC_STUB IDBAsynchStatus_RemoteAbort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBAsynchStatus_RemoteAbort_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBAsynchStatus*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBAsynchStatus_RemoteAbort_Stub );
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[550]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hChapter = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBASYNCHOP) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->eOperation = *(DBASYNCHOP *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBAsynchStatus_Abort_Stub(__frame->_This, __frame->hChapter, __frame->eOperation, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBAsynchStatus_RemoteAbort_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBAsynchStatus_RemoteGetStatus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBAsynchStatus_RemoteGetStatus_Proxy(
    IDBAsynchStatus* This,
    HCHAPTER hChapter,
    DBASYNCHOP eOperation,
    DBCOUNTITEM *pulProgress,
    DBCOUNTITEM *pulProgressMax,
    DBASYNCHPHASE *peAsynchPhase,
    LPOLESTR *ppwszStatusText,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBAsynchStatus_RemoteGetStatus_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 64;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5308]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = hChapter;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBASYNCHOP *)__frame->_StubMsg.Buffer = eOperation;
            __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pulProgress,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5296]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pulProgressMax,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5300]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)peAsynchPhase,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5304]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5308]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[560]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pulProgress,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5296],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pulProgressMax,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5300],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&peAsynchPhase,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5304],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5308],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5334],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBAsynchStatus_RemoteGetStatus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5296], (void *)pulProgress );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5300], (void *)pulProgressMax );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5304], (void *)peAsynchPhase );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5312], (void *)ppwszStatusText );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5334], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBAsynchStatus_RemoteGetStatus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBAsynchStatus * _This;
    HRESULT _RetVal;
    HCHAPTER hChapter;
    DBASYNCHOP eOperation;
    DBCOUNTITEM * pulProgress;
    DBCOUNTITEM * pulProgressMax;
    DBASYNCHPHASE * peAsynchPhase;
    LPOLESTR * ppwszStatusText;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBAsynchStatus_RemoteGetStatus_Stub( struct __frame_IDBAsynchStatus_RemoteGetStatus_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pulProgress,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5296]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pulProgressMax,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5300]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->peAsynchPhase,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5304]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppwszStatusText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5308]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5334]);

}

void __RPC_STUB IDBAsynchStatus_RemoteGetStatus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBAsynchStatus_RemoteGetStatus_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBAsynchStatus*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBAsynchStatus_RemoteGetStatus_Stub );
    __frame->pulProgress = 0;
    __frame->pulProgressMax = 0;
    __frame->peAsynchPhase = 0;
    __frame->ppwszStatusText = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[560]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hChapter = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBASYNCHOP) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->eOperation = *(DBASYNCHOP *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pulProgress,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5296],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pulProgressMax,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5300],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->peAsynchPhase,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5304],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppwszStatusText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5308],
            0);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBAsynchStatus_GetStatus_Stub(__frame->_This, __frame->hChapter, __frame->eOperation, __frame->pulProgress, __frame->pulProgressMax, __frame->peAsynchPhase, __frame->ppwszStatusText, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 56;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszStatusText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5308]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5334]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pulProgress,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5296]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pulProgressMax,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5300]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->peAsynchPhase,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5304]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszStatusText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5308]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5334]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBAsynchStatus_RemoteGetStatus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBAsynchStatus_FormatStringOffsetTable[] =
{
    550,  /* IDBAsynchStatus::RemoteAbort */
    560,  /* IDBAsynchStatus::RemoteGetStatus */
};

static const CINTERFACE_PROXY_VTABLE(5) _IDBAsynchStatusProxyVtbl =
{
    {
        &IID_IDBAsynchStatus,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBAsynchStatus_Abort_Proxy,
        IDBAsynchStatus_GetStatus_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBAsynchStatus_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBAsynchStatus_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBAsynchStatus_table[] =
{
    IDBAsynchStatus_RemoteAbort_Stub,
    IDBAsynchStatus_RemoteGetStatus_Stub
};

static const CInterfaceStubVtbl _IDBAsynchStatusStubVtbl =
{
    {
        &IID_IDBAsynchStatus,
        &IDBAsynchStatus_ServerInfo,
        5,
        &IDBAsynchStatus_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ISessionProperties interface
 */
static void __finally_ISessionProperties_RemoteGetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ISessionProperties_RemoteGetProperties_Proxy(
    ISessionProperties* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertySets,
    DBPROPSET **prgPropertySets,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ISessionProperties_RemoteGetProperties_Proxy );
    __frame->This = This;
    if (prgPropertySets) MIDL_memset( prgPropertySets, 0, sizeof( *prgPropertySets ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pcPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5404]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5404]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[586]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5448],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5470],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ISessionProperties_RemoteGetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5408], (void *)pcPropertySets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertySets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5448], (void *)prgPropertySets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5470], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ISessionProperties_RemoteGetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ISessionProperties * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertySets;
    DBPROPSET *_W0;
    DBPROPSET ** prgPropertySets;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ISessionProperties_RemoteGetProperties_Stub( struct __frame_ISessionProperties_RemoteGetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5404]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5448]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5470]);

}

void __RPC_STUB ISessionProperties_RemoteGetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ISessionProperties_RemoteGetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (ISessionProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ISessionProperties_RemoteGetProperties_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertySets = 0;
    __frame->prgPropertySets = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[586]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5404],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertySets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->prgPropertySets = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ISessionProperties_GetProperties_Stub(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertySets, __frame->prgPropertySets, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5448]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5470]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertySets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5448]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5470]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ISessionProperties_RemoteGetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ISessionProperties_RemoteSetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ISessionProperties_RemoteSetProperties_Proxy(
    ISessionProperties* This,
    ULONG cPropertySets,
    DBPROPSET *rgPropertySets,
    ULONG cTotalProps,
    DBPROPSTATUS *rgPropStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ISessionProperties_RemoteSetProperties_Proxy );
    __frame->This = This;
    if (rgPropStatus) MIDL_memset( rgPropStatus, 0, sizeof( *rgPropStatus ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rgPropStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5506]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5506]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cTotalProps;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[606]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgPropStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5510],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5542],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ISessionProperties_RemoteSetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)cTotalProps;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5520], (void *)rgPropStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5542], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ISessionProperties_RemoteSetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ISessionProperties * _This;
    HRESULT _RetVal;
    ULONG cPropertySets;
    DBPROPSET * rgPropertySets;
    ULONG cTotalProps;
    DBPROPSTATUS * rgPropStatus;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ISessionProperties_RemoteSetProperties_Stub( struct __frame_ISessionProperties_RemoteSetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5506]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5520]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5542]);

}

void __RPC_STUB ISessionProperties_RemoteSetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ISessionProperties_RemoteSetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (ISessionProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ISessionProperties_RemoteSetProperties_Stub );
    __frame->rgPropertySets = 0;
    __frame->rgPropStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[606]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5506],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cTotalProps = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgPropStatus = NdrAllocate(&__frame->_StubMsg, __frame->cTotalProps * 4);
        memset(__frame->rgPropStatus, 0, __frame->cTotalProps * 4);
        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ISessionProperties_SetProperties_Stub(__frame->_This, __frame->cPropertySets, __frame->rgPropertySets, __frame->cTotalProps, __frame->rgPropStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5510]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5542]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5510]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5542]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ISessionProperties_RemoteSetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ISessionProperties_FormatStringOffsetTable[] =
{
    586,  /* ISessionProperties::RemoteGetProperties */
    606,  /* ISessionProperties::RemoteSetProperties */
};

static const CINTERFACE_PROXY_VTABLE(5) _ISessionPropertiesProxyVtbl =
{
    {
        &IID_ISessionProperties,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ISessionProperties_GetProperties_Proxy,
        ISessionProperties_SetProperties_Proxy,
    }
};

static const MIDL_SERVER_INFO ISessionProperties_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISessionProperties_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ISessionProperties_table[] =
{
    ISessionProperties_RemoteGetProperties_Stub,
    ISessionProperties_RemoteSetProperties_Stub
};

static const CInterfaceStubVtbl _ISessionPropertiesStubVtbl =
{
    {
        &IID_ISessionProperties,
        &ISessionProperties_ServerInfo,
        5,
        &ISessionProperties_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IRowsetNotify interface
 */
static void __finally_IRowsetNotify_RemoteOnFieldChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetNotify_RemoteOnFieldChange_Proxy(
    IRowsetNotify* This,
    IRowset *rowset,
    HROW row,
    DBORDINAL ccols,
    DBORDINAL *columns,
    DBREASON reason,
    DBEVENTPHASE phase,
    BOOL cantdeny)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetNotify_RemoteOnFieldChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!columns) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5546]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)ccols;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)columns,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5564]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5546]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HROW *)__frame->_StubMsg.Buffer = row;
            __frame->_StubMsg.Buffer += sizeof(HROW);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBORDINAL *)__frame->_StubMsg.Buffer = ccols;
            __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)ccols;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)columns,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5564]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBREASON *)__frame->_StubMsg.Buffer = reason;
            __frame->_StubMsg.Buffer += sizeof(DBREASON);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBEVENTPHASE *)__frame->_StubMsg.Buffer = phase;
            __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = cantdeny;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[624]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetNotify_RemoteOnFieldChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetNotify_RemoteOnFieldChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetNotify * _This;
    HRESULT _RetVal;
    IRowset * rowset;
    HROW row;
    DBORDINAL ccols;
    DBORDINAL * columns;
    DBREASON reason;
    DBEVENTPHASE phase;
    BOOL cantdeny;
};

static void __finally_IRowsetNotify_RemoteOnFieldChange_Stub( struct __frame_IRowsetNotify_RemoteOnFieldChange_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5546]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->ccols;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->columns,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5564]);




}

void __RPC_STUB IRowsetNotify_RemoteOnFieldChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetNotify_RemoteOnFieldChange_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetNotify_RemoteOnFieldChange_Stub );
    __frame->rowset = 0;
    __frame->columns = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[624]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5546],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HROW) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->row = *(HROW *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HROW);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBORDINAL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ccols = *(DBORDINAL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->columns,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5564],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBREASON) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->reason = *(DBREASON *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBREASON);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBEVENTPHASE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->phase = *(DBEVENTPHASE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cantdeny = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetNotify_OnFieldChange_Stub(__frame->_This, __frame->rowset, __frame->row, __frame->ccols, __frame->columns, __frame->reason, __frame->phase, __frame->cantdeny);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetNotify_RemoteOnFieldChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowsetNotify_RemoteOnRowChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetNotify_RemoteOnRowChange_Proxy(
    IRowsetNotify* This,
    IRowset *rowset,
    DBCOUNTITEM rows,
    HROW *hrows,
    DBREASON reason,
    DBEVENTPHASE phase,
    BOOL cantdeny)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetNotify_RemoteOnRowChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!hrows) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5578]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)rows;

            NdrConformantArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)hrows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5596]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5578]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = rows;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)rows;

            NdrConformantArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)hrows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5596]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBREASON *)__frame->_StubMsg.Buffer = reason;
            __frame->_StubMsg.Buffer += sizeof(DBREASON);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBEVENTPHASE *)__frame->_StubMsg.Buffer = phase;
            __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = cantdeny;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[644]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetNotify_RemoteOnRowChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetNotify_RemoteOnRowChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetNotify * _This;
    HRESULT _RetVal;
    IRowset * rowset;
    DBCOUNTITEM rows;
    HROW * hrows;
    DBREASON reason;
    DBEVENTPHASE phase;
    BOOL cantdeny;
};

static void __finally_IRowsetNotify_RemoteOnRowChange_Stub( struct __frame_IRowsetNotify_RemoteOnRowChange_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5578]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->rows;

    NdrConformantArrayFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->hrows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5596]);




}

void __RPC_STUB IRowsetNotify_RemoteOnRowChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetNotify_RemoteOnRowChange_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetNotify_RemoteOnRowChange_Stub );
    __frame->rowset = 0;
    __frame->hrows = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[644]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5578],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->rows = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        NdrConformantArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->hrows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5596],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBREASON) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->reason = *(DBREASON *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBREASON);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBEVENTPHASE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->phase = *(DBEVENTPHASE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cantdeny = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetNotify_OnRowChange_Stub(__frame->_This, __frame->rowset, __frame->rows, __frame->hrows, __frame->reason, __frame->phase, __frame->cantdeny);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetNotify_RemoteOnRowChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowsetNotify_RemoteOnRowsetChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetNotify_RemoteOnRowsetChange_Proxy(
    IRowsetNotify* This,
    IRowset *rowset,
    DBREASON reason,
    DBEVENTPHASE phase,
    BOOL cantdeny)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetNotify_RemoteOnRowsetChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5610]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5610]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBREASON *)__frame->_StubMsg.Buffer = reason;
            __frame->_StubMsg.Buffer += sizeof(DBREASON);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBEVENTPHASE *)__frame->_StubMsg.Buffer = phase;
            __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = cantdeny;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[662]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetNotify_RemoteOnRowsetChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetNotify_RemoteOnRowsetChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetNotify * _This;
    HRESULT _RetVal;
    IRowset * rowset;
    DBREASON reason;
    DBEVENTPHASE phase;
    BOOL cantdeny;
};

static void __finally_IRowsetNotify_RemoteOnRowsetChange_Stub( struct __frame_IRowsetNotify_RemoteOnRowsetChange_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5610]);




}

void __RPC_STUB IRowsetNotify_RemoteOnRowsetChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetNotify_RemoteOnRowsetChange_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetNotify_RemoteOnRowsetChange_Stub );
    __frame->rowset = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[662]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5610],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBREASON) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->reason = *(DBREASON *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBREASON);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBEVENTPHASE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->phase = *(DBEVENTPHASE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cantdeny = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetNotify_OnRowsetChange_Stub(__frame->_This, __frame->rowset, __frame->reason, __frame->phase, __frame->cantdeny);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetNotify_RemoteOnRowsetChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IRowsetNotify_FormatStringOffsetTable[] =
{
    624,  /* IRowsetNotify::RemoteOnFieldChange */
    644,  /* IRowsetNotify::RemoteOnRowChange */
    662,  /* IRowsetNotify::RemoteOnRowsetChange */
};

static const CINTERFACE_PROXY_VTABLE(6) _IRowsetNotifyProxyVtbl =
{
    {
        &IID_IRowsetNotify,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IRowsetNotify_OnFieldChange_Proxy,
        IRowsetNotify_OnRowChange_Proxy,
        IRowsetNotify_OnRowsetChange_Proxy,
    }
};

static const MIDL_SERVER_INFO IRowsetNotify_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IRowsetNotify_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IRowsetNotify_table[] =
{
    IRowsetNotify_RemoteOnFieldChange_Stub,
    IRowsetNotify_RemoteOnRowChange_Stub,
    IRowsetNotify_RemoteOnRowsetChange_Stub
};

static const CInterfaceStubVtbl _IRowsetNotifyStubVtbl =
{
    {
        &IID_IRowsetNotify,
        &IRowsetNotify_ServerInfo,
        6,
        &IRowsetNotify_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IOpenRowset interface
 */
static void __finally_IOpenRowset_RemoteOpenRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IOpenRowset_RemoteOpenRowset_Proxy(
    IOpenRowset* This,
    IUnknown *pUnkOuter,
    DBID *pTableID,
    DBID *pIndexID,
    REFIID riid,
    ULONG cPropertySets,
    DBPROPSET *rgPropertySets,
    IUnknown **ppRowset,
    ULONG cTotalProps,
    DBPROPSTATUS *rgPropStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IOpenRowset_RemoteOpenRowset_Proxy );
    __frame->This = This;
    if (rgPropStatus) MIDL_memset( rgPropStatus, 0, sizeof( *rgPropStatus ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgPropStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 36;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5628]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pTableID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5646]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pIndexID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5650]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5628]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pTableID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5646]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pIndexID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5650]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cTotalProps;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[674]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgPropStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5704],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5736],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IOpenRowset_RemoteOpenRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5700], (void *)ppRowset );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)cTotalProps;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5714], (void *)rgPropStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5736], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IOpenRowset_RemoteOpenRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IOpenRowset * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    DBID * pTableID;
    DBID * pIndexID;
    REFIID riid;
    ULONG cPropertySets;
    DBPROPSET * rgPropertySets;
    IUnknown ** ppRowset;
    ULONG cTotalProps;
    DBPROPSTATUS * rgPropStatus;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IOpenRowset_RemoteOpenRowset_Stub( struct __frame_IOpenRowset_RemoteOpenRowset_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5628]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pTableID,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5646]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pIndexID,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5650]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5714]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5736]);

}

void __RPC_STUB IOpenRowset_RemoteOpenRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IOpenRowset_RemoteOpenRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (IOpenRowset*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IOpenRowset_RemoteOpenRowset_Stub );
    __frame->pUnkOuter = 0;
    __frame->pTableID = 0;
    __frame->pIndexID = 0;
    __frame->riid = 0;
    __frame->rgPropertySets = 0;
    __frame->ppRowset = 0;
    __frame->rgPropStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[674]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5628],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pTableID,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5646],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pIndexID,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5650],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cTotalProps = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgPropStatus = NdrAllocate(&__frame->_StubMsg, __frame->cTotalProps * 4);
        memset(__frame->rgPropStatus, 0, __frame->cTotalProps * 4);
        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IOpenRowset_OpenRowset_Stub(__frame->_This, __frame->pUnkOuter, __frame->pTableID, __frame->pIndexID, __frame->riid, __frame->cPropertySets, __frame->rgPropertySets, __frame->ppRowset, __frame->cTotalProps, __frame->rgPropStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5704]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5736]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5704]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5736]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IOpenRowset_RemoteOpenRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IOpenRowset_FormatStringOffsetTable[] =
{
    674,  /* IOpenRowset::RemoteOpenRowset */
};

static const CINTERFACE_PROXY_VTABLE(4) _IOpenRowsetProxyVtbl =
{
    {
        &IID_IOpenRowset,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IOpenRowset_OpenRowset_Proxy,
    }
};

static const MIDL_SERVER_INFO IOpenRowset_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IOpenRowset_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IOpenRowset_table[] =
{
    IOpenRowset_RemoteOpenRowset_Stub
};

static const CInterfaceStubVtbl _IOpenRowsetStubVtbl =
{
    {
        &IID_IOpenRowset,
        &IOpenRowset_ServerInfo,
        4,
        &IOpenRowset_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IRowPosition interface
 */
static void __finally_IRowPosition_RemoteClearRowPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPosition_RemoteClearRowPosition_Proxy(
    IRowPosition* This,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPosition_RemoteClearRowPosition_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[712]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5758],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPosition_RemoteClearRowPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5758], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPosition_RemoteClearRowPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPosition * _This;
    HRESULT _RetVal;
    IErrorInfo *_W0;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPosition_RemoteClearRowPosition_Stub( struct __frame_IRowPosition_RemoteClearRowPosition_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5758]);

}

void __RPC_STUB IRowPosition_RemoteClearRowPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPosition_RemoteClearRowPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPosition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPosition_RemoteClearRowPosition_Stub );
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[712]);


        __frame->errorinfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPosition_ClearRowPosition_Stub(__frame->_This, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5758]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5758]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPosition_RemoteClearRowPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowPosition_RemoteGetRowPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPosition_RemoteGetRowPosition_Proxy(
    IRowPosition* This,
    HCHAPTER *chapter,
    HROW *row,
    DBPOSITIONFLAGS *position_flags,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPosition_RemoteGetRowPosition_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!chapter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!row) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!position_flags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *chapter = *(HCHAPTER *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HROW) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *row = *(HROW *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HROW);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBPOSITIONFLAGS) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *position_flags = *(DBPOSITIONFLAGS *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBPOSITIONFLAGS);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5792],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPosition_RemoteGetRowPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5762], (void *)chapter );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5766], (void *)row );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5770], (void *)position_flags );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5792], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPosition_RemoteGetRowPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPosition * _This;
    HRESULT _RetVal;
    HCHAPTER _W0;
    HCHAPTER * chapter;
    HROW _W1;
    HROW * row;
    DBPOSITIONFLAGS _W2;
    DBPOSITIONFLAGS * position_flags;
    IErrorInfo *_W3;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPosition_RemoteGetRowPosition_Stub( struct __frame_IRowPosition_RemoteGetRowPosition_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5792]);

}

void __RPC_STUB IRowPosition_RemoteGetRowPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPosition_RemoteGetRowPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPosition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPosition_RemoteGetRowPosition_Stub );
    __frame->chapter = 0;
    __frame->row = 0;
    __frame->position_flags = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);


        __frame->chapter = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->row = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->position_flags = &__frame->_W2;
        __frame->_W2 = 0;
        __frame->errorinfo = &__frame->_W3;
        __frame->_W3 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPosition_GetRowPosition_Stub(__frame->_This, __frame->chapter, __frame->row, __frame->position_flags, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5792]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HCHAPTER *)__frame->_StubMsg.Buffer = *__frame->chapter;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HROW *)__frame->_StubMsg.Buffer = *__frame->row;
        __frame->_StubMsg.Buffer += sizeof(HROW);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBPOSITIONFLAGS *)__frame->_StubMsg.Buffer = *__frame->position_flags;
        __frame->_StubMsg.Buffer += sizeof(DBPOSITIONFLAGS);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5792]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPosition_RemoteGetRowPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowPosition_RemoteGetRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPosition_RemoteGetRowset_Proxy(
    IRowPosition* This,
    REFIID riid,
    IUnknown **rowset,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPosition_RemoteGetRowset_Proxy );
    __frame->This = This;
    if (rowset) MIDL_memset( rowset, 0, sizeof( *rowset ));
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rowset) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[736]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5806],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5828],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPosition_RemoteGetRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5806], (void *)rowset );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5828], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPosition_RemoteGetRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPosition * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** rowset;
    IErrorInfo *_W1;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPosition_RemoteGetRowset_Stub( struct __frame_IRowPosition_RemoteGetRowset_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5806]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5828]);

}

void __RPC_STUB IRowPosition_RemoteGetRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPosition_RemoteGetRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPosition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPosition_RemoteGetRowset_Stub );
    __frame->riid = 0;
    __frame->rowset = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[736]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->rowset = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->errorinfo = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPosition_GetRowset_Stub(__frame->_This, __frame->riid, __frame->rowset, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5806]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5828]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5806]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5828]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPosition_RemoteGetRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowPosition_RemoteInitialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPosition_RemoteInitialize_Proxy(
    IRowPosition* This,
    IUnknown *rowset,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPosition_RemoteInitialize_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5832]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5832]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[750]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5868],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPosition_RemoteInitialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5868], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPosition_RemoteInitialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPosition * _This;
    HRESULT _RetVal;
    IUnknown * rowset;
    IErrorInfo *_W0;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPosition_RemoteInitialize_Stub( struct __frame_IRowPosition_RemoteInitialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5832]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5868]);

}

void __RPC_STUB IRowPosition_RemoteInitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPosition_RemoteInitialize_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPosition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPosition_RemoteInitialize_Stub );
    __frame->rowset = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[750]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5832],
            0);


        __frame->errorinfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPosition_Initialize_Stub(__frame->_This, __frame->rowset, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5868]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5868]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPosition_RemoteInitialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowPosition_RemoteSetRowPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPosition_RemoteSetRowPosition_Proxy(
    IRowPosition* This,
    HCHAPTER chapter,
    HROW row,
    DBPOSITIONFLAGS flags,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPosition_RemoteSetRowPosition_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HCHAPTER *)__frame->_StubMsg.Buffer = chapter;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HROW *)__frame->_StubMsg.Buffer = row;
            __frame->_StubMsg.Buffer += sizeof(HROW);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBPOSITIONFLAGS *)__frame->_StubMsg.Buffer = flags;
            __frame->_StubMsg.Buffer += sizeof(DBPOSITIONFLAGS);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[760]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5890],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPosition_RemoteSetRowPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5890], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPosition_RemoteSetRowPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPosition * _This;
    HRESULT _RetVal;
    HCHAPTER chapter;
    HROW row;
    DBPOSITIONFLAGS flags;
    IErrorInfo *_W0;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPosition_RemoteSetRowPosition_Stub( struct __frame_IRowPosition_RemoteSetRowPosition_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5890]);

}

void __RPC_STUB IRowPosition_RemoteSetRowPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPosition_RemoteSetRowPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPosition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPosition_RemoteSetRowPosition_Stub );
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[760]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->chapter = *(HCHAPTER *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HROW) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->row = *(HROW *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HROW);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBPOSITIONFLAGS) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->flags = *(DBPOSITIONFLAGS *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBPOSITIONFLAGS);


        __frame->errorinfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPosition_SetRowPosition_Stub(__frame->_This, __frame->chapter, __frame->row, __frame->flags, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5890]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5890]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPosition_RemoteSetRowPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IRowPosition_FormatStringOffsetTable[] =
{
    712,  /* IRowPosition::RemoteClearRowPosition */
    718,  /* IRowPosition::RemoteGetRowPosition */
    736,  /* IRowPosition::RemoteGetRowset */
    750,  /* IRowPosition::RemoteInitialize */
    760,  /* IRowPosition::RemoteSetRowPosition */
};

static const CINTERFACE_PROXY_VTABLE(8) _IRowPositionProxyVtbl =
{
    {
        &IID_IRowPosition,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IRowPosition_ClearRowPosition_Proxy,
        IRowPosition_GetRowPosition_Proxy,
        IRowPosition_GetRowset_Proxy,
        IRowPosition_Initialize_Proxy,
        IRowPosition_SetRowPosition_Proxy,
    }
};

static const MIDL_SERVER_INFO IRowPosition_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IRowPosition_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IRowPosition_table[] =
{
    IRowPosition_RemoteClearRowPosition_Stub,
    IRowPosition_RemoteGetRowPosition_Stub,
    IRowPosition_RemoteGetRowset_Stub,
    IRowPosition_RemoteInitialize_Stub,
    IRowPosition_RemoteSetRowPosition_Stub
};

static const CInterfaceStubVtbl _IRowPositionStubVtbl =
{
    {
        &IID_IRowPosition,
        &IRowPosition_ServerInfo,
        8,
        &IRowPosition_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IRowPositionChange interface
 */
static void __finally_IRowPositionChange_RemoteOnRowPositionChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPositionChange_RemoteOnRowPositionChange_Proxy(
    IRowPositionChange* This,
    DBREASON reason,
    DBEVENTPHASE phase,
    BOOL cant_deny,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPositionChange_RemoteOnRowPositionChange_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBREASON *)__frame->_StubMsg.Buffer = reason;
            __frame->_StubMsg.Buffer += sizeof(DBREASON);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBEVENTPHASE *)__frame->_StubMsg.Buffer = phase;
            __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = cant_deny;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[772]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5912],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPositionChange_RemoteOnRowPositionChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5912], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPositionChange_RemoteOnRowPositionChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPositionChange * _This;
    HRESULT _RetVal;
    DBREASON reason;
    DBEVENTPHASE phase;
    BOOL cant_deny;
    IErrorInfo *_W0;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPositionChange_RemoteOnRowPositionChange_Stub( struct __frame_IRowPositionChange_RemoteOnRowPositionChange_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5912]);

}

void __RPC_STUB IRowPositionChange_RemoteOnRowPositionChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPositionChange_RemoteOnRowPositionChange_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPositionChange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPositionChange_RemoteOnRowPositionChange_Stub );
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[772]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBREASON) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->reason = *(DBREASON *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBREASON);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBEVENTPHASE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->phase = *(DBEVENTPHASE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cant_deny = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        __frame->errorinfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPositionChange_OnRowPositionChange_Stub(__frame->_This, __frame->reason, __frame->phase, __frame->cant_deny, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5912]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5912]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPositionChange_RemoteOnRowPositionChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IRowPositionChange_FormatStringOffsetTable[] =
{
    772,  /* IRowPositionChange::RemoteOnRowPositionChange */
};

static const CINTERFACE_PROXY_VTABLE(4) _IRowPositionChangeProxyVtbl =
{
    {
        &IID_IRowPositionChange,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IRowPositionChange_OnRowPositionChange_Proxy,
    }
};

static const MIDL_SERVER_INFO IRowPositionChange_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IRowPositionChange_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IRowPositionChange_table[] =
{
    IRowPositionChange_RemoteOnRowPositionChange_Stub
};

static const CInterfaceStubVtbl _IRowPositionChangeStubVtbl =
{
    {
        &IID_IRowPositionChange,
        &IRowPositionChange_ServerInfo,
        4,
        &IRowPositionChange_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IBindResource interface
 */
static void __finally_IBindResource_RemoteBind_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBindResource_RemoteBind_Proxy(
    IBindResource* This,
    IUnknown *pUnkOuter,
    LPCOLESTR pwszURL,
    DBBINDURLFLAG dwBindURLFlags,
    REFGUID rguid,
    REFIID riid,
    IAuthenticate *pAuthenticate,
    IUnknown *pSessionUnkOuter,
    IID *piid,
    IUnknown **ppSession,
    DBBINDURLSTATUS *pdwBindStatus,
    IUnknown **ppUnk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBindResource_RemoteBind_Proxy );
    __frame->This = This;
    if (ppUnk) MIDL_memset( ppUnk, 0, sizeof( *ppUnk ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pwszURL) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppUnk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 92;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5916]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pwszURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5936]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pAuthenticate,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5946]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSessionUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5964]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5992]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5916]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pwszURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5936]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBBINDURLFLAG *)__frame->_StubMsg.Buffer = dwBindURLFlags;
            __frame->_StubMsg.Buffer += sizeof(DBBINDURLFLAG);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pAuthenticate,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5946]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSessionUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5964]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)piid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5982]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5992]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdwBindStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5996]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[784]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5992],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pdwBindStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5996],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppUnk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6006],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBindResource_RemoteBind_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5992], (void *)ppSession );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5996], (void *)pdwBindStatus );

        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6006], (void *)ppUnk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBindResource_RemoteBind_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBindResource * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    LPCOLESTR pwszURL;
    DBBINDURLFLAG dwBindURLFlags;
    REFGUID rguid;
    REFIID riid;
    IAuthenticate * pAuthenticate;
    IUnknown * pSessionUnkOuter;
    IID * piid;
    IUnknown ** ppSession;
    DBBINDURLSTATUS * pdwBindStatus;
    IUnknown *_W0;
    IUnknown ** ppUnk;
};

static void __finally_IBindResource_RemoteBind_Stub( struct __frame_IBindResource_RemoteBind_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5916]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pwszURL,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5934]);




    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pAuthenticate,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5946]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSessionUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5964]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->piid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5982]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSession,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5992]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdwBindStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5996]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppUnk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6006]);

}

void __RPC_STUB IBindResource_RemoteBind_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBindResource_RemoteBind_Stub __f, * const __frame = &__f;

    __frame->_This = (IBindResource*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBindResource_RemoteBind_Stub );
    __frame->pUnkOuter = 0;
    __frame->pwszURL = 0;
    __frame->rguid = 0;
    __frame->riid = 0;
    __frame->pAuthenticate = 0;
    __frame->pSessionUnkOuter = 0;
    __frame->piid = 0;
    __frame->ppSession = 0;
    __frame->pdwBindStatus = 0;
    __frame->ppUnk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[784]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5916],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pwszURL,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5936],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBBINDURLFLAG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwBindURLFlags = *(DBBINDURLFLAG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBBINDURLFLAG);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pAuthenticate,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5946],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSessionUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5964],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->piid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5982],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5992],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdwBindStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5996],
            0);


        __frame->ppUnk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IBindResource_Bind_Stub(__frame->_This, __frame->pUnkOuter, __frame->pwszURL, __frame->dwBindURLFlags, __frame->rguid, __frame->riid, __frame->pAuthenticate, __frame->pSessionUnkOuter, __frame->piid, __frame->ppSession, __frame->pdwBindStatus, __frame->ppUnk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5992]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6006]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5992]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pdwBindStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5996]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6006]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBindResource_RemoteBind_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IBindResource_FormatStringOffsetTable[] =
{
    784,  /* IBindResource::RemoteBind */
};

static const CINTERFACE_PROXY_VTABLE(4) _IBindResourceProxyVtbl =
{
    {
        &IID_IBindResource,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IBindResource_Bind_Proxy,
    }
};

static const MIDL_SERVER_INFO IBindResource_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IBindResource_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IBindResource_table[] =
{
    IBindResource_RemoteBind_Stub
};

static const CInterfaceStubVtbl _IBindResourceStubVtbl =
{
    {
        &IID_IBindResource,
        &IBindResource_ServerInfo,
        4,
        &IBindResource_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICreateRow interface
 */
static void __finally_ICreateRow_RemoteCreateRow_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICreateRow_RemoteCreateRow_Proxy(
    ICreateRow* This,
    IUnknown *pUnkOuter,
    LPCOLESTR pwszURL,
    DBBINDURLFLAG dwBindURLFlags,
    REFGUID rguid,
    REFIID riid,
    IAuthenticate *pAuthenticate,
    IUnknown *pSessionUnkOuter,
    IID *piid,
    IUnknown **ppSession,
    DBBINDURLSTATUS *pdwBindStatus,
    LPOLESTR *ppwszNewURL,
    IUnknown **ppUnk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICreateRow_RemoteCreateRow_Proxy );
    __frame->This = This;
    if (ppUnk) MIDL_memset( ppUnk, 0, sizeof( *ppUnk ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pwszURL) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppUnk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 92;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6010]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pwszURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6030]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pAuthenticate,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6040]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSessionUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6058]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6086]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppwszNewURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6094]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6010]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pwszURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6030]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBBINDURLFLAG *)__frame->_StubMsg.Buffer = dwBindURLFlags;
            __frame->_StubMsg.Buffer += sizeof(DBBINDURLFLAG);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pAuthenticate,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6040]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSessionUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6058]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)piid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6076]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6086]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdwBindStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6090]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppwszNewURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6094]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[828]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6086],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pdwBindStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6090],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppwszNewURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6094],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppUnk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6108],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICreateRow_RemoteCreateRow_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6086], (void *)ppSession );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6090], (void *)pdwBindStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6098], (void *)ppwszNewURL );

        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6108], (void *)ppUnk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICreateRow_RemoteCreateRow_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICreateRow * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    LPCOLESTR pwszURL;
    DBBINDURLFLAG dwBindURLFlags;
    REFGUID rguid;
    REFIID riid;
    IAuthenticate * pAuthenticate;
    IUnknown * pSessionUnkOuter;
    IID * piid;
    IUnknown ** ppSession;
    DBBINDURLSTATUS * pdwBindStatus;
    LPOLESTR * ppwszNewURL;
    IUnknown *_W0;
    IUnknown ** ppUnk;
};

static void __finally_ICreateRow_RemoteCreateRow_Stub( struct __frame_ICreateRow_RemoteCreateRow_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6010]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pwszURL,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6028]);




    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pAuthenticate,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6040]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSessionUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6058]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->piid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6076]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSession,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6086]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdwBindStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6090]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppwszNewURL,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6094]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppUnk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6108]);

}

void __RPC_STUB ICreateRow_RemoteCreateRow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICreateRow_RemoteCreateRow_Stub __f, * const __frame = &__f;

    __frame->_This = (ICreateRow*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICreateRow_RemoteCreateRow_Stub );
    __frame->pUnkOuter = 0;
    __frame->pwszURL = 0;
    __frame->rguid = 0;
    __frame->riid = 0;
    __frame->pAuthenticate = 0;
    __frame->pSessionUnkOuter = 0;
    __frame->piid = 0;
    __frame->ppSession = 0;
    __frame->pdwBindStatus = 0;
    __frame->ppwszNewURL = 0;
    __frame->ppUnk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[828]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6010],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pwszURL,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6030],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBBINDURLFLAG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwBindURLFlags = *(DBBINDURLFLAG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBBINDURLFLAG);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[300],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pAuthenticate,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6040],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSessionUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6058],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->piid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6076],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6086],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdwBindStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6090],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppwszNewURL,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6094],
            0);


        __frame->ppUnk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICreateRow_CreateRow_Stub(__frame->_This, __frame->pUnkOuter, __frame->pwszURL, __frame->dwBindURLFlags, __frame->rguid, __frame->riid, __frame->pAuthenticate, __frame->pSessionUnkOuter, __frame->piid, __frame->ppSession, __frame->pdwBindStatus, __frame->ppwszNewURL, __frame->ppUnk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6086]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszNewURL,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6094]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6108]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6086]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pdwBindStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6090]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszNewURL,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6094]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6108]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICreateRow_RemoteCreateRow_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICreateRow_FormatStringOffsetTable[] =
{
    828,  /* ICreateRow::RemoteCreateRow */
};

static const CINTERFACE_PROXY_VTABLE(4) _ICreateRowProxyVtbl =
{
    {
        &IID_ICreateRow,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICreateRow_CreateRow_Proxy,
    }
};

static const MIDL_SERVER_INFO ICreateRow_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICreateRow_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICreateRow_table[] =
{
    ICreateRow_RemoteCreateRow_Stub
};

static const CInterfaceStubVtbl _ICreateRowStubVtbl =
{
    {
        &IID_ICreateRow,
        &ICreateRow_ServerInfo,
        4,
        &ICreateRow_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IErrorRecords interface
 */
static void __finally_IErrorRecords_RemoteAddErrorRecord_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteAddErrorRecord_Proxy(
    IErrorRecords* This,
    ERRORINFO *pErrorInfo,
    DWORD dwLookupID,
    DISPPARAMS *pdispparams,
    IUnknown *punkCustomError,
    DWORD dwDynamicErrorID,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteAddErrorRecord_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pErrorInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pdispparams) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 64;
            NdrSimpleStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdispparams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6170]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)punkCustomError,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6206]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pErrorInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6112]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwLookupID;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdispparams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6170]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)punkCustomError,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6206]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwDynamicErrorID;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[876]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6242],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteAddErrorRecord_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6242], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteAddErrorRecord_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ERRORINFO * pErrorInfo;
    DWORD dwLookupID;
    DISPPARAMS * pdispparams;
    IUnknown * punkCustomError;
    DWORD dwDynamicErrorID;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteAddErrorRecord_Stub( struct __frame_IErrorRecords_RemoteAddErrorRecord_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdispparams,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6202]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->punkCustomError,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6206]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6242]);

}

void __RPC_STUB IErrorRecords_RemoteAddErrorRecord_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteAddErrorRecord_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteAddErrorRecord_Stub );
    __frame->pErrorInfo = 0;
    __frame->pdispparams = 0;
    __frame->punkCustomError = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[876]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pErrorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6112],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwLookupID = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdispparams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6170],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->punkCustomError,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6206],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwDynamicErrorID = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_AddErrorRecord_Stub(__frame->_This, __frame->pErrorInfo, __frame->dwLookupID, __frame->pdispparams, __frame->punkCustomError, __frame->dwDynamicErrorID, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6242]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6242]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteAddErrorRecord_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IErrorRecords_RemoteGetBasicErrorInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteGetBasicErrorInfo_Proxy(
    IErrorRecords* This,
    ULONG ulRecordNum,
    ERRORINFO *pErrorInfo,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteGetBasicErrorInfo_Proxy );
    __frame->This = This;
    if (pErrorInfo) MIDL_memset( pErrorInfo, 0, sizeof( *pErrorInfo ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pErrorInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulRecordNum;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[898]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pErrorInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6112],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6268],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteGetBasicErrorInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6246], (void *)pErrorInfo );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6268], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteGetBasicErrorInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ULONG ulRecordNum;
    ERRORINFO _W0;
    ERRORINFO * pErrorInfo;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteGetBasicErrorInfo_Stub( struct __frame_IErrorRecords_RemoteGetBasicErrorInfo_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6268]);

}

void __RPC_STUB IErrorRecords_RemoteGetBasicErrorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteGetBasicErrorInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteGetBasicErrorInfo_Stub );
    __frame->pErrorInfo = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[898]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulRecordNum = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pErrorInfo = &__frame->_W0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_GetBasicErrorInfo_Stub(__frame->_This, __frame->ulRecordNum, __frame->pErrorInfo, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 56;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6268]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pErrorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6112]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6268]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteGetBasicErrorInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IErrorRecords_RemoteGetCustomErrorObject_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteGetCustomErrorObject_Proxy(
    IErrorRecords* This,
    ULONG ulRecordNum,
    REFIID riid,
    IUnknown **ppObject,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteGetCustomErrorObject_Proxy );
    __frame->This = This;
    if (ppObject) MIDL_memset( ppObject, 0, sizeof( *ppObject ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppObject) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulRecordNum;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[910]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6294],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6316],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteGetCustomErrorObject_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6294], (void *)ppObject );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6316], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteGetCustomErrorObject_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ULONG ulRecordNum;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppObject;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteGetCustomErrorObject_Stub( struct __frame_IErrorRecords_RemoteGetCustomErrorObject_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6294]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6316]);

}

void __RPC_STUB IErrorRecords_RemoteGetCustomErrorObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteGetCustomErrorObject_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteGetCustomErrorObject_Stub );
    __frame->riid = 0;
    __frame->ppObject = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[910]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulRecordNum = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppObject = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_GetCustomErrorObject_Stub(__frame->_This, __frame->ulRecordNum, __frame->riid, __frame->ppObject, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6294]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6316]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6294]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6316]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteGetCustomErrorObject_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IErrorRecords_RemoteGetErrorInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteGetErrorInfo_Proxy(
    IErrorRecords* This,
    ULONG ulRecordNum,
    LCID lcid,
    IErrorInfo **ppErrorInfo,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteGetErrorInfo_Proxy );
    __frame->This = This;
    if (ppErrorInfo) MIDL_memset( ppErrorInfo, 0, sizeof( *ppErrorInfo ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppErrorInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulRecordNum;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LCID *)__frame->_StubMsg.Buffer = lcid;
            __frame->_StubMsg.Buffer += sizeof(LCID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[926]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6338],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6360],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteGetErrorInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6338], (void *)ppErrorInfo );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6360], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteGetErrorInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ULONG ulRecordNum;
    LCID lcid;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfo;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteGetErrorInfo_Stub( struct __frame_IErrorRecords_RemoteGetErrorInfo_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6338]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6360]);

}

void __RPC_STUB IErrorRecords_RemoteGetErrorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteGetErrorInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteGetErrorInfo_Stub );
    __frame->ppErrorInfo = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[926]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulRecordNum = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LCID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lcid = *(LCID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LCID);


        __frame->ppErrorInfo = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_GetErrorInfo_Stub(__frame->_This, __frame->ulRecordNum, __frame->lcid, __frame->ppErrorInfo, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6338]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6360]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6338]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6360]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteGetErrorInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IErrorRecords_RemoteGetErrorParameters_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteGetErrorParameters_Proxy(
    IErrorRecords* This,
    ULONG ulRecordNum,
    DISPPARAMS *pdispparams,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteGetErrorParameters_Proxy );
    __frame->This = This;
    if (pdispparams) MIDL_memset( pdispparams, 0, sizeof( *pdispparams ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pdispparams) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulRecordNum;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[940]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pdispparams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6170],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6386],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteGetErrorParameters_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6364], (void *)pdispparams );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6386], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteGetErrorParameters_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ULONG ulRecordNum;
    DISPPARAMS _W0;
    DISPPARAMS * pdispparams;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteGetErrorParameters_Stub( struct __frame_IErrorRecords_RemoteGetErrorParameters_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdispparams,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6364]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6386]);

}

void __RPC_STUB IErrorRecords_RemoteGetErrorParameters_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteGetErrorParameters_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteGetErrorParameters_Stub );
    __frame->pdispparams = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[940]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulRecordNum = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pdispparams = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_GetErrorParameters_Stub(__frame->_This, __frame->ulRecordNum, __frame->pdispparams, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrSimpleStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pdispparams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6170]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6386]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pdispparams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6170]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6386]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteGetErrorParameters_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IErrorRecords_RemoteGetRecordCount_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteGetRecordCount_Proxy(
    IErrorRecords* This,
    ULONG *pcRecords,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteGetRecordCount_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pcRecords) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[952]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcRecords = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6412],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteGetRecordCount_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6390], (void *)pcRecords );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[6412], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteGetRecordCount_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ULONG _W0;
    ULONG * pcRecords;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteGetRecordCount_Stub( struct __frame_IErrorRecords_RemoteGetRecordCount_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6412]);

}

void __RPC_STUB IErrorRecords_RemoteGetRecordCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteGetRecordCount_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteGetRecordCount_Stub );
    __frame->pcRecords = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[952]);


        __frame->pcRecords = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_GetRecordCount_Stub(__frame->_This, __frame->pcRecords, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6412]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcRecords;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[6412]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteGetRecordCount_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IErrorRecords_FormatStringOffsetTable[] =
{
    876,  /* IErrorRecords::RemoteAddErrorRecord */
    898,  /* IErrorRecords::RemoteGetBasicErrorInfo */
    910,  /* IErrorRecords::RemoteGetCustomErrorObject */
    926,  /* IErrorRecords::RemoteGetErrorInfo */
    940,  /* IErrorRecords::RemoteGetErrorParameters */
    952,  /* IErrorRecords::RemoteGetRecordCount */
};

static const CINTERFACE_PROXY_VTABLE(9) _IErrorRecordsProxyVtbl =
{
    {
        &IID_IErrorRecords,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IErrorRecords_AddErrorRecord_Proxy,
        IErrorRecords_GetBasicErrorInfo_Proxy,
        IErrorRecords_GetCustomErrorObject_Proxy,
        IErrorRecords_GetErrorInfo_Proxy,
        IErrorRecords_GetErrorParameters_Proxy,
        IErrorRecords_GetRecordCount_Proxy,
    }
};

static const MIDL_SERVER_INFO IErrorRecords_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IErrorRecords_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IErrorRecords_table[] =
{
    IErrorRecords_RemoteAddErrorRecord_Stub,
    IErrorRecords_RemoteGetBasicErrorInfo_Stub,
    IErrorRecords_RemoteGetCustomErrorObject_Stub,
    IErrorRecords_RemoteGetErrorInfo_Stub,
    IErrorRecords_RemoteGetErrorParameters_Stub,
    IErrorRecords_RemoteGetRecordCount_Stub
};

static const CInterfaceStubVtbl _IErrorRecordsStubVtbl =
{
    {
        &IID_IErrorRecords,
        &IErrorRecords_ServerInfo,
        9,
        &IErrorRecords_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

static void __RPC_USER msdaps_DBBINDEXTExprEval_0000(PMIDL_STUB_MESSAGE pStubMsg)
{
    DBBINDEXT *pS = (DBBINDEXT *)(pStubMsg->StackTop - 0);
    pStubMsg->Offset = 0;
    pStubMsg->MaxCount = (ULONG_PTR)(ULONG)pS->ulExtension;
}

static void __RPC_USER msdaps_CLIPDATAExprEval_0001(PMIDL_STUB_MESSAGE pStubMsg)
{
    CLIPDATA *pS = (CLIPDATA *)(pStubMsg->StackTop - 0);
    pStubMsg->Offset = 0;
    pStubMsg->MaxCount = (ULONG_PTR)(pS->cbSize - sizeof(LONG));
}

static void __RPC_USER msdaps_PROPVARIANTExprEval_0002(PMIDL_STUB_MESSAGE pStubMsg)
{
    PROPVARIANT *pS = (PROPVARIANT *)(pStubMsg->StackTop - 8);
    pStubMsg->Offset = 0;
    pStubMsg->MaxCount = (ULONG_PTR)(pS->vt & 0x1fff);
}

static const EXPR_EVAL ExprEvalRoutines[] =
{
    msdaps_DBBINDEXTExprEval_0000,
    msdaps_CLIPDATAExprEval_0001,
    msdaps_PROPVARIANTExprEval_0002,
};

static const USER_MARSHAL_ROUTINE_QUADRUPLE UserMarshalRoutines[] =
{
    {
        (USER_MARSHAL_SIZING_ROUTINE)VARIANT_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)VARIANT_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)VARIANT_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)VARIANT_UserFree
    },
    {
        (USER_MARSHAL_SIZING_ROUTINE)BSTR_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)BSTR_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)BSTR_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)BSTR_UserFree
    },
    {
        (USER_MARSHAL_SIZING_ROUTINE)LPSAFEARRAY_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)LPSAFEARRAY_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)LPSAFEARRAY_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)LPSAFEARRAY_UserFree
    }
};

static const MIDL_STUB_DESC Object_StubDesc =
{
    0,
    NdrOleAllocate,
    NdrOleFree,
    {0}, 0, 0, ExprEvalRoutines, 0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    UserMarshalRoutines,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

#if !defined(__RPC_WIN32__)
#error Currently only Wine and WIN32 are supported.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 2 (parameter pcRefCount) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 6 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18),	/* type offset = 24 */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter dwAccessorFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 14 (parameter cBindings) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 16 (parameter rgBindings) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9e),	/* type offset = 158 */
/* 20 (parameter cbRowSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 22 (parameter phAccessor) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xa2),	/* type offset = 162 */
/* 26 (parameter rgStatus) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xb0),	/* type offset = 176 */
/* 30 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xc6),	/* type offset = 198 */
/* 34 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 36 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 38 (parameter pdwAccessorFlags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xca),	/* type offset = 202 */
/* 42 (parameter pcBindings) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xce),	/* type offset = 206 */
/* 46 (parameter prgBindings) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe8),	/* type offset = 232 */
/* 50 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xfe),	/* type offset = 254 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 58 (parameter pcRefCount) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x102),	/* type offset = 258 */
/* 62 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x118),	/* type offset = 280 */
/* 66 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 68 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 70 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x170),	/* type offset = 368 */
/* 74 (parameter pcPropertySets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x174),	/* type offset = 372 */
/* 78 (parameter prgPropertySets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6ae),	/* type offset = 1710 */
/* 82 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6c4),	/* type offset = 1732 */
/* 86 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 88 (parameter iOrdinal) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 90 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6c8),	/* type offset = 1736 */
/* 94 (parameter ppReferencedRowset) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6d2),	/* type offset = 1746 */
/* 98 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6e8),	/* type offset = 1768 */
/* 102 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 104 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6ec),	/* type offset = 1772 */
/* 108 (parameter ppSpecification) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6f6),	/* type offset = 1782 */
/* 112 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x70c),	/* type offset = 1804 */
/* 116 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 118 (parameter chapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 120 (parameter refcount) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x710),	/* type offset = 1808 */
/* 124 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x726),	/* type offset = 1830 */
/* 128 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter chapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 132 (parameter refcount) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x72a),	/* type offset = 1834 */
/* 136 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x740),	/* type offset = 1856 */
/* 140 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 142 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x756),	/* type offset = 1878 */
/* 146 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 148 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x75a),	/* type offset = 1882 */
/* 152 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x76c),	/* type offset = 1900 */
/* 156 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 158 (parameter cParamSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 160 (parameter pGuid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x770),	/* type offset = 1904 */
/* 164 (parameter ulGuidOffset) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 166 (parameter pInputParams) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xee2),	/* type offset = 3810 */
/* 170 (parameter pOutputParams) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xee6),	/* type offset = 3814 */
/* 174 (parameter cBindings) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 176 (parameter rgBindings) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xefc),	/* type offset = 3836 */
/* 180 (parameter rgStatus) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xf0a),	/* type offset = 3850 */
/* 184 (parameter pcRowsAffected) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xf0e),	/* type offset = 3854 */
/* 188 (parameter ppRowset) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xf18),	/* type offset = 3864 */
/* 192 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf1c),	/* type offset = 3868 */
/* 198 (parameter ppSession) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf26),	/* type offset = 3878 */
/* 202 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf3c),	/* type offset = 3900 */
/* 206 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 208 (parameter pguidDialect) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xf40),	/* type offset = 3904 */
/* 212 (parameter ppwszCommand) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf48),	/* type offset = 3912 */
/* 216 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf5e),	/* type offset = 3934 */
/* 220 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 222 (parameter rguidDialect) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf62),	/* type offset = 3938 */
/* 226 (parameter pwszCommand) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf66),	/* type offset = 3942 */
/* 230 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf7c),	/* type offset = 3964 */
/* 234 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 236 (parameter columns) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xf80),	/* type offset = 3968 */
/* 240 (parameter colinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xfcc),	/* type offset = 4044 */
/* 244 (parameter name_offsets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xfde),	/* type offset = 4062 */
/* 248 (parameter columnid_offsets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xff0),	/* type offset = 4080 */
/* 252 (parameter string_len) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xff4),	/* type offset = 4084 */
/* 256 (parameter stringsbuffer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1006),	/* type offset = 4102 */
/* 260 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x101c),	/* type offset = 4124 */
/* 264 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 266 (parameter column_ids) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 268 (parameter dbids) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1042),	/* type offset = 4162 */
/* 272 (parameter columns) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1058),	/* type offset = 4184 */
/* 276 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1078),	/* type offset = 4216 */
/* 280 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 282 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x107c),	/* type offset = 4220 */
/* 286 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x108e),	/* type offset = 4238 */
/* 290 (parameter ppCommand) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1098),	/* type offset = 4248 */
/* 294 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10ae),	/* type offset = 4270 */
/* 298 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 300 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10b2),	/* type offset = 4274 */
/* 304 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10c4),	/* type offset = 4292 */
/* 308 (parameter ppDBSession) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10ce),	/* type offset = 4302 */
/* 312 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10e4),	/* type offset = 4324 */
/* 316 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 318 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10e8),	/* type offset = 4328 */
/* 322 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10fa),	/* type offset = 4346 */
/* 326 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 328 (parameter rgProperties) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10fe),	/* type offset = 4350 */
/* 332 (parameter ppSourcesRowset) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1114),	/* type offset = 4372 */
/* 336 (parameter cTotalProps) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 338 (parameter rgPropStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1118),	/* type offset = 4376 */
/* 342 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x112e),	/* type offset = 4398 */
/* 346 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 348 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 350 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1174),	/* type offset = 4468 */
/* 354 (parameter pcPropertySets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1178),	/* type offset = 4472 */
/* 358 (parameter prgPropertySets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11a0),	/* type offset = 4512 */
/* 362 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11b6),	/* type offset = 4534 */
/* 366 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 368 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 370 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x11fc),	/* type offset = 4604 */
/* 374 (parameter pcPropertyInfoSets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1200),	/* type offset = 4608 */
/* 378 (parameter prgPropertyInfoSets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x126c),	/* type offset = 4716 */
/* 382 (parameter pcOffsets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1270),	/* type offset = 4720 */
/* 386 (parameter prgDescOffsets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1282),	/* type offset = 4738 */
/* 390 (parameter pcbDescBuffer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1286),	/* type offset = 4742 */
/* 394 (parameter ppDescBuffer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1298),	/* type offset = 4760 */
/* 398 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12ae),	/* type offset = 4782 */
/* 402 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 404 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 406 (parameter rgPropertySets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x12d2),	/* type offset = 4818 */
/* 410 (parameter cTotalProps) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 412 (parameter rgPropStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12d6),	/* type offset = 4822 */
/* 416 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12f6),	/* type offset = 4854 */
/* 420 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 422 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x130c),	/* type offset = 4876 */
/* 426 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 428 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1322),	/* type offset = 4898 */
/* 432 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 434 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 436 (parameter rgPropertySets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1346),	/* type offset = 4934 */
/* 440 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x134a),	/* type offset = 4938 */
/* 444 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x135c),	/* type offset = 4956 */
/* 448 (parameter ppDBSession) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1366),	/* type offset = 4966 */
/* 452 (parameter cTotalProps) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 454 (parameter rgPropStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x136a),	/* type offset = 4970 */
/* 458 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x138a),	/* type offset = 5002 */
/* 462 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 464 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13a0),	/* type offset = 5024 */
/* 468 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 470 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 472 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13e6),	/* type offset = 5094 */
/* 476 (parameter pcPropertyInfoSets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x13ea),	/* type offset = 5098 */
/* 480 (parameter prgPropertyInfoSets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1412),	/* type offset = 5138 */
/* 484 (parameter pcOffsets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1416),	/* type offset = 5142 */
/* 488 (parameter prgDescOffsets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1428),	/* type offset = 5160 */
/* 492 (parameter pcbDescBuffer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x142c),	/* type offset = 5164 */
/* 496 (parameter ppDescBuffer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x143e),	/* type offset = 5182 */
/* 500 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1454),	/* type offset = 5204 */
/* 504 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 506 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 508 (parameter rgPropertySets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1458),	/* type offset = 5208 */
/* 512 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x148e),	/* type offset = 5262 */
/* 516 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 518 (parameter dwReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 520 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 522 (parameter hChapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 524 (parameter eOperation) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 526 (parameter ulProgress) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 528 (parameter ulProgressMax) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 530 (parameter eAsynchPhase) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 532 (parameter pwszStatusText) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1492),	/* type offset = 5266 */
/* 536 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 538 (parameter hChapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 540 (parameter eOperation) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 542 (parameter hrStatus) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 544 (parameter pwszStatusText) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1496),	/* type offset = 5270 */
/* 548 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 550 (parameter hChapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 552 (parameter eOperation) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 554 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14ac),	/* type offset = 5292 */
/* 558 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 560 (parameter hChapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 562 (parameter eOperation) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 564 (parameter pulProgress) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x14b0),	/* type offset = 5296 */
/* 568 (parameter pulProgressMax) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x14b4),	/* type offset = 5300 */
/* 572 (parameter peAsynchPhase) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x14b8),	/* type offset = 5304 */
/* 576 (parameter ppwszStatusText) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x14c0),	/* type offset = 5312 */
/* 580 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14d6),	/* type offset = 5334 */
/* 584 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 586 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 588 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x151c),	/* type offset = 5404 */
/* 592 (parameter pcPropertySets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1520),	/* type offset = 5408 */
/* 596 (parameter prgPropertySets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1548),	/* type offset = 5448 */
/* 600 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x155e),	/* type offset = 5470 */
/* 604 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 606 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 608 (parameter rgPropertySets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1582),	/* type offset = 5506 */
/* 612 (parameter cTotalProps) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 614 (parameter rgPropStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1586),	/* type offset = 5510 */
/* 618 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x15a6),	/* type offset = 5542 */
/* 622 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 624 (parameter rowset) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15aa),	/* type offset = 5546 */
/* 628 (parameter row) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 630 (parameter ccols) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 632 (parameter columns) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15bc),	/* type offset = 5564 */
/* 636 (parameter reason) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 638 (parameter phase) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 640 (parameter cantdeny) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 642 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 644 (parameter rowset) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15ca),	/* type offset = 5578 */
/* 648 (parameter rows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 650 (parameter hrows) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15dc),	/* type offset = 5596 */
/* 654 (parameter reason) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 656 (parameter phase) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 658 (parameter cantdeny) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 660 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 662 (parameter rowset) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15ea),	/* type offset = 5610 */
/* 666 (parameter reason) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 668 (parameter phase) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 670 (parameter cantdeny) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 672 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 674 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15fc),	/* type offset = 5628 */
/* 678 (parameter pTableID) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x160e),	/* type offset = 5646 */
/* 682 (parameter pIndexID) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1612),	/* type offset = 5650 */
/* 686 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1616),	/* type offset = 5654 */
/* 690 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 692 (parameter rgPropertySets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x163a),	/* type offset = 5690 */
/* 696 (parameter ppRowset) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1644),	/* type offset = 5700 */
/* 700 (parameter cTotalProps) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 702 (parameter rgPropStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1648),	/* type offset = 5704 */
/* 706 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1668),	/* type offset = 5736 */
/* 710 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 712 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x167e),	/* type offset = 5758 */
/* 716 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 718 (parameter chapter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1682),	/* type offset = 5762 */
/* 722 (parameter row) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1686),	/* type offset = 5766 */
/* 726 (parameter position_flags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x168a),	/* type offset = 5770 */
/* 730 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16a0),	/* type offset = 5792 */
/* 734 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 736 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x16a4),	/* type offset = 5796 */
/* 740 (parameter rowset) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16ae),	/* type offset = 5806 */
/* 744 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16c4),	/* type offset = 5828 */
/* 748 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 750 (parameter rowset) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x16c8),	/* type offset = 5832 */
/* 754 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16ec),	/* type offset = 5868 */
/* 758 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 760 (parameter chapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 762 (parameter row) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 764 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 766 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1702),	/* type offset = 5890 */
/* 770 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 772 (parameter reason) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 774 (parameter phase) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 776 (parameter cant_deny) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 778 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1718),	/* type offset = 5912 */
/* 782 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 784 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x171c),	/* type offset = 5916 */
/* 788 (parameter pwszURL) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x172e),	/* type offset = 5934 */
/* 792 (parameter dwBindURLFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 794 (parameter rguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1732),	/* type offset = 5938 */
/* 798 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1736),	/* type offset = 5942 */
/* 802 (parameter pAuthenticate) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x173a),	/* type offset = 5946 */
/* 806 (parameter pSessionUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x174c),	/* type offset = 5964 */
/* 810 (parameter piid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x175e),	/* type offset = 5982 */
/* 814 (parameter ppSession) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1768),	/* type offset = 5992 */
/* 818 (parameter pdwBindStatus) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x176c),	/* type offset = 5996 */
/* 822 (parameter ppUnk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1776),	/* type offset = 6006 */
/* 826 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 828 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x177a),	/* type offset = 6010 */
/* 832 (parameter pwszURL) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x178c),	/* type offset = 6028 */
/* 836 (parameter dwBindURLFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 838 (parameter rguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1790),	/* type offset = 6032 */
/* 842 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1794),	/* type offset = 6036 */
/* 846 (parameter pAuthenticate) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1798),	/* type offset = 6040 */
/* 850 (parameter pSessionUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x17aa),	/* type offset = 6058 */
/* 854 (parameter piid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x17bc),	/* type offset = 6076 */
/* 858 (parameter ppSession) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x17c6),	/* type offset = 6086 */
/* 862 (parameter pdwBindStatus) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x17ca),	/* type offset = 6090 */
/* 866 (parameter ppwszNewURL) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x17d2),	/* type offset = 6098 */
/* 870 (parameter ppUnk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x17dc),	/* type offset = 6108 */
/* 874 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 876 (parameter pErrorInfo) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x17f0),	/* type offset = 6128 */
/* 880 (parameter dwLookupID) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 882 (parameter pdispparams) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x183a),	/* type offset = 6202 */
/* 886 (parameter punkCustomError) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x183e),	/* type offset = 6206 */
/* 890 (parameter dwDynamicErrorID) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 892 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1862),	/* type offset = 6242 */
/* 896 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 898 (parameter ulRecordNum) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 900 (parameter pErrorInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1866),	/* type offset = 6246 */
/* 904 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x187c),	/* type offset = 6268 */
/* 908 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 910 (parameter ulRecordNum) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 912 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1880),	/* type offset = 6272 */
/* 916 (parameter ppObject) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1896),	/* type offset = 6294 */
/* 920 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18ac),	/* type offset = 6316 */
/* 924 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 926 (parameter ulRecordNum) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 928 (parameter lcid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 930 (parameter ppErrorInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18c2),	/* type offset = 6338 */
/* 934 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18d8),	/* type offset = 6360 */
/* 938 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 940 (parameter ulRecordNum) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 942 (parameter pdispparams) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18dc),	/* type offset = 6364 */
/* 946 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18f2),	/* type offset = 6386 */
/* 950 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 952 (parameter pcRecords) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18f6),	/* type offset = 6390 */
/* 956 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x190c),	/* type offset = 6412 */
/* 960 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (DBREFCOUNT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 6 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 24 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (6) */
/* 28 (ITypeInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020401),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 46 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 52 (IID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (46) */
        0x5b,	/* FC_END */
/* 64 (DBOBJECT) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (52) */
        0x5b,	/* FC_END */
/* 74 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x10,	/* Corr desc: field pointer in DBBINDEXT */
        0x59,	/* FC_CALLBACK */
        NdrFcShort(0x0),	/* 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 84 (DBBINDEXT) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (74) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 104 (DBBINDING) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x34),	/* 52 */
        NdrFcShort(0x0),
        NdrFcShort(0x16),	/* Offset= 22 (132) */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffa6),	/* Offset= -90 (28) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 132 (DBOBJECT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffba),	/* Offset= -70 (64) */
/* 136 (DBBINDEXT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffca),	/* Offset= -54 (84) */
/* 140 (DBBINDING *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteCreateAccessor */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffce),	/* Offset= -50 (104) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 158 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (140) */
/* 162 (HACCESSOR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 166 (DBBINDSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for RemoteCreateAccessor */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 176 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (166) */
/* 180 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 198 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (180) */
/* 202 (DBACCESSORFLAGS *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 206 (DBCOUNTITEM *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 210 (DBBINDING *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteGetBindings */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff88),	/* Offset= -120 (104) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 228 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (210) */
/* 232 (DBBINDING **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (228) */
/* 236 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 254 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (236) */
/* 258 (DBREFCOUNT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 262 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 280 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (262) */
/* 284 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 294 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 300 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (294) */
        0x5b,	/* FC_END */
/* 312 (const DBPROPIDSET) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (284) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdf),	/* Offset= -33 (300) */
        0x5b,	/* FC_END */
/* 336 (const DBPROPIDSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter cPropertyIDSets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffb4),	/* Offset= -76 (284) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcb),	/* Offset= -53 (312) */
        0x5b,	/* FC_END */
/* 368 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (336) */
/* 372 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 376 (GUID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffb2),	/* Offset= -78 (300) */
/* 380 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0xffa8),	/* Offset= -88 (300) */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffa2),	/* Offset= -94 (300) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xff9c),	/* Offset= -100 (300) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xff96),	/* Offset= -106 (300) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xff90),	/* Offset= -112 (300) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffd6),	/* Offset= -42 (376) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffd0),	/* Offset= -48 (376) */
        NdrFcShort(0x0),
/* 428 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 430 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 432 (union ) */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (428) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffee),	/* Offset= -18 (428) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffe8),	/* Offset= -24 (428) */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcShort(0x0),
/* 480 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0xff96),	/* Offset= -106 (380) */
/* 488 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xffc2),	/* Offset= -62 (432) */
/* 496 (DBID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (502) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (480) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe9),	/* Offset= -23 (488) */
        0x5b,	/* FC_END */
/* 514 (unsigned short[]) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x9,	/* Corr desc: field clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 524 (FLAGGED_WORD_BLOB) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xfff2),	/* Offset= -14 (514) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 534 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (524) */
/* 538 (CY) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 544 (DECIMAL) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x08,	/* FC_LONG */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 554 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 572 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 590 (wireBSTR *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffa6),	/* Offset= -90 (524) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffa1),	/* Offset= -95 (524) */
        0x5b,	/* FC_END */
/* 622 (SAFEARR_BSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (634) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 634 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (590) */
/* 638 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 656 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (638) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 674 (SAFEARR_UNKNOWN) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (686) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 686 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (656) */
/* 690 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 708 (IDispatch **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (690) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 726 (SAFEARR_DISPATCH) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (738) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 738 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (708) */
/* 742 (wireVARIANT *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x32c),	/* Offset= 812 (1578) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x327),	/* Offset= 807 (1578) */
        0x5b,	/* FC_END */
/* 774 (SAFEARR_VARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (786) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 786 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (742) */
/* 790 (IRecordInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000002f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 808 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 818 (struct _wireBRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (834) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (790) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 834 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (808) */
/* 838 (wireBRECORD *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (818) */
        0x5b,	/* FC_END */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffcf),	/* Offset= -49 (818) */
        0x5b,	/* FC_END */
/* 870 (SAFEARR_BRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (882) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 882 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffd2),	/* Offset= -46 (838) */
/* 886 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 904 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (886) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 922 (SAFEARR_HAVEIID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (938) */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfc8e),	/* Offset= -882 (52) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 938 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffdc),	/* Offset= -36 (904) */
/* 942 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 952 (BYTE_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (942) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 972 (unsigned short *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 982 (WORD_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (972) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1002 (ULONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1012 (DWORD_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1002) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1032 (hyper *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 1042 (HYPER_SIZEDARR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1032) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 1062 (SAFEARRAYUNION) */
        0x2a,	/* FC_ENCAPSULATED_UNION */
        0x49,	/* Switch type= FC_ULONG */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0xa),	/* 10 */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xfe3e),	/* Offset= -450 (622) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfe6c),	/* Offset= -404 (674) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfe9a),	/* Offset= -358 (726) */
        NdrFcLong(0xc),	/* 12 */
        NdrFcShort(0xfec4),	/* Offset= -316 (774) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xff1e),	/* Offset= -226 (870) */
        NdrFcLong(0x800d),	/* 32781 */
        NdrFcShort(0xff4c),	/* Offset= -180 (922) */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0xff64),	/* Offset= -156 (952) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xff7c),	/* Offset= -132 (982) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xff94),	/* Offset= -108 (1012) */
        NdrFcLong(0x14),	/* 20 */
        NdrFcShort(0xffac),	/* Offset= -84 (1042) */
        NdrFcShort(0xffff),
/* 1130 (SAFEARRAYBOUND) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1138 (SAFEARRAYBOUND[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x7,	/* Corr desc: field cDims, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xffd8),	/* offset = -40 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffee),	/* Offset= -18 (1130) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1152 (struct _wireSAFEARRAY) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x28),	/* 40 */
        NdrFcShort(0xffee),	/* Offset= -18 (1138) */
        NdrFcShort(0x0),	/* Offset= 0 (1158) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff98),	/* Offset= -104 (1062) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1170 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (1152) */
/* 1174 (signed char *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 1178 (USHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x07,	/* FC_USHORT */
        0x5c,	/* FC_PAD */
/* 1182 (ULONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1186 (INT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1190 (UINT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1194 (BYTE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 1198 (SHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 1202 (LONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1206 (FLOAT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0a,	/* FC_FLOAT */
        0x5c,	/* FC_PAD */
/* 1210 (DOUBLE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 1214 (VARIANT_BOOL *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 1218 (SCODE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1222 (DATE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 1226 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd40),	/* Offset= -704 (524) */
/* 1230 (wireBSTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1226) */
/* 1234 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x156),	/* Offset= 342 (1578) */
/* 1238 (wireVARIANT *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1234) */
/* 1242 (CY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd3e),	/* Offset= -706 (538) */
/* 1246 (DECIMAL *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd40),	/* Offset= -704 (544) */
/* 1250 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1268 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1250) */
/* 1272 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1290 (IDispatch **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1272) */
/* 1294 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff70),	/* Offset= -144 (1152) */
/* 1298 (wireSAFEARRAY *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1294) */
/* 1302 (wireBRECORD) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfe1a),	/* Offset= -486 (818) */
/* 1306 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x2b),	/* 43 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x12),	/* 18 */
        NdrFcShort(0x8007),	/* Simple arm type: FC_USHORT */
        NdrFcLong(0x13),	/* 19 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x16),	/* 22 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x17),	/* 23 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x11),	/* 17 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x800a),	/* Simple arm type: FC_FLOAT */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0xb),	/* 11 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0xa),	/* 10 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xff4e),	/* Offset= -178 (1226) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xfc98),	/* Offset= -872 (538) */
        NdrFcLong(0xe),	/* 14 */
        NdrFcShort(0xfc98),	/* Offset= -872 (544) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfc9c),	/* Offset= -868 (554) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfca8),	/* Offset= -856 (572) */
        NdrFcLong(0x2000),	/* 8192 */
        NdrFcShort(0xff74),	/* Offset= -140 (1294) */
        NdrFcLong(0x4010),	/* 16400 */
        NdrFcShort(0xfef6),	/* Offset= -266 (1174) */
        NdrFcLong(0x4012),	/* 16402 */
        NdrFcShort(0xfef4),	/* Offset= -268 (1178) */
        NdrFcLong(0x4013),	/* 16403 */
        NdrFcShort(0xfef2),	/* Offset= -270 (1182) */
        NdrFcLong(0x4016),	/* 16406 */
        NdrFcShort(0xfef0),	/* Offset= -272 (1186) */
        NdrFcLong(0x4017),	/* 16407 */
        NdrFcShort(0xfeee),	/* Offset= -274 (1190) */
        NdrFcLong(0x4011),	/* 16401 */
        NdrFcShort(0xfeec),	/* Offset= -276 (1194) */
        NdrFcLong(0x4002),	/* 16386 */
        NdrFcShort(0xfeea),	/* Offset= -278 (1198) */
        NdrFcLong(0x4003),	/* 16387 */
        NdrFcShort(0xfee8),	/* Offset= -280 (1202) */
        NdrFcLong(0x4004),	/* 16388 */
        NdrFcShort(0xfee6),	/* Offset= -282 (1206) */
        NdrFcLong(0x4005),	/* 16389 */
        NdrFcShort(0xfee4),	/* Offset= -284 (1210) */
        NdrFcLong(0x400b),	/* 16395 */
        NdrFcShort(0xfee2),	/* Offset= -286 (1214) */
        NdrFcLong(0x400a),	/* 16394 */
        NdrFcShort(0xfee0),	/* Offset= -288 (1218) */
        NdrFcLong(0x4007),	/* 16391 */
        NdrFcShort(0xfede),	/* Offset= -290 (1222) */
        NdrFcLong(0x4008),	/* 16392 */
        NdrFcShort(0xfee0),	/* Offset= -288 (1230) */
        NdrFcLong(0x400c),	/* 16396 */
        NdrFcShort(0xfee2),	/* Offset= -286 (1238) */
        NdrFcLong(0x4006),	/* 16390 */
        NdrFcShort(0xfee0),	/* Offset= -288 (1242) */
        NdrFcLong(0x400e),	/* 16398 */
        NdrFcShort(0xfede),	/* Offset= -290 (1246) */
        NdrFcLong(0x400d),	/* 16397 */
        NdrFcShort(0xfeee),	/* Offset= -274 (1268) */
        NdrFcLong(0x4009),	/* 16393 */
        NdrFcShort(0xfefe),	/* Offset= -258 (1290) */
        NdrFcLong(0x6000),	/* 24576 */
        NdrFcShort(0xff00),	/* Offset= -256 (1298) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xfefe),	/* Offset= -258 (1302) */
        NdrFcLong(0x4024),	/* 16420 */
        NdrFcShort(0xfef8),	/* Offset= -264 (1302) */
        NdrFcShort(0xffff),
/* 1570 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x7,	/* Corr desc: field vt, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xfef2),	/* Offset= -270 (1306) */
/* 1578 (struct _wireVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1584) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1570) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1598 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1578) */
/* 1602 (VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (1598) */
/* 1612 (DBPROP) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x34),	/* 52 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1618) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfb97),	/* Offset= -1129 (496) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe5),	/* Offset= -27 (1602) */
        0x5b,	/* FC_END */
/* 1632 (DBPROP *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cProperties, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1612) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1650 (DBPROPSET) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (1632) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfaa5),	/* Offset= -1371 (300) */
        0x5b,	/* FC_END */
/* 1674 (DBPROPSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter pcPropertySets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffbe),	/* Offset= -66 (1632) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcb),	/* Offset= -53 (1650) */
        0x5b,	/* FC_END */
/* 1706 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (1674) */
/* 1710 (DBPROPSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1706) */
/* 1714 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1732 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1714) */
/* 1736 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf96a),	/* Offset= -1686 (52) */
/* 1740 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 1746 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1740) */
/* 1750 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1768 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1750) */
/* 1772 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf946),	/* Offset= -1722 (52) */
/* 1776 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
/* 1782 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1776) */
/* 1786 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1804 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1786) */
/* 1808 (DBREFCOUNT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1812 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1830 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1812) */
/* 1834 (DBREFCOUNT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1838 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1856 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1838) */
/* 1860 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1878 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1860) */
/* 1882 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1900 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf8c6),	/* Offset= -1850 (52) */
/* 1904 (GUID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf9ba),	/* Offset= -1606 (300) */
/* 1908 (ISequentialStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0c733a30),
        NdrFcShort(0x2a1c),
        NdrFcShort(0x11ce),
        0xad,
        0xe5,
        0x00,
        0xaa,
        0x00,
        0x44,
        0x77,
        0x3d,

/* 1926 (BSTR) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x1),	/* Function offset= 1 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfd3c),	/* Offset= -708 (1226) */
/* 1936 (BSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cBSTR, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1926) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1954 (VARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cVARIANT, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfe92),	/* Offset= -366 (1602) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1972 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1990 (IDispatch **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cIDISPATCH, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1972) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2008 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2026 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cIUNKNOWN, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (2008) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2044 (LARGE_INTEGER) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 2050 (ULARGE_INTEGER) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 2056 (FILETIME) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2064 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 2070 (CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (2064) */
        0x5b,	/* FC_END */
/* 2082 (CLSID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (2070) */
/* 2086 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2096 (BLOB) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2086) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2116 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x10,	/* Corr desc: field pointer in CLIPDATA */
        0x59,	/* FC_CALLBACK */
        NdrFcShort(0x1),	/* 1 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2126 (CLIPDATA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x8),	/* Memory offset = 8 */
        NdrFcShort(0x8),	/* Buffer offset = 8 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2116) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2148 (CLIPDATA *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2126) */
/* 2152 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2170 (IStorage *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000b),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2188 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2198 (BSTRBLOB) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2188) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2218 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2220 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 2222 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2224 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2226 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2244 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2262 (unsigned char *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2272 (CAUB) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2262) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2292 (short *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 2302 (CAI) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2292) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2322 (USHORT *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 2332 (CAUI) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2322) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2352 (VARIANT_BOOL *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 2362 (CABOOL) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2352) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2382 (LONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2392 (CAL) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2382) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2412 (ULONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2422 (CAUL) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2412) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2442 (float *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0a,	/* FC_FLOAT */
        0x5b,	/* FC_END */
/* 2452 (CAFLT) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2442) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2472 (SCODE *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2482 (CASCODE) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2472) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2502 (LARGE_INTEGER *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfe2c),	/* Offset= -468 (2044) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2516 (CAH) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2502) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2536 (ULARGE_INTEGER *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfe10),	/* Offset= -496 (2050) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2550 (CAUH) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2536) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2570 (double *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0c,	/* FC_DOUBLE */
        0x5b,	/* FC_END */
/* 2580 (CADBL) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2570) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2600 (CY *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf7e8),	/* Offset= -2072 (538) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2614 (CACY) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2600) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2634 (DATE *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0c,	/* FC_DOUBLE */
        0x5b,	/* FC_END */
/* 2644 (CADATE) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2634) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2664 (FILETIME *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd96),	/* Offset= -618 (2056) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2678 (CAFILETIME) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2664) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2698 (CLSID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd82),	/* Offset= -638 (2070) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2712 (CACLSID) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2698) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2732 (CLIPDATA *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0xc),	/* 12 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0xc),	/* Increment = 12 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x8),	/* Memory offset = 8 */
        NdrFcShort(0x8),	/* Buffer offset = 8 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd80),	/* Offset= -640 (2116) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd85),	/* Offset= -635 (2126) */
        0x5b,	/* FC_END */
/* 2764 (CACLIPDATA) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd2),	/* Offset= -46 (2732) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2784 (BSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfc98),	/* Offset= -872 (1926) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2802 (CABSTR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2784) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2822 (BSTRBLOB *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x8),	/* Increment = 8 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd6e),	/* Offset= -658 (2188) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfd73),	/* Offset= -653 (2198) */
        0x5b,	/* FC_END */
/* 2854 (CABSTRBLOB) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd2),	/* Offset= -46 (2822) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2874 (LPSTR *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 2896 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2898 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2904 (CALPSTR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (2874) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2924 (LPWSTR *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x4),	/* Increment = 4 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
/* 2946 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2948 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2954 (CALPWSTR) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (2924) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2974 (PROPVARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0x2ce),	/* Offset= 718 (3706) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2992 (CAPROPVARIANT) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2974) */
        0x5b,	/* FC_END */
        0x08,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3012 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf8ba),	/* Offset= -1862 (1152) */
/* 3016 (wirePSAFEARRAY) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3012) */
/* 3020 (LPSAFEARRAY) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x2),	/* Function offset= 2 */
        NdrFcShort(0x4),	/* 4 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (3016) */
/* 3030 (CHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 3034 (UCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 3038 (SHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 3042 (USHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x07,	/* FC_USHORT */
        0x5c,	/* FC_PAD */
/* 3046 (LONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3050 (ULONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 3054 (INT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3058 (UINT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 3062 (FLOAT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0a,	/* FC_FLOAT */
        0x5c,	/* FC_PAD */
/* 3066 (DOUBLE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 3070 (VARIANT_BOOL *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 3074 (DECIMAL *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf61c),	/* Offset= -2532 (544) */
/* 3078 (SCODE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 3082 (CY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf60e),	/* Offset= -2546 (538) */
/* 3086 (DATE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 3090 (BSTR *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfb72),	/* Offset= -1166 (1926) */
/* 3094 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3112 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3094) */
/* 3116 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3134 (IDispatch **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3116) */
/* 3138 (LPSAFEARRAY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff88),	/* Offset= -120 (3020) */
/* 3142 (PROPVARIANT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x232),	/* Offset= 562 (3706) */
/* 3146 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x5b),	/* 91 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x11),	/* 17 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x12),	/* 18 */
        NdrFcShort(0x8007),	/* Simple arm type: FC_USHORT */
        NdrFcLong(0xb),	/* 11 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x13),	/* 19 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x800a),	/* Simple arm type: FC_FLOAT */
        NdrFcLong(0xa),	/* 10 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x14),	/* 20 */
        NdrFcShort(0xfb68),	/* Offset= -1176 (2044) */
        NdrFcLong(0x15),	/* 21 */
        NdrFcShort(0xfb68),	/* Offset= -1176 (2050) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xf574),	/* Offset= -2700 (538) */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x40),	/* 64 */
        NdrFcShort(0xfb56),	/* Offset= -1194 (2056) */
        NdrFcLong(0x48),	/* 72 */
        NdrFcShort(0xfb6a),	/* Offset= -1174 (2082) */
        NdrFcLong(0x41),	/* 65 */
        NdrFcShort(0xfb72),	/* Offset= -1166 (2096) */
        NdrFcLong(0x46),	/* 70 */
        NdrFcShort(0xfb6c),	/* Offset= -1172 (2096) */
        NdrFcLong(0x47),	/* 71 */
        NdrFcShort(0xfb9a),	/* Offset= -1126 (2148) */
        NdrFcLong(0x42),	/* 66 */
        NdrFcShort(0xfb98),	/* Offset= -1128 (2152) */
        NdrFcLong(0x44),	/* 68 */
        NdrFcShort(0xfb92),	/* Offset= -1134 (2152) */
        NdrFcLong(0x43),	/* 67 */
        NdrFcShort(0xfb9e),	/* Offset= -1122 (2170) */
        NdrFcLong(0x45),	/* 69 */
        NdrFcShort(0xfb98),	/* Offset= -1128 (2170) */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xfa9e),	/* Offset= -1378 (1926) */
        NdrFcLong(0xfff),	/* 4095 */
        NdrFcShort(0xfba8),	/* Offset= -1112 (2198) */
        NdrFcLong(0x1e),	/* 30 */
        NdrFcShort(0xfe5c),	/* Offset= -420 (2896) */
        NdrFcLong(0x1f),	/* 31 */
        NdrFcShort(0xfe88),	/* Offset= -376 (2946) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfbb2),	/* Offset= -1102 (2226) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfbbe),	/* Offset= -1090 (2244) */
        NdrFcLong(0x1011),	/* 4113 */
        NdrFcShort(0xfbd4),	/* Offset= -1068 (2272) */
        NdrFcLong(0x1002),	/* 4098 */
        NdrFcShort(0xfbec),	/* Offset= -1044 (2302) */
        NdrFcLong(0x1012),	/* 4114 */
        NdrFcShort(0xfc04),	/* Offset= -1020 (2332) */
        NdrFcLong(0x100b),	/* 4107 */
        NdrFcShort(0xfc1c),	/* Offset= -996 (2362) */
        NdrFcLong(0x1003),	/* 4099 */
        NdrFcShort(0xfc34),	/* Offset= -972 (2392) */
        NdrFcLong(0x1013),	/* 4115 */
        NdrFcShort(0xfc4c),	/* Offset= -948 (2422) */
        NdrFcLong(0x1004),	/* 4100 */
        NdrFcShort(0xfc64),	/* Offset= -924 (2452) */
        NdrFcLong(0x100a),	/* 4106 */
        NdrFcShort(0xfc7c),	/* Offset= -900 (2482) */
        NdrFcLong(0x1014),	/* 4116 */
        NdrFcShort(0xfc98),	/* Offset= -872 (2516) */
        NdrFcLong(0x1015),	/* 4117 */
        NdrFcShort(0xfcb4),	/* Offset= -844 (2550) */
        NdrFcLong(0x1005),	/* 4101 */
        NdrFcShort(0xfccc),	/* Offset= -820 (2580) */
        NdrFcLong(0x1006),	/* 4102 */
        NdrFcShort(0xfce8),	/* Offset= -792 (2614) */
        NdrFcLong(0x1007),	/* 4103 */
        NdrFcShort(0xfd00),	/* Offset= -768 (2644) */
        NdrFcLong(0x1040),	/* 4160 */
        NdrFcShort(0xfd1c),	/* Offset= -740 (2678) */
        NdrFcLong(0x1048),	/* 4168 */
        NdrFcShort(0xfd38),	/* Offset= -712 (2712) */
        NdrFcLong(0x1047),	/* 4167 */
        NdrFcShort(0xfd66),	/* Offset= -666 (2764) */
        NdrFcLong(0x1008),	/* 4104 */
        NdrFcShort(0xfd86),	/* Offset= -634 (2802) */
        NdrFcLong(0x1fff),	/* 8191 */
        NdrFcShort(0xfdb4),	/* Offset= -588 (2854) */
        NdrFcLong(0x101e),	/* 4126 */
        NdrFcShort(0xfde0),	/* Offset= -544 (2904) */
        NdrFcLong(0x101f),	/* 4127 */
        NdrFcShort(0xfe0c),	/* Offset= -500 (2954) */
        NdrFcLong(0x100c),	/* 4108 */
        NdrFcShort(0xfe2c),	/* Offset= -468 (2992) */
        NdrFcLong(0x2010),	/* 8208 */
        NdrFcShort(0xfe42),	/* Offset= -446 (3020) */
        NdrFcLong(0x2011),	/* 8209 */
        NdrFcShort(0xfe3c),	/* Offset= -452 (3020) */
        NdrFcLong(0x2002),	/* 8194 */
        NdrFcShort(0xfe36),	/* Offset= -458 (3020) */
        NdrFcLong(0x2012),	/* 8210 */
        NdrFcShort(0xfe30),	/* Offset= -464 (3020) */
        NdrFcLong(0x2003),	/* 8195 */
        NdrFcShort(0xfe2a),	/* Offset= -470 (3020) */
        NdrFcLong(0x2013),	/* 8211 */
        NdrFcShort(0xfe24),	/* Offset= -476 (3020) */
        NdrFcLong(0x2016),	/* 8214 */
        NdrFcShort(0xfe1e),	/* Offset= -482 (3020) */
        NdrFcLong(0x2017),	/* 8215 */
        NdrFcShort(0xfe18),	/* Offset= -488 (3020) */
        NdrFcLong(0x2004),	/* 8196 */
        NdrFcShort(0xfe12),	/* Offset= -494 (3020) */
        NdrFcLong(0x2005),	/* 8197 */
        NdrFcShort(0xfe0c),	/* Offset= -500 (3020) */
        NdrFcLong(0x2006),	/* 8198 */
        NdrFcShort(0xfe06),	/* Offset= -506 (3020) */
        NdrFcLong(0x2007),	/* 8199 */
        NdrFcShort(0xfe00),	/* Offset= -512 (3020) */
        NdrFcLong(0x2008),	/* 8200 */
        NdrFcShort(0xfdfa),	/* Offset= -518 (3020) */
        NdrFcLong(0x200b),	/* 8203 */
        NdrFcShort(0xfdf4),	/* Offset= -524 (3020) */
        NdrFcLong(0x200e),	/* 8206 */
        NdrFcShort(0xfdee),	/* Offset= -530 (3020) */
        NdrFcLong(0x2009),	/* 8201 */
        NdrFcShort(0xfde8),	/* Offset= -536 (3020) */
        NdrFcLong(0x200d),	/* 8205 */
        NdrFcShort(0xfde2),	/* Offset= -542 (3020) */
        NdrFcLong(0x200a),	/* 8202 */
        NdrFcShort(0xfddc),	/* Offset= -548 (3020) */
        NdrFcLong(0x200c),	/* 8204 */
        NdrFcShort(0xfdd6),	/* Offset= -554 (3020) */
        NdrFcLong(0x4010),	/* 16400 */
        NdrFcShort(0xfdda),	/* Offset= -550 (3030) */
        NdrFcLong(0x4011),	/* 16401 */
        NdrFcShort(0xfdd8),	/* Offset= -552 (3034) */
        NdrFcLong(0x4002),	/* 16386 */
        NdrFcShort(0xfdd6),	/* Offset= -554 (3038) */
        NdrFcLong(0x4012),	/* 16402 */
        NdrFcShort(0xfdd4),	/* Offset= -556 (3042) */
        NdrFcLong(0x4003),	/* 16387 */
        NdrFcShort(0xfdd2),	/* Offset= -558 (3046) */
        NdrFcLong(0x4013),	/* 16403 */
        NdrFcShort(0xfdd0),	/* Offset= -560 (3050) */
        NdrFcLong(0x4016),	/* 16406 */
        NdrFcShort(0xfdce),	/* Offset= -562 (3054) */
        NdrFcLong(0x4017),	/* 16407 */
        NdrFcShort(0xfdcc),	/* Offset= -564 (3058) */
        NdrFcLong(0x4004),	/* 16388 */
        NdrFcShort(0xfdca),	/* Offset= -566 (3062) */
        NdrFcLong(0x4005),	/* 16389 */
        NdrFcShort(0xfdc8),	/* Offset= -568 (3066) */
        NdrFcLong(0x400b),	/* 16395 */
        NdrFcShort(0xfdc6),	/* Offset= -570 (3070) */
        NdrFcLong(0x400e),	/* 16398 */
        NdrFcShort(0xfdc4),	/* Offset= -572 (3074) */
        NdrFcLong(0x400a),	/* 16394 */
        NdrFcShort(0xfdc2),	/* Offset= -574 (3078) */
        NdrFcLong(0x4006),	/* 16390 */
        NdrFcShort(0xfdc0),	/* Offset= -576 (3082) */
        NdrFcLong(0x4007),	/* 16391 */
        NdrFcShort(0xfdbe),	/* Offset= -578 (3086) */
        NdrFcLong(0x4008),	/* 16392 */
        NdrFcShort(0xfdbc),	/* Offset= -580 (3090) */
        NdrFcLong(0x400d),	/* 16397 */
        NdrFcShort(0xfdcc),	/* Offset= -564 (3112) */
        NdrFcLong(0x4009),	/* 16393 */
        NdrFcShort(0xfddc),	/* Offset= -548 (3134) */
        NdrFcLong(0x6000),	/* 24576 */
        NdrFcShort(0xfdda),	/* Offset= -550 (3138) */
        NdrFcLong(0x400c),	/* 16396 */
        NdrFcShort(0xfdd8),	/* Offset= -552 (3142) */
        NdrFcShort(0xffff),
/* 3698 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x0,	/* Corr desc: field in PROPVARIANT */
        0x59,	/* FC_CALLBACK */
        NdrFcShort(0x2),	/* 2 */
        NdrFcShort(0xfdd2),	/* Offset= -558 (3146) */
/* 3706 (PROPVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (3712) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (3698) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3724 (PROPVARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cPROPVARIANT, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (3706) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3742 (VARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cArray, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x30),	/* offset = 48 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf796),	/* Offset= -2154 (1602) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3760 (RMTPACK) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x38),	/* 56 */
        NdrFcShort(0x0),
        NdrFcShort(0x14),	/* Offset= 20 (3786) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf8ba),	/* Offset= -1862 (1908) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 3786 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf8c4),	/* Offset= -1852 (1936) */
/* 3790 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf8d2),	/* Offset= -1838 (1954) */
/* 3794 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf8f2),	/* Offset= -1806 (1990) */
/* 3798 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf912),	/* Offset= -1774 (2026) */
/* 3802 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffb0),	/* Offset= -80 (3724) */
/* 3806 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffbe),	/* Offset= -66 (3742) */
/* 3810 (RMTPACK *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffcc),	/* Offset= -52 (3760) */
/* 3814 (RMTPACK *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc8),	/* Offset= -56 (3760) */
/* 3818 (DBBINDING *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteExecute */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf170),	/* Offset= -3728 (104) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3836 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (3818) */
/* 3840 (DBSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for RemoteExecute */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3850 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (3840) */
/* 3854 (DBROWCOUNT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb8,	/* FC_INT3264 */
        0x5c,	/* FC_PAD */
/* 3858 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 3864 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (3858) */
/* 3868 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf116),	/* Offset= -3818 (52) */
/* 3872 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
/* 3878 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (3872) */
/* 3882 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 3900 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3882) */
/* 3904 (GUID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf1ea),	/* Offset= -3606 (300) */
/* 3908 (LPOLESTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (3912) */
/* 3912 (LPOLESTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 3914 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3916 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 3934 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3916) */
/* 3938 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf1c8),	/* Offset= -3640 (300) */
/* 3942 (LPCOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 3944 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3946 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 3964 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3946) */
/* 3968 (DBORDINAL *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 3972 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 3974 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3976 (ITypeInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020401),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3994 (DBCOLUMNINFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x30),	/* 48 */
        NdrFcShort(0x0),
        NdrFcShort(0x12),	/* Offset= 18 (4018) */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe3),	/* Offset= -29 (3976) */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0xb8,	/* FC_INT3264 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf241),	/* Offset= -3519 (496) */
        0x5b,	/* FC_END */
/* 4018 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 4020 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 4022 (DBCOLUMNINFO *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteGetColumnInfo */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd6),	/* Offset= -42 (3994) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4040 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (4022) */
/* 4044 (DBCOLUMNINFO **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4040) */
/* 4048 (DBBYTEOFFSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for RemoteGetColumnInfo */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 4058 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4048) */
/* 4062 (DBBYTEOFFSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4058) */
/* 4066 (DBBYTEOFFSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for RemoteGetColumnInfo */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 4076 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4066) */
/* 4080 (DBBYTEOFFSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4076) */
/* 4084 (DBLENGTH *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 4088 (OLECHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x20,	/* Corr desc: unused for RemoteGetColumnInfo */
        0x0,
        NdrFcShort(0x0),
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 4098 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4088) */
/* 4102 (OLECHAR **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4098) */
/* 4106 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4124 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4106) */
/* 4128 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0xf156),	/* Offset= -3754 (380) */
/* 4136 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        NdrFcShort(0xf182),	/* Offset= -3710 (432) */
/* 4144 (const DBID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (4150) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (4128) */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe9),	/* Offset= -23 (4136) */
        0x5b,	/* FC_END */
/* 4162 (const DBID *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteMapColumnIDs */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (4144) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4180 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4162) */
/* 4184 (DBORDINAL *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for RemoteMapColumnIDs */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 4194 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4184) */
/* 4198 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4216 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4198) */
/* 4220 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4238 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xefa4),	/* Offset= -4188 (52) */
/* 4242 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 4248 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (4242) */
/* 4252 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4270 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4252) */
/* 4274 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4292 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xef6e),	/* Offset= -4242 (52) */
/* 4296 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 4302 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (4296) */
/* 4306 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4324 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4306) */
/* 4328 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4346 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xef38),	/* Offset= -4296 (52) */
/* 4350 (DBPROPSET *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf572),	/* Offset= -2702 (1650) */
/* 4354 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4372 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4354) */
/* 4376 (DBPROPSTATUS *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4380 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4398 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4380) */
/* 4402 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 4412 (const DBPROPIDSET) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (4402) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xefdb),	/* Offset= -4133 (300) */
        0x5b,	/* FC_END */
/* 4436 (const DBPROPIDSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter cPropertyIDSets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc6),	/* Offset= -58 (4402) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcb),	/* Offset= -53 (4412) */
        0x5b,	/* FC_END */
/* 4468 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (4436) */
/* 4472 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4476 (DBPROPSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter pcPropertySets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf4cc),	/* Offset= -2868 (1632) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf4d9),	/* Offset= -2855 (1650) */
        0x5b,	/* FC_END */
/* 4508 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (4476) */
/* 4512 (DBPROPSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4508) */
/* 4516 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4534 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4516) */
/* 4538 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 4548 (const DBPROPIDSET) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (4538) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xef53),	/* Offset= -4269 (300) */
        0x5b,	/* FC_END */
/* 4572 (const DBPROPIDSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter cPropertyIDSets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc6),	/* Offset= -58 (4538) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcb),	/* Offset= -53 (4548) */
        0x5b,	/* FC_END */
/* 4604 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (4572) */
/* 4608 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4612 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 4614 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 4616 (DBPROPINFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x1e),	/* 30 */
        NdrFcShort(0x0),
        NdrFcShort(0xc),	/* Offset= 12 (4634) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf42c),	/* Offset= -3028 (1602) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4634 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 4636 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 4638 (PDBPROPINFO) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cPropertyInfos, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (4616) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4656 (DBPROPINFOSET) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (4638) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xeee7),	/* Offset= -4377 (300) */
        0x5b,	/* FC_END */
/* 4680 (DBPROPINFOSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter pcPropertyInfoSets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffbe),	/* Offset= -66 (4638) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcb),	/* Offset= -53 (4656) */
        0x5b,	/* FC_END */
/* 4712 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (4680) */
/* 4716 (DBPROPINFOSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4712) */
/* 4720 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4724 (DBBYTEOFFSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter pcOffsets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x14),	/* offset = 20 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 4734 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4724) */
/* 4738 (DBBYTEOFFSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4734) */
/* 4742 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4746 (OLECHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x29,	/* Corr desc: parameter pcbDescBuffer, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x1c),	/* offset = 28 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 4756 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4746) */
/* 4760 (OLECHAR **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4756) */
/* 4764 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4782 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4764) */
/* 4786 (DBPROPSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter cPropertySets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf396),	/* Offset= -3178 (1632) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf3a3),	/* Offset= -3165 (1650) */
        0x5b,	/* FC_END */
/* 4818 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (4786) */
/* 4822 (DBPROPSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cTotalProps, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 4832 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4822) */
/* 4836 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4854 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4836) */
/* 4858 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4876 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4858) */
/* 4880 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4898 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4880) */
/* 4902 (DBPROPSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter cPropertySets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf322),	/* Offset= -3294 (1632) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf32f),	/* Offset= -3281 (1650) */
        0x5b,	/* FC_END */
/* 4934 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (4902) */
/* 4938 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4956 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xecd6),	/* Offset= -4906 (52) */
/* 4960 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
/* 4966 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (4960) */
/* 4970 (DBPROPSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cTotalProps, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 4980 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4970) */
/* 4984 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5002 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4984) */
/* 5006 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5024 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5006) */
/* 5028 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 5038 (const DBPROPIDSET) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (5028) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xed69),	/* Offset= -4759 (300) */
        0x5b,	/* FC_END */
/* 5062 (const DBPROPIDSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter cPropertyIDSets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc6),	/* Offset= -58 (5028) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcb),	/* Offset= -53 (5038) */
        0x5b,	/* FC_END */
/* 5094 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (5062) */
/* 5098 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5102 (DBPROPINFOSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter pcPropertyInfoSets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfe18),	/* Offset= -488 (4638) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfe25),	/* Offset= -475 (4656) */
        0x5b,	/* FC_END */
/* 5134 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (5102) */
/* 5138 (DBPROPINFOSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (5134) */
/* 5142 (DBCOUNTITEM *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 5146 (DBBYTEOFFSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for RemoteGetCreationProperties */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 5156 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (5146) */
/* 5160 (DBBYTEOFFSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (5156) */
/* 5164 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5168 (OLECHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x29,	/* Corr desc: parameter pcbDescBuffer, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x1c),	/* offset = 28 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 5178 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (5168) */
/* 5182 (OLECHAR **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (5178) */
/* 5186 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5204 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5186) */
/* 5208 (DBPROPSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter cPropertySets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf1f0),	/* Offset= -3600 (1632) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf1fd),	/* Offset= -3587 (1650) */
        0x5b,	/* FC_END */
/* 5240 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffde),	/* Offset= -34 (5208) */
/* 5244 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5262 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5244) */
/* 5266 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 5268 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 5270 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 5272 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 5274 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5292 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5274) */
/* 5296 (DBCOUNTITEM *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 5300 (DBCOUNTITEM *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 5304 (DBASYNCHPHASE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5308 (LPOLESTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (5312) */
/* 5312 (LPOLESTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 5314 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 5316 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5334 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5316) */
/* 5338 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 5348 (const DBPROPIDSET) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (5338) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xec33),	/* Offset= -5069 (300) */
        0x5b,	/* FC_END */
/* 5372 (const DBPROPIDSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter cPropertyIDSets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc6),	/* Offset= -58 (5338) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffcb),	/* Offset= -53 (5348) */
        0x5b,	/* FC_END */
/* 5404 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (5372) */
/* 5408 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5412 (DBPROPSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter pcPropertySets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0xc),	/* offset = 12 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf124),	/* Offset= -3804 (1632) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf131),	/* Offset= -3791 (1650) */
        0x5b,	/* FC_END */
/* 5444 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (5412) */
/* 5448 (DBPROPSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (5444) */
/* 5452 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5470 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5452) */
/* 5474 (DBPROPSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter cPropertySets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf0e6),	/* Offset= -3866 (1632) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf0f3),	/* Offset= -3853 (1650) */
        0x5b,	/* FC_END */
/* 5506 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (5474) */
/* 5510 (DBPROPSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cTotalProps, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 5520 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (5510) */
/* 5524 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5542 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5524) */
/* 5546 (IRowset *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0c733a7c),
        NdrFcShort(0x2a1c),
        NdrFcShort(0x11ce),
        0xad,
        0xe5,
        0x00,
        0xaa,
        0x00,
        0x44,
        0x77,
        0x3d,

/* 5564 (DBORDINAL *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for RemoteOnFieldChange */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 5574 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (5564) */
/* 5578 (IRowset *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0c733a7c),
        NdrFcShort(0x2a1c),
        NdrFcShort(0x11ce),
        0xad,
        0xe5,
        0x00,
        0xaa,
        0x00,
        0x44,
        0x77,
        0x3d,

/* 5596 (HROW *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for RemoteOnRowChange */
        0x0,
        NdrFcShort(0x0),
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 5606 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (5596) */
/* 5610 (IRowset *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0c733a7c),
        NdrFcShort(0x2a1c),
        NdrFcShort(0x11ce),
        0xad,
        0xe5,
        0x00,
        0xaa,
        0x00,
        0x44,
        0x77,
        0x3d,

/* 5628 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5646 (DBID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xebe0),	/* Offset= -5152 (496) */
/* 5650 (DBID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xebdc),	/* Offset= -5156 (496) */
/* 5654 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xea1c),	/* Offset= -5604 (52) */
/* 5658 (DBPROPSET *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        0x29,	/* Corr desc: parameter cPropertySets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x48, /* FC_VARIABLE_REPEAT */
        0x49, /* FC_FIXED_OFFSET */
        NdrFcShort(0x18),	/* Increment = 24 */
        NdrFcShort(0x0),	/* Offset to array = 0 */
        NdrFcShort(0x1),	/* Number of pointers = 1 */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf02e),	/* Offset= -4050 (1632) */
        0x5b,	/* FC_END */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf03b),	/* Offset= -4037 (1650) */
        0x5b,	/* FC_END */
/* 5690 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (5658) */
/* 5694 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
/* 5700 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (5694) */
/* 5704 (DBPROPSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cTotalProps, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 5714 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (5704) */
/* 5718 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5736 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5718) */
/* 5740 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5758 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5740) */
/* 5762 (HCHAPTER *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 5766 (HROW *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 5770 (DBPOSITIONFLAGS *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5774 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5792 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5774) */
/* 5796 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xe98e),	/* Offset= -5746 (52) */
/* 5800 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
/* 5806 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (5800) */
/* 5810 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5828 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5810) */
/* 5832 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5850 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5868 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5850) */
/* 5872 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5890 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5872) */
/* 5894 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5912 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5894) */
/* 5916 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5934 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 5936 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 5938 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xe9f8),	/* Offset= -5640 (300) */
/* 5942 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xe8fc),	/* Offset= -5892 (52) */
/* 5946 (IAuthenticate *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x79eac9d0),
        NdrFcShort(0xbaf9),
        NdrFcShort(0x11ce),
        0x8c,
        0x82,
        0x00,
        0xaa,
        0x00,
        0x4b,
        0xa9,
        0x0b,

/* 5964 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5982 (IID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xe8d4),	/* Offset= -5932 (52) */
/* 5986 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter piid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
/* 5992 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (5986) */
/* 5996 (DBBINDURLSTATUS *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 6000 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
/* 6006 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (6000) */
/* 6010 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 6028 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 6030 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 6032 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xe99a),	/* Offset= -5734 (300) */
/* 6036 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xe89e),	/* Offset= -5986 (52) */
/* 6040 (IAuthenticate *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x79eac9d0),
        NdrFcShort(0xbaf9),
        NdrFcShort(0x11ce),
        0x8c,
        0x82,
        0x00,
        0xaa,
        0x00,
        0x4b,
        0xa9,
        0x0b,

/* 6058 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 6076 (IID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xe876),	/* Offset= -6026 (52) */
/* 6080 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter piid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
/* 6086 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (6080) */
/* 6090 (DBBINDURLSTATUS *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 6094 (LPOLESTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (6098) */
/* 6098 (LPOLESTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 6100 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 6102 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x28,	/* Corr desc: parameter riid, FC_LONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
/* 6108 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (6102) */
/* 6112 (ERRORINFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x2c),	/* 44 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf02e),	/* Offset= -4050 (2070) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xe848),	/* Offset= -6072 (52) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 6128 (ERRORINFO *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffee),	/* Offset= -18 (6112) */
/* 6132 (VARIANTARG) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xee42),	/* Offset= -4542 (1598) */
/* 6142 (VARIANTARG *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (6132) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 6160 (DISPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cNamedArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 6170 (DISPPARAMS) */
        0x16,	/* FC_PSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x4b,	/* FC_PP */
        0x5c,	/* FC_PAD */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x0),	/* Memory offset = 0 */
        NdrFcShort(0x0),	/* Buffer offset = 0 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd6),	/* Offset= -42 (6142) */
        0x46, /* FC_NO_REPEAT */
        0x5c, /* FC_PAD */
        NdrFcShort(0x4),	/* Memory offset = 4 */
        NdrFcShort(0x4),	/* Buffer offset = 4 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (6160) */
        0x5b,	/* FC_END */
        0x8,	/* FC_LONG */
        0x8,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 6202 (DISPPARAMS *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffde),	/* Offset= -34 (6170) */
/* 6206 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 6224 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 6242 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (6224) */
/* 6246 (ERRORINFO *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff78),	/* Offset= -136 (6112) */
/* 6250 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 6268 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (6250) */
/* 6272 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xe7b2),	/* Offset= -6222 (52) */
/* 6276 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 6294 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (6276) */
/* 6298 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 6316 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (6298) */
/* 6320 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 6338 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (6320) */
/* 6342 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 6360 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (6342) */
/* 6364 (DISPPARAMS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff3c),	/* Offset= -196 (6170) */
/* 6368 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 6386 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (6368) */
/* 6390 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 6394 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 6412 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (6394) */
        0x0
    }
};

static const CInterfaceProxyVtbl* const _msdaps_ProxyVtblList[] =
{
    (const CInterfaceProxyVtbl*)&_IColumnsInfoProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBCreateCommandProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ISourcesRowsetProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICommandTextProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IRowsetInfoProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBCreateSessionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICommandProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IErrorRecordsProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IOpenRowsetProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IRowPositionChangeProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBDataSourceAdminProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IRowsetNotifyProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ISessionPropertiesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBPropertiesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBInitializeProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAccessorProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IChapteredRowsetProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IRowPositionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBAsynchStatusProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBAsynchNotifyProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IBindResourceProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICreateRowProxyVtbl,
    0
};

static const CInterfaceStubVtbl* const _msdaps_StubVtblList[] =
{
    &_IColumnsInfoStubVtbl,
    &_IDBCreateCommandStubVtbl,
    &_ISourcesRowsetStubVtbl,
    &_ICommandTextStubVtbl,
    &_IRowsetInfoStubVtbl,
    &_IDBCreateSessionStubVtbl,
    &_ICommandStubVtbl,
    &_IErrorRecordsStubVtbl,
    &_IOpenRowsetStubVtbl,
    &_IRowPositionChangeStubVtbl,
    &_IDBDataSourceAdminStubVtbl,
    &_IRowsetNotifyStubVtbl,
    &_ISessionPropertiesStubVtbl,
    &_IDBPropertiesStubVtbl,
    &_IDBInitializeStubVtbl,
    &_IAccessorStubVtbl,
    &_IChapteredRowsetStubVtbl,
    &_IRowPositionStubVtbl,
    &_IDBAsynchStatusStubVtbl,
    &_IDBAsynchNotifyStubVtbl,
    &_IBindResourceStubVtbl,
    &_ICreateRowStubVtbl,
    0
};

static PCInterfaceName const _msdaps_InterfaceNamesList[] =
{
    "IColumnsInfo",
    "IDBCreateCommand",
    "ISourcesRowset",
    "ICommandText",
    "IRowsetInfo",
    "IDBCreateSession",
    "ICommand",
    "IErrorRecords",
    "IOpenRowset",
    "IRowPositionChange",
    "IDBDataSourceAdmin",
    "IRowsetNotify",
    "ISessionProperties",
    "IDBProperties",
    "IDBInitialize",
    "IAccessor",
    "IChapteredRowset",
    "IRowPosition",
    "IDBAsynchStatus",
    "IDBAsynchNotify",
    "IBindResource",
    "ICreateRow",
    0
};

static int __stdcall _msdaps_IID_Lookup(const IID* pIID, int* pIndex)
{
    int low = 0, high = 21;

    while (low <= high)
    {
        int pos = (low + high) / 2;
        int res = IID_GENERIC_CHECK_IID(_msdaps, pIID, pos);
        if (!res) { *pIndex = pos; return 1; }
        if (res > 0) low = pos + 1;
        else high = pos - 1;
    }
    return 0;
}

const ExtendedProxyFileInfo msdaps_ProxyFileInfo DECLSPEC_HIDDEN =
{
    (const PCInterfaceProxyVtblList*)_msdaps_ProxyVtblList,
    (const PCInterfaceStubVtblList*)_msdaps_StubVtblList,
    _msdaps_InterfaceNamesList,
    0,
    _msdaps_IID_Lookup,
    22,
    1,
    0,
    0,
    0,
    0
};

#else /* _WIN64 */

#ifndef __REDQ_RPCPROXY_H_VERSION__
#define __REQUIRED_RPCPROXY_H_VERSION__ 440
#endif

#include "rpcproxy.h"
#ifndef __RPCPROXY_H_VERSION__
#error This code needs a newer version of rpcproxy.h
#endif /* __RPCPROXY_H_VERSION__ */

#include "msdaps.h"

#ifndef USE_COMPILER_EXCEPTIONS

#include "wine/exception.h"
#undef RpcTryExcept
#undef RpcExcept
#undef RpcEndExcept
#undef RpcTryFinally
#undef RpcFinally
#undef RpcEndFinally
#undef RpcExceptionCode
#undef RpcAbnormalTermination

struct __exception_frame;
typedef int (*__filter_func)(struct __exception_frame *);
typedef void (*__finally_func)(struct __exception_frame *);

#define __DECL_EXCEPTION_FRAME \
    EXCEPTION_REGISTRATION_RECORD frame; \
    __filter_func                 filter; \
    __finally_func                finally; \
    sigjmp_buf                    jmp; \
    DWORD                         code; \
    unsigned char                 abnormal_termination; \
    unsigned char                 filter_level; \
    unsigned char                 finally_level;

struct __exception_frame
{
    __DECL_EXCEPTION_FRAME
};

static inline void __widl_unwind_target(void)
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)__wine_get_frame();
    if (exc_frame->finally_level > exc_frame->filter_level)
    {
        exc_frame->abnormal_termination = 1;
        exc_frame->finally( exc_frame );
        __wine_pop_frame( &exc_frame->frame );
    }
    exc_frame->filter_level = 0;
    siglongjmp( exc_frame->jmp, 1 );
}

static DWORD __widl_exception_handler( EXCEPTION_RECORD *record,
                                       EXCEPTION_REGISTRATION_RECORD *frame,
                                       CONTEXT *context,
                                       EXCEPTION_REGISTRATION_RECORD **pdispatcher )
{
    struct __exception_frame *exc_frame = (struct __exception_frame *)frame;

    if (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND | EH_NESTED_CALL))
    {
        if (exc_frame->finally_level && (record->ExceptionFlags & (EH_UNWINDING | EH_EXIT_UNWIND)))
        {
            exc_frame->abnormal_termination = 1;
            exc_frame->finally( exc_frame );
        }
        return ExceptionContinueSearch;
    }
    exc_frame->code = record->ExceptionCode;
    if (exc_frame->filter_level && exc_frame->filter( exc_frame ) == EXCEPTION_EXECUTE_HANDLER)
        __wine_rtl_unwind( frame, record, __widl_unwind_target );
    return ExceptionContinueSearch;
}

#define RpcTryExcept \
    if (!sigsetjmp( __frame->jmp, 0 )) \
    { \
        if (!__frame->finally_level) \
            __wine_push_frame( &__frame->frame ); \
        __frame->filter_level = __frame->finally_level + 1;

#define RpcExcept(expr) \
        if (!__frame->finally_level) \
            __wine_pop_frame( &__frame->frame ); \
        __frame->filter_level = 0; \
    } \
    else \

#define RpcEndExcept

#define RpcExceptionCode() (__frame->code)

#define RpcTryFinally \
    if (!__frame->filter_level) \
        __wine_push_frame( &__frame->frame ); \
    __frame->finally_level = __frame->filter_level + 1;

#define RpcFinally \
    if (!__frame->filter_level) \
        __wine_pop_frame( &__frame->frame ); \
    __frame->finally_level = 0;

#define RpcEndFinally

#define RpcAbnormalTermination() (__frame->abnormal_termination)

#define RpcExceptionInit(filter_func,finally_func) \
    do { \
        __frame->frame.Handler = __widl_exception_handler; \
        __frame->filter = (__filter_func)(filter_func); \
        __frame->finally = (__finally_func)(finally_func); \
        __frame->abnormal_termination = 0; \
        __frame->filter_level = 0; \
        __frame->finally_level = 0; \
    } while (0)

#else /* USE_COMPILER_EXCEPTIONS */

#define RpcExceptionInit(filter_func,finally_func) \
    do { (void)(filter_func); } while(0)

#define __DECL_EXCEPTION_FRAME \
    DWORD code;

#endif /* USE_COMPILER_EXCEPTIONS */

struct __proxy_frame
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    void             *This;
};

static int __proxy_filter( struct __proxy_frame *__frame )
{
    return (__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE);
}

#define TYPE_FORMAT_STRING_SIZE 5999
#define PROC_FORMAT_STRING_SIZE 963

typedef struct _MIDL_TYPE_FORMAT_STRING
{
    short Pad;
    unsigned char Format[TYPE_FORMAT_STRING_SIZE];
} MIDL_TYPE_FORMAT_STRING;

typedef struct _MIDL_PROC_FORMAT_STRING
{
    short Pad;
    unsigned char Format[PROC_FORMAT_STRING_SIZE];
} MIDL_PROC_FORMAT_STRING;


static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString;
static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString;

static const MIDL_STUB_DESC Object_StubDesc;

/*****************************************************************************
 * IAccessor interface
 */
static void __finally_IAccessor_RemoteAddRefAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAccessor_RemoteAddRefAccessor_Proxy(
    IAccessor* This,
    HACCESSOR hAccessor,
    DBREFCOUNT *pcRefCount,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAccessor_RemoteAddRefAccessor_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hAccessor,
                0xb9 /* FC_UINT3264 */);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[24],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAccessor_RemoteAddRefAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[2], (void *)pcRefCount );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[24], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAccessor_RemoteAddRefAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAccessor * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBREFCOUNT * pcRefCount;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IAccessor_RemoteAddRefAccessor_Stub( struct __frame_IAccessor_RemoteAddRefAccessor_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pcRefCount,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[24]);

}

void __RPC_STUB IAccessor_RemoteAddRefAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAccessor_RemoteAddRefAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IAccessor*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAccessor_RemoteAddRefAccessor_Stub );
    __frame->pcRefCount = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[0]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hAccessor,
            0xb9 /* FC_UINT3264 */);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2],
            0);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IAccessor_AddRefAccessor_Stub(__frame->_This, __frame->hAccessor, __frame->pcRefCount, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[24]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[2]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[24]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAccessor_RemoteAddRefAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAccessor_RemoteCreateAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAccessor_RemoteCreateAccessor_Proxy(
    IAccessor* This,
    DBACCESSORFLAGS dwAccessorFlags,
    DBCOUNTITEM cBindings,
    DBBINDING *rgBindings,
    DBLENGTH cbRowSize,
    HACCESSOR *phAccessor,
    DBBINDSTATUS *rgStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAccessor_RemoteCreateAccessor_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!phAccessor) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[172]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer = dwAccessorFlags;
            __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cBindings,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cbRowSize,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[172]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HACCESSOR) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *phAccessor = *(HACCESSOR *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[172],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[194],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAccessor_RemoteCreateAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[158], (void *)phAccessor );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[172], (void *)rgStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[194], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAccessor_RemoteCreateAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAccessor * _This;
    HRESULT _RetVal;
    DBACCESSORFLAGS dwAccessorFlags;
    DBCOUNTITEM cBindings;
    DBBINDING * rgBindings;
    DBLENGTH cbRowSize;
    HACCESSOR _W0;
    HACCESSOR * phAccessor;
    DBBINDSTATUS * rgStatus;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IAccessor_RemoteCreateAccessor_Stub( struct __frame_IAccessor_RemoteCreateAccessor_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgBindings,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[172]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[194]);

}

void __RPC_STUB IAccessor_RemoteCreateAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAccessor_RemoteCreateAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IAccessor*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAccessor_RemoteCreateAccessor_Stub );
    __frame->rgBindings = 0;
    __frame->phAccessor = 0;
    __frame->rgStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[12]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBACCESSORFLAGS) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwAccessorFlags = *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cBindings,
            0xb9 /* FC_UINT3264 */);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[154],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cbRowSize,
            0xb9 /* FC_UINT3264 */);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[172],
            0);


        __frame->phAccessor = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IAccessor_CreateAccessor_Stub(__frame->_This, __frame->dwAccessorFlags, __frame->cBindings, __frame->rgBindings, __frame->cbRowSize, __frame->phAccessor, __frame->rgStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[172]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[194]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HACCESSOR *)__frame->_StubMsg.Buffer = *__frame->phAccessor;
        __frame->_StubMsg.Buffer += sizeof(HACCESSOR);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[172]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[194]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAccessor_RemoteCreateAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAccessor_RemoteGetBindings_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAccessor_RemoteGetBindings_Proxy(
    IAccessor* This,
    HACCESSOR hAccessor,
    DBACCESSORFLAGS *pdwAccessorFlags,
    DBCOUNTITEM *pcBindings,
    DBBINDING **prgBindings,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAccessor_RemoteGetBindings_Proxy );
    __frame->This = This;
    if (prgBindings) MIDL_memset( prgBindings, 0, sizeof( *prgBindings ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pdwAccessorFlags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcBindings) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgBindings) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hAccessor,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *pcBindings;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[36]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBACCESSORFLAGS) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pdwAccessorFlags = *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcBindings = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[228],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAccessor_RemoteGetBindings_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[198], (void *)pdwAccessorFlags );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[202], (void *)pcBindings );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*pcBindings;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[228], (void *)prgBindings );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[250], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAccessor_RemoteGetBindings_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAccessor * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBACCESSORFLAGS _W0;
    DBACCESSORFLAGS * pdwAccessorFlags;
    DBCOUNTITEM * pcBindings;
    DBBINDING *_W1;
    DBBINDING ** prgBindings;
    IErrorInfo *_W2;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IAccessor_RemoteGetBindings_Stub( struct __frame_IAccessor_RemoteGetBindings_Stub *__frame )
{



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgBindings,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[228]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);

}

void __RPC_STUB IAccessor_RemoteGetBindings_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAccessor_RemoteGetBindings_Stub __f, * const __frame = &__f;

    __frame->_This = (IAccessor*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAccessor_RemoteGetBindings_Stub );
    __frame->pdwAccessorFlags = 0;
    __frame->pcBindings = 0;
    __frame->prgBindings = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[36]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hAccessor,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcBindings = (DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);


        __frame->pdwAccessorFlags = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prgBindings = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->ppErrorInfoRem = &__frame->_W2;
        __frame->_W2 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IAccessor_GetBindings_Stub(__frame->_This, __frame->hAccessor, __frame->pdwAccessorFlags, __frame->pcBindings, __frame->prgBindings, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[228]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBACCESSORFLAGS *)__frame->_StubMsg.Buffer = *__frame->pdwAccessorFlags;
        __frame->_StubMsg.Buffer += sizeof(DBACCESSORFLAGS);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *__frame->pcBindings;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcBindings;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[228]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[250]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAccessor_RemoteGetBindings_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IAccessor_RemoteReleaseAccessor_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IAccessor_RemoteReleaseAccessor_Proxy(
    IAccessor* This,
    HACCESSOR hAccessor,
    DBREFCOUNT *pcRefCount,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IAccessor_RemoteReleaseAccessor_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hAccessor,
                0xb9 /* FC_UINT3264 */);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[56]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pcRefCount,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IAccessor_RemoteReleaseAccessor_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[254], (void *)pcRefCount );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[276], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IAccessor_RemoteReleaseAccessor_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IAccessor * _This;
    HRESULT _RetVal;
    HACCESSOR hAccessor;
    DBREFCOUNT * pcRefCount;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IAccessor_RemoteReleaseAccessor_Stub( struct __frame_IAccessor_RemoteReleaseAccessor_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pcRefCount,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

}

void __RPC_STUB IAccessor_RemoteReleaseAccessor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IAccessor_RemoteReleaseAccessor_Stub __f, * const __frame = &__f;

    __frame->_This = (IAccessor*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IAccessor_RemoteReleaseAccessor_Stub );
    __frame->pcRefCount = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[56]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hAccessor,
            0xb9 /* FC_UINT3264 */);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254],
            0);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IAccessor_ReleaseAccessor_Stub(__frame->_This, __frame->hAccessor, __frame->pcRefCount, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pcRefCount,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[254]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[276]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IAccessor_RemoteReleaseAccessor_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IAccessor_FormatStringOffsetTable[] =
{
    0,  /* IAccessor::RemoteAddRefAccessor */
    12,  /* IAccessor::RemoteCreateAccessor */
    36,  /* IAccessor::RemoteGetBindings */
    56,  /* IAccessor::RemoteReleaseAccessor */
};

static const CINTERFACE_PROXY_VTABLE(7) _IAccessorProxyVtbl =
{
    {
        &IID_IAccessor,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IAccessor_AddRefAccessor_Proxy,
        IAccessor_CreateAccessor_Proxy,
        IAccessor_GetBindings_Proxy,
        IAccessor_ReleaseAccessor_Proxy,
    }
};

static const MIDL_SERVER_INFO IAccessor_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IAccessor_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IAccessor_table[] =
{
    IAccessor_RemoteAddRefAccessor_Stub,
    IAccessor_RemoteCreateAccessor_Stub,
    IAccessor_RemoteGetBindings_Stub,
    IAccessor_RemoteReleaseAccessor_Stub
};

static const CInterfaceStubVtbl _IAccessorStubVtbl =
{
    {
        &IID_IAccessor,
        &IAccessor_ServerInfo,
        7,
        &IAccessor_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IRowsetInfo interface
 */
static void __finally_IRowsetInfo_RemoteGetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetInfo_RemoteGetProperties_Proxy(
    IRowsetInfo* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertySets,
    DBPROPSET **prgPropertySets,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetInfo_RemoteGetProperties_Proxy );
    __frame->This = This;
    if (prgPropertySets) MIDL_memset( prgPropertySets, 0, sizeof( *prgPropertySets ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pcPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[346]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[346]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[68]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1616],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1638],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetInfo_RemoteGetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[350], (void *)pcPropertySets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertySets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1616], (void *)prgPropertySets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1638], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetInfo_RemoteGetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetInfo * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertySets;
    DBPROPSET *_W0;
    DBPROPSET ** prgPropertySets;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IRowsetInfo_RemoteGetProperties_Stub( struct __frame_IRowsetInfo_RemoteGetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[346]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1616]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1638]);

}

void __RPC_STUB IRowsetInfo_RemoteGetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetInfo_RemoteGetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetInfo_RemoteGetProperties_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertySets = 0;
    __frame->prgPropertySets = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[68]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[346],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertySets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->prgPropertySets = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetInfo_GetProperties_Stub(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertySets, __frame->prgPropertySets, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1616]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1638]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertySets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1616]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1638]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetInfo_RemoteGetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowsetInfo_RemoteGetReferencedRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetInfo_RemoteGetReferencedRowset_Proxy(
    IRowsetInfo* This,
    DBORDINAL iOrdinal,
    REFIID riid,
    IUnknown **ppReferencedRowset,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetInfo_RemoteGetReferencedRowset_Proxy );
    __frame->This = This;
    if (ppReferencedRowset) MIDL_memset( ppReferencedRowset, 0, sizeof( *ppReferencedRowset ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppReferencedRowset) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 36;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&iOrdinal,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[88]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppReferencedRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1652],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1674],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetInfo_RemoteGetReferencedRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1652], (void *)ppReferencedRowset );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1674], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetInfo_RemoteGetReferencedRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetInfo * _This;
    HRESULT _RetVal;
    DBORDINAL iOrdinal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppReferencedRowset;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IRowsetInfo_RemoteGetReferencedRowset_Stub( struct __frame_IRowsetInfo_RemoteGetReferencedRowset_Stub *__frame )
{


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppReferencedRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1652]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1674]);

}

void __RPC_STUB IRowsetInfo_RemoteGetReferencedRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetInfo_RemoteGetReferencedRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetInfo_RemoteGetReferencedRowset_Stub );
    __frame->riid = 0;
    __frame->ppReferencedRowset = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[88]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->iOrdinal,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppReferencedRowset = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetInfo_GetReferencedRowset_Stub(__frame->_This, __frame->iOrdinal, __frame->riid, __frame->ppReferencedRowset, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppReferencedRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1652]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1674]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppReferencedRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1652]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1674]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetInfo_RemoteGetReferencedRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowsetInfo_RemoteGetSpecification_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetInfo_RemoteGetSpecification_Proxy(
    IRowsetInfo* This,
    REFIID riid,
    IUnknown **ppSpecification,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetInfo_RemoteGetSpecification_Proxy );
    __frame->This = This;
    if (ppSpecification) MIDL_memset( ppSpecification, 0, sizeof( *ppSpecification ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSpecification) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[104]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSpecification,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1688],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetInfo_RemoteGetSpecification_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1688], (void *)ppSpecification );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1710], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetInfo_RemoteGetSpecification_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetInfo * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppSpecification;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IRowsetInfo_RemoteGetSpecification_Stub( struct __frame_IRowsetInfo_RemoteGetSpecification_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSpecification,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1688]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710]);

}

void __RPC_STUB IRowsetInfo_RemoteGetSpecification_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetInfo_RemoteGetSpecification_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetInfo_RemoteGetSpecification_Stub );
    __frame->riid = 0;
    __frame->ppSpecification = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[104]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppSpecification = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetInfo_GetSpecification_Stub(__frame->_This, __frame->riid, __frame->ppSpecification, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSpecification,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1688]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSpecification,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1688]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1710]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetInfo_RemoteGetSpecification_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IRowsetInfo_FormatStringOffsetTable[] =
{
    68,  /* IRowsetInfo::RemoteGetProperties */
    88,  /* IRowsetInfo::RemoteGetReferencedRowset */
    104,  /* IRowsetInfo::RemoteGetSpecification */
};

static const CINTERFACE_PROXY_VTABLE(6) _IRowsetInfoProxyVtbl =
{
    {
        &IID_IRowsetInfo,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IRowsetInfo_GetProperties_Proxy,
        IRowsetInfo_GetReferencedRowset_Proxy,
        IRowsetInfo_GetSpecification_Proxy,
    }
};

static const MIDL_SERVER_INFO IRowsetInfo_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IRowsetInfo_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IRowsetInfo_table[] =
{
    IRowsetInfo_RemoteGetProperties_Stub,
    IRowsetInfo_RemoteGetReferencedRowset_Stub,
    IRowsetInfo_RemoteGetSpecification_Stub
};

static const CInterfaceStubVtbl _IRowsetInfoStubVtbl =
{
    {
        &IID_IRowsetInfo,
        &IRowsetInfo_ServerInfo,
        6,
        &IRowsetInfo_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IChapteredRowset interface
 */
static void __finally_IChapteredRowset_RemoteAddRefChapter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IChapteredRowset_RemoteAddRefChapter_Proxy(
    IChapteredRowset* This,
    HCHAPTER chapter,
    DBREFCOUNT *refcount,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IChapteredRowset_RemoteAddRefChapter_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!refcount) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&chapter,
                0xb9 /* FC_UINT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBREFCOUNT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *refcount = *(DBREFCOUNT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBREFCOUNT);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1736],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IChapteredRowset_RemoteAddRefChapter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1714], (void *)refcount );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1736], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IChapteredRowset_RemoteAddRefChapter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IChapteredRowset * _This;
    HRESULT _RetVal;
    HCHAPTER chapter;
    DBREFCOUNT _W0;
    DBREFCOUNT * refcount;
    IErrorInfo *_W1;
    IErrorInfo ** errorinfo;
};

static void __finally_IChapteredRowset_RemoteAddRefChapter_Stub( struct __frame_IChapteredRowset_RemoteAddRefChapter_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1736]);

}

void __RPC_STUB IChapteredRowset_RemoteAddRefChapter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IChapteredRowset_RemoteAddRefChapter_Stub __f, * const __frame = &__f;

    __frame->_This = (IChapteredRowset*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IChapteredRowset_RemoteAddRefChapter_Stub );
    __frame->refcount = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[118]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->chapter,
            0xb9 /* FC_UINT3264 */);


        __frame->refcount = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->errorinfo = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IChapteredRowset_AddRefChapter_Stub(__frame->_This, __frame->chapter, __frame->refcount, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1736]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBREFCOUNT *)__frame->_StubMsg.Buffer = *__frame->refcount;
        __frame->_StubMsg.Buffer += sizeof(DBREFCOUNT);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1736]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IChapteredRowset_RemoteAddRefChapter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IChapteredRowset_RemoteReleaseChapter_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IChapteredRowset_RemoteReleaseChapter_Proxy(
    IChapteredRowset* This,
    HCHAPTER chapter,
    DBREFCOUNT *refcount,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IChapteredRowset_RemoteReleaseChapter_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!refcount) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&chapter,
                0xb9 /* FC_UINT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBREFCOUNT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *refcount = *(DBREFCOUNT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBREFCOUNT);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1762],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IChapteredRowset_RemoteReleaseChapter_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1740], (void *)refcount );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1762], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IChapteredRowset_RemoteReleaseChapter_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IChapteredRowset * _This;
    HRESULT _RetVal;
    HCHAPTER chapter;
    DBREFCOUNT _W0;
    DBREFCOUNT * refcount;
    IErrorInfo *_W1;
    IErrorInfo ** errorinfo;
};

static void __finally_IChapteredRowset_RemoteReleaseChapter_Stub( struct __frame_IChapteredRowset_RemoteReleaseChapter_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1762]);

}

void __RPC_STUB IChapteredRowset_RemoteReleaseChapter_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IChapteredRowset_RemoteReleaseChapter_Stub __f, * const __frame = &__f;

    __frame->_This = (IChapteredRowset*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IChapteredRowset_RemoteReleaseChapter_Stub );
    __frame->refcount = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[130]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->chapter,
            0xb9 /* FC_UINT3264 */);


        __frame->refcount = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->errorinfo = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IChapteredRowset_ReleaseChapter_Stub(__frame->_This, __frame->chapter, __frame->refcount, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1762]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBREFCOUNT *)__frame->_StubMsg.Buffer = *__frame->refcount;
        __frame->_StubMsg.Buffer += sizeof(DBREFCOUNT);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1762]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IChapteredRowset_RemoteReleaseChapter_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IChapteredRowset_FormatStringOffsetTable[] =
{
    118,  /* IChapteredRowset::RemoteAddRefChapter */
    130,  /* IChapteredRowset::RemoteReleaseChapter */
};

static const CINTERFACE_PROXY_VTABLE(5) _IChapteredRowsetProxyVtbl =
{
    {
        &IID_IChapteredRowset,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IChapteredRowset_AddRefChapter_Proxy,
        IChapteredRowset_ReleaseChapter_Proxy,
    }
};

static const MIDL_SERVER_INFO IChapteredRowset_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IChapteredRowset_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IChapteredRowset_table[] =
{
    IChapteredRowset_RemoteAddRefChapter_Stub,
    IChapteredRowset_RemoteReleaseChapter_Stub
};

static const CInterfaceStubVtbl _IChapteredRowsetStubVtbl =
{
    {
        &IID_IChapteredRowset,
        &IChapteredRowset_ServerInfo,
        5,
        &IChapteredRowset_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICommand interface
 */
static void __finally_ICommand_RemoteCancel_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICommand_RemoteCancel_Proxy(
    ICommand* This,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICommand_RemoteCancel_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[142]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1784],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICommand_RemoteCancel_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[1784], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICommand_RemoteCancel_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICommand * _This;
    HRESULT _RetVal;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ICommand_RemoteCancel_Stub( struct __frame_ICommand_RemoteCancel_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1784]);

}

void __RPC_STUB ICommand_RemoteCancel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICommand_RemoteCancel_Stub __f, * const __frame = &__f;

    __frame->_This = (ICommand*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICommand_RemoteCancel_Stub );
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[142]);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICommand_Cancel_Stub(__frame->_This, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1784]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1784]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICommand_RemoteCancel_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICommand_RemoteExecute_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICommand_RemoteExecute_Proxy(
    ICommand* This,
    IUnknown *pUnkOuter,
    REFIID riid,
    HACCESSOR hAccessor,
    DB_UPARAMS cParamSets,
    GUID *pGuid,
    ULONG ulGuidOffset,
    RMTPACK *pInputParams,
    RMTPACK *pOutputParams,
    DBCOUNTITEM cBindings,
    DBBINDING *rgBindings,
    DBSTATUS *rgStatus,
    DBROWCOUNT *pcRowsAffected,
    IUnknown **ppRowset)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICommand_RemoteExecute_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 128;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1788]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pInputParams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3572]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pOutputParams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3576]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3598]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3612]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3626]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1788]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hAccessor,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cParamSets,
                0xb9 /* FC_UINT3264 */);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pGuid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1810]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulGuidOffset;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pInputParams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3572]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pOutputParams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3576]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&cBindings,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgBindings,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3598]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3612]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pcRowsAffected,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3616]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3626]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[148]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pOutputParams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3576],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3612],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pcRowsAffected,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3616],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3626],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICommand_RemoteExecute_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3576], (void *)pOutputParams );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)cBindings;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3612], (void *)rgStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3616], (void *)pcRowsAffected );

        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3626], (void *)ppRowset );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICommand_RemoteExecute_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICommand * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    REFIID riid;
    HACCESSOR hAccessor;
    DB_UPARAMS cParamSets;
    GUID * pGuid;
    ULONG ulGuidOffset;
    RMTPACK * pInputParams;
    RMTPACK * pOutputParams;
    DBCOUNTITEM cBindings;
    DBBINDING * rgBindings;
    DBSTATUS * rgStatus;
    DBROWCOUNT * pcRowsAffected;
    IUnknown ** ppRowset;
};

static void __finally_ICommand_RemoteExecute_Stub( struct __frame_ICommand_RemoteExecute_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1788]);




    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pGuid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1810]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pInputParams,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3572]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pOutputParams,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3576]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgBindings,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3598]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3612]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pcRowsAffected,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3616]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3626]);

}

void __RPC_STUB ICommand_RemoteExecute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICommand_RemoteExecute_Stub __f, * const __frame = &__f;

    __frame->_This = (ICommand*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICommand_RemoteExecute_Stub );
    __frame->pUnkOuter = 0;
    __frame->riid = 0;
    __frame->pGuid = 0;
    __frame->pInputParams = 0;
    __frame->pOutputParams = 0;
    __frame->rgBindings = 0;
    __frame->rgStatus = 0;
    __frame->pcRowsAffected = 0;
    __frame->ppRowset = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[148]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1788],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hAccessor,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cParamSets,
            0xb9 /* FC_UINT3264 */);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pGuid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1810],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulGuidOffset = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pInputParams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3572],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pOutputParams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3576],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->cBindings,
            0xb9 /* FC_UINT3264 */);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgBindings,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3598],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3612],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pcRowsAffected,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3616],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3626],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICommand_Execute_Stub(__frame->_This, __frame->pUnkOuter, __frame->riid, __frame->hAccessor, __frame->cParamSets, __frame->pGuid, __frame->ulGuidOffset, __frame->pInputParams, __frame->pOutputParams, __frame->cBindings, __frame->rgBindings, __frame->rgStatus, __frame->pcRowsAffected, __frame->ppRowset);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pOutputParams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3576]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3612]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3626]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pOutputParams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3576]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->cBindings;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3612]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pcRowsAffected,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3616]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3626]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICommand_RemoteExecute_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICommand_RemoteGetDBSession_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICommand_RemoteGetDBSession_Proxy(
    ICommand* This,
    REFIID riid,
    IUnknown **ppSession,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICommand_RemoteGetDBSession_Proxy );
    __frame->This = This;
    if (ppSession) MIDL_memset( ppSession, 0, sizeof( *ppSession ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSession) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[194]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3640],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3662],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICommand_RemoteGetDBSession_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3640], (void *)ppSession );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3662], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICommand_RemoteGetDBSession_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICommand * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppSession;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ICommand_RemoteGetDBSession_Stub( struct __frame_ICommand_RemoteGetDBSession_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSession,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3640]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3662]);

}

void __RPC_STUB ICommand_RemoteGetDBSession_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICommand_RemoteGetDBSession_Stub __f, * const __frame = &__f;

    __frame->_This = (ICommand*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICommand_RemoteGetDBSession_Stub );
    __frame->riid = 0;
    __frame->ppSession = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[194]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppSession = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICommand_GetDBSession_Stub(__frame->_This, __frame->riid, __frame->ppSession, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3640]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3662]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3640]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3662]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICommand_RemoteGetDBSession_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICommand_FormatStringOffsetTable[] =
{
    142,  /* ICommand::RemoteCancel */
    148,  /* ICommand::RemoteExecute */
    194,  /* ICommand::RemoteGetDBSession */
};

static const CINTERFACE_PROXY_VTABLE(6) _ICommandProxyVtbl =
{
    {
        &IID_ICommand,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICommand_Cancel_Proxy,
        ICommand_Execute_Proxy,
        ICommand_GetDBSession_Proxy,
    }
};

static const MIDL_SERVER_INFO ICommand_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICommand_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICommand_table[] =
{
    ICommand_RemoteCancel_Stub,
    ICommand_RemoteExecute_Stub,
    ICommand_RemoteGetDBSession_Stub
};

static const CInterfaceStubVtbl _ICommandStubVtbl =
{
    {
        &IID_ICommand,
        &ICommand_ServerInfo,
        6,
        &ICommand_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICommandText interface
 */
static void __finally_ICommandText_RemoteGetCommandText_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICommandText_RemoteGetCommandText_Proxy(
    ICommandText* This,
    GUID *pguidDialect,
    LPOLESTR *ppwszCommand,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICommandText_RemoteGetCommandText_Proxy );
    __frame->This = This;
    if (ppwszCommand) MIDL_memset( ppwszCommand, 0, sizeof( *ppwszCommand ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppwszCommand) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pguidDialect,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3666]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[208]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pguidDialect,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3666],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppwszCommand,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3670],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICommandText_RemoteGetCommandText_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3666], (void *)pguidDialect );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3674], (void *)ppwszCommand );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3696], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICommandText_RemoteGetCommandText_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICommandText * _This;
    HRESULT _RetVal;
    GUID * pguidDialect;
    LPOLESTR _W0;
    LPOLESTR * ppwszCommand;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ICommandText_RemoteGetCommandText_Stub( struct __frame_ICommandText_RemoteGetCommandText_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pguidDialect,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3666]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppwszCommand,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3670]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696]);

}

void __RPC_STUB ICommandText_RemoteGetCommandText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICommandText_RemoteGetCommandText_Stub __f, * const __frame = &__f;

    __frame->_This = (ICommandText*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICommandText_RemoteGetCommandText_Stub );
    __frame->pguidDialect = 0;
    __frame->ppwszCommand = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[208]);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pguidDialect,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3666],
            0);


        __frame->ppwszCommand = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICommandText_GetCommandText_Stub(__frame->_This, __frame->pguidDialect, __frame->ppwszCommand, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 36;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszCommand,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3670]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pguidDialect,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3666]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszCommand,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3670]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3696]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICommandText_RemoteGetCommandText_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ICommandText_RemoteSetCommandText_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICommandText_RemoteSetCommandText_Proxy(
    ICommandText* This,
    REFGUID rguidDialect,
    LPCOLESTR pwszCommand,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICommandText_RemoteSetCommandText_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!rguidDialect) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pwszCommand,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3704]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguidDialect,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[296]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pwszCommand,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3704]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[222]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3726],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICommandText_RemoteSetCommandText_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3726], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICommandText_RemoteSetCommandText_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICommandText * _This;
    HRESULT _RetVal;
    REFGUID rguidDialect;
    LPCOLESTR pwszCommand;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ICommandText_RemoteSetCommandText_Stub( struct __frame_ICommandText_RemoteSetCommandText_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pwszCommand,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3704]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3726]);

}

void __RPC_STUB ICommandText_RemoteSetCommandText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICommandText_RemoteSetCommandText_Stub __f, * const __frame = &__f;

    __frame->_This = (ICommandText*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICommandText_RemoteSetCommandText_Stub );
    __frame->rguidDialect = 0;
    __frame->pwszCommand = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[222]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguidDialect,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[296],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pwszCommand,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3704],
            0);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICommandText_SetCommandText_Stub(__frame->_This, __frame->rguidDialect, __frame->pwszCommand, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3726]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3726]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICommandText_RemoteSetCommandText_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICommandText_FormatStringOffsetTable[] =
{
    142,  /* ICommand::RemoteCancel */
    148,  /* ICommand::RemoteExecute */
    194,  /* ICommand::RemoteGetDBSession */
    208,  /* ICommandText::RemoteGetCommandText */
    222,  /* ICommandText::RemoteSetCommandText */
};

static const CINTERFACE_PROXY_VTABLE(8) _ICommandTextProxyVtbl =
{
    {
        &IID_ICommandText,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICommand_Cancel_Proxy,
        ICommand_Execute_Proxy,
        ICommand_GetDBSession_Proxy,
        ICommandText_GetCommandText_Proxy,
        ICommandText_SetCommandText_Proxy,
    }
};

static const MIDL_SERVER_INFO ICommandText_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICommandText_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICommandText_table[] =
{
    ICommand_RemoteCancel_Stub,
    ICommand_RemoteExecute_Stub,
    ICommand_RemoteGetDBSession_Stub,
    ICommandText_RemoteGetCommandText_Stub,
    ICommandText_RemoteSetCommandText_Stub
};

static const CInterfaceStubVtbl _ICommandTextStubVtbl =
{
    {
        &IID_ICommandText,
        &ICommandText_ServerInfo,
        8,
        &ICommandText_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IColumnsInfo interface
 */
static void __finally_IColumnsInfo_RemoteGetColumnInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IColumnsInfo_RemoteGetColumnInfo_Proxy(
    IColumnsInfo* This,
    DBORDINAL *columns,
    DBCOLUMNINFO **colinfo,
    DBBYTEOFFSET **name_offsets,
    DBBYTEOFFSET **columnid_offsets,
    DBLENGTH *string_len,
    OLECHAR **stringsbuffer,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IColumnsInfo_RemoteGetColumnInfo_Proxy );
    __frame->This = This;
    if (colinfo) MIDL_memset( colinfo, 0, sizeof( *colinfo ));
    if (name_offsets) MIDL_memset( name_offsets, 0, sizeof( *name_offsets ));
    if (columnid_offsets) MIDL_memset( columnid_offsets, 0, sizeof( *columnid_offsets ));
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!columns) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!colinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!name_offsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!columnid_offsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!string_len) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*string_len;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)stringsbuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3874]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBORDINAL *)__frame->_StubMsg.Buffer = *columns;
            __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBLENGTH *)__frame->_StubMsg.Buffer = *string_len;
            __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*string_len;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)stringsbuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3874]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[236]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBORDINAL) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *columns = *(DBORDINAL *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&colinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3808],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&name_offsets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3830],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&columnid_offsets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3852],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBLENGTH) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *string_len = *(DBLENGTH *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&stringsbuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3874],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3896],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IColumnsInfo_RemoteGetColumnInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3730], (void *)columns );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*columns;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3808], (void *)colinfo );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*columns;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3830], (void *)name_offsets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*columns;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3852], (void *)columnid_offsets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3856], (void *)string_len );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*string_len;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3874], (void *)stringsbuffer );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3896], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IColumnsInfo_RemoteGetColumnInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IColumnsInfo * _This;
    HRESULT _RetVal;
    DBORDINAL * columns;
    DBCOLUMNINFO *_W0;
    DBCOLUMNINFO ** colinfo;
    DBBYTEOFFSET *_W1;
    DBBYTEOFFSET ** name_offsets;
    DBBYTEOFFSET *_W2;
    DBBYTEOFFSET ** columnid_offsets;
    DBLENGTH * string_len;
    OLECHAR ** stringsbuffer;
    IErrorInfo *_W3;
    IErrorInfo ** errorinfo;
};

static void __finally_IColumnsInfo_RemoteGetColumnInfo_Stub( struct __frame_IColumnsInfo_RemoteGetColumnInfo_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->colinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3808]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->name_offsets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3830]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->columnid_offsets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3852]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->string_len;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->stringsbuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3874]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3896]);

}

void __RPC_STUB IColumnsInfo_RemoteGetColumnInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IColumnsInfo_RemoteGetColumnInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IColumnsInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IColumnsInfo_RemoteGetColumnInfo_Stub );
    __frame->columns = 0;
    __frame->colinfo = 0;
    __frame->name_offsets = 0;
    __frame->columnid_offsets = 0;
    __frame->string_len = 0;
    __frame->stringsbuffer = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[236]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBORDINAL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->columns = (DBORDINAL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBLENGTH) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->string_len = (DBLENGTH *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->stringsbuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3874],
            0);


        __frame->colinfo = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->name_offsets = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->columnid_offsets = &__frame->_W2;
        __frame->_W2 = 0;
        __frame->errorinfo = &__frame->_W3;
        __frame->_W3 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IColumnsInfo_GetColumnInfo_Stub(__frame->_This, __frame->columns, __frame->colinfo, __frame->name_offsets, __frame->columnid_offsets, __frame->string_len, __frame->stringsbuffer, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->colinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3808]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->name_offsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3830]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->columnid_offsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3852]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->string_len;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->stringsbuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3874]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3896]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBORDINAL *)__frame->_StubMsg.Buffer = *__frame->columns;
        __frame->_StubMsg.Buffer += sizeof(DBORDINAL);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->colinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3808]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->name_offsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3830]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->columns;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->columnid_offsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3852]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBLENGTH *)__frame->_StubMsg.Buffer = *__frame->string_len;
        __frame->_StubMsg.Buffer += sizeof(DBLENGTH);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->string_len;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->stringsbuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3874]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3896]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IColumnsInfo_RemoteGetColumnInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IColumnsInfo_RemoteMapColumnIDs_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IColumnsInfo_RemoteMapColumnIDs_Proxy(
    IColumnsInfo* This,
    DBORDINAL column_ids,
    const DBID *dbids,
    DBORDINAL *columns,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IColumnsInfo_RemoteMapColumnIDs_Proxy );
    __frame->This = This;
    if (columns) MIDL_memset( columns, 0, sizeof( *columns ));
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!dbids) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!columns) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)column_ids;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)dbids,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3936]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&column_ids,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)column_ids;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)dbids,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3936]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[266]);

            NdrComplexArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&columns,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3958],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3994],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IColumnsInfo_RemoteMapColumnIDs_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)column_ids;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3972], (void *)columns );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[3994], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IColumnsInfo_RemoteMapColumnIDs_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IColumnsInfo * _This;
    HRESULT _RetVal;
    DBORDINAL column_ids;
    const DBID * dbids;
    DBORDINAL * columns;
    IErrorInfo *_W0;
    IErrorInfo ** errorinfo;
};

static void __finally_IColumnsInfo_RemoteMapColumnIDs_Stub( struct __frame_IColumnsInfo_RemoteMapColumnIDs_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->column_ids;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->dbids,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3954]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->column_ids;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->columns,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3972]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3994]);

}

void __RPC_STUB IColumnsInfo_RemoteMapColumnIDs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IColumnsInfo_RemoteMapColumnIDs_Stub __f, * const __frame = &__f;

    __frame->_This = (IColumnsInfo*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IColumnsInfo_RemoteMapColumnIDs_Stub );
    __frame->dbids = 0;
    __frame->columns = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[266]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->column_ids,
            0xb9 /* FC_UINT3264 */);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->dbids,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3936],
            0);


        __frame->columns = NdrAllocate(&__frame->_StubMsg, (ULONG)__frame->column_ids * 8);
        memset(__frame->columns, 0, (ULONG)__frame->column_ids * 8);
        __frame->errorinfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IColumnsInfo_MapColumnIDs_Stub(__frame->_This, __frame->column_ids, __frame->dbids, __frame->columns, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->column_ids;

        NdrComplexArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->columns,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3958]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3994]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->column_ids;

        NdrComplexArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->columns,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3958]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3994]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IColumnsInfo_RemoteMapColumnIDs_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IColumnsInfo_FormatStringOffsetTable[] =
{
    236,  /* IColumnsInfo::RemoteGetColumnInfo */
    266,  /* IColumnsInfo::RemoteMapColumnIDs */
};

static const CINTERFACE_PROXY_VTABLE(5) _IColumnsInfoProxyVtbl =
{
    {
        &IID_IColumnsInfo,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IColumnsInfo_GetColumnInfo_Proxy,
        IColumnsInfo_MapColumnIDs_Proxy,
    }
};

static const MIDL_SERVER_INFO IColumnsInfo_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IColumnsInfo_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IColumnsInfo_table[] =
{
    IColumnsInfo_RemoteGetColumnInfo_Stub,
    IColumnsInfo_RemoteMapColumnIDs_Stub
};

static const CInterfaceStubVtbl _IColumnsInfoStubVtbl =
{
    {
        &IID_IColumnsInfo,
        &IColumnsInfo_ServerInfo,
        5,
        &IColumnsInfo_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBCreateCommand interface
 */
static void __finally_IDBCreateCommand_RemoteCreateCommand_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBCreateCommand_RemoteCreateCommand_Proxy(
    IDBCreateCommand* This,
    IUnknown *pUnkOuter,
    REFIID riid,
    IUnknown **ppCommand,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBCreateCommand_RemoteCreateCommand_Proxy );
    __frame->This = This;
    if (ppCommand) MIDL_memset( ppCommand, 0, sizeof( *ppCommand ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppCommand) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3998]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3998]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppCommand,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4026],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4048],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBCreateCommand_RemoteCreateCommand_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4026], (void *)ppCommand );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4048], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBCreateCommand_RemoteCreateCommand_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBCreateCommand * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppCommand;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBCreateCommand_RemoteCreateCommand_Stub( struct __frame_IDBCreateCommand_RemoteCreateCommand_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3998]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppCommand,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4026]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4048]);

}

void __RPC_STUB IDBCreateCommand_RemoteCreateCommand_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBCreateCommand_RemoteCreateCommand_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBCreateCommand*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBCreateCommand_RemoteCreateCommand_Stub );
    __frame->pUnkOuter = 0;
    __frame->riid = 0;
    __frame->ppCommand = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[282]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[3998],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppCommand = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBCreateCommand_CreateCommand_Stub(__frame->_This, __frame->pUnkOuter, __frame->riid, __frame->ppCommand, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppCommand,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4026]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4048]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppCommand,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4026]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4048]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBCreateCommand_RemoteCreateCommand_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBCreateCommand_FormatStringOffsetTable[] =
{
    282,  /* IDBCreateCommand::RemoteCreateCommand */
};

static const CINTERFACE_PROXY_VTABLE(4) _IDBCreateCommandProxyVtbl =
{
    {
        &IID_IDBCreateCommand,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBCreateCommand_CreateCommand_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBCreateCommand_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBCreateCommand_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBCreateCommand_table[] =
{
    IDBCreateCommand_RemoteCreateCommand_Stub
};

static const CInterfaceStubVtbl _IDBCreateCommandStubVtbl =
{
    {
        &IID_IDBCreateCommand,
        &IDBCreateCommand_ServerInfo,
        4,
        &IDBCreateCommand_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBCreateSession interface
 */
static void __finally_IDBCreateSession_RemoteCreateSession_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBCreateSession_RemoteCreateSession_Proxy(
    IDBCreateSession* This,
    IUnknown *pUnkOuter,
    REFIID riid,
    IUnknown **ppDBSession,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBCreateSession_RemoteCreateSession_Proxy );
    __frame->This = This;
    if (ppDBSession) MIDL_memset( ppDBSession, 0, sizeof( *ppDBSession ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppDBSession) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4052]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4052]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[300]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDBSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4080],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBCreateSession_RemoteCreateSession_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4080], (void *)ppDBSession );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4102], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBCreateSession_RemoteCreateSession_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBCreateSession * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppDBSession;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBCreateSession_RemoteCreateSession_Stub( struct __frame_IDBCreateSession_RemoteCreateSession_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4052]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDBSession,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4080]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);

}

void __RPC_STUB IDBCreateSession_RemoteCreateSession_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBCreateSession_RemoteCreateSession_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBCreateSession*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBCreateSession_RemoteCreateSession_Stub );
    __frame->pUnkOuter = 0;
    __frame->riid = 0;
    __frame->ppDBSession = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[300]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4052],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppDBSession = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBCreateSession_CreateSession_Stub(__frame->_This, __frame->pUnkOuter, __frame->riid, __frame->ppDBSession, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDBSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4080]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDBSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4080]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4102]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBCreateSession_RemoteCreateSession_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBCreateSession_FormatStringOffsetTable[] =
{
    300,  /* IDBCreateSession::RemoteCreateSession */
};

static const CINTERFACE_PROXY_VTABLE(4) _IDBCreateSessionProxyVtbl =
{
    {
        &IID_IDBCreateSession,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBCreateSession_CreateSession_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBCreateSession_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBCreateSession_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBCreateSession_table[] =
{
    IDBCreateSession_RemoteCreateSession_Stub
};

static const CInterfaceStubVtbl _IDBCreateSessionStubVtbl =
{
    {
        &IID_IDBCreateSession,
        &IDBCreateSession_ServerInfo,
        4,
        &IDBCreateSession_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ISourcesRowset interface
 */
static void __finally_ISourcesRowset_RemoteGetSourcesRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ISourcesRowset_RemoteGetSourcesRowset_Proxy(
    ISourcesRowset* This,
    IUnknown *pUnkOuter,
    REFIID riid,
    ULONG cPropertySets,
    DBPROPSET *rgProperties,
    IUnknown **ppSourcesRowset,
    ULONG cTotalProps,
    DBPROPSTATUS *rgPropStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ISourcesRowset_RemoteGetSourcesRowset_Proxy );
    __frame->This = This;
    if (ppSourcesRowset) MIDL_memset( ppSourcesRowset, 0, sizeof( *ppSourcesRowset ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgProperties) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppSourcesRowset) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgPropStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 36;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4106]);

            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgProperties,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1574]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4106]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgProperties,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1574]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cTotalProps;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[318]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSourcesRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4150],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBPROPSTATUS) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *rgPropStatus = *(DBPROPSTATUS *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBPROPSTATUS);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4176],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ISourcesRowset_RemoteGetSourcesRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4150], (void *)ppSourcesRowset );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4154], (void *)rgPropStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4176], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ISourcesRowset_RemoteGetSourcesRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ISourcesRowset * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    REFIID riid;
    ULONG cPropertySets;
    DBPROPSET * rgProperties;
    IUnknown *_W0;
    IUnknown ** ppSourcesRowset;
    ULONG cTotalProps;
    DBPROPSTATUS _W1;
    DBPROPSTATUS * rgPropStatus;
    IErrorInfo *_W2;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ISourcesRowset_RemoteGetSourcesRowset_Stub( struct __frame_ISourcesRowset_RemoteGetSourcesRowset_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4106]);



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgProperties,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4128]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSourcesRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4150]);



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4176]);

}

void __RPC_STUB ISourcesRowset_RemoteGetSourcesRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ISourcesRowset_RemoteGetSourcesRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (ISourcesRowset*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ISourcesRowset_RemoteGetSourcesRowset_Stub );
    __frame->pUnkOuter = 0;
    __frame->riid = 0;
    __frame->rgProperties = 0;
    __frame->ppSourcesRowset = 0;
    __frame->rgPropStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[318]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4106],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgProperties,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[1574],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cTotalProps = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->ppSourcesRowset = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->rgPropStatus = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->ppErrorInfoRem = &__frame->_W2;
        __frame->_W2 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ISourcesRowset_GetSourcesRowset_Stub(__frame->_This, __frame->pUnkOuter, __frame->riid, __frame->cPropertySets, __frame->rgProperties, __frame->ppSourcesRowset, __frame->cTotalProps, __frame->rgPropStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSourcesRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4150]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4176]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSourcesRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4150]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBPROPSTATUS *)__frame->_StubMsg.Buffer = *__frame->rgPropStatus;
        __frame->_StubMsg.Buffer += sizeof(DBPROPSTATUS);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4176]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ISourcesRowset_RemoteGetSourcesRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ISourcesRowset_FormatStringOffsetTable[] =
{
    318,  /* ISourcesRowset::RemoteGetSourcesRowset */
};

static const CINTERFACE_PROXY_VTABLE(4) _ISourcesRowsetProxyVtbl =
{
    {
        &IID_ISourcesRowset,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ISourcesRowset_GetSourcesRowset_Proxy,
    }
};

static const MIDL_SERVER_INFO ISourcesRowset_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISourcesRowset_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ISourcesRowset_table[] =
{
    ISourcesRowset_RemoteGetSourcesRowset_Stub
};

static const CInterfaceStubVtbl _ISourcesRowsetStubVtbl =
{
    {
        &IID_ISourcesRowset,
        &ISourcesRowset_ServerInfo,
        4,
        &ISourcesRowset_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBProperties interface
 */
static void __finally_IDBProperties_RemoteGetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBProperties_RemoteGetProperties_Proxy(
    IDBProperties* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertySets,
    DBPROPSET **prgPropertySets,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBProperties_RemoteGetProperties_Proxy );
    __frame->This = This;
    if (prgPropertySets) MIDL_memset( prgPropertySets, 0, sizeof( *prgPropertySets ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pcPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4228]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4228]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[348]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4258],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4280],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBProperties_RemoteGetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4232], (void *)pcPropertySets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertySets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4258], (void *)prgPropertySets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4280], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBProperties_RemoteGetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBProperties * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertySets;
    DBPROPSET *_W0;
    DBPROPSET ** prgPropertySets;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBProperties_RemoteGetProperties_Stub( struct __frame_IDBProperties_RemoteGetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4228]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4258]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4280]);

}

void __RPC_STUB IDBProperties_RemoteGetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBProperties_RemoteGetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBProperties_RemoteGetProperties_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertySets = 0;
    __frame->prgPropertySets = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[348]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4228],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertySets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->prgPropertySets = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBProperties_GetProperties_Stub(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertySets, __frame->prgPropertySets, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4258]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4280]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertySets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4258]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4280]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBProperties_RemoteGetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBProperties_RemoteGetPropertyInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBProperties_RemoteGetPropertyInfo_Proxy(
    IDBProperties* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertyInfoSets,
    DBPROPINFOSET **prgPropertyInfoSets,
    ULONG *pcOffsets,
    DBBYTEOFFSET **prgDescOffsets,
    ULONG *pcbDescBuffer,
    OLECHAR **ppDescBuffer,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBProperties_RemoteGetPropertyInfo_Proxy );
    __frame->This = This;
    if (prgPropertyInfoSets) MIDL_memset( prgPropertyInfoSets, 0, sizeof( *prgPropertyInfoSets ));
    if (prgDescOffsets) MIDL_memset( prgDescOffsets, 0, sizeof( *prgDescOffsets ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pcPropertyInfoSets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertyInfoSets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcOffsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgDescOffsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcbDescBuffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4332]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4474]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4332]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertyInfoSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcOffsets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcbDescBuffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4474]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertyInfoSets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertyInfoSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcOffsets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgDescOffsets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4452],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcbDescBuffer = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4474],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4496],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBProperties_RemoteGetPropertyInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4336], (void *)pcPropertyInfoSets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertyInfoSets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4426], (void *)prgPropertyInfoSets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4430], (void *)pcOffsets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcOffsets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4452], (void *)prgDescOffsets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4456], (void *)pcbDescBuffer );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4474], (void *)ppDescBuffer );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4496], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBProperties_RemoteGetPropertyInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBProperties * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertyInfoSets;
    DBPROPINFOSET *_W0;
    DBPROPINFOSET ** prgPropertyInfoSets;
    ULONG * pcOffsets;
    DBBYTEOFFSET *_W1;
    DBBYTEOFFSET ** prgDescOffsets;
    ULONG * pcbDescBuffer;
    OLECHAR ** ppDescBuffer;
    IErrorInfo *_W2;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBProperties_RemoteGetPropertyInfo_Stub( struct __frame_IDBProperties_RemoteGetPropertyInfo_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4332]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertyInfoSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcOffsets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgDescOffsets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4452]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDescBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4474]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4496]);

}

void __RPC_STUB IDBProperties_RemoteGetPropertyInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBProperties_RemoteGetPropertyInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBProperties_RemoteGetPropertyInfo_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertyInfoSets = 0;
    __frame->prgPropertyInfoSets = 0;
    __frame->pcOffsets = 0;
    __frame->prgDescOffsets = 0;
    __frame->pcbDescBuffer = 0;
    __frame->ppDescBuffer = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[368]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4332],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertyInfoSets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcOffsets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcbDescBuffer = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4474],
            0);


        __frame->prgPropertyInfoSets = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prgDescOffsets = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->ppErrorInfoRem = &__frame->_W2;
        __frame->_W2 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBProperties_GetPropertyInfo_Stub(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertyInfoSets, __frame->prgPropertyInfoSets, __frame->pcOffsets, __frame->prgDescOffsets, __frame->pcbDescBuffer, __frame->ppDescBuffer, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 32;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertyInfoSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcOffsets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgDescOffsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4452]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4474]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4496]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertyInfoSets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertyInfoSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4426]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcOffsets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcOffsets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgDescOffsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4452]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcbDescBuffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4474]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4496]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBProperties_RemoteGetPropertyInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBProperties_RemoteSetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBProperties_RemoteSetProperties_Proxy(
    IDBProperties* This,
    ULONG cPropertySets,
    DBPROPSET *rgPropertySets,
    ULONG cTotalProps,
    DBPROPSTATUS *rgPropStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBProperties_RemoteSetProperties_Proxy );
    __frame->This = This;
    if (rgPropStatus) MIDL_memset( rgPropStatus, 0, sizeof( *rgPropStatus ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!rgPropStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4518]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4518]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cTotalProps;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[404]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgPropStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4522],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4554],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBProperties_RemoteSetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)cTotalProps;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4532], (void *)rgPropStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4554], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBProperties_RemoteSetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBProperties * _This;
    HRESULT _RetVal;
    ULONG cPropertySets;
    DBPROPSET * rgPropertySets;
    ULONG cTotalProps;
    DBPROPSTATUS * rgPropStatus;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBProperties_RemoteSetProperties_Stub( struct __frame_IDBProperties_RemoteSetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4518]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4532]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4554]);

}

void __RPC_STUB IDBProperties_RemoteSetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBProperties_RemoteSetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBProperties_RemoteSetProperties_Stub );
    __frame->rgPropertySets = 0;
    __frame->rgPropStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[404]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4518],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cTotalProps = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgPropStatus = NdrAllocate(&__frame->_StubMsg, __frame->cTotalProps * 4);
        memset(__frame->rgPropStatus, 0, __frame->cTotalProps * 4);
        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBProperties_SetProperties_Stub(__frame->_This, __frame->cPropertySets, __frame->rgPropertySets, __frame->cTotalProps, __frame->rgPropStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4522]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4554]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4522]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4554]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBProperties_RemoteSetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBProperties_FormatStringOffsetTable[] =
{
    348,  /* IDBProperties::RemoteGetProperties */
    368,  /* IDBProperties::RemoteGetPropertyInfo */
    404,  /* IDBProperties::RemoteSetProperties */
};

static const CINTERFACE_PROXY_VTABLE(6) _IDBPropertiesProxyVtbl =
{
    {
        &IID_IDBProperties,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBProperties_GetProperties_Proxy,
        IDBProperties_GetPropertyInfo_Proxy,
        IDBProperties_SetProperties_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBProperties_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBProperties_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBProperties_table[] =
{
    IDBProperties_RemoteGetProperties_Stub,
    IDBProperties_RemoteGetPropertyInfo_Stub,
    IDBProperties_RemoteSetProperties_Stub
};

static const CInterfaceStubVtbl _IDBPropertiesStubVtbl =
{
    {
        &IID_IDBProperties,
        &IDBProperties_ServerInfo,
        6,
        &IDBProperties_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBInitialize interface
 */
static void __finally_IDBInitialize_RemoteInitialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBInitialize_RemoteInitialize_Proxy(
    IDBInitialize* This,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBInitialize_RemoteInitialize_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[422]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4576],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBInitialize_RemoteInitialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4576], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBInitialize_RemoteInitialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBInitialize * _This;
    HRESULT _RetVal;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBInitialize_RemoteInitialize_Stub( struct __frame_IDBInitialize_RemoteInitialize_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4576]);

}

void __RPC_STUB IDBInitialize_RemoteInitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBInitialize_RemoteInitialize_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBInitialize*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBInitialize_RemoteInitialize_Stub );
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[422]);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBInitialize_Initialize_Stub(__frame->_This, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4576]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4576]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBInitialize_RemoteInitialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBInitialize_RemoteUninitialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBInitialize_RemoteUninitialize_Proxy(
    IDBInitialize* This,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBInitialize_RemoteUninitialize_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4598],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBInitialize_RemoteUninitialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4598], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBInitialize_RemoteUninitialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBInitialize * _This;
    HRESULT _RetVal;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBInitialize_RemoteUninitialize_Stub( struct __frame_IDBInitialize_RemoteUninitialize_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4598]);

}

void __RPC_STUB IDBInitialize_RemoteUninitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBInitialize_RemoteUninitialize_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBInitialize*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBInitialize_RemoteUninitialize_Stub );
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[428]);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBInitialize_Uninitialize_Stub(__frame->_This, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4598]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4598]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBInitialize_RemoteUninitialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBInitialize_FormatStringOffsetTable[] =
{
    422,  /* IDBInitialize::RemoteInitialize */
    428,  /* IDBInitialize::RemoteUninitialize */
};

static const CINTERFACE_PROXY_VTABLE(5) _IDBInitializeProxyVtbl =
{
    {
        &IID_IDBInitialize,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBInitialize_Initialize_Proxy,
        IDBInitialize_Uninitialize_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBInitialize_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBInitialize_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBInitialize_table[] =
{
    IDBInitialize_RemoteInitialize_Stub,
    IDBInitialize_RemoteUninitialize_Stub
};

static const CInterfaceStubVtbl _IDBInitializeStubVtbl =
{
    {
        &IID_IDBInitialize,
        &IDBInitialize_ServerInfo,
        5,
        &IDBInitialize_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBDataSourceAdmin interface
 */
static void __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBDataSourceAdmin_RemoteCreateDataSource_Proxy(
    IDBDataSourceAdmin* This,
    ULONG cPropertySets,
    DBPROPSET *rgPropertySets,
    IUnknown *pUnkOuter,
    REFIID riid,
    IUnknown **ppDBSession,
    ULONG cTotalProps,
    DBPROPSTATUS *rgPropStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Proxy );
    __frame->This = This;
    if (rgPropStatus) MIDL_memset( rgPropStatus, 0, sizeof( *rgPropStatus ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgPropStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 36;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4620]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4624]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppDBSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4652]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4620]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4624]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppDBSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4652]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cTotalProps;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[434]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDBSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4652],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgPropStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4656],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4688],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4652], (void *)ppDBSession );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)cTotalProps;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4666], (void *)rgPropStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4688], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBDataSourceAdmin_RemoteCreateDataSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBDataSourceAdmin * _This;
    HRESULT _RetVal;
    ULONG cPropertySets;
    DBPROPSET * rgPropertySets;
    IUnknown * pUnkOuter;
    REFIID riid;
    IUnknown ** ppDBSession;
    ULONG cTotalProps;
    DBPROPSTATUS * rgPropStatus;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Stub( struct __frame_IDBDataSourceAdmin_RemoteCreateDataSource_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4620]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4624]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDBSession,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4652]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4666]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4688]);

}

void __RPC_STUB IDBDataSourceAdmin_RemoteCreateDataSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBDataSourceAdmin_RemoteCreateDataSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBDataSourceAdmin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Stub );
    __frame->rgPropertySets = 0;
    __frame->pUnkOuter = 0;
    __frame->riid = 0;
    __frame->ppDBSession = 0;
    __frame->rgPropStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[434]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4620],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4624],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppDBSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4652],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cTotalProps = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgPropStatus = NdrAllocate(&__frame->_StubMsg, __frame->cTotalProps * 4);
        memset(__frame->rgPropStatus, 0, __frame->cTotalProps * 4);
        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBDataSourceAdmin_CreateDataSource_Stub(__frame->_This, __frame->cPropertySets, __frame->rgPropertySets, __frame->pUnkOuter, __frame->riid, __frame->ppDBSession, __frame->cTotalProps, __frame->rgPropStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDBSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4652]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4656]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4688]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDBSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4652]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4656]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4688]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBDataSourceAdmin_RemoteCreateDataSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBDataSourceAdmin_RemoteDestroyDataSource_Proxy(
    IDBDataSourceAdmin* This,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[464]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4710],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4710], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBDataSourceAdmin * _This;
    HRESULT _RetVal;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub( struct __frame_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4710]);

}

void __RPC_STUB IDBDataSourceAdmin_RemoteDestroyDataSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBDataSourceAdmin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub );
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[464]);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBDataSourceAdmin_DestroyDataSource_Stub(__frame->_This, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4710]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4710]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBDataSourceAdmin_RemoteDestroyDataSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBDataSourceAdmin_RemoteGetCreationProperties_Proxy(
    IDBDataSourceAdmin* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertyInfoSets,
    DBPROPINFOSET **prgPropertyInfoSets,
    DBCOUNTITEM *pcOffsets,
    DBBYTEOFFSET **prgDescOffsets,
    ULONG *pcbDescBuffer,
    OLECHAR **ppDescBuffer,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Proxy );
    __frame->This = This;
    if (prgPropertyInfoSets) MIDL_memset( prgPropertyInfoSets, 0, sizeof( *prgPropertyInfoSets ));
    if (prgDescOffsets) MIDL_memset( prgDescOffsets, 0, sizeof( *prgDescOffsets ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!pcPropertyInfoSets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertyInfoSets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcOffsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgDescOffsets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pcbDescBuffer) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4762]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4762]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertyInfoSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *pcOffsets;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcbDescBuffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[470]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertyInfoSets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertyInfoSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4792],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcOffsets = *(DBCOUNTITEM *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgDescOffsets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4818],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcbDescBuffer = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppDescBuffer,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4862],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4766], (void *)pcPropertyInfoSets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertyInfoSets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4792], (void *)prgPropertyInfoSets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4796], (void *)pcOffsets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*pcOffsets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4818], (void *)prgDescOffsets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4822], (void *)pcbDescBuffer );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcbDescBuffer;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4840], (void *)ppDescBuffer );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4862], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBDataSourceAdmin * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertyInfoSets;
    DBPROPINFOSET *_W0;
    DBPROPINFOSET ** prgPropertyInfoSets;
    DBCOUNTITEM * pcOffsets;
    DBBYTEOFFSET *_W1;
    DBBYTEOFFSET ** prgDescOffsets;
    ULONG * pcbDescBuffer;
    OLECHAR ** ppDescBuffer;
    IErrorInfo *_W2;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub( struct __frame_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4762]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertyInfoSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4792]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcOffsets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgDescOffsets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4818]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppDescBuffer,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4862]);

}

void __RPC_STUB IDBDataSourceAdmin_RemoteGetCreationProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBDataSourceAdmin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertyInfoSets = 0;
    __frame->prgPropertyInfoSets = 0;
    __frame->pcOffsets = 0;
    __frame->prgDescOffsets = 0;
    __frame->pcbDescBuffer = 0;
    __frame->ppDescBuffer = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[470]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4762],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertyInfoSets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBCOUNTITEM) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcOffsets = (DBCOUNTITEM *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcbDescBuffer = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840],
            0);


        __frame->prgPropertyInfoSets = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->prgDescOffsets = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->ppErrorInfoRem = &__frame->_W2;
        __frame->_W2 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBDataSourceAdmin_GetCreationProperties_Stub(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertyInfoSets, __frame->prgPropertyInfoSets, __frame->pcOffsets, __frame->prgDescOffsets, __frame->pcbDescBuffer, __frame->ppDescBuffer, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 40;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertyInfoSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4792]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcOffsets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgDescOffsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4818]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4862]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertyInfoSets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertyInfoSets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertyInfoSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4792]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBCOUNTITEM *)__frame->_StubMsg.Buffer = *__frame->pcOffsets;
        __frame->_StubMsg.Buffer += sizeof(DBCOUNTITEM);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)*__frame->pcOffsets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgDescOffsets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4818]);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcbDescBuffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcbDescBuffer;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppDescBuffer,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4840]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4862]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBDataSourceAdmin_RemoteGetCreationProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBDataSourceAdmin_RemoteModifyDataSource_Proxy(
    IDBDataSourceAdmin* This,
    ULONG cPropertySets,
    DBPROPSET *rgPropertySets,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!rgPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4866]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4866]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[506]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4906],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4906], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBDataSourceAdmin_RemoteModifyDataSource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBDataSourceAdmin * _This;
    HRESULT _RetVal;
    ULONG cPropertySets;
    DBPROPSET * rgPropertySets;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Stub( struct __frame_IDBDataSourceAdmin_RemoteModifyDataSource_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4884]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4906]);

}

void __RPC_STUB IDBDataSourceAdmin_RemoteModifyDataSource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBDataSourceAdmin_RemoteModifyDataSource_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBDataSourceAdmin*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Stub );
    __frame->rgPropertySets = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[506]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4866],
            0);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBDataSourceAdmin_ModifyDataSource_Stub(__frame->_This, __frame->cPropertySets, __frame->rgPropertySets, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4906]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4906]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBDataSourceAdmin_RemoteModifyDataSource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBDataSourceAdmin_FormatStringOffsetTable[] =
{
    434,  /* IDBDataSourceAdmin::RemoteCreateDataSource */
    464,  /* IDBDataSourceAdmin::RemoteDestroyDataSource */
    470,  /* IDBDataSourceAdmin::RemoteGetCreationProperties */
    506,  /* IDBDataSourceAdmin::RemoteModifyDataSource */
};

static const CINTERFACE_PROXY_VTABLE(7) _IDBDataSourceAdminProxyVtbl =
{
    {
        &IID_IDBDataSourceAdmin,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBDataSourceAdmin_CreateDataSource_Proxy,
        IDBDataSourceAdmin_DestroyDataSource_Proxy,
        IDBDataSourceAdmin_GetCreationProperties_Proxy,
        IDBDataSourceAdmin_ModifyDataSource_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBDataSourceAdmin_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBDataSourceAdmin_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBDataSourceAdmin_table[] =
{
    IDBDataSourceAdmin_RemoteCreateDataSource_Stub,
    IDBDataSourceAdmin_RemoteDestroyDataSource_Stub,
    IDBDataSourceAdmin_RemoteGetCreationProperties_Stub,
    IDBDataSourceAdmin_RemoteModifyDataSource_Stub
};

static const CInterfaceStubVtbl _IDBDataSourceAdminStubVtbl =
{
    {
        &IID_IDBDataSourceAdmin,
        &IDBDataSourceAdmin_ServerInfo,
        7,
        &IDBDataSourceAdmin_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBAsynchNotify interface
 */
static void __finally_IDBAsynchNotify_RemoteOnLowResource_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBAsynchNotify_RemoteOnLowResource_Proxy(
    IDBAsynchNotify* This,
    DB_DWRESERVE dwReserved)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBAsynchNotify_RemoteOnLowResource_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&dwReserved,
                0xb9 /* FC_UINT3264 */);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[518]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBAsynchNotify_RemoteOnLowResource_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBAsynchNotify_RemoteOnLowResource_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBAsynchNotify * _This;
    HRESULT _RetVal;
    DB_DWRESERVE dwReserved;
};

static void __finally_IDBAsynchNotify_RemoteOnLowResource_Stub( struct __frame_IDBAsynchNotify_RemoteOnLowResource_Stub *__frame )
{

}

void __RPC_STUB IDBAsynchNotify_RemoteOnLowResource_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBAsynchNotify_RemoteOnLowResource_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBAsynchNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBAsynchNotify_RemoteOnLowResource_Stub );

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[518]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->dwReserved,
            0xb9 /* FC_UINT3264 */);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBAsynchNotify_OnLowResource_Stub(__frame->_This, __frame->dwReserved);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBAsynchNotify_RemoteOnLowResource_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBAsynchNotify_RemoteOnProgress_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBAsynchNotify_RemoteOnProgress_Proxy(
    IDBAsynchNotify* This,
    HCHAPTER hChapter,
    DBASYNCHOP eOperation,
    DBCOUNTITEM ulProgress,
    DBCOUNTITEM ulProgressMax,
    DBASYNCHPHASE eAsynchPhase,
    LPOLESTR pwszStatusText)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBAsynchNotify_RemoteOnProgress_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 64;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hChapter,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBASYNCHOP *)__frame->_StubMsg.Buffer = eOperation;
            __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&ulProgress,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&ulProgressMax,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBASYNCHPHASE *)__frame->_StubMsg.Buffer = eAsynchPhase;
            __frame->_StubMsg.Buffer += sizeof(DBASYNCHPHASE);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[522]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBAsynchNotify_RemoteOnProgress_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBAsynchNotify_RemoteOnProgress_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBAsynchNotify * _This;
    HRESULT _RetVal;
    HCHAPTER hChapter;
    DBASYNCHOP eOperation;
    DBCOUNTITEM ulProgress;
    DBCOUNTITEM ulProgressMax;
    DBASYNCHPHASE eAsynchPhase;
    LPOLESTR pwszStatusText;
};

static void __finally_IDBAsynchNotify_RemoteOnProgress_Stub( struct __frame_IDBAsynchNotify_RemoteOnProgress_Stub *__frame )
{





    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pwszStatusText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690]);

}

void __RPC_STUB IDBAsynchNotify_RemoteOnProgress_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBAsynchNotify_RemoteOnProgress_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBAsynchNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBAsynchNotify_RemoteOnProgress_Stub );
    __frame->pwszStatusText = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[522]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hChapter,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBASYNCHOP) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->eOperation = *(DBASYNCHOP *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->ulProgress,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->ulProgressMax,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBASYNCHPHASE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->eAsynchPhase = *(DBASYNCHPHASE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBASYNCHPHASE);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pwszStatusText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBAsynchNotify_OnProgress_Stub(__frame->_This, __frame->hChapter, __frame->eOperation, __frame->ulProgress, __frame->ulProgressMax, __frame->eAsynchPhase, __frame->pwszStatusText);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBAsynchNotify_RemoteOnProgress_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBAsynchNotify_RemoteOnStop_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBAsynchNotify_RemoteOnStop_Proxy(
    IDBAsynchNotify* This,
    HCHAPTER hChapter,
    DBASYNCHOP eOperation,
    HRESULT hrStatus,
    LPOLESTR pwszStatusText)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBAsynchNotify_RemoteOnStop_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 32;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hChapter,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBASYNCHOP *)__frame->_StubMsg.Buffer = eOperation;
            __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(HRESULT *)__frame->_StubMsg.Buffer = hrStatus;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[538]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBAsynchNotify_RemoteOnStop_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBAsynchNotify_RemoteOnStop_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBAsynchNotify * _This;
    HRESULT _RetVal;
    HCHAPTER hChapter;
    DBASYNCHOP eOperation;
    HRESULT hrStatus;
    LPOLESTR pwszStatusText;
};

static void __finally_IDBAsynchNotify_RemoteOnStop_Stub( struct __frame_IDBAsynchNotify_RemoteOnStop_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pwszStatusText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690]);

}

void __RPC_STUB IDBAsynchNotify_RemoteOnStop_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBAsynchNotify_RemoteOnStop_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBAsynchNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBAsynchNotify_RemoteOnStop_Stub );
    __frame->pwszStatusText = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[538]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hChapter,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBASYNCHOP) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->eOperation = *(DBASYNCHOP *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->hrStatus = *(HRESULT *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pwszStatusText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5690],
            0);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBAsynchNotify_OnStop_Stub(__frame->_This, __frame->hChapter, __frame->eOperation, __frame->hrStatus, __frame->pwszStatusText);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBAsynchNotify_RemoteOnStop_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBAsynchNotify_FormatStringOffsetTable[] =
{
    518,  /* IDBAsynchNotify::RemoteOnLowResource */
    522,  /* IDBAsynchNotify::RemoteOnProgress */
    538,  /* IDBAsynchNotify::RemoteOnStop */
};

static const CINTERFACE_PROXY_VTABLE(6) _IDBAsynchNotifyProxyVtbl =
{
    {
        &IID_IDBAsynchNotify,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBAsynchNotify_OnLowResource_Proxy,
        IDBAsynchNotify_OnProgress_Proxy,
        IDBAsynchNotify_OnStop_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBAsynchNotify_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBAsynchNotify_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBAsynchNotify_table[] =
{
    IDBAsynchNotify_RemoteOnLowResource_Stub,
    IDBAsynchNotify_RemoteOnProgress_Stub,
    IDBAsynchNotify_RemoteOnStop_Stub
};

static const CInterfaceStubVtbl _IDBAsynchNotifyStubVtbl =
{
    {
        &IID_IDBAsynchNotify,
        &IDBAsynchNotify_ServerInfo,
        6,
        &IDBAsynchNotify_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IDBAsynchStatus interface
 */
static void __finally_IDBAsynchStatus_RemoteAbort_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBAsynchStatus_RemoteAbort_Proxy(
    IDBAsynchStatus* This,
    HCHAPTER hChapter,
    DBASYNCHOP eOperation,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBAsynchStatus_RemoteAbort_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hChapter,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBASYNCHOP *)__frame->_StubMsg.Buffer = eOperation;
            __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[550]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4936],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBAsynchStatus_RemoteAbort_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4936], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBAsynchStatus_RemoteAbort_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBAsynchStatus * _This;
    HRESULT _RetVal;
    HCHAPTER hChapter;
    DBASYNCHOP eOperation;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBAsynchStatus_RemoteAbort_Stub( struct __frame_IDBAsynchStatus_RemoteAbort_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4936]);

}

void __RPC_STUB IDBAsynchStatus_RemoteAbort_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBAsynchStatus_RemoteAbort_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBAsynchStatus*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBAsynchStatus_RemoteAbort_Stub );
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[550]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hChapter,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBASYNCHOP) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->eOperation = *(DBASYNCHOP *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBAsynchStatus_Abort_Stub(__frame->_This, __frame->hChapter, __frame->eOperation, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4936]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4936]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBAsynchStatus_RemoteAbort_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IDBAsynchStatus_RemoteGetStatus_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IDBAsynchStatus_RemoteGetStatus_Proxy(
    IDBAsynchStatus* This,
    HCHAPTER hChapter,
    DBASYNCHOP eOperation,
    DBCOUNTITEM *pulProgress,
    DBCOUNTITEM *pulProgressMax,
    DBASYNCHPHASE *peAsynchPhase,
    LPOLESTR *ppwszStatusText,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IDBAsynchStatus_RemoteGetStatus_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 88;
            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&hChapter,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBASYNCHOP *)__frame->_StubMsg.Buffer = eOperation;
            __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pulProgress,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4940]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pulProgressMax,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4944]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)peAsynchPhase,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4948]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[560]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pulProgress,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4940],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pulProgressMax,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4944],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&peAsynchPhase,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4948],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppwszStatusText,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4978],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IDBAsynchStatus_RemoteGetStatus_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4940], (void *)pulProgress );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4944], (void *)pulProgressMax );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4948], (void *)peAsynchPhase );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4956], (void *)ppwszStatusText );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[4978], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IDBAsynchStatus_RemoteGetStatus_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IDBAsynchStatus * _This;
    HRESULT _RetVal;
    HCHAPTER hChapter;
    DBASYNCHOP eOperation;
    DBCOUNTITEM * pulProgress;
    DBCOUNTITEM * pulProgressMax;
    DBASYNCHPHASE * peAsynchPhase;
    LPOLESTR * ppwszStatusText;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IDBAsynchStatus_RemoteGetStatus_Stub( struct __frame_IDBAsynchStatus_RemoteGetStatus_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pulProgress,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4940]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pulProgressMax,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4944]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->peAsynchPhase,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4948]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppwszStatusText,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4978]);

}

void __RPC_STUB IDBAsynchStatus_RemoteGetStatus_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IDBAsynchStatus_RemoteGetStatus_Stub __f, * const __frame = &__f;

    __frame->_This = (IDBAsynchStatus*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IDBAsynchStatus_RemoteGetStatus_Stub );
    __frame->pulProgress = 0;
    __frame->pulProgressMax = 0;
    __frame->peAsynchPhase = 0;
    __frame->ppwszStatusText = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[560]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->hChapter,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBASYNCHOP) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->eOperation = *(DBASYNCHOP *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBASYNCHOP);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pulProgress,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4940],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pulProgressMax,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4944],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->peAsynchPhase,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4948],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppwszStatusText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952],
            0);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IDBAsynchStatus_GetStatus_Stub(__frame->_This, __frame->hChapter, __frame->eOperation, __frame->pulProgress, __frame->pulProgressMax, __frame->peAsynchPhase, __frame->ppwszStatusText, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 72;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszStatusText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4978]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pulProgress,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4940]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pulProgressMax,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4944]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->peAsynchPhase,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4948]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszStatusText,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4952]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[4978]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IDBAsynchStatus_RemoteGetStatus_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IDBAsynchStatus_FormatStringOffsetTable[] =
{
    550,  /* IDBAsynchStatus::RemoteAbort */
    560,  /* IDBAsynchStatus::RemoteGetStatus */
};

static const CINTERFACE_PROXY_VTABLE(5) _IDBAsynchStatusProxyVtbl =
{
    {
        &IID_IDBAsynchStatus,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IDBAsynchStatus_Abort_Proxy,
        IDBAsynchStatus_GetStatus_Proxy,
    }
};

static const MIDL_SERVER_INFO IDBAsynchStatus_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IDBAsynchStatus_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IDBAsynchStatus_table[] =
{
    IDBAsynchStatus_RemoteAbort_Stub,
    IDBAsynchStatus_RemoteGetStatus_Stub
};

static const CInterfaceStubVtbl _IDBAsynchStatusStubVtbl =
{
    {
        &IID_IDBAsynchStatus,
        &IDBAsynchStatus_ServerInfo,
        5,
        &IDBAsynchStatus_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ISessionProperties interface
 */
static void __finally_ISessionProperties_RemoteGetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ISessionProperties_RemoteGetProperties_Proxy(
    ISessionProperties* This,
    ULONG cPropertyIDSets,
    const DBPROPIDSET *rgPropertyIDSets,
    ULONG *pcPropertySets,
    DBPROPSET **prgPropertySets,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ISessionProperties_RemoteGetProperties_Proxy );
    __frame->This = This;
    if (prgPropertySets) MIDL_memset( prgPropertySets, 0, sizeof( *prgPropertySets ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pcPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!prgPropertySets) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5030]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertyIDSets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertyIDSets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertyIDSets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5030]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = *pcPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[586]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&prgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5060],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5082],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ISessionProperties_RemoteGetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5034], (void *)pcPropertySets );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*pcPropertySets;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5060], (void *)prgPropertySets );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5082], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ISessionProperties_RemoteGetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ISessionProperties * _This;
    HRESULT _RetVal;
    ULONG cPropertyIDSets;
    const DBPROPIDSET * rgPropertyIDSets;
    ULONG * pcPropertySets;
    DBPROPSET *_W0;
    DBPROPSET ** prgPropertySets;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ISessionProperties_RemoteGetProperties_Stub( struct __frame_ISessionProperties_RemoteGetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertyIDSets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertyIDSets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5030]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->prgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5060]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5082]);

}

void __RPC_STUB ISessionProperties_RemoteGetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ISessionProperties_RemoteGetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (ISessionProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ISessionProperties_RemoteGetProperties_Stub );
    __frame->rgPropertyIDSets = 0;
    __frame->pcPropertySets = 0;
    __frame->prgPropertySets = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[586]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertyIDSets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertyIDSets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5030],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->pcPropertySets = (ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->prgPropertySets = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ISessionProperties_GetProperties_Stub(__frame->_This, __frame->cPropertyIDSets, __frame->rgPropertyIDSets, __frame->pcPropertySets, __frame->prgPropertySets, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5060]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5082]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcPropertySets;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)*__frame->pcPropertySets;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->prgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5060]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5082]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ISessionProperties_RemoteGetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_ISessionProperties_RemoteSetProperties_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ISessionProperties_RemoteSetProperties_Proxy(
    ISessionProperties* This,
    ULONG cPropertySets,
    DBPROPSET *rgPropertySets,
    ULONG cTotalProps,
    DBPROPSTATUS *rgPropStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ISessionProperties_RemoteSetProperties_Proxy );
    __frame->This = This;
    if (rgPropStatus) MIDL_memset( rgPropStatus, 0, sizeof( *rgPropStatus ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!rgPropStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5104]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5104]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cTotalProps;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[606]);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgPropStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5108],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5140],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ISessionProperties_RemoteSetProperties_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR)cTotalProps;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5118], (void *)rgPropStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5140], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ISessionProperties_RemoteSetProperties_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ISessionProperties * _This;
    HRESULT _RetVal;
    ULONG cPropertySets;
    DBPROPSET * rgPropertySets;
    ULONG cTotalProps;
    DBPROPSTATUS * rgPropStatus;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_ISessionProperties_RemoteSetProperties_Stub( struct __frame_ISessionProperties_RemoteSetProperties_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5104]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5118]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5140]);

}

void __RPC_STUB ISessionProperties_RemoteSetProperties_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ISessionProperties_RemoteSetProperties_Stub __f, * const __frame = &__f;

    __frame->_This = (ISessionProperties*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ISessionProperties_RemoteSetProperties_Stub );
    __frame->rgPropertySets = 0;
    __frame->rgPropStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[606]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5104],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cTotalProps = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgPropStatus = NdrAllocate(&__frame->_StubMsg, __frame->cTotalProps * 4);
        memset(__frame->rgPropStatus, 0, __frame->cTotalProps * 4);
        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ISessionProperties_SetProperties_Stub(__frame->_This, __frame->cPropertySets, __frame->rgPropertySets, __frame->cTotalProps, __frame->rgPropStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5108]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5140]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5108]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5140]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ISessionProperties_RemoteSetProperties_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ISessionProperties_FormatStringOffsetTable[] =
{
    586,  /* ISessionProperties::RemoteGetProperties */
    606,  /* ISessionProperties::RemoteSetProperties */
};

static const CINTERFACE_PROXY_VTABLE(5) _ISessionPropertiesProxyVtbl =
{
    {
        &IID_ISessionProperties,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ISessionProperties_GetProperties_Proxy,
        ISessionProperties_SetProperties_Proxy,
    }
};

static const MIDL_SERVER_INFO ISessionProperties_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ISessionProperties_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ISessionProperties_table[] =
{
    ISessionProperties_RemoteGetProperties_Stub,
    ISessionProperties_RemoteSetProperties_Stub
};

static const CInterfaceStubVtbl _ISessionPropertiesStubVtbl =
{
    {
        &IID_ISessionProperties,
        &ISessionProperties_ServerInfo,
        5,
        &ISessionProperties_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IRowsetNotify interface
 */
static void __finally_IRowsetNotify_RemoteOnFieldChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetNotify_RemoteOnFieldChange_Proxy(
    IRowsetNotify* This,
    IRowset *rowset,
    HROW row,
    DBORDINAL ccols,
    DBORDINAL *columns,
    DBREASON reason,
    DBEVENTPHASE phase,
    BOOL cantdeny)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetNotify_RemoteOnFieldChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!columns) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 56;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5144]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)ccols;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)columns,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5162]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5144]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&row,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&ccols,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)ccols;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)columns,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5162]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBREASON *)__frame->_StubMsg.Buffer = reason;
            __frame->_StubMsg.Buffer += sizeof(DBREASON);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBEVENTPHASE *)__frame->_StubMsg.Buffer = phase;
            __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = cantdeny;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[624]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetNotify_RemoteOnFieldChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetNotify_RemoteOnFieldChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetNotify * _This;
    HRESULT _RetVal;
    IRowset * rowset;
    HROW row;
    DBORDINAL ccols;
    DBORDINAL * columns;
    DBREASON reason;
    DBEVENTPHASE phase;
    BOOL cantdeny;
};

static void __finally_IRowsetNotify_RemoteOnFieldChange_Stub( struct __frame_IRowsetNotify_RemoteOnFieldChange_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5144]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->ccols;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->columns,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5176]);




}

void __RPC_STUB IRowsetNotify_RemoteOnFieldChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetNotify_RemoteOnFieldChange_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetNotify_RemoteOnFieldChange_Stub );
    __frame->rowset = 0;
    __frame->columns = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[624]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5144],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->row,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->ccols,
            0xb9 /* FC_UINT3264 */);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->columns,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5162],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBREASON) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->reason = *(DBREASON *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBREASON);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBEVENTPHASE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->phase = *(DBEVENTPHASE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cantdeny = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetNotify_OnFieldChange_Stub(__frame->_This, __frame->rowset, __frame->row, __frame->ccols, __frame->columns, __frame->reason, __frame->phase, __frame->cantdeny);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetNotify_RemoteOnFieldChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowsetNotify_RemoteOnRowChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetNotify_RemoteOnRowChange_Proxy(
    IRowsetNotify* This,
    IRowset *rowset,
    DBCOUNTITEM rows,
    HROW *hrows,
    DBREASON reason,
    DBEVENTPHASE phase,
    BOOL cantdeny)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetNotify_RemoteOnRowChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!hrows) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5180]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)rows;

            NdrComplexArrayBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)hrows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5198]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5180]);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&rows,
                0xb9 /* FC_UINT3264 */);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)rows;

            NdrComplexArrayMarshall(
                &__frame->_StubMsg,
                (unsigned char *)hrows,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5198]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBREASON *)__frame->_StubMsg.Buffer = reason;
            __frame->_StubMsg.Buffer += sizeof(DBREASON);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBEVENTPHASE *)__frame->_StubMsg.Buffer = phase;
            __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = cantdeny;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[644]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetNotify_RemoteOnRowChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetNotify_RemoteOnRowChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetNotify * _This;
    HRESULT _RetVal;
    IRowset * rowset;
    DBCOUNTITEM rows;
    HROW * hrows;
    DBREASON reason;
    DBEVENTPHASE phase;
    BOOL cantdeny;
};

static void __finally_IRowsetNotify_RemoteOnRowChange_Stub( struct __frame_IRowsetNotify_RemoteOnRowChange_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5180]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)(ULONG)__frame->rows;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->hrows,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5212]);




}

void __RPC_STUB IRowsetNotify_RemoteOnRowChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetNotify_RemoteOnRowChange_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetNotify_RemoteOnRowChange_Stub );
    __frame->rowset = 0;
    __frame->hrows = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[644]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5180],
            0);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->rows,
            0xb9 /* FC_UINT3264 */);

        NdrComplexArrayUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->hrows,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5198],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBREASON) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->reason = *(DBREASON *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBREASON);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBEVENTPHASE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->phase = *(DBEVENTPHASE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cantdeny = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetNotify_OnRowChange_Stub(__frame->_This, __frame->rowset, __frame->rows, __frame->hrows, __frame->reason, __frame->phase, __frame->cantdeny);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetNotify_RemoteOnRowChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowsetNotify_RemoteOnRowsetChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowsetNotify_RemoteOnRowsetChange_Proxy(
    IRowsetNotify* This,
    IRowset *rowset,
    DBREASON reason,
    DBEVENTPHASE phase,
    BOOL cantdeny)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowsetNotify_RemoteOnRowsetChange_Proxy );
    __frame->This = This;
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5216]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5216]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBREASON *)__frame->_StubMsg.Buffer = reason;
            __frame->_StubMsg.Buffer += sizeof(DBREASON);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBEVENTPHASE *)__frame->_StubMsg.Buffer = phase;
            __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = cantdeny;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[662]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowsetNotify_RemoteOnRowsetChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowsetNotify_RemoteOnRowsetChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowsetNotify * _This;
    HRESULT _RetVal;
    IRowset * rowset;
    DBREASON reason;
    DBEVENTPHASE phase;
    BOOL cantdeny;
};

static void __finally_IRowsetNotify_RemoteOnRowsetChange_Stub( struct __frame_IRowsetNotify_RemoteOnRowsetChange_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5216]);




}

void __RPC_STUB IRowsetNotify_RemoteOnRowsetChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowsetNotify_RemoteOnRowsetChange_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowsetNotify*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowsetNotify_RemoteOnRowsetChange_Stub );
    __frame->rowset = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[662]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5216],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBREASON) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->reason = *(DBREASON *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBREASON);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBEVENTPHASE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->phase = *(DBEVENTPHASE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cantdeny = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowsetNotify_OnRowsetChange_Stub(__frame->_This, __frame->rowset, __frame->reason, __frame->phase, __frame->cantdeny);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowsetNotify_RemoteOnRowsetChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IRowsetNotify_FormatStringOffsetTable[] =
{
    624,  /* IRowsetNotify::RemoteOnFieldChange */
    644,  /* IRowsetNotify::RemoteOnRowChange */
    662,  /* IRowsetNotify::RemoteOnRowsetChange */
};

static const CINTERFACE_PROXY_VTABLE(6) _IRowsetNotifyProxyVtbl =
{
    {
        &IID_IRowsetNotify,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IRowsetNotify_OnFieldChange_Proxy,
        IRowsetNotify_OnRowChange_Proxy,
        IRowsetNotify_OnRowsetChange_Proxy,
    }
};

static const MIDL_SERVER_INFO IRowsetNotify_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IRowsetNotify_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IRowsetNotify_table[] =
{
    IRowsetNotify_RemoteOnFieldChange_Stub,
    IRowsetNotify_RemoteOnRowChange_Stub,
    IRowsetNotify_RemoteOnRowsetChange_Stub
};

static const CInterfaceStubVtbl _IRowsetNotifyStubVtbl =
{
    {
        &IID_IRowsetNotify,
        &IRowsetNotify_ServerInfo,
        6,
        &IRowsetNotify_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IOpenRowset interface
 */
static void __finally_IOpenRowset_RemoteOpenRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IOpenRowset_RemoteOpenRowset_Proxy(
    IOpenRowset* This,
    IUnknown *pUnkOuter,
    DBID *pTableID,
    DBID *pIndexID,
    REFIID riid,
    ULONG cPropertySets,
    DBPROPSET *rgPropertySets,
    IUnknown **ppRowset,
    ULONG cTotalProps,
    DBPROPSTATUS *rgPropStatus,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IOpenRowset_RemoteOpenRowset_Proxy );
    __frame->This = This;
    if (rgPropStatus) MIDL_memset( rgPropStatus, 0, sizeof( *rgPropStatus ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rgPropStatus) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 36;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5234]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pTableID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5252]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pIndexID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5256]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5282]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5234]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pTableID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5252]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pIndexID,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5256]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cPropertySets;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            __frame->_StubMsg.MaxCount = (ULONG_PTR)cPropertySets;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rgPropertySets,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5282]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = cTotalProps;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[674]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppRowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292],
                0);

            NdrConformantArrayUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rgPropStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5296],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5328],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IOpenRowset_RemoteOpenRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5292], (void *)ppRowset );

        __frame->_StubMsg.MaxCount = (ULONG_PTR)cTotalProps;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5306], (void *)rgPropStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5328], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IOpenRowset_RemoteOpenRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IOpenRowset * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    DBID * pTableID;
    DBID * pIndexID;
    REFIID riid;
    ULONG cPropertySets;
    DBPROPSET * rgPropertySets;
    IUnknown ** ppRowset;
    ULONG cTotalProps;
    DBPROPSTATUS * rgPropStatus;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IOpenRowset_RemoteOpenRowset_Stub( struct __frame_IOpenRowset_RemoteOpenRowset_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5234]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pTableID,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5252]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pIndexID,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5256]);



    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cPropertySets;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropertySets,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5282]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppRowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292]);


    __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rgPropStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5306]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5328]);

}

void __RPC_STUB IOpenRowset_RemoteOpenRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IOpenRowset_RemoteOpenRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (IOpenRowset*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IOpenRowset_RemoteOpenRowset_Stub );
    __frame->pUnkOuter = 0;
    __frame->pTableID = 0;
    __frame->pIndexID = 0;
    __frame->riid = 0;
    __frame->rgPropertySets = 0;
    __frame->ppRowset = 0;
    __frame->rgPropStatus = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[674]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5234],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pTableID,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5252],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pIndexID,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5256],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cPropertySets = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rgPropertySets,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5282],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cTotalProps = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->rgPropStatus = NdrAllocate(&__frame->_StubMsg, __frame->cTotalProps * 4);
        memset(__frame->rgPropStatus, 0, __frame->cTotalProps * 4);
        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IOpenRowset_OpenRowset_Stub(__frame->_This, __frame->pUnkOuter, __frame->pTableID, __frame->pIndexID, __frame->riid, __frame->cPropertySets, __frame->rgPropertySets, __frame->ppRowset, __frame->cTotalProps, __frame->rgPropStatus, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5296]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5328]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppRowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5292]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR)__frame->cTotalProps;

        NdrConformantArrayMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rgPropStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5296]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5328]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IOpenRowset_RemoteOpenRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IOpenRowset_FormatStringOffsetTable[] =
{
    674,  /* IOpenRowset::RemoteOpenRowset */
};

static const CINTERFACE_PROXY_VTABLE(4) _IOpenRowsetProxyVtbl =
{
    {
        &IID_IOpenRowset,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IOpenRowset_OpenRowset_Proxy,
    }
};

static const MIDL_SERVER_INFO IOpenRowset_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IOpenRowset_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IOpenRowset_table[] =
{
    IOpenRowset_RemoteOpenRowset_Stub
};

static const CInterfaceStubVtbl _IOpenRowsetStubVtbl =
{
    {
        &IID_IOpenRowset,
        &IOpenRowset_ServerInfo,
        4,
        &IOpenRowset_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IRowPosition interface
 */
static void __finally_IRowPosition_RemoteClearRowPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPosition_RemoteClearRowPosition_Proxy(
    IRowPosition* This,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPosition_RemoteClearRowPosition_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[712]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5350],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPosition_RemoteClearRowPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5350], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPosition_RemoteClearRowPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPosition * _This;
    HRESULT _RetVal;
    IErrorInfo *_W0;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPosition_RemoteClearRowPosition_Stub( struct __frame_IRowPosition_RemoteClearRowPosition_Stub *__frame )
{
    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5350]);

}

void __RPC_STUB IRowPosition_RemoteClearRowPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPosition_RemoteClearRowPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPosition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPosition_RemoteClearRowPosition_Stub );
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[712]);


        __frame->errorinfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPosition_ClearRowPosition_Stub(__frame->_This, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5350]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5350]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPosition_RemoteClearRowPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowPosition_RemoteGetRowPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPosition_RemoteGetRowPosition_Proxy(
    IRowPosition* This,
    HCHAPTER *chapter,
    HROW *row,
    DBPOSITIONFLAGS *position_flags,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPosition_RemoteGetRowPosition_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!chapter) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!row) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!position_flags) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HCHAPTER) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *chapter = *(HCHAPTER *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HROW) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *row = *(HROW *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HROW);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(DBPOSITIONFLAGS) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *position_flags = *(DBPOSITIONFLAGS *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(DBPOSITIONFLAGS);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5384],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPosition_RemoteGetRowPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5354], (void *)chapter );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5358], (void *)row );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5362], (void *)position_flags );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5384], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPosition_RemoteGetRowPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPosition * _This;
    HRESULT _RetVal;
    HCHAPTER _W0;
    HCHAPTER * chapter;
    HROW _W1;
    HROW * row;
    DBPOSITIONFLAGS _W2;
    DBPOSITIONFLAGS * position_flags;
    IErrorInfo *_W3;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPosition_RemoteGetRowPosition_Stub( struct __frame_IRowPosition_RemoteGetRowPosition_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5384]);

}

void __RPC_STUB IRowPosition_RemoteGetRowPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPosition_RemoteGetRowPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPosition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPosition_RemoteGetRowPosition_Stub );
    __frame->chapter = 0;
    __frame->row = 0;
    __frame->position_flags = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[718]);


        __frame->chapter = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->row = &__frame->_W1;
        __frame->_W1 = 0;
        __frame->position_flags = &__frame->_W2;
        __frame->_W2 = 0;
        __frame->errorinfo = &__frame->_W3;
        __frame->_W3 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPosition_GetRowPosition_Stub(__frame->_This, __frame->chapter, __frame->row, __frame->position_flags, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 48;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5384]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HCHAPTER *)__frame->_StubMsg.Buffer = *__frame->chapter;
        __frame->_StubMsg.Buffer += sizeof(HCHAPTER);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HROW *)__frame->_StubMsg.Buffer = *__frame->row;
        __frame->_StubMsg.Buffer += sizeof(HROW);

        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(DBPOSITIONFLAGS *)__frame->_StubMsg.Buffer = *__frame->position_flags;
        __frame->_StubMsg.Buffer += sizeof(DBPOSITIONFLAGS);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5384]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPosition_RemoteGetRowPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowPosition_RemoteGetRowset_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPosition_RemoteGetRowset_Proxy(
    IRowPosition* This,
    REFIID riid,
    IUnknown **rowset,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPosition_RemoteGetRowset_Proxy );
    __frame->This = This;
    if (rowset) MIDL_memset( rowset, 0, sizeof( *rowset ));
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rowset) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 20;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[736]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5398],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5420],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPosition_RemoteGetRowset_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5398], (void *)rowset );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5420], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPosition_RemoteGetRowset_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPosition * _This;
    HRESULT _RetVal;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** rowset;
    IErrorInfo *_W1;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPosition_RemoteGetRowset_Stub( struct __frame_IRowPosition_RemoteGetRowset_Stub *__frame )
{

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5398]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5420]);

}

void __RPC_STUB IRowPosition_RemoteGetRowset_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPosition_RemoteGetRowset_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPosition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPosition_RemoteGetRowset_Stub );
    __frame->riid = 0;
    __frame->rowset = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[736]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->rowset = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->errorinfo = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPosition_GetRowset_Stub(__frame->_This, __frame->riid, __frame->rowset, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5398]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5420]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5398]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5420]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPosition_RemoteGetRowset_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowPosition_RemoteInitialize_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPosition_RemoteInitialize_Proxy(
    IRowPosition* This,
    IUnknown *rowset,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPosition_RemoteInitialize_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5424]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rowset,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5424]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[750]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5460],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPosition_RemoteInitialize_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5460], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPosition_RemoteInitialize_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPosition * _This;
    HRESULT _RetVal;
    IUnknown * rowset;
    IErrorInfo *_W0;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPosition_RemoteInitialize_Stub( struct __frame_IRowPosition_RemoteInitialize_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->rowset,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5424]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5460]);

}

void __RPC_STUB IRowPosition_RemoteInitialize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPosition_RemoteInitialize_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPosition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPosition_RemoteInitialize_Stub );
    __frame->rowset = 0;
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[750]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rowset,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5424],
            0);


        __frame->errorinfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPosition_Initialize_Stub(__frame->_This, __frame->rowset, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5460]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5460]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPosition_RemoteInitialize_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IRowPosition_RemoteSetRowPosition_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPosition_RemoteSetRowPosition_Proxy(
    IRowPosition* This,
    HCHAPTER chapter,
    HROW row,
    DBPOSITIONFLAGS flags,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPosition_RemoteSetRowPosition_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 40;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&chapter,
                0xb9 /* FC_UINT3264 */);

            NdrSimpleTypeMarshall(
                &__frame->_StubMsg,
                (unsigned char *)&row,
                0xb9 /* FC_UINT3264 */);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBPOSITIONFLAGS *)__frame->_StubMsg.Buffer = flags;
            __frame->_StubMsg.Buffer += sizeof(DBPOSITIONFLAGS);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[760]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5482],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPosition_RemoteSetRowPosition_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5482], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPosition_RemoteSetRowPosition_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPosition * _This;
    HRESULT _RetVal;
    HCHAPTER chapter;
    HROW row;
    DBPOSITIONFLAGS flags;
    IErrorInfo *_W0;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPosition_RemoteSetRowPosition_Stub( struct __frame_IRowPosition_RemoteSetRowPosition_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5482]);

}

void __RPC_STUB IRowPosition_RemoteSetRowPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPosition_RemoteSetRowPosition_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPosition*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPosition_RemoteSetRowPosition_Stub );
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[760]);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->chapter,
            0xb9 /* FC_UINT3264 */);

        NdrSimpleTypeUnmarshall(
            &__frame->_StubMsg,
            (unsigned char *)&__frame->row,
            0xb9 /* FC_UINT3264 */);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBPOSITIONFLAGS) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->flags = *(DBPOSITIONFLAGS *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBPOSITIONFLAGS);


        __frame->errorinfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPosition_SetRowPosition_Stub(__frame->_This, __frame->chapter, __frame->row, __frame->flags, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5482]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5482]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPosition_RemoteSetRowPosition_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IRowPosition_FormatStringOffsetTable[] =
{
    712,  /* IRowPosition::RemoteClearRowPosition */
    718,  /* IRowPosition::RemoteGetRowPosition */
    736,  /* IRowPosition::RemoteGetRowset */
    750,  /* IRowPosition::RemoteInitialize */
    760,  /* IRowPosition::RemoteSetRowPosition */
};

static const CINTERFACE_PROXY_VTABLE(8) _IRowPositionProxyVtbl =
{
    {
        &IID_IRowPosition,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IRowPosition_ClearRowPosition_Proxy,
        IRowPosition_GetRowPosition_Proxy,
        IRowPosition_GetRowset_Proxy,
        IRowPosition_Initialize_Proxy,
        IRowPosition_SetRowPosition_Proxy,
    }
};

static const MIDL_SERVER_INFO IRowPosition_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IRowPosition_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IRowPosition_table[] =
{
    IRowPosition_RemoteClearRowPosition_Stub,
    IRowPosition_RemoteGetRowPosition_Stub,
    IRowPosition_RemoteGetRowset_Stub,
    IRowPosition_RemoteInitialize_Stub,
    IRowPosition_RemoteSetRowPosition_Stub
};

static const CInterfaceStubVtbl _IRowPositionStubVtbl =
{
    {
        &IID_IRowPosition,
        &IRowPosition_ServerInfo,
        8,
        &IRowPosition_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IRowPositionChange interface
 */
static void __finally_IRowPositionChange_RemoteOnRowPositionChange_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IRowPositionChange_RemoteOnRowPositionChange_Proxy(
    IRowPositionChange* This,
    DBREASON reason,
    DBEVENTPHASE phase,
    BOOL cant_deny,
    IErrorInfo **errorinfo)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IRowPositionChange_RemoteOnRowPositionChange_Proxy );
    __frame->This = This;
    if (errorinfo) MIDL_memset( errorinfo, 0, sizeof( *errorinfo ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!errorinfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 24;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBREASON *)__frame->_StubMsg.Buffer = reason;
            __frame->_StubMsg.Buffer += sizeof(DBREASON);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBEVENTPHASE *)__frame->_StubMsg.Buffer = phase;
            __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(BOOL *)__frame->_StubMsg.Buffer = cant_deny;
            __frame->_StubMsg.Buffer += sizeof(BOOL);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[772]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&errorinfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5504],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IRowPositionChange_RemoteOnRowPositionChange_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5504], (void *)errorinfo );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IRowPositionChange_RemoteOnRowPositionChange_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IRowPositionChange * _This;
    HRESULT _RetVal;
    DBREASON reason;
    DBEVENTPHASE phase;
    BOOL cant_deny;
    IErrorInfo *_W0;
    IErrorInfo ** errorinfo;
};

static void __finally_IRowPositionChange_RemoteOnRowPositionChange_Stub( struct __frame_IRowPositionChange_RemoteOnRowPositionChange_Stub *__frame )
{



    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->errorinfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5504]);

}

void __RPC_STUB IRowPositionChange_RemoteOnRowPositionChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IRowPositionChange_RemoteOnRowPositionChange_Stub __f, * const __frame = &__f;

    __frame->_This = (IRowPositionChange*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IRowPositionChange_RemoteOnRowPositionChange_Stub );
    __frame->errorinfo = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[772]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBREASON) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->reason = *(DBREASON *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBREASON);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBEVENTPHASE) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->phase = *(DBEVENTPHASE *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBEVENTPHASE);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(BOOL) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->cant_deny = *(BOOL *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(BOOL);


        __frame->errorinfo = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IRowPositionChange_OnRowPositionChange_Stub(__frame->_This, __frame->reason, __frame->phase, __frame->cant_deny, __frame->errorinfo);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5504]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->errorinfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5504]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IRowPositionChange_RemoteOnRowPositionChange_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IRowPositionChange_FormatStringOffsetTable[] =
{
    772,  /* IRowPositionChange::RemoteOnRowPositionChange */
};

static const CINTERFACE_PROXY_VTABLE(4) _IRowPositionChangeProxyVtbl =
{
    {
        &IID_IRowPositionChange,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IRowPositionChange_OnRowPositionChange_Proxy,
    }
};

static const MIDL_SERVER_INFO IRowPositionChange_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IRowPositionChange_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IRowPositionChange_table[] =
{
    IRowPositionChange_RemoteOnRowPositionChange_Stub
};

static const CInterfaceStubVtbl _IRowPositionChangeStubVtbl =
{
    {
        &IID_IRowPositionChange,
        &IRowPositionChange_ServerInfo,
        4,
        &IRowPositionChange_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IBindResource interface
 */
static void __finally_IBindResource_RemoteBind_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IBindResource_RemoteBind_Proxy(
    IBindResource* This,
    IUnknown *pUnkOuter,
    LPCOLESTR pwszURL,
    DBBINDURLFLAG dwBindURLFlags,
    REFGUID rguid,
    REFIID riid,
    IAuthenticate *pAuthenticate,
    IUnknown *pSessionUnkOuter,
    IID *piid,
    IUnknown **ppSession,
    DBBINDURLSTATUS *pdwBindStatus,
    IUnknown **ppUnk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IBindResource_RemoteBind_Proxy );
    __frame->This = This;
    if (ppUnk) MIDL_memset( ppUnk, 0, sizeof( *ppUnk ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pwszURL) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppUnk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 92;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5508]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pwszURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5528]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pAuthenticate,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5538]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSessionUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5556]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5584]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5508]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pwszURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5528]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBBINDURLFLAG *)__frame->_StubMsg.Buffer = dwBindURLFlags;
            __frame->_StubMsg.Buffer += sizeof(DBBINDURLFLAG);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[296]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pAuthenticate,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5538]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSessionUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5556]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)piid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5574]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5584]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdwBindStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5588]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[784]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5584],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pdwBindStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5588],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppUnk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5598],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IBindResource_RemoteBind_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5584], (void *)ppSession );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5588], (void *)pdwBindStatus );

        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5598], (void *)ppUnk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IBindResource_RemoteBind_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IBindResource * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    LPCOLESTR pwszURL;
    DBBINDURLFLAG dwBindURLFlags;
    REFGUID rguid;
    REFIID riid;
    IAuthenticate * pAuthenticate;
    IUnknown * pSessionUnkOuter;
    IID * piid;
    IUnknown ** ppSession;
    DBBINDURLSTATUS * pdwBindStatus;
    IUnknown *_W0;
    IUnknown ** ppUnk;
};

static void __finally_IBindResource_RemoteBind_Stub( struct __frame_IBindResource_RemoteBind_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5508]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pwszURL,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5526]);




    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pAuthenticate,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5538]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSessionUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5556]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->piid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5574]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSession,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5584]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdwBindStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5588]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppUnk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5598]);

}

void __RPC_STUB IBindResource_RemoteBind_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IBindResource_RemoteBind_Stub __f, * const __frame = &__f;

    __frame->_This = (IBindResource*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IBindResource_RemoteBind_Stub );
    __frame->pUnkOuter = 0;
    __frame->pwszURL = 0;
    __frame->rguid = 0;
    __frame->riid = 0;
    __frame->pAuthenticate = 0;
    __frame->pSessionUnkOuter = 0;
    __frame->piid = 0;
    __frame->ppSession = 0;
    __frame->pdwBindStatus = 0;
    __frame->ppUnk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[784]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5508],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pwszURL,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5528],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBBINDURLFLAG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwBindURLFlags = *(DBBINDURLFLAG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBBINDURLFLAG);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[296],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pAuthenticate,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5538],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSessionUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5556],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->piid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5574],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5584],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdwBindStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5588],
            0);


        __frame->ppUnk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IBindResource_Bind_Stub(__frame->_This, __frame->pUnkOuter, __frame->pwszURL, __frame->dwBindURLFlags, __frame->rguid, __frame->riid, __frame->pAuthenticate, __frame->pSessionUnkOuter, __frame->piid, __frame->ppSession, __frame->pdwBindStatus, __frame->ppUnk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5584]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5598]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5584]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pdwBindStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5588]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5598]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IBindResource_RemoteBind_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IBindResource_FormatStringOffsetTable[] =
{
    784,  /* IBindResource::RemoteBind */
};

static const CINTERFACE_PROXY_VTABLE(4) _IBindResourceProxyVtbl =
{
    {
        &IID_IBindResource,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IBindResource_Bind_Proxy,
    }
};

static const MIDL_SERVER_INFO IBindResource_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IBindResource_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IBindResource_table[] =
{
    IBindResource_RemoteBind_Stub
};

static const CInterfaceStubVtbl _IBindResourceStubVtbl =
{
    {
        &IID_IBindResource,
        &IBindResource_ServerInfo,
        4,
        &IBindResource_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * ICreateRow interface
 */
static void __finally_ICreateRow_RemoteCreateRow_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE ICreateRow_RemoteCreateRow_Proxy(
    ICreateRow* This,
    IUnknown *pUnkOuter,
    LPCOLESTR pwszURL,
    DBBINDURLFLAG dwBindURLFlags,
    REFGUID rguid,
    REFIID riid,
    IAuthenticate *pAuthenticate,
    IUnknown *pSessionUnkOuter,
    IID *piid,
    IUnknown **ppSession,
    DBBINDURLSTATUS *pdwBindStatus,
    LPOLESTR *ppwszNewURL,
    IUnknown **ppUnk)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_ICreateRow_RemoteCreateRow_Proxy );
    __frame->This = This;
    if (ppUnk) MIDL_memset( ppUnk, 0, sizeof( *ppUnk ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pwszURL) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!rguid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppUnk) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 92;
            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5602]);

            NdrConformantStringBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pwszURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5622]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pAuthenticate,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5632]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pSessionUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5650]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5678]);

            NdrPointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)ppwszNewURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5686]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5602]);

            NdrConformantStringMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pwszURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5622]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DBBINDURLFLAG *)__frame->_StubMsg.Buffer = dwBindURLFlags;
            __frame->_StubMsg.Buffer += sizeof(DBBINDURLFLAG);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)rguid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[296]);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pAuthenticate,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5632]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pSessionUnkOuter,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5650]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)piid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5668]);

            __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5678]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdwBindStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5682]);

            NdrPointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)ppwszNewURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5686]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[828]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppSession,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5678],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pdwBindStatus,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5682],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppwszNewURL,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5686],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppUnk,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_ICreateRow_RemoteCreateRow_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        __frame->_StubMsg.MaxCount = (ULONG_PTR) piid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5678], (void *)ppSession );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5682], (void *)pdwBindStatus );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5690], (void *)ppwszNewURL );

        __frame->_StubMsg.MaxCount = (ULONG_PTR) riid;

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5700], (void *)ppUnk );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_ICreateRow_RemoteCreateRow_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    ICreateRow * _This;
    HRESULT _RetVal;
    IUnknown * pUnkOuter;
    LPCOLESTR pwszURL;
    DBBINDURLFLAG dwBindURLFlags;
    REFGUID rguid;
    REFIID riid;
    IAuthenticate * pAuthenticate;
    IUnknown * pSessionUnkOuter;
    IID * piid;
    IUnknown ** ppSession;
    DBBINDURLSTATUS * pdwBindStatus;
    LPOLESTR * ppwszNewURL;
    IUnknown *_W0;
    IUnknown ** ppUnk;
};

static void __finally_ICreateRow_RemoteCreateRow_Stub( struct __frame_ICreateRow_RemoteCreateRow_Stub *__frame )
{
    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5602]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pwszURL,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5620]);




    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pAuthenticate,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5632]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pSessionUnkOuter,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5650]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->piid,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5668]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppSession,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5678]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdwBindStatus,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5682]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppwszNewURL,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5686]);

    __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppUnk,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700]);

}

void __RPC_STUB ICreateRow_RemoteCreateRow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_ICreateRow_RemoteCreateRow_Stub __f, * const __frame = &__f;

    __frame->_This = (ICreateRow*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_ICreateRow_RemoteCreateRow_Stub );
    __frame->pUnkOuter = 0;
    __frame->pwszURL = 0;
    __frame->rguid = 0;
    __frame->riid = 0;
    __frame->pAuthenticate = 0;
    __frame->pSessionUnkOuter = 0;
    __frame->piid = 0;
    __frame->ppSession = 0;
    __frame->pdwBindStatus = 0;
    __frame->ppwszNewURL = 0;
    __frame->ppUnk = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[828]);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5602],
            0);

        NdrConformantStringUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pwszURL,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5622],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DBBINDURLFLAG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwBindURLFlags = *(DBBINDURLFLAG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DBBINDURLFLAG);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->rguid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[296],
            0);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pAuthenticate,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5632],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pSessionUnkOuter,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5650],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->piid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5668],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5678],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdwBindStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5682],
            0);

        NdrPointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->ppwszNewURL,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5686],
            0);


        __frame->ppUnk = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = ICreateRow_CreateRow_Stub(__frame->_This, __frame->pUnkOuter, __frame->pwszURL, __frame->dwBindURLFlags, __frame->rguid, __frame->riid, __frame->pAuthenticate, __frame->pSessionUnkOuter, __frame->piid, __frame->ppSession, __frame->pdwBindStatus, __frame->ppwszNewURL, __frame->ppUnk);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 24;
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5678]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszNewURL,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5686]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->piid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppSession,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5678]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pdwBindStatus,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5682]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppwszNewURL,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5686]);

        __frame->_StubMsg.MaxCount = (ULONG_PTR) __frame->riid;

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppUnk,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5700]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_ICreateRow_RemoteCreateRow_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short ICreateRow_FormatStringOffsetTable[] =
{
    828,  /* ICreateRow::RemoteCreateRow */
};

static const CINTERFACE_PROXY_VTABLE(4) _ICreateRowProxyVtbl =
{
    {
        &IID_ICreateRow,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        ICreateRow_CreateRow_Proxy,
    }
};

static const MIDL_SERVER_INFO ICreateRow_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &ICreateRow_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION ICreateRow_table[] =
{
    ICreateRow_RemoteCreateRow_Stub
};

static const CInterfaceStubVtbl _ICreateRowStubVtbl =
{
    {
        &IID_ICreateRow,
        &ICreateRow_ServerInfo,
        4,
        &ICreateRow_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

/*****************************************************************************
 * IErrorRecords interface
 */
static void __finally_IErrorRecords_RemoteAddErrorRecord_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteAddErrorRecord_Proxy(
    IErrorRecords* This,
    ERRORINFO *pErrorInfo,
    DWORD dwLookupID,
    DISPPARAMS *pdispparams,
    IUnknown *punkCustomError,
    DWORD dwDynamicErrorID,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteAddErrorRecord_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 3);
        if (!pErrorInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!pdispparams) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 64;
            NdrComplexStructBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)pdispparams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5762]);

            NdrInterfacePointerBufferSize(
                &__frame->_StubMsg,
                (unsigned char *)punkCustomError,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5788]);

            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pErrorInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5704]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwLookupID;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrComplexStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)pdispparams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5762]);

            NdrInterfacePointerMarshall(
                &__frame->_StubMsg,
                (unsigned char *)punkCustomError,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5788]);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(DWORD *)__frame->_StubMsg.Buffer = dwDynamicErrorID;
            __frame->_StubMsg.Buffer += sizeof(DWORD);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[876]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5824],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteAddErrorRecord_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5824], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteAddErrorRecord_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ERRORINFO * pErrorInfo;
    DWORD dwLookupID;
    DISPPARAMS * pdispparams;
    IUnknown * punkCustomError;
    DWORD dwDynamicErrorID;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteAddErrorRecord_Stub( struct __frame_IErrorRecords_RemoteAddErrorRecord_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdispparams,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5784]);

    NdrInterfacePointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->punkCustomError,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5788]);


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5824]);

}

void __RPC_STUB IErrorRecords_RemoteAddErrorRecord_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteAddErrorRecord_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteAddErrorRecord_Stub );
    __frame->pErrorInfo = 0;
    __frame->pdispparams = 0;
    __frame->punkCustomError = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[876]);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pErrorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5704],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwLookupID = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);

        NdrComplexStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->pdispparams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5762],
            0);

        NdrInterfacePointerUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->punkCustomError,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5788],
            0);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(DWORD) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->dwDynamicErrorID = *(DWORD *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(DWORD);


        __frame->ppErrorInfoRem = &__frame->_W0;
        __frame->_W0 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_AddErrorRecord_Stub(__frame->_This, __frame->pErrorInfo, __frame->dwLookupID, __frame->pdispparams, __frame->punkCustomError, __frame->dwDynamicErrorID, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5824]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5824]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteAddErrorRecord_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IErrorRecords_RemoteGetBasicErrorInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteGetBasicErrorInfo_Proxy(
    IErrorRecords* This,
    ULONG ulRecordNum,
    ERRORINFO *pErrorInfo,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteGetBasicErrorInfo_Proxy );
    __frame->This = This;
    if (pErrorInfo) MIDL_memset( pErrorInfo, 0, sizeof( *pErrorInfo ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 4);
        if (!pErrorInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulRecordNum;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[898]);

            NdrSimpleStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pErrorInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5704],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5850],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteGetBasicErrorInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5828], (void *)pErrorInfo );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5850], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteGetBasicErrorInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ULONG ulRecordNum;
    ERRORINFO _W0;
    ERRORINFO * pErrorInfo;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteGetBasicErrorInfo_Stub( struct __frame_IErrorRecords_RemoteGetBasicErrorInfo_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5850]);

}

void __RPC_STUB IErrorRecords_RemoteGetBasicErrorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteGetBasicErrorInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteGetBasicErrorInfo_Stub );
    __frame->pErrorInfo = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[898]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulRecordNum = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pErrorInfo = &__frame->_W0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_GetBasicErrorInfo_Stub(__frame->_This, __frame->ulRecordNum, __frame->pErrorInfo, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 56;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5850]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrSimpleStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pErrorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5704]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5850]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteGetBasicErrorInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IErrorRecords_RemoteGetCustomErrorObject_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteGetCustomErrorObject_Proxy(
    IErrorRecords* This,
    ULONG ulRecordNum,
    REFIID riid,
    IUnknown **ppObject,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteGetCustomErrorObject_Proxy );
    __frame->This = This;
    if (ppObject) MIDL_memset( ppObject, 0, sizeof( *ppObject ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 5);
        if (!riid) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppObject) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 28;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulRecordNum;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrSimpleStructMarshall(
                &__frame->_StubMsg,
                (unsigned char *)riid,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52]);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[910]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppObject,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5876],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5898],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteGetCustomErrorObject_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5876], (void *)ppObject );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5898], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteGetCustomErrorObject_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ULONG ulRecordNum;
    REFIID riid;
    IUnknown *_W0;
    IUnknown ** ppObject;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteGetCustomErrorObject_Stub( struct __frame_IErrorRecords_RemoteGetCustomErrorObject_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppObject,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5876]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5898]);

}

void __RPC_STUB IErrorRecords_RemoteGetCustomErrorObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteGetCustomErrorObject_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteGetCustomErrorObject_Stub );
    __frame->riid = 0;
    __frame->ppObject = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[910]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulRecordNum = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrSimpleStructUnmarshall(
            &__frame->_StubMsg,
            (unsigned char **)&__frame->riid,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[52],
            0);


        __frame->ppObject = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_GetCustomErrorObject_Stub(__frame->_This, __frame->ulRecordNum, __frame->riid, __frame->ppObject, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5876]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5898]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppObject,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5876]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5898]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteGetCustomErrorObject_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IErrorRecords_RemoteGetErrorInfo_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteGetErrorInfo_Proxy(
    IErrorRecords* This,
    ULONG ulRecordNum,
    LCID lcid,
    IErrorInfo **ppErrorInfo,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteGetErrorInfo_Proxy );
    __frame->This = This;
    if (ppErrorInfo) MIDL_memset( ppErrorInfo, 0, sizeof( *ppErrorInfo ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 6);
        if (!ppErrorInfo) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 16;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulRecordNum;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(LCID *)__frame->_StubMsg.Buffer = lcid;
            __frame->_StubMsg.Buffer += sizeof(LCID);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[926]);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfo,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5920],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5942],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteGetErrorInfo_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5920], (void *)ppErrorInfo );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5942], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteGetErrorInfo_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ULONG ulRecordNum;
    LCID lcid;
    IErrorInfo *_W0;
    IErrorInfo ** ppErrorInfo;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteGetErrorInfo_Stub( struct __frame_IErrorRecords_RemoteGetErrorInfo_Stub *__frame )
{


    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfo,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5920]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5942]);

}

void __RPC_STUB IErrorRecords_RemoteGetErrorInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteGetErrorInfo_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteGetErrorInfo_Stub );
    __frame->ppErrorInfo = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[926]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulRecordNum = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(LCID) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->lcid = *(LCID *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(LCID);


        __frame->ppErrorInfo = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_GetErrorInfo_Stub(__frame->_This, __frame->ulRecordNum, __frame->lcid, __frame->ppErrorInfo, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5920]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5942]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfo,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5920]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5942]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteGetErrorInfo_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IErrorRecords_RemoteGetErrorParameters_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteGetErrorParameters_Proxy(
    IErrorRecords* This,
    ULONG ulRecordNum,
    DISPPARAMS *pdispparams,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteGetErrorParameters_Proxy );
    __frame->This = This;
    if (pdispparams) MIDL_memset( pdispparams, 0, sizeof( *pdispparams ));
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 7);
        if (!pdispparams) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 8;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            *(ULONG *)__frame->_StubMsg.Buffer = ulRecordNum;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[940]);

            NdrComplexStructUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&pdispparams,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5762],
                0);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5968],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteGetErrorParameters_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5946], (void *)pdispparams );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5968], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteGetErrorParameters_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ULONG ulRecordNum;
    DISPPARAMS _W0;
    DISPPARAMS * pdispparams;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteGetErrorParameters_Stub( struct __frame_IErrorRecords_RemoteGetErrorParameters_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->pdispparams,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5946]);

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5968]);

}

void __RPC_STUB IErrorRecords_RemoteGetErrorParameters_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteGetErrorParameters_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteGetErrorParameters_Stub );
    __frame->pdispparams = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[940]);

        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
        {
            RpcRaiseException(RPC_X_BAD_STUB_DATA);
        }
        __frame->ulRecordNum = *(ULONG *)__frame->_StubMsg.Buffer;
        __frame->_StubMsg.Buffer += sizeof(ULONG);


        __frame->pdispparams = &__frame->_W0;
        memset(&__frame->_W0, 0, sizeof(__frame->_W0));
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_GetErrorParameters_Stub(__frame->_This, __frame->ulRecordNum, __frame->pdispparams, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 8;
        NdrComplexStructBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pdispparams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5762]);

        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5968]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        NdrComplexStructMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->pdispparams,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5762]);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5968]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteGetErrorParameters_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static void __finally_IErrorRecords_RemoteGetRecordCount_Proxy( struct __proxy_frame *__frame )
{
    NdrProxyFreeBuffer( __frame->This, &__frame->_StubMsg );
}

HRESULT STDMETHODCALLTYPE IErrorRecords_RemoteGetRecordCount_Proxy(
    IErrorRecords* This,
    ULONG *pcRecords,
    IErrorInfo **ppErrorInfoRem)
{
    struct __proxy_frame __f, * const __frame = &__f;
    HRESULT _RetVal;
    RPC_MESSAGE _RpcMessage;

    RpcExceptionInit( __proxy_filter, __finally_IErrorRecords_RemoteGetRecordCount_Proxy );
    __frame->This = This;
    if (ppErrorInfoRem) MIDL_memset( ppErrorInfoRem, 0, sizeof( *ppErrorInfoRem ));
    RpcTryExcept
    {
        NdrProxyInitialize(This, &_RpcMessage, &__frame->_StubMsg, &Object_StubDesc, 8);
        if (!pcRecords) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        if (!ppErrorInfoRem) RpcRaiseException(RPC_X_NULL_REF_POINTER);
        RpcTryFinally
        {
            __frame->_StubMsg.BufferLength = 0;
            NdrProxyGetBuffer(This, &__frame->_StubMsg);
            NdrProxySendReceive(This, &__frame->_StubMsg);

            __frame->_StubMsg.BufferStart = _RpcMessage.Buffer;
            __frame->_StubMsg.BufferEnd   = __frame->_StubMsg.BufferStart + _RpcMessage.BufferLength;

            if ((_RpcMessage.DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
                NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[952]);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(ULONG) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            *pcRecords = *(ULONG *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(ULONG);

            NdrPointerUnmarshall(
                &__frame->_StubMsg,
                (unsigned char **)&ppErrorInfoRem,
                (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5994],
                0);

            __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
            if (__frame->_StubMsg.Buffer + sizeof(HRESULT) > __frame->_StubMsg.BufferEnd)
            {
                RpcRaiseException(RPC_X_BAD_STUB_DATA);
            }
            _RetVal = *(HRESULT *)__frame->_StubMsg.Buffer;
            __frame->_StubMsg.Buffer += sizeof(HRESULT);

        }
        RpcFinally
        {
            __finally_IErrorRecords_RemoteGetRecordCount_Proxy( __frame );
        }
        RpcEndFinally
    }
    RpcExcept(__frame->_StubMsg.dwStubPhase != PROXY_SENDRECEIVE)
    {
        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5972], (void *)pcRecords );

        NdrClearOutParameters( &__frame->_StubMsg, &__MIDL_TypeFormatString.Format[5994], (void *)ppErrorInfoRem );

        _RetVal = NdrProxyErrorHandler(RpcExceptionCode());
    }
    RpcEndExcept
    return _RetVal;
}

struct __frame_IErrorRecords_RemoteGetRecordCount_Stub
{
    __DECL_EXCEPTION_FRAME
    MIDL_STUB_MESSAGE _StubMsg;
    IErrorRecords * _This;
    HRESULT _RetVal;
    ULONG _W0;
    ULONG * pcRecords;
    IErrorInfo *_W1;
    IErrorInfo ** ppErrorInfoRem;
};

static void __finally_IErrorRecords_RemoteGetRecordCount_Stub( struct __frame_IErrorRecords_RemoteGetRecordCount_Stub *__frame )
{

    NdrPointerFree(
        &__frame->_StubMsg,
        (unsigned char *)__frame->ppErrorInfoRem,
        (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5994]);

}

void __RPC_STUB IErrorRecords_RemoteGetRecordCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD* _pdwStubPhase)
{
    struct __frame_IErrorRecords_RemoteGetRecordCount_Stub __f, * const __frame = &__f;

    __frame->_This = (IErrorRecords*)((CStdStubBuffer*)This)->pvServerObject;

    NdrStubInitialize(_pRpcMessage, &__frame->_StubMsg, &Object_StubDesc, _pRpcChannelBuffer);

    RpcExceptionInit( 0, __finally_IErrorRecords_RemoteGetRecordCount_Stub );
    __frame->pcRecords = 0;
    __frame->ppErrorInfoRem = 0;

    RpcTryFinally
    {
        if ((_pRpcMessage->DataRepresentation & 0xffff) != NDR_LOCAL_DATA_REPRESENTATION)
            NdrConvert( &__frame->_StubMsg, &__MIDL_ProcFormatString.Format[952]);


        __frame->pcRecords = &__frame->_W0;
        __frame->_W0 = 0;
        __frame->ppErrorInfoRem = &__frame->_W1;
        __frame->_W1 = 0;

        *_pdwStubPhase = STUB_CALL_SERVER;

        __frame->_RetVal = IErrorRecords_GetRecordCount_Stub(__frame->_This, __frame->pcRecords, __frame->ppErrorInfoRem);

        *_pdwStubPhase = STUB_MARSHAL;

        __frame->_StubMsg.BufferLength = 16;
        NdrPointerBufferSize(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5994]);

        NdrStubGetBuffer(This, _pRpcChannelBuffer, &__frame->_StubMsg);
        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(ULONG *)__frame->_StubMsg.Buffer = *__frame->pcRecords;
        __frame->_StubMsg.Buffer += sizeof(ULONG);

        NdrPointerMarshall(
            &__frame->_StubMsg,
            (unsigned char *)__frame->ppErrorInfoRem,
            (PFORMAT_STRING)&__MIDL_TypeFormatString.Format[5994]);


        MIDL_memset(__frame->_StubMsg.Buffer, 0, (0x4 - (ULONG_PTR)__frame->_StubMsg.Buffer) & 0x3);
        __frame->_StubMsg.Buffer = (unsigned char *)(((ULONG_PTR)__frame->_StubMsg.Buffer + 3) & ~0x3);
        *(HRESULT *)__frame->_StubMsg.Buffer = __frame->_RetVal;
        __frame->_StubMsg.Buffer += sizeof(HRESULT);

    }
    RpcFinally
    {
        __finally_IErrorRecords_RemoteGetRecordCount_Stub( __frame );
    }
    RpcEndFinally
    _pRpcMessage->BufferLength = __frame->_StubMsg.Buffer - (unsigned char *)_pRpcMessage->Buffer;
}

static const unsigned short IErrorRecords_FormatStringOffsetTable[] =
{
    876,  /* IErrorRecords::RemoteAddErrorRecord */
    898,  /* IErrorRecords::RemoteGetBasicErrorInfo */
    910,  /* IErrorRecords::RemoteGetCustomErrorObject */
    926,  /* IErrorRecords::RemoteGetErrorInfo */
    940,  /* IErrorRecords::RemoteGetErrorParameters */
    952,  /* IErrorRecords::RemoteGetRecordCount */
};

static const CINTERFACE_PROXY_VTABLE(9) _IErrorRecordsProxyVtbl =
{
    {
        &IID_IErrorRecords,
    },
    {
        IUnknown_QueryInterface_Proxy,
        IUnknown_AddRef_Proxy,
        IUnknown_Release_Proxy,
        IErrorRecords_AddErrorRecord_Proxy,
        IErrorRecords_GetBasicErrorInfo_Proxy,
        IErrorRecords_GetCustomErrorObject_Proxy,
        IErrorRecords_GetErrorInfo_Proxy,
        IErrorRecords_GetErrorParameters_Proxy,
        IErrorRecords_GetRecordCount_Proxy,
    }
};

static const MIDL_SERVER_INFO IErrorRecords_ServerInfo =
{
    &Object_StubDesc,
    0,
    __MIDL_ProcFormatString.Format,
    &IErrorRecords_FormatStringOffsetTable[-3],
    0,
    0,
    0,
    0
};

static const PRPC_STUB_FUNCTION IErrorRecords_table[] =
{
    IErrorRecords_RemoteAddErrorRecord_Stub,
    IErrorRecords_RemoteGetBasicErrorInfo_Stub,
    IErrorRecords_RemoteGetCustomErrorObject_Stub,
    IErrorRecords_RemoteGetErrorInfo_Stub,
    IErrorRecords_RemoteGetErrorParameters_Stub,
    IErrorRecords_RemoteGetRecordCount_Stub
};

static const CInterfaceStubVtbl _IErrorRecordsStubVtbl =
{
    {
        &IID_IErrorRecords,
        &IErrorRecords_ServerInfo,
        9,
        &IErrorRecords_table[-3]
    },
    {
        CStdStubBuffer_METHODS
    }
};

static void __RPC_USER msdaps_DBBINDEXTExprEval_0000(PMIDL_STUB_MESSAGE pStubMsg)
{
    DBBINDEXT *pS = (DBBINDEXT *)(pStubMsg->StackTop - 0);
    pStubMsg->Offset = 0;
    pStubMsg->MaxCount = (ULONG_PTR)(ULONG)pS->ulExtension;
}

static void __RPC_USER msdaps_CLIPDATAExprEval_0001(PMIDL_STUB_MESSAGE pStubMsg)
{
    CLIPDATA *pS = (CLIPDATA *)(pStubMsg->StackTop - 0);
    pStubMsg->Offset = 0;
    pStubMsg->MaxCount = (ULONG_PTR)(pS->cbSize - sizeof(LONG));
}

static void __RPC_USER msdaps_PROPVARIANTExprEval_0002(PMIDL_STUB_MESSAGE pStubMsg)
{
    PROPVARIANT *pS = (PROPVARIANT *)(pStubMsg->StackTop - 8);
    pStubMsg->Offset = 0;
    pStubMsg->MaxCount = (ULONG_PTR)(pS->vt & 0x1fff);
}

static const EXPR_EVAL ExprEvalRoutines[] =
{
    msdaps_DBBINDEXTExprEval_0000,
    msdaps_CLIPDATAExprEval_0001,
    msdaps_PROPVARIANTExprEval_0002,
};

static const USER_MARSHAL_ROUTINE_QUADRUPLE UserMarshalRoutines[] =
{
    {
        (USER_MARSHAL_SIZING_ROUTINE)VARIANT_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)VARIANT_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)VARIANT_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)VARIANT_UserFree
    },
    {
        (USER_MARSHAL_SIZING_ROUTINE)BSTR_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)BSTR_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)BSTR_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)BSTR_UserFree
    },
    {
        (USER_MARSHAL_SIZING_ROUTINE)LPSAFEARRAY_UserSize,
        (USER_MARSHAL_MARSHALLING_ROUTINE)LPSAFEARRAY_UserMarshal,
        (USER_MARSHAL_UNMARSHALLING_ROUTINE)LPSAFEARRAY_UserUnmarshal,
        (USER_MARSHAL_FREEING_ROUTINE)LPSAFEARRAY_UserFree
    }
};

static const MIDL_STUB_DESC Object_StubDesc =
{
    0,
    NdrOleAllocate,
    NdrOleFree,
    {0}, 0, 0, ExprEvalRoutines, 0,
    __MIDL_TypeFormatString.Format,
    1, /* -error bounds_check flag */
    0x10001, /* Ndr library version */
    0,
    0x50100a4, /* MIDL Version 5.1.164 */
    0,
    UserMarshalRoutines,
    0,  /* notify & notify_flag routine table */
    1,  /* Flags */
    0,  /* Reserved3 */
    0,  /* Reserved4 */
    0   /* Reserved5 */
};

#if !defined(__RPC_WIN64__)
#error Currently only Wine and WIN32 are supported.
#endif

static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString =
{
    0,
    {
/* 0 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 2 (parameter pcRefCount) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x2),	/* type offset = 2 */
/* 6 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x18),	/* type offset = 24 */
/* 10 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 12 (parameter dwAccessorFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 14 (parameter cBindings) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 16 (parameter rgBindings) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x9a),	/* type offset = 154 */
/* 20 (parameter cbRowSize) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 22 (parameter phAccessor) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x9e),	/* type offset = 158 */
/* 26 (parameter rgStatus) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xac),	/* type offset = 172 */
/* 30 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xc2),	/* type offset = 194 */
/* 34 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 36 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 38 (parameter pdwAccessorFlags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xc6),	/* type offset = 198 */
/* 42 (parameter pcBindings) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xca),	/* type offset = 202 */
/* 46 (parameter prgBindings) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe4),	/* type offset = 228 */
/* 50 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xfa),	/* type offset = 250 */
/* 54 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 56 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 58 (parameter pcRefCount) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xfe),	/* type offset = 254 */
/* 62 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x114),	/* type offset = 276 */
/* 66 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 68 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 70 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15a),	/* type offset = 346 */
/* 74 (parameter pcPropertySets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x15e),	/* type offset = 350 */
/* 78 (parameter prgPropertySets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x650),	/* type offset = 1616 */
/* 82 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x666),	/* type offset = 1638 */
/* 86 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 88 (parameter iOrdinal) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 90 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x66a),	/* type offset = 1642 */
/* 94 (parameter ppReferencedRowset) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x674),	/* type offset = 1652 */
/* 98 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x68a),	/* type offset = 1674 */
/* 102 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 104 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x68e),	/* type offset = 1678 */
/* 108 (parameter ppSpecification) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x698),	/* type offset = 1688 */
/* 112 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6ae),	/* type offset = 1710 */
/* 116 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 118 (parameter chapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 120 (parameter refcount) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6b2),	/* type offset = 1714 */
/* 124 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6c8),	/* type offset = 1736 */
/* 128 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 130 (parameter chapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 132 (parameter refcount) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6cc),	/* type offset = 1740 */
/* 136 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6e2),	/* type offset = 1762 */
/* 140 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 142 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x6f8),	/* type offset = 1784 */
/* 146 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 148 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x6fc),	/* type offset = 1788 */
/* 152 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x70e),	/* type offset = 1806 */
/* 156 (parameter hAccessor) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 158 (parameter cParamSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 160 (parameter pGuid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x712),	/* type offset = 1810 */
/* 164 (parameter ulGuidOffset) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 166 (parameter pInputParams) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xdf4),	/* type offset = 3572 */
/* 170 (parameter pOutputParams) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xdf8),	/* type offset = 3576 */
/* 174 (parameter cBindings) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 176 (parameter rgBindings) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe0e),	/* type offset = 3598 */
/* 180 (parameter rgStatus) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xe1c),	/* type offset = 3612 */
/* 184 (parameter pcRowsAffected) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xe20),	/* type offset = 3616 */
/* 188 (parameter ppRowset) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xe2a),	/* type offset = 3626 */
/* 192 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 194 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe2e),	/* type offset = 3630 */
/* 198 (parameter ppSession) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe38),	/* type offset = 3640 */
/* 202 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe4e),	/* type offset = 3662 */
/* 206 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 208 (parameter pguidDialect) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xe52),	/* type offset = 3666 */
/* 212 (parameter ppwszCommand) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe5a),	/* type offset = 3674 */
/* 216 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe70),	/* type offset = 3696 */
/* 220 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 222 (parameter rguidDialect) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe74),	/* type offset = 3700 */
/* 226 (parameter pwszCommand) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xe78),	/* type offset = 3704 */
/* 230 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xe8e),	/* type offset = 3726 */
/* 234 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 236 (parameter columns) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xe92),	/* type offset = 3730 */
/* 240 (parameter colinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xee0),	/* type offset = 3808 */
/* 244 (parameter name_offsets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xef6),	/* type offset = 3830 */
/* 248 (parameter columnid_offsets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf0c),	/* type offset = 3852 */
/* 252 (parameter string_len) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xf10),	/* type offset = 3856 */
/* 256 (parameter stringsbuffer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0xf22),	/* type offset = 3874 */
/* 260 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf38),	/* type offset = 3896 */
/* 264 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 266 (parameter column_ids) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 268 (parameter dbids) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf60),	/* type offset = 3936 */
/* 272 (parameter columns) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf76),	/* type offset = 3958 */
/* 276 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xf9a),	/* type offset = 3994 */
/* 280 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 282 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xf9e),	/* type offset = 3998 */
/* 286 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfb0),	/* type offset = 4016 */
/* 290 (parameter ppCommand) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xfba),	/* type offset = 4026 */
/* 294 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xfd0),	/* type offset = 4048 */
/* 298 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 300 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfd4),	/* type offset = 4052 */
/* 304 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0xfe6),	/* type offset = 4070 */
/* 308 (parameter ppDBSession) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0xff0),	/* type offset = 4080 */
/* 312 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1006),	/* type offset = 4102 */
/* 316 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 318 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x100a),	/* type offset = 4106 */
/* 322 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x101c),	/* type offset = 4124 */
/* 326 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 328 (parameter rgProperties) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1020),	/* type offset = 4128 */
/* 332 (parameter ppSourcesRowset) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1036),	/* type offset = 4150 */
/* 336 (parameter cTotalProps) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 338 (parameter rgPropStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x103a),	/* type offset = 4154 */
/* 342 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1050),	/* type offset = 4176 */
/* 346 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 348 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 350 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1084),	/* type offset = 4228 */
/* 354 (parameter pcPropertySets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1088),	/* type offset = 4232 */
/* 358 (parameter prgPropertySets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10a2),	/* type offset = 4258 */
/* 362 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x10b8),	/* type offset = 4280 */
/* 366 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 368 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 370 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x10ec),	/* type offset = 4332 */
/* 374 (parameter pcPropertyInfoSets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x10f0),	/* type offset = 4336 */
/* 378 (parameter prgPropertyInfoSets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x114a),	/* type offset = 4426 */
/* 382 (parameter pcOffsets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x114e),	/* type offset = 4430 */
/* 386 (parameter prgDescOffsets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1164),	/* type offset = 4452 */
/* 390 (parameter pcbDescBuffer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1168),	/* type offset = 4456 */
/* 394 (parameter ppDescBuffer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x117a),	/* type offset = 4474 */
/* 398 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1190),	/* type offset = 4496 */
/* 402 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 404 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 406 (parameter rgPropertySets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x11a6),	/* type offset = 4518 */
/* 410 (parameter cTotalProps) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 412 (parameter rgPropStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11aa),	/* type offset = 4522 */
/* 416 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11ca),	/* type offset = 4554 */
/* 420 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 422 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11e0),	/* type offset = 4576 */
/* 426 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 428 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x11f6),	/* type offset = 4598 */
/* 432 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 434 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 436 (parameter rgPropertySets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x120c),	/* type offset = 4620 */
/* 440 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1210),	/* type offset = 4624 */
/* 444 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1222),	/* type offset = 4642 */
/* 448 (parameter ppDBSession) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x122c),	/* type offset = 4652 */
/* 452 (parameter cTotalProps) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 454 (parameter rgPropStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1230),	/* type offset = 4656 */
/* 458 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1250),	/* type offset = 4688 */
/* 462 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 464 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1266),	/* type offset = 4710 */
/* 468 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 470 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 472 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x129a),	/* type offset = 4762 */
/* 476 (parameter pcPropertyInfoSets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x129e),	/* type offset = 4766 */
/* 480 (parameter prgPropertyInfoSets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12b8),	/* type offset = 4792 */
/* 484 (parameter pcOffsets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x12bc),	/* type offset = 4796 */
/* 488 (parameter prgDescOffsets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12d2),	/* type offset = 4818 */
/* 492 (parameter pcbDescBuffer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x12d6),	/* type offset = 4822 */
/* 496 (parameter ppDescBuffer) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x12e8),	/* type offset = 4840 */
/* 500 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x12fe),	/* type offset = 4862 */
/* 504 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 506 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 508 (parameter rgPropertySets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1302),	/* type offset = 4866 */
/* 512 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x132a),	/* type offset = 4906 */
/* 516 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 518 (parameter dwReserved) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 520 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 522 (parameter hChapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 524 (parameter eOperation) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 526 (parameter ulProgress) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 528 (parameter ulProgressMax) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 530 (parameter eAsynchPhase) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 532 (parameter pwszStatusText) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x132e),	/* type offset = 4910 */
/* 536 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 538 (parameter hChapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 540 (parameter eOperation) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 542 (parameter hrStatus) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 544 (parameter pwszStatusText) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1332),	/* type offset = 4914 */
/* 548 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 550 (parameter hChapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 552 (parameter eOperation) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 554 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1348),	/* type offset = 4936 */
/* 558 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 560 (parameter hChapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 562 (parameter eOperation) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 564 (parameter pulProgress) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x134c),	/* type offset = 4940 */
/* 568 (parameter pulProgressMax) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1350),	/* type offset = 4944 */
/* 572 (parameter peAsynchPhase) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1354),	/* type offset = 4948 */
/* 576 (parameter ppwszStatusText) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x135c),	/* type offset = 4956 */
/* 580 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1372),	/* type offset = 4978 */
/* 584 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 586 (parameter cPropertyIDSets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 588 (parameter rgPropertyIDSets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13a6),	/* type offset = 5030 */
/* 592 (parameter pcPropertySets) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x13aa),	/* type offset = 5034 */
/* 596 (parameter prgPropertySets) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13c4),	/* type offset = 5060 */
/* 600 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13da),	/* type offset = 5082 */
/* 604 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 606 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 608 (parameter rgPropertySets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x13f0),	/* type offset = 5104 */
/* 612 (parameter cTotalProps) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 614 (parameter rgPropStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x13f4),	/* type offset = 5108 */
/* 618 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1414),	/* type offset = 5140 */
/* 622 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 624 (parameter rowset) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1418),	/* type offset = 5144 */
/* 628 (parameter row) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 630 (parameter ccols) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 632 (parameter columns) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x142a),	/* type offset = 5162 */
/* 636 (parameter reason) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 638 (parameter phase) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 640 (parameter cantdeny) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 642 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 644 (parameter rowset) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x143c),	/* type offset = 5180 */
/* 648 (parameter rows) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 650 (parameter hrows) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x144e),	/* type offset = 5198 */
/* 654 (parameter reason) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 656 (parameter phase) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 658 (parameter cantdeny) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 660 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 662 (parameter rowset) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1460),	/* type offset = 5216 */
/* 666 (parameter reason) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 668 (parameter phase) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 670 (parameter cantdeny) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 672 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 674 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1472),	/* type offset = 5234 */
/* 678 (parameter pTableID) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1484),	/* type offset = 5252 */
/* 682 (parameter pIndexID) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1488),	/* type offset = 5256 */
/* 686 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x148c),	/* type offset = 5260 */
/* 690 (parameter cPropertySets) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 692 (parameter rgPropertySets) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x14a2),	/* type offset = 5282 */
/* 696 (parameter ppRowset) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x14ac),	/* type offset = 5292 */
/* 700 (parameter cTotalProps) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 702 (parameter rgPropStatus) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14b0),	/* type offset = 5296 */
/* 706 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14d0),	/* type offset = 5328 */
/* 710 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 712 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14e6),	/* type offset = 5350 */
/* 716 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 718 (parameter chapter) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14ea),	/* type offset = 5354 */
/* 722 (parameter row) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14ee),	/* type offset = 5358 */
/* 726 (parameter position_flags) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x14f2),	/* type offset = 5362 */
/* 730 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1508),	/* type offset = 5384 */
/* 734 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 736 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x150c),	/* type offset = 5388 */
/* 740 (parameter rowset) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1516),	/* type offset = 5398 */
/* 744 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x152c),	/* type offset = 5420 */
/* 748 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 750 (parameter rowset) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1530),	/* type offset = 5424 */
/* 754 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1554),	/* type offset = 5460 */
/* 758 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 760 (parameter chapter) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 762 (parameter row) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0xb8,    /* FC_INT3264 */
/* 764 (parameter flags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 766 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x156a),	/* type offset = 5482 */
/* 770 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 772 (parameter reason) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 774 (parameter phase) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 776 (parameter cant_deny) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 778 (parameter errorinfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1580),	/* type offset = 5504 */
/* 782 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 784 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1584),	/* type offset = 5508 */
/* 788 (parameter pwszURL) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1596),	/* type offset = 5526 */
/* 792 (parameter dwBindURLFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 794 (parameter rguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x159a),	/* type offset = 5530 */
/* 798 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x159e),	/* type offset = 5534 */
/* 802 (parameter pAuthenticate) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15a2),	/* type offset = 5538 */
/* 806 (parameter pSessionUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15b4),	/* type offset = 5556 */
/* 810 (parameter piid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15c6),	/* type offset = 5574 */
/* 814 (parameter ppSession) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x15d0),	/* type offset = 5584 */
/* 818 (parameter pdwBindStatus) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x15d4),	/* type offset = 5588 */
/* 822 (parameter ppUnk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x15de),	/* type offset = 5598 */
/* 826 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 828 (parameter pUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15e2),	/* type offset = 5602 */
/* 832 (parameter pwszURL) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15f4),	/* type offset = 5620 */
/* 836 (parameter dwBindURLFlags) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 838 (parameter rguid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15f8),	/* type offset = 5624 */
/* 842 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x15fc),	/* type offset = 5628 */
/* 846 (parameter pAuthenticate) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1600),	/* type offset = 5632 */
/* 850 (parameter pSessionUnkOuter) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1612),	/* type offset = 5650 */
/* 854 (parameter piid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1624),	/* type offset = 5668 */
/* 858 (parameter ppSession) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x162e),	/* type offset = 5678 */
/* 862 (parameter pdwBindStatus) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x1632),	/* type offset = 5682 */
/* 866 (parameter ppwszNewURL) */
        0x50,    /* FC_IN_OUT_PARAM */
        0x01,
        NdrFcShort(0x163a),	/* type offset = 5690 */
/* 870 (parameter ppUnk) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1644),	/* type offset = 5700 */
/* 874 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 876 (parameter pErrorInfo) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1658),	/* type offset = 5720 */
/* 880 (parameter dwLookupID) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 882 (parameter pdispparams) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x1698),	/* type offset = 5784 */
/* 886 (parameter punkCustomError) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x169c),	/* type offset = 5788 */
/* 890 (parameter dwDynamicErrorID) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 892 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16c0),	/* type offset = 5824 */
/* 896 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 898 (parameter ulRecordNum) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 900 (parameter pErrorInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16c4),	/* type offset = 5828 */
/* 904 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16da),	/* type offset = 5850 */
/* 908 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 910 (parameter ulRecordNum) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 912 (parameter riid) */
        0x4d,    /* FC_IN_PARAM */
        0x01,
        NdrFcShort(0x16de),	/* type offset = 5854 */
/* 916 (parameter ppObject) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x16f4),	/* type offset = 5876 */
/* 920 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x170a),	/* type offset = 5898 */
/* 924 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 926 (parameter ulRecordNum) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 928 (parameter lcid) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 930 (parameter ppErrorInfo) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1720),	/* type offset = 5920 */
/* 934 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1736),	/* type offset = 5942 */
/* 938 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 940 (parameter ulRecordNum) */
        0x4e,    /* FC_IN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 942 (parameter pdispparams) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x173a),	/* type offset = 5946 */
/* 946 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1750),	/* type offset = 5968 */
/* 950 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
/* 952 (parameter pcRecords) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x1754),	/* type offset = 5972 */
/* 956 (parameter ppErrorInfoRem) */
        0x51,    /* FC_OUT_PARAM */
        0x01,
        NdrFcShort(0x176a),	/* type offset = 5994 */
/* 960 (return value) */
        0x53,    /* FC_RETURN_PARAM_BASETYPE */
        0x08,    /* FC_LONG */
        0x0
    }
};

static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString =
{
    0,
    {
        NdrFcShort(0x0),
/* 2 (DBREFCOUNT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 6 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 24 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (6) */
/* 28 (ITypeInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020401),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 46 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 52 (IID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (46) */
        0x5b,	/* FC_END */
/* 64 (DBOBJECT) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x14),	/* 20 */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffed),	/* Offset= -19 (52) */
        0x5b,	/* FC_END */
/* 74 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x10,	/* Corr desc: field pointer in DBBINDEXT */
        0x59,	/* FC_CALLBACK */
        NdrFcShort(0x0),	/* 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 84 (DBBINDEXT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (96) */
        0x36,	/* FC_POINTER */
        0xb8,	/* FC_INT3264 */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 96 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (74) */
/* 100 (DBBINDING) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x58),	/* 88 */
        NdrFcShort(0x0),
        NdrFcShort(0x16),	/* Offset= 22 (128) */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0xb8,	/* FC_INT3264 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffaa),	/* Offset= -86 (28) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 128 (DBOBJECT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffbe),	/* Offset= -66 (64) */
/* 132 (DBBINDEXT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffce),	/* Offset= -50 (84) */
/* 136 (DBBINDING *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteCreateAccessor */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffce),	/* Offset= -50 (100) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 154 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (136) */
/* 158 (HACCESSOR *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 162 (DBBINDSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for RemoteCreateAccessor */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 172 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (162) */
/* 176 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 194 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (176) */
/* 198 (DBACCESSORFLAGS *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 202 (DBCOUNTITEM *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 206 (DBBINDING *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteGetBindings */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff88),	/* Offset= -120 (100) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 224 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (206) */
/* 228 (DBBINDING **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (224) */
/* 232 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 250 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (232) */
/* 254 (DBREFCOUNT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 258 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 276 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (258) */
/* 280 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 290 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 296 (GUID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (290) */
        0x5b,	/* FC_END */
/* 308 (const DBPROPIDSET) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (324) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (296) */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 324 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd2),	/* Offset= -46 (280) */
/* 328 (const DBPROPIDSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPropertyIDSets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (308) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 346 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (328) */
/* 350 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 354 (GUID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc4),	/* Offset= -60 (296) */
/* 358 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0xffba),	/* Offset= -70 (296) */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0xffb4),	/* Offset= -76 (296) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xffae),	/* Offset= -82 (296) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffa8),	/* Offset= -88 (296) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0xffa2),	/* Offset= -94 (296) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffd6),	/* Offset= -42 (354) */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0xffd0),	/* Offset= -48 (354) */
        NdrFcShort(0x0),
/* 406 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 408 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 410 (union ) */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x7),	/* 7 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (406) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xffee),	/* Offset= -18 (406) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xffe8),	/* Offset= -24 (406) */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcShort(0x0),
/* 458 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0xff96),	/* Offset= -106 (358) */
/* 466 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xffc2),	/* Offset= -62 (410) */
/* 474 (DBID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (480) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (458) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (466) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 494 (unsigned short[]) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x9,	/* Corr desc: field clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfffc),	/* offset = -4 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 504 (FLAGGED_WORD_BLOB) */
        0x17,	/* FC_CSTRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0xfff2),	/* Offset= -14 (494) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 514 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (504) */
/* 518 (CY) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 524 (DECIMAL) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x10),	/* 16 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x08,	/* FC_LONG */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 534 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 552 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 570 (wireBSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffb0),	/* Offset= -80 (504) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 588 (SAFEARR_BSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (600) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 600 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (570) */
/* 604 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 622 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (604) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 640 (SAFEARR_UNKNOWN) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (652) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 652 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (622) */
/* 656 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 674 (IDispatch **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (656) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 692 (SAFEARR_DISPATCH) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (704) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 704 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (674) */
/* 708 (wireVARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x30a),	/* Offset= 778 (1500) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 726 (SAFEARR_VARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (738) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 738 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (708) */
/* 742 (IRecordInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000002f),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 760 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x4),	/* offset = 4 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 770 (struct _wireBRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (786) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd8),	/* Offset= -40 (742) */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 786 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (760) */
/* 790 (wireBRECORD *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffde),	/* Offset= -34 (770) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 808 (SAFEARR_BRECORD) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (820) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 820 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe0),	/* Offset= -32 (790) */
/* 824 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 842 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer Size, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (824) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 860 (SAFEARR_HAVEIID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (876) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfccb),	/* Offset= -821 (52) */
        0x5b,	/* FC_END */
/* 876 */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffdc),	/* Offset= -36 (842) */
/* 880 (byte *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 890 (BYTE_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (902) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 902 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (880) */
/* 906 (unsigned short *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 916 (WORD_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (928) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 928 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (906) */
/* 932 (ULONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 942 (DWORD_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (954) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 954 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (932) */
/* 958 (hyper *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer clSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 968 (HYPER_SIZEDARR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (980) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 980 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (958) */
/* 984 (SAFEARRAYUNION) */
        0x2a,	/* FC_ENCAPSULATED_UNION */
        0x89,	/* Switch type= FC_ULONG */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0xa),	/* 10 */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xfe6a),	/* Offset= -406 (588) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfe98),	/* Offset= -360 (640) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfec6),	/* Offset= -314 (692) */
        NdrFcLong(0xc),	/* 12 */
        NdrFcShort(0xfee2),	/* Offset= -286 (726) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xff2e),	/* Offset= -210 (808) */
        NdrFcLong(0x800d),	/* 32781 */
        NdrFcShort(0xff5c),	/* Offset= -164 (860) */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0xff74),	/* Offset= -140 (890) */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0xff88),	/* Offset= -120 (916) */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0xff9c),	/* Offset= -100 (942) */
        NdrFcLong(0x14),	/* 20 */
        NdrFcShort(0xffb0),	/* Offset= -80 (968) */
        NdrFcShort(0xffff),
/* 1052 (SAFEARRAYBOUND) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1060 (SAFEARRAYBOUND[]) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x7,	/* Corr desc: field cDims, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xffc8),	/* offset = -56 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffee),	/* Offset= -18 (1052) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1074 (struct _wireSAFEARRAY) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x38),	/* 56 */
        NdrFcShort(0xffee),	/* Offset= -18 (1060) */
        NdrFcShort(0x0),	/* Offset= 0 (1080) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xff97),	/* Offset= -105 (984) */
        0x5b,	/* FC_END */
/* 1092 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (1074) */
/* 1096 (signed char *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 1100 (USHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x07,	/* FC_USHORT */
        0x5c,	/* FC_PAD */
/* 1104 (ULONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1108 (INT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1112 (UINT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 1116 (BYTE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 1120 (SHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 1124 (LONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1128 (FLOAT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0a,	/* FC_FLOAT */
        0x5c,	/* FC_PAD */
/* 1132 (DOUBLE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 1136 (VARIANT_BOOL *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 1140 (SCODE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 1144 (DATE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 1148 (wireBSTR) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd7a),	/* Offset= -646 (504) */
/* 1152 (wireBSTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1148) */
/* 1156 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x156),	/* Offset= 342 (1500) */
/* 1160 (wireVARIANT *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1156) */
/* 1164 (CY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd78),	/* Offset= -648 (518) */
/* 1168 (DECIMAL *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfd7a),	/* Offset= -646 (524) */
/* 1172 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1190 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1172) */
/* 1194 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1212 (IDispatch **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1194) */
/* 1216 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff70),	/* Offset= -144 (1074) */
/* 1220 (wireSAFEARRAY *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1216) */
/* 1224 (wireBRECORD) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfe38),	/* Offset= -456 (770) */
/* 1228 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x2b),	/* 43 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x12),	/* 18 */
        NdrFcShort(0x8007),	/* Simple arm type: FC_USHORT */
        NdrFcLong(0x13),	/* 19 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x16),	/* 22 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x17),	/* 23 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x11),	/* 17 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x800a),	/* Simple arm type: FC_FLOAT */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0xb),	/* 11 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0xa),	/* 10 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xff4e),	/* Offset= -178 (1148) */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xfcd2),	/* Offset= -814 (518) */
        NdrFcLong(0xe),	/* 14 */
        NdrFcShort(0xfcd2),	/* Offset= -814 (524) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfcd6),	/* Offset= -810 (534) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfce2),	/* Offset= -798 (552) */
        NdrFcLong(0x2000),	/* 8192 */
        NdrFcShort(0xff74),	/* Offset= -140 (1216) */
        NdrFcLong(0x4010),	/* 16400 */
        NdrFcShort(0xfef6),	/* Offset= -266 (1096) */
        NdrFcLong(0x4012),	/* 16402 */
        NdrFcShort(0xfef4),	/* Offset= -268 (1100) */
        NdrFcLong(0x4013),	/* 16403 */
        NdrFcShort(0xfef2),	/* Offset= -270 (1104) */
        NdrFcLong(0x4016),	/* 16406 */
        NdrFcShort(0xfef0),	/* Offset= -272 (1108) */
        NdrFcLong(0x4017),	/* 16407 */
        NdrFcShort(0xfeee),	/* Offset= -274 (1112) */
        NdrFcLong(0x4011),	/* 16401 */
        NdrFcShort(0xfeec),	/* Offset= -276 (1116) */
        NdrFcLong(0x4002),	/* 16386 */
        NdrFcShort(0xfeea),	/* Offset= -278 (1120) */
        NdrFcLong(0x4003),	/* 16387 */
        NdrFcShort(0xfee8),	/* Offset= -280 (1124) */
        NdrFcLong(0x4004),	/* 16388 */
        NdrFcShort(0xfee6),	/* Offset= -282 (1128) */
        NdrFcLong(0x4005),	/* 16389 */
        NdrFcShort(0xfee4),	/* Offset= -284 (1132) */
        NdrFcLong(0x400b),	/* 16395 */
        NdrFcShort(0xfee2),	/* Offset= -286 (1136) */
        NdrFcLong(0x400a),	/* 16394 */
        NdrFcShort(0xfee0),	/* Offset= -288 (1140) */
        NdrFcLong(0x4007),	/* 16391 */
        NdrFcShort(0xfede),	/* Offset= -290 (1144) */
        NdrFcLong(0x4008),	/* 16392 */
        NdrFcShort(0xfee0),	/* Offset= -288 (1152) */
        NdrFcLong(0x400c),	/* 16396 */
        NdrFcShort(0xfee2),	/* Offset= -286 (1160) */
        NdrFcLong(0x4006),	/* 16390 */
        NdrFcShort(0xfee0),	/* Offset= -288 (1164) */
        NdrFcLong(0x400e),	/* 16398 */
        NdrFcShort(0xfede),	/* Offset= -290 (1168) */
        NdrFcLong(0x400d),	/* 16397 */
        NdrFcShort(0xfeee),	/* Offset= -274 (1190) */
        NdrFcLong(0x4009),	/* 16393 */
        NdrFcShort(0xfefe),	/* Offset= -258 (1212) */
        NdrFcLong(0x6000),	/* 24576 */
        NdrFcShort(0xff00),	/* Offset= -256 (1220) */
        NdrFcLong(0x24),	/* 36 */
        NdrFcShort(0xfefe),	/* Offset= -258 (1224) */
        NdrFcLong(0x4024),	/* 16420 */
        NdrFcShort(0xfef8),	/* Offset= -264 (1224) */
        NdrFcShort(0xffff),
/* 1492 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x7,	/* Corr desc: field vt, FC_USHORT */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xfef2),	/* Offset= -270 (1228) */
/* 1500 (struct _wireVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1506) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1492) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1520 (wireVARIANT) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffea),	/* Offset= -22 (1500) */
/* 1524 (VARIANT) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (1520) */
/* 1534 (DBPROP) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x48),	/* 72 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (1540) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfbce),	/* Offset= -1074 (474) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe4),	/* Offset= -28 (1524) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1556 (DBPROP *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cProperties, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (1534) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1574 (DBPROPSET) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (1590) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfaf6),	/* Offset= -1290 (296) */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 1590 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (1556) */
/* 1594 (DBPROPSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter pcPropertySets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (1574) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1612 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (1594) */
/* 1616 (DBPROPSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (1612) */
/* 1620 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1638 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1620) */
/* 1642 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9c8),	/* Offset= -1592 (52) */
/* 1646 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
/* 1652 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1646) */
/* 1656 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1674 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1656) */
/* 1678 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf9a4),	/* Offset= -1628 (52) */
/* 1682 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 1688 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (1682) */
/* 1692 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1710 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1692) */
/* 1714 (DBREFCOUNT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1718 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1736 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1718) */
/* 1740 (DBREFCOUNT *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 1744 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1762 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1744) */
/* 1766 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 1784 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (1766) */
/* 1788 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1806 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf924),	/* Offset= -1756 (52) */
/* 1810 (GUID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfa14),	/* Offset= -1516 (296) */
/* 1814 (ISequentialStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0c733a30),
        NdrFcShort(0x2a1c),
        NdrFcShort(0x11ce),
        0xad,
        0xe5,
        0x00,
        0xaa,
        0x00,
        0x44,
        0x77,
        0x3d,

/* 1832 (BSTR) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x1),	/* Function offset= 1 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfd4c),	/* Offset= -692 (1148) */
/* 1842 (BSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cBSTR, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xc),	/* offset = 12 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (1832) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1860 (VARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cVARIANT, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfea2),	/* Offset= -350 (1524) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1878 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1896 (IDispatch **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cIDISPATCH, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1878) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1914 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 1932 (IUnknown **) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cIUNKNOWN, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x38),	/* offset = 56 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (1914) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1950 (LARGE_INTEGER) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 1956 (ULARGE_INTEGER) */
        0x15,	/* FC_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x0b,	/* FC_HYPER */
        0x5b,	/* FC_END */
/* 1962 (FILETIME) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 1970 (byte[8]) */
        0x1d,	/* FC_SMFARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x8),	/* 8 */
        0x01,	/* FC_BYTE */
        0x5b,	/* FC_END */
/* 1976 (CLSID) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfff1),	/* Offset= -15 (1970) */
        0x5b,	/* FC_END */
/* 1988 (CLSID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfff2),	/* Offset= -14 (1976) */
/* 1992 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2002 (BLOB) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2014) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2014 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (1992) */
/* 2018 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x10,	/* Corr desc: field pointer in CLIPDATA */
        0x59,	/* FC_CALLBACK */
        NdrFcShort(0x1),	/* 1 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2028 (CLIPDATA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2040) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2040 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2018) */
/* 2044 (CLIPDATA *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffee),	/* Offset= -18 (2028) */
/* 2048 (IStream *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000c),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2066 (IStorage *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0000000b),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2084 (BYTE *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cbSize, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2094 (BSTRBLOB) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2106) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2106 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2084) */
/* 2110 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2112 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
/* 2114 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2116 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 2118 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2136 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2154 (unsigned char *) */
        0x1b,	/* FC_CARRAY */
        0x0,	/* 0 */
        NdrFcShort(0x1),	/* 1 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x02,	/* FC_CHAR */
        0x5b,	/* FC_END */
/* 2164 (CAUB) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2176) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2176 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2154) */
/* 2180 (short *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 2190 (CAI) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2202) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2202 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2180) */
/* 2206 (USHORT *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 2216 (CAUI) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2228) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2228 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2206) */
/* 2232 (VARIANT_BOOL *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x06,	/* FC_SHORT */
        0x5b,	/* FC_END */
/* 2242 (CABOOL) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2254) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2254 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2232) */
/* 2258 (LONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2268 (CAL) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2280) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2280 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2258) */
/* 2284 (ULONG *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2294 (CAUL) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2306) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2306 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2284) */
/* 2310 (float *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0a,	/* FC_FLOAT */
        0x5b,	/* FC_END */
/* 2320 (CAFLT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2332) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2332 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2310) */
/* 2336 (SCODE *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 2346 (CASCODE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2358) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2358 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2336) */
/* 2362 (LARGE_INTEGER *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfe5a),	/* Offset= -422 (1950) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2376 (CAH) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2388) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2388 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2362) */
/* 2392 (ULARGE_INTEGER *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfe42),	/* Offset= -446 (1956) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2406 (CAUH) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2418) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2418 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2392) */
/* 2422 (double *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0c,	/* FC_DOUBLE */
        0x5b,	/* FC_END */
/* 2432 (CADBL) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2444) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2444 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2422) */
/* 2448 (CY *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf86c),	/* Offset= -1940 (518) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2462 (CACY) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2474) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2474 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2448) */
/* 2478 (DATE *) */
        0x1b,	/* FC_CARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x0c,	/* FC_DOUBLE */
        0x5b,	/* FC_END */
/* 2488 (CADATE) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2500) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2500 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe8),	/* Offset= -24 (2478) */
/* 2504 (FILETIME *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x8),	/* 8 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfdd8),	/* Offset= -552 (1962) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2518 (CAFILETIME) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2530) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2530 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2504) */
/* 2534 (CLSID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfdc8),	/* Offset= -568 (1976) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2548 (CACLSID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2560) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2560 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (2534) */
/* 2564 (CLIPDATA *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfdda),	/* Offset= -550 (2028) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2582 (CACLIPDATA) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2594) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2594 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2564) */
/* 2598 (BSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfcf4),	/* Offset= -780 (1832) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2616 (CABSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2628) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2628 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2598) */
/* 2632 (BSTRBLOB *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfdd8),	/* Offset= -552 (2094) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2650 (CABSTRBLOB) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2662) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2662 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2632) */
/* 2666 (LPSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
/* 2678 (LPSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2680 */
        0x22,	/* FC_C_CSTRING */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2684 (CALPSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2696) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2696 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2666) */
/* 2700 (LPWSTR *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
/* 2712 (LPWSTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2714 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2718 (CALPWSTR) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2730) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2730 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2700) */
/* 2734 (PROPVARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cElems, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x0),	/* offset = 0 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0x2ca),	/* Offset= 714 (3462) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 2752 (CAPROPVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x0),
        NdrFcShort(0x6),	/* Offset= 6 (2764) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5b,	/* FC_END */
/* 2764 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe0),	/* Offset= -32 (2734) */
/* 2768 (wireSAFEARRAY) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf960),	/* Offset= -1696 (1074) */
/* 2772 (wirePSAFEARRAY) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (2768) */
/* 2776 (LPSAFEARRAY) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x2),	/* Function offset= 2 */
        NdrFcShort(0x8),	/* 8 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xfff4),	/* Offset= -12 (2772) */
/* 2786 (CHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 2790 (UCHAR *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x02,	/* FC_CHAR */
        0x5c,	/* FC_PAD */
/* 2794 (SHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 2798 (USHORT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x07,	/* FC_USHORT */
        0x5c,	/* FC_PAD */
/* 2802 (LONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2806 (ULONG *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2810 (INT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2814 (UINT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 2818 (FLOAT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0a,	/* FC_FLOAT */
        0x5c,	/* FC_PAD */
/* 2822 (DOUBLE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 2826 (VARIANT_BOOL *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x06,	/* FC_SHORT */
        0x5c,	/* FC_PAD */
/* 2830 (DECIMAL *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf6fc),	/* Offset= -2308 (524) */
/* 2834 (SCODE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
/* 2838 (CY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf6ee),	/* Offset= -2322 (518) */
/* 2842 (DATE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x0c,	/* FC_DOUBLE */
        0x5c,	/* FC_PAD */
/* 2846 (BSTR *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xfc08),	/* Offset= -1016 (1832) */
/* 2850 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2868 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2850) */
/* 2872 (IDispatch *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020400),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 2890 (IDispatch **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (2872) */
/* 2894 (LPSAFEARRAY *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xff88),	/* Offset= -120 (2776) */
/* 2898 (PROPVARIANT *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0x232),	/* Offset= 562 (3462) */
/* 2902 (union ) */
        NdrFcShort(0x10),	/* 16 */
        NdrFcShort(0x5b),	/* 91 */
        NdrFcLong(0x0),	/* 0 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x1),	/* 1 */
        NdrFcShort(0x0),	/* No type */
        NdrFcLong(0x10),	/* 16 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x11),	/* 17 */
        NdrFcShort(0x8002),	/* Simple arm type: FC_CHAR */
        NdrFcLong(0x2),	/* 2 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x12),	/* 18 */
        NdrFcShort(0x8007),	/* Simple arm type: FC_USHORT */
        NdrFcLong(0xb),	/* 11 */
        NdrFcShort(0x8006),	/* Simple arm type: FC_SHORT */
        NdrFcLong(0x3),	/* 3 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x13),	/* 19 */
        NdrFcShort(0x8009),	/* Simple arm type: FC_ULONG */
        NdrFcLong(0x4),	/* 4 */
        NdrFcShort(0x800a),	/* Simple arm type: FC_FLOAT */
        NdrFcLong(0xa),	/* 10 */
        NdrFcShort(0x8008),	/* Simple arm type: FC_LONG */
        NdrFcLong(0x14),	/* 20 */
        NdrFcShort(0xfbfe),	/* Offset= -1026 (1950) */
        NdrFcLong(0x15),	/* 21 */
        NdrFcShort(0xfbfe),	/* Offset= -1026 (1956) */
        NdrFcLong(0x5),	/* 5 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x6),	/* 6 */
        NdrFcShort(0xf654),	/* Offset= -2476 (518) */
        NdrFcLong(0x7),	/* 7 */
        NdrFcShort(0x800c),	/* Simple arm type: FC_DOUBLE */
        NdrFcLong(0x40),	/* 64 */
        NdrFcShort(0xfbec),	/* Offset= -1044 (1962) */
        NdrFcLong(0x48),	/* 72 */
        NdrFcShort(0xfc00),	/* Offset= -1024 (1988) */
        NdrFcLong(0x41),	/* 65 */
        NdrFcShort(0xfc08),	/* Offset= -1016 (2002) */
        NdrFcLong(0x46),	/* 70 */
        NdrFcShort(0xfc02),	/* Offset= -1022 (2002) */
        NdrFcLong(0x47),	/* 71 */
        NdrFcShort(0xfc26),	/* Offset= -986 (2044) */
        NdrFcLong(0x42),	/* 66 */
        NdrFcShort(0xfc24),	/* Offset= -988 (2048) */
        NdrFcLong(0x44),	/* 68 */
        NdrFcShort(0xfc1e),	/* Offset= -994 (2048) */
        NdrFcLong(0x43),	/* 67 */
        NdrFcShort(0xfc2a),	/* Offset= -982 (2066) */
        NdrFcLong(0x45),	/* 69 */
        NdrFcShort(0xfc24),	/* Offset= -988 (2066) */
        NdrFcLong(0x8),	/* 8 */
        NdrFcShort(0xfb34),	/* Offset= -1228 (1832) */
        NdrFcLong(0xfff),	/* 4095 */
        NdrFcShort(0xfc34),	/* Offset= -972 (2094) */
        NdrFcLong(0x1e),	/* 30 */
        NdrFcShort(0xfe76),	/* Offset= -394 (2678) */
        NdrFcLong(0x1f),	/* 31 */
        NdrFcShort(0xfe92),	/* Offset= -366 (2712) */
        NdrFcLong(0xd),	/* 13 */
        NdrFcShort(0xfc3a),	/* Offset= -966 (2118) */
        NdrFcLong(0x9),	/* 9 */
        NdrFcShort(0xfc46),	/* Offset= -954 (2136) */
        NdrFcLong(0x1011),	/* 4113 */
        NdrFcShort(0xfc5c),	/* Offset= -932 (2164) */
        NdrFcLong(0x1002),	/* 4098 */
        NdrFcShort(0xfc70),	/* Offset= -912 (2190) */
        NdrFcLong(0x1012),	/* 4114 */
        NdrFcShort(0xfc84),	/* Offset= -892 (2216) */
        NdrFcLong(0x100b),	/* 4107 */
        NdrFcShort(0xfc98),	/* Offset= -872 (2242) */
        NdrFcLong(0x1003),	/* 4099 */
        NdrFcShort(0xfcac),	/* Offset= -852 (2268) */
        NdrFcLong(0x1013),	/* 4115 */
        NdrFcShort(0xfcc0),	/* Offset= -832 (2294) */
        NdrFcLong(0x1004),	/* 4100 */
        NdrFcShort(0xfcd4),	/* Offset= -812 (2320) */
        NdrFcLong(0x100a),	/* 4106 */
        NdrFcShort(0xfce8),	/* Offset= -792 (2346) */
        NdrFcLong(0x1014),	/* 4116 */
        NdrFcShort(0xfd00),	/* Offset= -768 (2376) */
        NdrFcLong(0x1015),	/* 4117 */
        NdrFcShort(0xfd18),	/* Offset= -744 (2406) */
        NdrFcLong(0x1005),	/* 4101 */
        NdrFcShort(0xfd2c),	/* Offset= -724 (2432) */
        NdrFcLong(0x1006),	/* 4102 */
        NdrFcShort(0xfd44),	/* Offset= -700 (2462) */
        NdrFcLong(0x1007),	/* 4103 */
        NdrFcShort(0xfd58),	/* Offset= -680 (2488) */
        NdrFcLong(0x1040),	/* 4160 */
        NdrFcShort(0xfd70),	/* Offset= -656 (2518) */
        NdrFcLong(0x1048),	/* 4168 */
        NdrFcShort(0xfd88),	/* Offset= -632 (2548) */
        NdrFcLong(0x1047),	/* 4167 */
        NdrFcShort(0xfda4),	/* Offset= -604 (2582) */
        NdrFcLong(0x1008),	/* 4104 */
        NdrFcShort(0xfdc0),	/* Offset= -576 (2616) */
        NdrFcLong(0x1fff),	/* 8191 */
        NdrFcShort(0xfddc),	/* Offset= -548 (2650) */
        NdrFcLong(0x101e),	/* 4126 */
        NdrFcShort(0xfdf8),	/* Offset= -520 (2684) */
        NdrFcLong(0x101f),	/* 4127 */
        NdrFcShort(0xfe14),	/* Offset= -492 (2718) */
        NdrFcLong(0x100c),	/* 4108 */
        NdrFcShort(0xfe30),	/* Offset= -464 (2752) */
        NdrFcLong(0x2010),	/* 8208 */
        NdrFcShort(0xfe42),	/* Offset= -446 (2776) */
        NdrFcLong(0x2011),	/* 8209 */
        NdrFcShort(0xfe3c),	/* Offset= -452 (2776) */
        NdrFcLong(0x2002),	/* 8194 */
        NdrFcShort(0xfe36),	/* Offset= -458 (2776) */
        NdrFcLong(0x2012),	/* 8210 */
        NdrFcShort(0xfe30),	/* Offset= -464 (2776) */
        NdrFcLong(0x2003),	/* 8195 */
        NdrFcShort(0xfe2a),	/* Offset= -470 (2776) */
        NdrFcLong(0x2013),	/* 8211 */
        NdrFcShort(0xfe24),	/* Offset= -476 (2776) */
        NdrFcLong(0x2016),	/* 8214 */
        NdrFcShort(0xfe1e),	/* Offset= -482 (2776) */
        NdrFcLong(0x2017),	/* 8215 */
        NdrFcShort(0xfe18),	/* Offset= -488 (2776) */
        NdrFcLong(0x2004),	/* 8196 */
        NdrFcShort(0xfe12),	/* Offset= -494 (2776) */
        NdrFcLong(0x2005),	/* 8197 */
        NdrFcShort(0xfe0c),	/* Offset= -500 (2776) */
        NdrFcLong(0x2006),	/* 8198 */
        NdrFcShort(0xfe06),	/* Offset= -506 (2776) */
        NdrFcLong(0x2007),	/* 8199 */
        NdrFcShort(0xfe00),	/* Offset= -512 (2776) */
        NdrFcLong(0x2008),	/* 8200 */
        NdrFcShort(0xfdfa),	/* Offset= -518 (2776) */
        NdrFcLong(0x200b),	/* 8203 */
        NdrFcShort(0xfdf4),	/* Offset= -524 (2776) */
        NdrFcLong(0x200e),	/* 8206 */
        NdrFcShort(0xfdee),	/* Offset= -530 (2776) */
        NdrFcLong(0x2009),	/* 8201 */
        NdrFcShort(0xfde8),	/* Offset= -536 (2776) */
        NdrFcLong(0x200d),	/* 8205 */
        NdrFcShort(0xfde2),	/* Offset= -542 (2776) */
        NdrFcLong(0x200a),	/* 8202 */
        NdrFcShort(0xfddc),	/* Offset= -548 (2776) */
        NdrFcLong(0x200c),	/* 8204 */
        NdrFcShort(0xfdd6),	/* Offset= -554 (2776) */
        NdrFcLong(0x4010),	/* 16400 */
        NdrFcShort(0xfdda),	/* Offset= -550 (2786) */
        NdrFcLong(0x4011),	/* 16401 */
        NdrFcShort(0xfdd8),	/* Offset= -552 (2790) */
        NdrFcLong(0x4002),	/* 16386 */
        NdrFcShort(0xfdd6),	/* Offset= -554 (2794) */
        NdrFcLong(0x4012),	/* 16402 */
        NdrFcShort(0xfdd4),	/* Offset= -556 (2798) */
        NdrFcLong(0x4003),	/* 16387 */
        NdrFcShort(0xfdd2),	/* Offset= -558 (2802) */
        NdrFcLong(0x4013),	/* 16403 */
        NdrFcShort(0xfdd0),	/* Offset= -560 (2806) */
        NdrFcLong(0x4016),	/* 16406 */
        NdrFcShort(0xfdce),	/* Offset= -562 (2810) */
        NdrFcLong(0x4017),	/* 16407 */
        NdrFcShort(0xfdcc),	/* Offset= -564 (2814) */
        NdrFcLong(0x4004),	/* 16388 */
        NdrFcShort(0xfdca),	/* Offset= -566 (2818) */
        NdrFcLong(0x4005),	/* 16389 */
        NdrFcShort(0xfdc8),	/* Offset= -568 (2822) */
        NdrFcLong(0x400b),	/* 16395 */
        NdrFcShort(0xfdc6),	/* Offset= -570 (2826) */
        NdrFcLong(0x400e),	/* 16398 */
        NdrFcShort(0xfdc4),	/* Offset= -572 (2830) */
        NdrFcLong(0x400a),	/* 16394 */
        NdrFcShort(0xfdc2),	/* Offset= -574 (2834) */
        NdrFcLong(0x4006),	/* 16390 */
        NdrFcShort(0xfdc0),	/* Offset= -576 (2838) */
        NdrFcLong(0x4007),	/* 16391 */
        NdrFcShort(0xfdbe),	/* Offset= -578 (2842) */
        NdrFcLong(0x4008),	/* 16392 */
        NdrFcShort(0xfdbc),	/* Offset= -580 (2846) */
        NdrFcLong(0x400d),	/* 16397 */
        NdrFcShort(0xfdcc),	/* Offset= -564 (2868) */
        NdrFcLong(0x4009),	/* 16393 */
        NdrFcShort(0xfddc),	/* Offset= -548 (2890) */
        NdrFcLong(0x6000),	/* 24576 */
        NdrFcShort(0xfdda),	/* Offset= -550 (2894) */
        NdrFcLong(0x400c),	/* 16396 */
        NdrFcShort(0xfdd8),	/* Offset= -552 (2898) */
        NdrFcShort(0xffff),
/* 3454 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x0,	/* Corr desc: field in PROPVARIANT */
        0x59,	/* FC_CALLBACK */
        NdrFcShort(0x2),	/* 2 */
        NdrFcShort(0xfdd2),	/* Offset= -558 (2902) */
/* 3462 (PROPVARIANT) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (3468) */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x06,	/* FC_SHORT */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffea),	/* Offset= -22 (3454) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3480 (PROPVARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cPROPVARIANT, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x48),	/* offset = 72 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe0),	/* Offset= -32 (3462) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3498 (VARIANT *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cArray, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x58),	/* offset = 88 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf83c),	/* Offset= -1988 (1524) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3516 (RMTPACK) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x68),	/* 104 */
        NdrFcShort(0x0),
        NdrFcShort(0x1a),	/* Offset= 26 (3548) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf950),	/* Offset= -1712 (1814) */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x36,	/* FC_POINTER */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3548 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf954),	/* Offset= -1708 (1842) */
/* 3552 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf962),	/* Offset= -1694 (1860) */
/* 3556 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf982),	/* Offset= -1662 (1896) */
/* 3560 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf9a2),	/* Offset= -1630 (1932) */
/* 3564 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffaa),	/* Offset= -86 (3480) */
/* 3568 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffb8),	/* Offset= -72 (3498) */
/* 3572 (RMTPACK *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc6),	/* Offset= -58 (3516) */
/* 3576 (RMTPACK *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffc2),	/* Offset= -62 (3516) */
/* 3580 (DBBINDING *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteExecute */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf25a),	/* Offset= -3494 (100) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3598 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (3580) */
/* 3602 (DBSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x20,	/* Corr desc: unused for RemoteExecute */
        0x0,
        NdrFcShort(0x0),
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 3612 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (3602) */
/* 3616 (DBROWCOUNT *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb8,	/* FC_INT3264 */
        0x5c,	/* FC_PAD */
/* 3620 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
/* 3626 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (3620) */
/* 3630 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf204),	/* Offset= -3580 (52) */
/* 3634 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 3640 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (3634) */
/* 3644 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 3662 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3644) */
/* 3666 (GUID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xf2d4),	/* Offset= -3372 (296) */
/* 3670 (LPOLESTR *) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (3674) */
/* 3674 (LPOLESTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 3676 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3678 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 3696 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3678) */
/* 3700 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf2b2),	/* Offset= -3406 (296) */
/* 3704 (LPCOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 3706 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3708 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 3726 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3708) */
/* 3730 (DBORDINAL *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 3734 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 3736 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3738 (ITypeInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00020401),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 3756 (DBCOLUMNINFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x50),	/* 80 */
        NdrFcShort(0x0),
        NdrFcShort(0x14),	/* Offset= 20 (3782) */
        0x36,	/* FC_POINTER */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe3),	/* Offset= -29 (3738) */
        0xb8,	/* FC_INT3264 */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0xb8,	/* FC_INT3264 */
        0x06,	/* FC_SHORT */
        0x02,	/* FC_CHAR */
        0x02,	/* FC_CHAR */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf317),	/* Offset= -3305 (474) */
        0x5b,	/* FC_END */
/* 3782 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 3784 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 3786 (DBCOLUMNINFO *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteGetColumnInfo */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffd4),	/* Offset= -44 (3756) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3804 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (3786) */
/* 3808 (DBCOLUMNINFO **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3804) */
/* 3812 (DBBYTEOFFSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteGetColumnInfo */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 3826 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (3812) */
/* 3830 (DBBYTEOFFSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3826) */
/* 3834 (DBBYTEOFFSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteGetColumnInfo */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 3848 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (3834) */
/* 3852 (DBBYTEOFFSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3848) */
/* 3856 (DBLENGTH *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 3860 (OLECHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x20,	/* Corr desc: unused for RemoteGetColumnInfo */
        0x0,
        NdrFcShort(0x0),
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 3870 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (3860) */
/* 3874 (OLECHAR **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (3870) */
/* 3878 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 3896 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3878) */
/* 3900 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcShort(0xf224),	/* Offset= -3548 (358) */
/* 3908 */
        0x2b,	/* FC_NON_ENCAPSULATED_UNION */
        0x8,	/* FIXME: always FC_LONG */
        0x9,	/* Corr desc: field eKind, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0xfff8),	/* offset = -8 */
        NdrFcShort(0xf250),	/* Offset= -3504 (410) */
/* 3916 (const DBID) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0x0),	/* Offset= 0 (3922) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe6),	/* Offset= -26 (3900) */
        0x08,	/* FC_LONG */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (3908) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3936 (const DBID *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteMapColumnIDs */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (3916) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 3954 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (3936) */
/* 3958 (DBORDINAL *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteMapColumnIDs */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 3972 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff0),	/* Offset= -16 (3958) */
/* 3976 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 3994 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (3976) */
/* 3998 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4016 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf082),	/* Offset= -3966 (52) */
/* 4020 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
/* 4026 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (4020) */
/* 4030 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4048 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4030) */
/* 4052 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4070 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf04c),	/* Offset= -4020 (52) */
/* 4074 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
/* 4080 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (4074) */
/* 4084 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4102 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4084) */
/* 4106 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4124 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf016),	/* Offset= -4074 (52) */
/* 4128 (DBPROPSET *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xf604),	/* Offset= -2556 (1574) */
/* 4132 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4150 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4132) */
/* 4154 (DBPROPSTATUS *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4158 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4176 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4158) */
/* 4180 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 4190 (const DBPROPIDSET) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (4206) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf0be),	/* Offset= -3906 (296) */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 4206 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (4180) */
/* 4210 (const DBPROPIDSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPropertyIDSets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (4190) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4228 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (4210) */
/* 4232 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4236 (DBPROPSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter pcPropertySets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf58c),	/* Offset= -2676 (1574) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4254 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (4236) */
/* 4258 (DBPROPSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4254) */
/* 4262 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4280 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4262) */
/* 4284 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 4294 (const DBPROPIDSET) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (4310) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf056),	/* Offset= -4010 (296) */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 4310 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (4284) */
/* 4314 (const DBPROPIDSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPropertyIDSets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (4294) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4332 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (4314) */
/* 4336 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4340 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 4342 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 4344 (DBPROPINFO) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x7,	/* 7 */
        NdrFcShort(0x30),	/* 48 */
        NdrFcShort(0x0),
        NdrFcShort(0xc),	/* Offset= 12 (4362) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x06,	/* FC_SHORT */
        0x39,	/* FC_ALIGNM8 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf4ed),	/* Offset= -2835 (1524) */
        0x5b,	/* FC_END */
/* 4362 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 4364 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 4366 (PDBPROPINFO) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cPropertyInfos, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffdc),	/* Offset= -36 (4344) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4384 (DBPROPINFOSET) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (4400) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xeffc),	/* Offset= -4100 (296) */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 4400 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffdc),	/* Offset= -36 (4366) */
/* 4404 (DBPROPINFOSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter pcPropertyInfoSets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (4384) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4422 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (4404) */
/* 4426 (DBPROPINFOSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4422) */
/* 4430 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4434 (DBBYTEOFFSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter pcOffsets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x28),	/* offset = 40 */
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 4448 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (4434) */
/* 4452 (DBBYTEOFFSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4448) */
/* 4456 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4460 (OLECHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x29,	/* Corr desc: parameter pcbDescBuffer, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x38),	/* offset = 56 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 4470 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4460) */
/* 4474 (OLECHAR **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4470) */
/* 4478 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4496 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4478) */
/* 4500 (DBPROPSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPropertySets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf484),	/* Offset= -2940 (1574) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4518 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (4500) */
/* 4522 (DBPROPSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cTotalProps, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 4532 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4522) */
/* 4536 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4554 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4536) */
/* 4558 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4576 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4558) */
/* 4580 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4598 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4580) */
/* 4602 (DBPROPSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPropertySets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf41e),	/* Offset= -3042 (1574) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4620 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (4602) */
/* 4624 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 4642 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xee10),	/* Offset= -4592 (52) */
/* 4646 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
/* 4652 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (4646) */
/* 4656 (DBPROPSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cTotalProps, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x30),	/* offset = 48 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 4666 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4656) */
/* 4670 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4688 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4670) */
/* 4692 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4710 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4692) */
/* 4714 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 4724 (const DBPROPIDSET) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (4740) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xeea8),	/* Offset= -4440 (296) */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 4740 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (4714) */
/* 4744 (const DBPROPIDSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPropertyIDSets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (4724) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4762 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (4744) */
/* 4766 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4770 (DBPROPINFOSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter pcPropertyInfoSets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xfe70),	/* Offset= -400 (4384) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4788 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (4770) */
/* 4792 (DBPROPINFOSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4788) */
/* 4796 (DBCOUNTITEM *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 4800 (DBBYTEOFFSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteGetCreationProperties */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 4814 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff0),	/* Offset= -16 (4800) */
/* 4818 (DBBYTEOFFSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4814) */
/* 4822 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4826 (OLECHAR *) */
        0x1b,	/* FC_CARRAY */
        0x1,	/* 1 */
        NdrFcShort(0x2),	/* 2 */
        0x29,	/* Corr desc: parameter pcbDescBuffer, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x38),	/* offset = 56 */
        0x05,	/* FC_WCHAR */
        0x5b,	/* FC_END */
/* 4836 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xfff4),	/* Offset= -12 (4826) */
/* 4840 (OLECHAR **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (4836) */
/* 4844 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4862 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4844) */
/* 4866 (DBPROPSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPropertySets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf316),	/* Offset= -3306 (1574) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 4884 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xffec),	/* Offset= -20 (4866) */
/* 4888 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4906 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4888) */
/* 4910 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 4912 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 4914 (LPOLESTR) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 4916 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 4918 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4936 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4918) */
/* 4940 (DBCOUNTITEM *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 4944 (DBCOUNTITEM *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 4948 (DBASYNCHPHASE *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 4952 (LPOLESTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (4956) */
/* 4956 (LPOLESTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 4958 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 4960 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 4978 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (4960) */
/* 4982 (DBPROPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cPropertyIDs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 4992 (const DBPROPIDSET) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x20),	/* 32 */
        NdrFcShort(0x0),
        NdrFcShort(0xa),	/* Offset= 10 (5008) */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xed9c),	/* Offset= -4708 (296) */
        0x40,	/* FC_STRUCTPAD4 */
        0x5b,	/* FC_END */
/* 5008 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe4),	/* Offset= -28 (4982) */
/* 5012 (const DBPROPIDSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPropertyIDSets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffde),	/* Offset= -34 (4992) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 5030 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (5012) */
/* 5034 (ULONG *) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5038 (DBPROPSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter pcPropertySets, FC_ULONG */
        0x54,	/* FC_DEREFERENCE */
        NdrFcShort(0x18),	/* offset = 24 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf26a),	/* Offset= -3478 (1574) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 5056 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (5038) */
/* 5060 (DBPROPSET **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfffa),	/* Offset= -6 (5056) */
/* 5064 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5082 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5064) */
/* 5086 (DBPROPSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPropertySets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf23a),	/* Offset= -3526 (1574) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 5104 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (5086) */
/* 5108 (DBPROPSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cTotalProps, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x18),	/* offset = 24 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 5118 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (5108) */
/* 5122 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5140 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5122) */
/* 5144 (IRowset *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0c733a7c),
        NdrFcShort(0x2a1c),
        NdrFcShort(0x11ce),
        0xad,
        0xe5,
        0x00,
        0xaa,
        0x00,
        0x44,
        0x77,
        0x3d,

/* 5162 (DBORDINAL *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteOnFieldChange */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 5176 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff0),	/* Offset= -16 (5162) */
/* 5180 (IRowset *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0c733a7c),
        NdrFcShort(0x2a1c),
        NdrFcShort(0x11ce),
        0xad,
        0xe5,
        0x00,
        0xaa,
        0x00,
        0x44,
        0x77,
        0x3d,

/* 5198 (HROW *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x20,	/* Corr desc: unused for RemoteOnRowChange */
        0x0,
        NdrFcShort(0x0),
        NdrFcLong(0xffffffff),	/* -1 */
        0xb8,	/* FC_INT3264 */
        0x5b,	/* FC_END */
/* 5212 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff0),	/* Offset= -16 (5198) */
/* 5216 (IRowset *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x0c733a7c),
        NdrFcShort(0x2a1c),
        NdrFcShort(0x11ce),
        0xad,
        0xe5,
        0x00,
        0xaa,
        0x00,
        0x44,
        0x77,
        0x3d,

/* 5234 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5252 (DBID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xed54),	/* Offset= -4780 (474) */
/* 5256 (DBID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xed50),	/* Offset= -4784 (474) */
/* 5260 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xeba6),	/* Offset= -5210 (52) */
/* 5264 (DBPROPSET *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x0),	/* 0 */
        0x29,	/* Corr desc: parameter cPropertySets, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf188),	/* Offset= -3704 (1574) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 5282 */
        0x12, 0x0,	/* FC_UP */
        NdrFcShort(0xffec),	/* Offset= -20 (5264) */
/* 5286 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x20),	/* offset = 32 */
/* 5292 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (5286) */
/* 5296 (DBPROPSTATUS *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x29,	/* Corr desc: parameter cTotalProps, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 5306 */
        0x11, 0x0,	/* FC_RP */
        NdrFcShort(0xfff4),	/* Offset= -12 (5296) */
/* 5310 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5328 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5310) */
/* 5332 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5350 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5332) */
/* 5354 (HCHAPTER *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 5358 (HROW *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0xb9,	/* FC_UINT3264 */
        0x5c,	/* FC_PAD */
/* 5362 (DBPOSITIONFLAGS *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5366 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5384 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5366) */
/* 5388 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xeb26),	/* Offset= -5338 (52) */
/* 5392 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x8),	/* offset = 8 */
/* 5398 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (5392) */
/* 5402 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5420 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5402) */
/* 5424 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5442 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5460 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5442) */
/* 5464 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5482 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5464) */
/* 5486 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5504 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5486) */
/* 5508 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5526 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 5528 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 5530 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xeb8c),	/* Offset= -5236 (296) */
/* 5534 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xea94),	/* Offset= -5484 (52) */
/* 5538 (IAuthenticate *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x79eac9d0),
        NdrFcShort(0xbaf9),
        NdrFcShort(0x11ce),
        0x8c,
        0x82,
        0x00,
        0xaa,
        0x00,
        0x4b,
        0xa9,
        0x0b,

/* 5556 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5574 (IID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xea6c),	/* Offset= -5524 (52) */
/* 5578 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter piid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
/* 5584 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (5578) */
/* 5588 (DBBINDURLSTATUS *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5592 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
/* 5598 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (5592) */
/* 5602 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5620 (LPCOLESTR) */
        0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 5622 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 5624 (REFGUID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xeb2e),	/* Offset= -5330 (296) */
/* 5628 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xea36),	/* Offset= -5578 (52) */
/* 5632 (IAuthenticate *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x79eac9d0),
        NdrFcShort(0xbaf9),
        NdrFcShort(0x11ce),
        0x8c,
        0x82,
        0x00,
        0xaa,
        0x00,
        0x4b,
        0xa9,
        0x0b,

/* 5650 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5668 (IID *) */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xea0e),	/* Offset= -5618 (52) */
/* 5672 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter piid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x40),	/* offset = 64 */
/* 5678 (IUnknown **) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (5672) */
/* 5682 (DBBINDURLSTATUS *) */
        0x12, 0x8,	/* FC_UP [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5686 (LPOLESTR *) */
        0x12, 0x10,		/* FC_UP [pointer_deref] */
        NdrFcShort(0x2),	/* Offset= 2 (5690) */
/* 5690 (LPOLESTR) */
        0x13, 0x8,	/* FC_OP [simple_pointer] */
/* 5692 */
        0x25,	/* FC_C_WSTRING */
        0x5c,	/* FC_PAD */
/* 5694 (IUnknown *) */
        0x2f,  /* FC_IP */
        0x5c,  /* FC_PAD */
        0x2b,	/* Corr desc: parameter riid, FC_HYPER */
        0x0,	/* no operators */
        NdrFcShort(0x28),	/* offset = 40 */
/* 5700 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xfff8),	/* Offset= -8 (5694) */
/* 5704 (ERRORINFO) */
        0x15,	/* FC_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x2c),	/* 44 */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xf168),	/* Offset= -3736 (1976) */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xe9e0),	/* Offset= -5664 (52) */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 5720 (ERRORINFO *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffee),	/* Offset= -18 (5704) */
/* 5724 (VARIANTARG) */
        0xb4,	/* FC_USER_MARSHAL */
        0x83,	/* Alignment= 3, Flags= 80 */
        NdrFcShort(0x0),	/* Function offset= 0 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),	/* 0 */
        NdrFcShort(0xef8c),	/* Offset= -4212 (1520) */
/* 5734 (VARIANTARG *) */
        0x21,	/* FC_BOGUS_ARRAY */
        0x7,	/* 7 */
        NdrFcShort(0x0),	/* 0 */
        0x19,	/* Corr desc: field pointer cArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x10),	/* offset = 16 */
        NdrFcLong(0xffffffff),	/* -1 */
        0x4c,	/* FC_EMBEDDED_COMPLEX */
        0x0,
        NdrFcShort(0xffe8),	/* Offset= -24 (5724) */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 5752 (DISPID *) */
        0x1b,	/* FC_CARRAY */
        0x3,	/* 3 */
        NdrFcShort(0x4),	/* 4 */
        0x19,	/* Corr desc: field pointer cNamedArgs, FC_ULONG */
        0x0,	/* no operators */
        NdrFcShort(0x14),	/* offset = 20 */
        0x08,	/* FC_LONG */
        0x5b,	/* FC_END */
/* 5762 (DISPPARAMS) */
        0x1a,	/* FC_BOGUS_STRUCT */
        0x3,	/* 3 */
        NdrFcShort(0x18),	/* 24 */
        NdrFcShort(0x0),
        NdrFcShort(0x8),	/* Offset= 8 (5776) */
        0x36,	/* FC_POINTER */
        0x36,	/* FC_POINTER */
        0x08,	/* FC_LONG */
        0x08,	/* FC_LONG */
        0x5c,	/* FC_PAD */
        0x5b,	/* FC_END */
/* 5776 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffd4),	/* Offset= -44 (5734) */
/* 5780 */
        0x12, 0x0,		/* FC_UP */
        NdrFcShort(0xffe2),	/* Offset= -30 (5752) */
/* 5784 (DISPPARAMS *) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xffe8),	/* Offset= -24 (5762) */
/* 5788 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5806 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5824 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5806) */
/* 5828 (ERRORINFO *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff82),	/* Offset= -126 (5704) */
/* 5832 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5850 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5832) */
/* 5854 (REFIID) */
        0x11, 0x0,		/* FC_RP */
        NdrFcShort(0xe954),	/* Offset= -5804 (52) */
/* 5858 (IUnknown *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x00000000),
        NdrFcShort(0x0000),
        NdrFcShort(0x0000),
        0xc0,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x46,

/* 5876 (IUnknown **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5858) */
/* 5880 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5898 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5880) */
/* 5902 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5920 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5902) */
/* 5924 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5942 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5924) */
/* 5946 (DISPPARAMS *) */
        0x11, 0x4,		/* FC_RP [allocated_on_stack] */
        NdrFcShort(0xff46),	/* Offset= -186 (5762) */
/* 5950 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5968 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5950) */
/* 5972 (ULONG *) */
        0x11, 0xc,	/* FC_RP [allocated_on_stack] [simple_pointer] */
        0x09,	/* FC_ULONG */
        0x5c,	/* FC_PAD */
/* 5976 (IErrorInfo *) */
        0x2f,	/* FC_IP */
        0x5a,	/* FC_CONSTANT_IID */
        NdrFcLong(0x1cf2b120),
        NdrFcShort(0x547d),
        NdrFcShort(0x101b),
        0x8e,
        0x65,
        0x08,
        0x00,
        0x2b,
        0x2b,
        0xd1,
        0x19,

/* 5994 (IErrorInfo **) */
        0x11, 0x14,		/* FC_RP [allocated_on_stack] [pointer_deref] */
        NdrFcShort(0xffec),	/* Offset= -20 (5976) */
        0x0
    }
};

static const CInterfaceProxyVtbl* const _msdaps_ProxyVtblList[] =
{
    (const CInterfaceProxyVtbl*)&_IColumnsInfoProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBCreateCommandProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ISourcesRowsetProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICommandTextProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IRowsetInfoProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBCreateSessionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICommandProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IErrorRecordsProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IOpenRowsetProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IRowPositionChangeProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBDataSourceAdminProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IRowsetNotifyProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ISessionPropertiesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBPropertiesProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBInitializeProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IAccessorProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IChapteredRowsetProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IRowPositionProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBAsynchStatusProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IDBAsynchNotifyProxyVtbl,
    (const CInterfaceProxyVtbl*)&_IBindResourceProxyVtbl,
    (const CInterfaceProxyVtbl*)&_ICreateRowProxyVtbl,
    0
};

static const CInterfaceStubVtbl* const _msdaps_StubVtblList[] =
{
    &_IColumnsInfoStubVtbl,
    &_IDBCreateCommandStubVtbl,
    &_ISourcesRowsetStubVtbl,
    &_ICommandTextStubVtbl,
    &_IRowsetInfoStubVtbl,
    &_IDBCreateSessionStubVtbl,
    &_ICommandStubVtbl,
    &_IErrorRecordsStubVtbl,
    &_IOpenRowsetStubVtbl,
    &_IRowPositionChangeStubVtbl,
    &_IDBDataSourceAdminStubVtbl,
    &_IRowsetNotifyStubVtbl,
    &_ISessionPropertiesStubVtbl,
    &_IDBPropertiesStubVtbl,
    &_IDBInitializeStubVtbl,
    &_IAccessorStubVtbl,
    &_IChapteredRowsetStubVtbl,
    &_IRowPositionStubVtbl,
    &_IDBAsynchStatusStubVtbl,
    &_IDBAsynchNotifyStubVtbl,
    &_IBindResourceStubVtbl,
    &_ICreateRowStubVtbl,
    0
};

static PCInterfaceName const _msdaps_InterfaceNamesList[] =
{
    "IColumnsInfo",
    "IDBCreateCommand",
    "ISourcesRowset",
    "ICommandText",
    "IRowsetInfo",
    "IDBCreateSession",
    "ICommand",
    "IErrorRecords",
    "IOpenRowset",
    "IRowPositionChange",
    "IDBDataSourceAdmin",
    "IRowsetNotify",
    "ISessionProperties",
    "IDBProperties",
    "IDBInitialize",
    "IAccessor",
    "IChapteredRowset",
    "IRowPosition",
    "IDBAsynchStatus",
    "IDBAsynchNotify",
    "IBindResource",
    "ICreateRow",
    0
};

static int __stdcall _msdaps_IID_Lookup(const IID* pIID, int* pIndex)
{
    int low = 0, high = 21;

    while (low <= high)
    {
        int pos = (low + high) / 2;
        int res = IID_GENERIC_CHECK_IID(_msdaps, pIID, pos);
        if (!res) { *pIndex = pos; return 1; }
        if (res > 0) low = pos + 1;
        else high = pos - 1;
    }
    return 0;
}

const ExtendedProxyFileInfo msdaps_ProxyFileInfo DECLSPEC_HIDDEN =
{
    (const PCInterfaceProxyVtblList*)_msdaps_ProxyVtblList,
    (const PCInterfaceStubVtblList*)_msdaps_StubVtblList,
    _msdaps_InterfaceNamesList,
    0,
    _msdaps_IID_Lookup,
    22,
    1,
    0,
    0,
    0,
    0
};

#endif /* _WIN64 */
