/*** Autogenerated by WIDL 3.8 from backend.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __backend_h__
#define __backend_h__

/* Forward declarations */

#ifndef __IWineVideoDecoder_FWD_DEFINED__
#define __IWineVideoDecoder_FWD_DEFINED__
typedef interface IWineVideoDecoder IWineVideoDecoder;
#ifdef __cplusplus
interface IWineVideoDecoder;
#endif /* __cplusplus */
#endif

#ifndef __IWineVideoService_FWD_DEFINED__
#define __IWineVideoService_FWD_DEFINED__
typedef interface IWineVideoService IWineVideoService;
#ifdef __cplusplus
interface IWineVideoService;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <unknwn.h>
#include <dxva2api.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _WineVideoImage {
    void *buffer;
    UINT width;
    UINT height;
    D3DFORMAT format;
    UINT planeCount;
    UINT *pitches;
    UINT *offsets;
} WineVideoImage;
/*****************************************************************************
 * IWineVideoDecoder interface
 */
#ifndef __IWineVideoDecoder_INTERFACE_DEFINED__
#define __IWineVideoDecoder_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineVideoDecoder, 0x4c22e900, 0xb16f, 0x11e4, 0xab,0x27, 0x08,0x00,0x20,0x0c,0x9a,0x66);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4c22e900-b16f-11e4-ab27-0800200c9a66")
IWineVideoDecoder : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE LockBuffer(
        UINT type,
        void **buffer,
        UINT *size) = 0;

    virtual HRESULT STDMETHODCALLTYPE UnlockBuffer(
        UINT type) = 0;

    virtual HRESULT STDMETHODCALLTYPE ExecuteBuffers(
        DXVA2_DecodeBufferDesc *pictureParam,
        DXVA2_DecodeBufferDesc *qMatrix,
        DXVA2_DecodeBufferDesc *sliceInfo,
        DXVA2_DecodeBufferDesc *bitStream) = 0;

    virtual HRESULT STDMETHODCALLTYPE BeginFrame(
        UINT surfaceIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE EndFrame(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE LockImage(
        WineVideoImage *image) = 0;

    virtual HRESULT STDMETHODCALLTYPE UnlockImage(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineVideoDecoder, 0x4c22e900, 0xb16f, 0x11e4, 0xab,0x27, 0x08,0x00,0x20,0x0c,0x9a,0x66)
#endif
#else
typedef struct IWineVideoDecoderVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineVideoDecoder *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineVideoDecoder *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineVideoDecoder *This);

    /*** IWineVideoDecoder methods ***/
    HRESULT (STDMETHODCALLTYPE *LockBuffer)(
        IWineVideoDecoder *This,
        UINT type,
        void **buffer,
        UINT *size);

    HRESULT (STDMETHODCALLTYPE *UnlockBuffer)(
        IWineVideoDecoder *This,
        UINT type);

    HRESULT (STDMETHODCALLTYPE *ExecuteBuffers)(
        IWineVideoDecoder *This,
        DXVA2_DecodeBufferDesc *pictureParam,
        DXVA2_DecodeBufferDesc *qMatrix,
        DXVA2_DecodeBufferDesc *sliceInfo,
        DXVA2_DecodeBufferDesc *bitStream);

    HRESULT (STDMETHODCALLTYPE *BeginFrame)(
        IWineVideoDecoder *This,
        UINT surfaceIndex);

    HRESULT (STDMETHODCALLTYPE *EndFrame)(
        IWineVideoDecoder *This);

    HRESULT (STDMETHODCALLTYPE *LockImage)(
        IWineVideoDecoder *This,
        WineVideoImage *image);

    HRESULT (STDMETHODCALLTYPE *UnlockImage)(
        IWineVideoDecoder *This);

    END_INTERFACE
} IWineVideoDecoderVtbl;

interface IWineVideoDecoder {
    CONST_VTBL IWineVideoDecoderVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineVideoDecoder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineVideoDecoder_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineVideoDecoder_Release(This) (This)->lpVtbl->Release(This)
/*** IWineVideoDecoder methods ***/
#define IWineVideoDecoder_LockBuffer(This,type,buffer,size) (This)->lpVtbl->LockBuffer(This,type,buffer,size)
#define IWineVideoDecoder_UnlockBuffer(This,type) (This)->lpVtbl->UnlockBuffer(This,type)
#define IWineVideoDecoder_ExecuteBuffers(This,pictureParam,qMatrix,sliceInfo,bitStream) (This)->lpVtbl->ExecuteBuffers(This,pictureParam,qMatrix,sliceInfo,bitStream)
#define IWineVideoDecoder_BeginFrame(This,surfaceIndex) (This)->lpVtbl->BeginFrame(This,surfaceIndex)
#define IWineVideoDecoder_EndFrame(This) (This)->lpVtbl->EndFrame(This)
#define IWineVideoDecoder_LockImage(This,image) (This)->lpVtbl->LockImage(This,image)
#define IWineVideoDecoder_UnlockImage(This) (This)->lpVtbl->UnlockImage(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineVideoDecoder_QueryInterface(IWineVideoDecoder* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineVideoDecoder_AddRef(IWineVideoDecoder* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineVideoDecoder_Release(IWineVideoDecoder* This) {
    return This->lpVtbl->Release(This);
}
/*** IWineVideoDecoder methods ***/
static FORCEINLINE HRESULT IWineVideoDecoder_LockBuffer(IWineVideoDecoder* This,UINT type,void **buffer,UINT *size) {
    return This->lpVtbl->LockBuffer(This,type,buffer,size);
}
static FORCEINLINE HRESULT IWineVideoDecoder_UnlockBuffer(IWineVideoDecoder* This,UINT type) {
    return This->lpVtbl->UnlockBuffer(This,type);
}
static FORCEINLINE HRESULT IWineVideoDecoder_ExecuteBuffers(IWineVideoDecoder* This,DXVA2_DecodeBufferDesc *pictureParam,DXVA2_DecodeBufferDesc *qMatrix,DXVA2_DecodeBufferDesc *sliceInfo,DXVA2_DecodeBufferDesc *bitStream) {
    return This->lpVtbl->ExecuteBuffers(This,pictureParam,qMatrix,sliceInfo,bitStream);
}
static FORCEINLINE HRESULT IWineVideoDecoder_BeginFrame(IWineVideoDecoder* This,UINT surfaceIndex) {
    return This->lpVtbl->BeginFrame(This,surfaceIndex);
}
static FORCEINLINE HRESULT IWineVideoDecoder_EndFrame(IWineVideoDecoder* This) {
    return This->lpVtbl->EndFrame(This);
}
static FORCEINLINE HRESULT IWineVideoDecoder_LockImage(IWineVideoDecoder* This,WineVideoImage *image) {
    return This->lpVtbl->LockImage(This,image);
}
static FORCEINLINE HRESULT IWineVideoDecoder_UnlockImage(IWineVideoDecoder* This) {
    return This->lpVtbl->UnlockImage(This);
}
#endif
#endif

#endif


#endif  /* __IWineVideoDecoder_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineVideoService interface
 */
#ifndef __IWineVideoService_INTERFACE_DEFINED__
#define __IWineVideoService_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineVideoService, 0x21e19bb0, 0xb16e, 0x11e4, 0xab,0x27, 0x08,0x00,0x20,0x0c,0x9a,0x66);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("21e19bb0-b16e-11e4-ab27-0800200c9a66")
IWineVideoService : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetDecoderDeviceGuids(
        UINT *count,
        GUID **guids) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDecoderRenderTargets(
        REFGUID guid,
        UINT *count,
        D3DFORMAT **formats) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDecoderConfigurations(
        REFGUID guid,
        const DXVA2_VideoDesc *videoDesc,
        IUnknown *reserved,
        UINT *count,
        DXVA2_ConfigPictureDecode **configs) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateVideoDecoder(
        REFGUID guid,
        const DXVA2_VideoDesc *videoDesc,
        DXVA2_ConfigPictureDecode *config,
        UINT numSurfaces,
        IWineVideoDecoder **decoder) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineVideoService, 0x21e19bb0, 0xb16e, 0x11e4, 0xab,0x27, 0x08,0x00,0x20,0x0c,0x9a,0x66)
#endif
#else
typedef struct IWineVideoServiceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineVideoService *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineVideoService *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineVideoService *This);

    /*** IWineVideoService methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDecoderDeviceGuids)(
        IWineVideoService *This,
        UINT *count,
        GUID **guids);

    HRESULT (STDMETHODCALLTYPE *GetDecoderRenderTargets)(
        IWineVideoService *This,
        REFGUID guid,
        UINT *count,
        D3DFORMAT **formats);

    HRESULT (STDMETHODCALLTYPE *GetDecoderConfigurations)(
        IWineVideoService *This,
        REFGUID guid,
        const DXVA2_VideoDesc *videoDesc,
        IUnknown *reserved,
        UINT *count,
        DXVA2_ConfigPictureDecode **configs);

    HRESULT (STDMETHODCALLTYPE *CreateVideoDecoder)(
        IWineVideoService *This,
        REFGUID guid,
        const DXVA2_VideoDesc *videoDesc,
        DXVA2_ConfigPictureDecode *config,
        UINT numSurfaces,
        IWineVideoDecoder **decoder);

    END_INTERFACE
} IWineVideoServiceVtbl;

interface IWineVideoService {
    CONST_VTBL IWineVideoServiceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineVideoService_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineVideoService_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineVideoService_Release(This) (This)->lpVtbl->Release(This)
/*** IWineVideoService methods ***/
#define IWineVideoService_GetDecoderDeviceGuids(This,count,guids) (This)->lpVtbl->GetDecoderDeviceGuids(This,count,guids)
#define IWineVideoService_GetDecoderRenderTargets(This,guid,count,formats) (This)->lpVtbl->GetDecoderRenderTargets(This,guid,count,formats)
#define IWineVideoService_GetDecoderConfigurations(This,guid,videoDesc,reserved,count,configs) (This)->lpVtbl->GetDecoderConfigurations(This,guid,videoDesc,reserved,count,configs)
#define IWineVideoService_CreateVideoDecoder(This,guid,videoDesc,config,numSurfaces,decoder) (This)->lpVtbl->CreateVideoDecoder(This,guid,videoDesc,config,numSurfaces,decoder)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineVideoService_QueryInterface(IWineVideoService* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineVideoService_AddRef(IWineVideoService* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineVideoService_Release(IWineVideoService* This) {
    return This->lpVtbl->Release(This);
}
/*** IWineVideoService methods ***/
static FORCEINLINE HRESULT IWineVideoService_GetDecoderDeviceGuids(IWineVideoService* This,UINT *count,GUID **guids) {
    return This->lpVtbl->GetDecoderDeviceGuids(This,count,guids);
}
static FORCEINLINE HRESULT IWineVideoService_GetDecoderRenderTargets(IWineVideoService* This,REFGUID guid,UINT *count,D3DFORMAT **formats) {
    return This->lpVtbl->GetDecoderRenderTargets(This,guid,count,formats);
}
static FORCEINLINE HRESULT IWineVideoService_GetDecoderConfigurations(IWineVideoService* This,REFGUID guid,const DXVA2_VideoDesc *videoDesc,IUnknown *reserved,UINT *count,DXVA2_ConfigPictureDecode **configs) {
    return This->lpVtbl->GetDecoderConfigurations(This,guid,videoDesc,reserved,count,configs);
}
static FORCEINLINE HRESULT IWineVideoService_CreateVideoDecoder(IWineVideoService* This,REFGUID guid,const DXVA2_VideoDesc *videoDesc,DXVA2_ConfigPictureDecode *config,UINT numSurfaces,IWineVideoDecoder **decoder) {
    return This->lpVtbl->CreateVideoDecoder(This,guid,videoDesc,config,numSurfaces,decoder);
}
#endif
#endif

#endif


#endif  /* __IWineVideoService_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __backend_h__ */
